IDENTIFIER a
COMMA ,
IDENTIFIER b
COMMA ,
IDENTIFIER c
COLON :
IDENTIFIER j
EQUALS_OPERATOR =
INT_LIT 60
IDENTIFIER k
EQUALS_OPERATOR =
DIGIT 5
ADD_OPERATOR +
IDENTIFIER j
SEMI_COLON ;
IDENTIFIER a
EQUALS_OPERATOR =
STR_LIT " hello world "
IDENTIFIER b
EQUALS_OPERATOR =
STR_LIT "Bye world"
IDENTIFIER c
EQUALS_OPERATOR =
STR_LIT "Welcome"
OPEN_PAREN (
IDENTIFIER j
COMMA ,
STR_LIT " : "
COMMA ,
IDENTIFIER k
CLOSE_PAREN )
OPEN_PAREN (
IDENTIFIER a
COMMA ,
STR_LIT " : "
COMMA ,
IDENTIFIER b
COMMA ,
STR_LIT " : "
COMMA ,
IDENTIFIER c
CLOSE_PAREN )
CONST const
INDENT     
IDENTIFIER x1
EQUALS_OPERATOR =
DIGIT 1
INDENT     
IDENTIFIER y1
EQUALS_OPERATOR =
DIGIT 2
INDENT     
IDENTIFIER z1
EQUALS_OPERATOR =
IDENTIFIER y1
ADD_OPERATOR +
DIGIT 5
OPEN_PAREN (
IDENTIFIER x1
COMMA ,
STR_LIT " : "
COMMA ,
IDENTIFIER y1
COMMA ,
STR_LIT " : "
COMMA ,
IDENTIFIER z1
CLOSE_PAREN )
LET let
IDENTIFIER x2
EQUALS_OPERATOR =
STR_LIT "abc"
OPEN_PAREN (
IDENTIFIER x2
CLOSE_PAREN )
VARIABLE var
IDENTIFIER name
EQUALS_OPERATOR =
STR_LIT ""
IF if
IDENTIFIER name
STR_LIT ""
COLON :
INDENT     
STR_LIT "Poor soul, you lost your name?"
ELIF elif
IDENTIFIER name
STR_LIT "name"
COLON :
INDENT     
STR_LIT "Very funny, your name is name."
ELSE else
COLON :
STR_LIT "Hi, "
COMMA ,
IDENTIFIER name
COMMA ,
STR_LIT "!"
IDENTIFIER name
EQUALS_OPERATOR =
STR_LIT "potato"
CASE case
IDENTIFIER name
OF of
STR_LIT ""
COLON :
INDENT     
STR_LIT "Poor soul, you lost your name?"
OF of
STR_LIT "name"
COLON :
INDENT     
STR_LIT "Very funny, your name is name."
OF of
STR_LIT "Dave"
COMMA ,
STR_LIT "Frank"
COLON :
INDENT     
STR_LIT "Cool name!"
ELSE else
COLON :
INDENT     
STR_LIT "Hi, "
COMMA ,
IDENTIFIER name
COMMA ,
STR_LIT "!"
VARIABLE var
IDENTIFIER accm
EQUALS_OPERATOR =
STR_LIT ""
FOR for
IDENTIFIER letter
IN in
CHAR_LIT 'a'
CHAR_LIT 'z'
COLON :
INDENT     
IDENTIFIER accm
DOT .
IDENTIFIER add
OPEN_PAREN (
IDENTIFIER letter
CLOSE_PAREN )
OPEN_PAREN (
IDENTIFIER accm
CLOSE_PAREN )
VARIABLE var
IDENTIFIER x3
EQUALS_OPERATOR =
DIGIT 1
WHILE while
IDENTIFIER x3
LESS_THAN <
EQUALS_OPERATOR =
DIGIT 5
COLON :
INDENT     
STR_LIT "Counting : "
COMMA ,
IDENTIFIER x3
INDENT     
IDENTIFIER x3
EQUALS_OPERATOR =
IDENTIFIER x3
ADD_OPERATOR +
DIGIT 1
FOR for
IDENTIFIER i
IN in
DIGIT 1
DIGIT 5
COLON :
INDENT     
STR_LIT "i is "
COMMA ,
IDENTIFIER i
VARIABLE var
IDENTIFIER s
EQUALS_OPERATOR =
STR_LIT "some string"
FOR for
IDENTIFIER i
IN in
DIGIT 0
LESS_THAN <
IDENTIFIER s
COLON :
INDENT     
STR_LIT "char in s is "
COMMA ,
IDENTIFIER s
OPEN_BRACK [
IDENTIFIER i
CLOSE_BRACK ]
WHILE while
COLON :
INDENT     
STR_LIT "looping"
INDENT     
BREAK break
CONST const
IDENTIFIER system
EQUALS_OPERATOR =
STR_LIT "linux"
WHEN when
IDENTIFIER system
STR_LIT "windows"
COLON :
INDENT     
STR_LIT "running on Windows!"
ELIF elif
IDENTIFIER system
STR_LIT "linux"
COLON :
INDENT     
STR_LIT "running on Linux!"
ELIF elif
IDENTIFIER system
STR_LIT "macosx"
COLON :
INDENT     
STR_LIT "running on Mac OS X!"
ELSE else
COLON :
INDENT     
STR_LIT "unknown operating system"
INDENT     
INDENT     
VARIABLE var
IDENTIFIER x4
EQUALS_OPERATOR =
VARIABLE var
IDENTIFIER y4
EQUALS_OPERATOR =
IF if
IDENTIFIER x4
COLON :
IDENTIFIER x4
EQUALS_OPERATOR =
IF if
NOT not
IDENTIFIER x4
COLON :
INDENT     
IF if
IDENTIFIER y4
COLON :
INDENT         
IDENTIFIER y4
EQUALS_OPERATOR =
INDENT     
ELSE else
COLON :
INDENT         
IDENTIFIER y4
EQUALS_OPERATOR =
INDENT         
IDENTIFIER y4
IF if
NOT not
IDENTIFIER x4
COLON :
INDENT     
IDENTIFIER x4
EQUALS_OPERATOR =
INDENT     
IDENTIFIER y4
EQUALS_OPERATOR =
INDENT     
INDENT     
STR_LIT "x4 is "
COMMA ,
IDENTIFIER x4
COMMA ,
STR_LIT " y4 is "
COMMA ,
IDENTIFIER y4
PROC proc
IDENTIFIER yes
OPEN_PAREN (
IDENTIFIER question
COLON :
CLOSE_PAREN )
COLON :
EQUALS_OPERATOR =
INDENT     
IDENTIFIER question
COMMA ,
STR_LIT " (y/n)"
INDENT     
VARIABLE var
IDENTIFIER readline
EQUALS_OPERATOR =
STR_LIT "n"
INDENT     
WHILE while
COLON :
INDENT         
CASE case
IDENTIFIER readline
INDENT         
OF of
STR_LIT "y"
COMMA ,
STR_LIT "Y"
COMMA ,
STR_LIT "yes"
COMMA ,
STR_LIT "Yes"
COLON :
RETURN return
INDENT         
OF of
STR_LIT "n"
COMMA ,
STR_LIT "N"
COMMA ,
STR_LIT "no"
COMMA ,
STR_LIT "No"
COLON :
RETURN return
INDENT         
ELSE else
COLON :
STR_LIT "Please be clear: yes or no"
IF if
IDENTIFIER yes
OPEN_PAREN (
STR_LIT "Should I delete all your important files?"
CLOSE_PAREN )
COLON :
INDENT     
STR_LIT "I'm sorry Dave, I'm afraid I can't do that."
ELSE else
COLON :
INDENT     
STR_LIT "I think you know what the problem is just as well as I do."
LET let
INDENT     
IDENTIFIER x5
EQUALS_OPERATOR =
DIGIT 0
INDENT     
IDENTIFIER y5
EQUALS_OPERATOR =
INT8_LIT 0'i8
INDENT     
IDENTIFIER z5
EQUALS_OPERATOR =
INT64_LIT 0'i64
INDENT     
IDENTIFIER u5
EQUALS_OPERATOR =
UINT_LIT 0'u
STR_LIT "x5 is "
COMMA ,
IDENTIFIER x5
COMMA ,
STR_LIT " y5 is "
COMMA ,
IDENTIFIER y5
COMMA ,
STR_LIT " z5 is "
COMMA ,
IDENTIFIER z5
COMMA ,
STR_LIT " u5 is "
COMMA ,
IDENTIFIER u5
BLOCK block
IDENTIFIER outer
COLON :
INDENT     
FOR for
IDENTIFIER i
IN in
DIGIT 0
INT_LIT 2000
COLON :
INDENT         
FOR for
IDENTIFIER j
IN in
DIGIT 0
INT_LIT 2000
COLON :
INDENT             
IF if
IDENTIFIER i
ADD_OPERATOR +
IDENTIFIER j
INT_LIT 3145
COLON :
INDENT                 
IDENTIFIER i
COMMA ,
STR_LIT ", "
COMMA ,
IDENTIFIER j
INDENT                 
BREAK break
IDENTIFIER outer
PROC proc
IDENTIFIER fibonacci
OPEN_PAREN (
IDENTIFIER n
COLON :
CLOSE_PAREN )
COLON :
EQUALS_OPERATOR =
INDENT     
IF if
IDENTIFIER n
LESS_THAN <
DIGIT 2
COLON :
INDENT         
IDENTIFIER result
EQUALS_OPERATOR =
IDENTIFIER n
INDENT     
ELSE else
COLON :
INDENT         
IDENTIFIER result
EQUALS_OPERATOR =
IDENTIFIER fibonacci
OPEN_PAREN (
IDENTIFIER n
MINUS_OPERATOR -
DIGIT 1
CLOSE_PAREN )
ADD_OPERATOR +
OPEN_PAREN (
IDENTIFIER n
MINUS_OPERATOR -
DIGIT 2
CLOSE_PAREN )
DOT .
IDENTIFIER fibonacci
IDENTIFIER fibonacci
OPEN_PAREN (
INT_LIT 10
CLOSE_PAREN )
TYPE type
INDENT     
IDENTIFIER IntArray
EQUALS_OPERATOR =
OPEN_BRACK [
DIGIT 0
DIGIT 5
COMMA ,
CLOSE_BRACK ]
INDENT     
IDENTIFIER QuickArray
EQUALS_OPERATOR =
OPEN_BRACK [
DIGIT 6
COMMA ,
CLOSE_BRACK ]
VARIABLE var
INDENT     
IDENTIFIER x6
COLON :
IDENTIFIER IntArray
INDENT     
IDENTIFIER y6
COLON :
IDENTIFIER QuickArray
IDENTIFIER x6
EQUALS_OPERATOR =
OPEN_BRACK [
DIGIT 1
COMMA ,
DIGIT 2
COMMA ,
DIGIT 3
COMMA ,
DIGIT 4
COMMA ,
DIGIT 5
COMMA ,
DIGIT 6
CLOSE_BRACK ]
IDENTIFIER y6
EQUALS_OPERATOR =
IDENTIFIER x6
FOR for
IDENTIFIER i
IN in
DIGIT 0
DIGIT 5
COLON :
INDENT     
IDENTIFIER x6
OPEN_BRACK [
IDENTIFIER i
CLOSE_BRACK ]
COMMA ,
IDENTIFIER y6
OPEN_BRACK [
IDENTIFIER i
CLOSE_BRACK ]
INDENT     
FOR for
IDENTIFIER value
IN in
AT @
OPEN_BRACK [
DIGIT 3
COMMA ,
DIGIT 4
COMMA ,
DIGIT 5
CLOSE_BRACK ]
COLON :
INDENT     
IDENTIFIER value
FOR for
IDENTIFIER i
COMMA ,
IDENTIFIER value
IN in
AT @
OPEN_BRACK [
DIGIT 3
COMMA ,
DIGIT 4
COMMA ,
DIGIT 5
CLOSE_BRACK ]
COLON :
INDENT     
STR_LIT "index: "
COMMA ,
IDENTIFIER $i
COMMA ,
STR_LIT ", value:"
COMMA ,
IDENTIFIER $value
INDENT     
INDENT     
INDENT     
PROC proc
IDENTIFIER echoItem
OPEN_PAREN (
IDENTIFIER x
COLON :
CLOSE_PAREN )
EQUALS_OPERATOR =
IDENTIFIER x
PROC proc
OPEN_PAREN (
IDENTIFIER action
COLON :
PROC proc
OPEN_PAREN (
IDENTIFIER x
COLON :
CLOSE_PAREN )
CLOSE_PAREN )
EQUALS_OPERATOR =
INDENT     
CONST const
INDENT         
IDENTIFIER data
EQUALS_OPERATOR =
OPEN_BRACK [
STR_LIT "hi"
COMMA ,
STR_LIT "bye"
COMMA ,
STR_LIT "later"
COMMA ,
STR_LIT "not today"
COMMA ,
STR_LIT "leave[]"
CLOSE_BRACK ]
INDENT     
FOR for
IDENTIFIER d
IN in
IDENTIFIER items
OPEN_PAREN (
IDENTIFIER data
CLOSE_PAREN )
COLON :
INDENT         
IDENTIFIER action
OPEN_PAREN (
IDENTIFIER d
CLOSE_PAREN )
OPEN_PAREN (
IDENTIFIER echoItem
CLOSE_PAREN )
INDENT     
INDENT     
INDENT     
INDENT     
INDENT     

# Generated from nim.g4 by ANTLR 4.7.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u009a")
        buf.write("\u04f4\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\3\2\3\2\7\2U\n\2\f\2\16\2X\13\2")
        buf.write("\7\2Z\n\2\f\2\16\2]\13\2\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\5\3q\n\3\3")
        buf.write("\4\3\4\3\4\5\4v\n\4\3\4\3\4\3\4\7\4{\n\4\f\4\16\4~\13")
        buf.write("\4\3\4\3\4\3\4\5\4\u0083\n\4\3\4\7\4\u0086\n\4\f\4\16")
        buf.write("\4\u0089\13\4\3\4\3\4\5\4\u008d\n\4\3\4\3\4\7\4\u0091")
        buf.write("\n\4\f\4\16\4\u0094\13\4\3\4\7\4\u0097\n\4\f\4\16\4\u009a")
        buf.write("\13\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\5\4\u00a5\n")
        buf.write("\4\3\4\6\4\u00a8\n\4\r\4\16\4\u00a9\3\4\5\4\u00ad\n\4")
        buf.write("\3\4\3\4\5\4\u00b1\n\4\3\4\6\4\u00b4\n\4\r\4\16\4\u00b5")
        buf.write("\3\4\5\4\u00b9\n\4\7\4\u00bb\n\4\f\4\16\4\u00be\13\4\3")
        buf.write("\4\6\4\u00c1\n\4\r\4\16\4\u00c2\3\5\3\5\3\5\5\5\u00c8")
        buf.write("\n\5\3\5\3\5\5\5\u00cc\n\5\3\5\3\5\5\5\u00d0\n\5\6\5\u00d2")
        buf.write("\n\5\r\5\16\5\u00d3\3\6\3\6\3\6\5\6\u00d9\n\6\3\6\3\6")
        buf.write("\5\6\u00dd\n\6\3\6\3\6\5\6\u00e1\n\6\6\6\u00e3\n\6\r\6")
        buf.write("\16\6\u00e4\3\7\3\7\3\7\5\7\u00ea\n\7\3\7\3\7\5\7\u00ee")
        buf.write("\n\7\3\7\7\7\u00f1\n\7\f\7\16\7\u00f4\13\7\3\7\5\7\u00f7")
        buf.write("\n\7\3\b\3\b\3\b\3\b\3\b\7\b\u00fe\n\b\f\b\16\b\u0101")
        buf.write("\13\b\3\b\3\b\3\b\3\b\3\b\3\b\7\b\u0109\n\b\f\b\16\b\u010c")
        buf.write("\13\b\5\b\u010e\n\b\3\t\3\t\7\t\u0112\n\t\f\t\16\t\u0115")
        buf.write("\13\t\3\t\5\t\u0118\n\t\3\t\3\t\5\t\u011c\n\t\3\n\3\n")
        buf.write("\7\n\u0120\n\n\f\n\16\n\u0123\13\n\3\n\5\n\u0126\n\n\3")
        buf.write("\13\3\13\5\13\u012a\n\13\3\13\3\13\3\13\3\13\3\13\3\13")
        buf.write("\5\13\u0132\n\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3")
        buf.write("\13\3\13\3\13\3\13\3\13\5\13\u0140\n\13\6\13\u0142\n\13")
        buf.write("\r\13\16\13\u0143\3\13\3\13\5\13\u0148\n\13\3\13\3\13")
        buf.write("\3\13\3\13\3\13\3\13\3\13\3\13\6\13\u0152\n\13\r\13\16")
        buf.write("\13\u0153\3\13\6\13\u0157\n\13\r\13\16\13\u0158\6\13\u015b")
        buf.write("\n\13\r\13\16\13\u015c\3\13\3\13\5\13\u0161\n\13\3\13")
        buf.write("\3\13\3\13\3\13\3\13\3\13\5\13\u0169\n\13\3\13\3\13\3")
        buf.write("\13\3\13\3\13\3\13\3\13\3\13\3\13\7\13\u0174\n\13\f\13")
        buf.write("\16\13\u0177\13\13\6\13\u0179\n\13\r\13\16\13\u017a\3")
        buf.write("\13\3\13\5\13\u017f\n\13\3\13\3\13\3\13\3\13\3\13\3\13")
        buf.write("\3\13\5\13\u0188\n\13\3\f\3\f\5\f\u018c\n\f\3\f\3\f\3")
        buf.write("\f\3\f\5\f\u0192\n\f\3\r\3\r\5\r\u0196\n\r\3\r\3\r\3\r")
        buf.write("\3\r\5\r\u019c\n\r\3\16\5\16\u019f\n\16\3\16\3\16\3\16")
        buf.write("\3\16\5\16\u01a5\n\16\3\17\3\17\3\17\3\17\3\17\3\17\3")
        buf.write("\17\3\17\3\17\7\17\u01b0\n\17\f\17\16\17\u01b3\13\17\6")
        buf.write("\17\u01b5\n\17\r\17\16\17\u01b6\3\20\5\20\u01ba\n\20\3")
        buf.write("\20\3\20\3\20\3\20\3\20\3\20\3\20\6\20\u01c3\n\20\r\20")
        buf.write("\16\20\u01c4\3\20\7\20\u01c8\n\20\f\20\16\20\u01cb\13")
        buf.write("\20\3\20\5\20\u01ce\n\20\3\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\3\21\3\21\5\21\u01d8\n\21\3\21\3\21\3\21\6\21\u01dd\n")
        buf.write("\21\r\21\16\21\u01de\3\21\7\21\u01e2\n\21\f\21\16\21\u01e5")
        buf.write("\13\21\3\21\3\21\3\21\3\21\3\21\5\21\u01ec\n\21\3\21\3")
        buf.write("\21\5\21\u01f0\n\21\3\21\3\21\3\21\6\21\u01f5\n\21\r\21")
        buf.write("\16\21\u01f6\3\21\7\21\u01fa\n\21\f\21\16\21\u01fd\13")
        buf.write("\21\3\21\3\21\3\21\3\21\6\21\u0203\n\21\r\21\16\21\u0204")
        buf.write("\3\21\3\21\3\21\3\21\3\21\5\21\u020c\n\21\3\21\3\21\3")
        buf.write("\21\6\21\u0211\n\21\r\21\16\21\u0212\3\21\7\21\u0216\n")
        buf.write("\21\f\21\16\21\u0219\13\21\3\21\3\21\3\21\3\21\7\21\u021f")
        buf.write("\n\21\f\21\16\21\u0222\13\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\6\21\u0229\n\21\r\21\16\21\u022a\5\21\u022d\n\21\3\21")
        buf.write("\3\21\3\21\6\21\u0232\n\21\r\21\16\21\u0233\5\21\u0236")
        buf.write("\n\21\7\21\u0238\n\21\f\21\16\21\u023b\13\21\7\21\u023d")
        buf.write("\n\21\f\21\16\21\u0240\13\21\3\21\3\21\3\21\5\21\u0245")
        buf.write("\n\21\3\21\3\21\3\21\6\21\u024a\n\21\r\21\16\21\u024b")
        buf.write("\3\21\7\21\u024f\n\21\f\21\16\21\u0252\13\21\3\21\3\21")
        buf.write("\3\21\3\21\3\21\3\21\3\21\3\21\3\21\5\21\u025d\n\21\3")
        buf.write("\21\3\21\3\21\6\21\u0262\n\21\r\21\16\21\u0263\3\21\7")
        buf.write("\21\u0267\n\21\f\21\16\21\u026a\13\21\3\21\3\21\3\21\3")
        buf.write("\21\3\21\3\21\3\21\3\21\3\21\5\21\u0275\n\21\5\21\u0277")
        buf.write("\n\21\3\22\3\22\3\22\5\22\u027c\n\22\3\22\3\22\3\22\3")
        buf.write("\22\3\22\5\22\u0283\n\22\6\22\u0285\n\22\r\22\16\22\u0286")
        buf.write("\3\23\3\23\7\23\u028b\n\23\f\23\16\23\u028e\13\23\3\23")
        buf.write("\3\23\3\24\3\24\3\24\3\24\3\24\5\24\u0297\n\24\3\24\3")
        buf.write("\24\5\24\u029b\n\24\6\24\u029d\n\24\r\24\16\24\u029e\3")
        buf.write("\25\3\25\3\25\3\25\3\25\5\25\u02a6\n\25\3\25\3\25\3\25")
        buf.write("\3\25\3\25\3\25\5\25\u02ae\n\25\3\25\5\25\u02b1\n\25\6")
        buf.write("\25\u02b3\n\25\r\25\16\25\u02b4\3\25\3\25\3\25\5\25\u02ba")
        buf.write("\n\25\3\25\3\25\3\25\3\25\6\25\u02c0\n\25\r\25\16\25\u02c1")
        buf.write("\3\25\3\25\7\25\u02c6\n\25\f\25\16\25\u02c9\13\25\3\25")
        buf.write("\3\25\3\25\7\25\u02ce\n\25\f\25\16\25\u02d1\13\25\3\25")
        buf.write("\3\25\7\25\u02d5\n\25\f\25\16\25\u02d8\13\25\3\25\3\25")
        buf.write("\3\25\7\25\u02dd\n\25\f\25\16\25\u02e0\13\25\5\25\u02e2")
        buf.write("\n\25\3\25\3\25\5\25\u02e6\n\25\3\25\5\25\u02e9\n\25\3")
        buf.write("\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25")
        buf.write("\3\25\3\25\3\25\5\25\u02f9\n\25\3\25\3\25\3\25\3\25\6")
        buf.write("\25\u02ff\n\25\r\25\16\25\u0300\3\25\3\25\7\25\u0305\n")
        buf.write("\25\f\25\16\25\u0308\13\25\3\25\3\25\3\25\7\25\u030d\n")
        buf.write("\25\f\25\16\25\u0310\13\25\3\25\3\25\7\25\u0314\n\25\f")
        buf.write("\25\16\25\u0317\13\25\3\25\3\25\3\25\7\25\u031c\n\25\f")
        buf.write("\25\16\25\u031f\13\25\5\25\u0321\n\25\3\25\3\25\3\25\3")
        buf.write("\25\5\25\u0327\n\25\3\25\3\25\3\25\3\25\3\25\5\25\u032e")
        buf.write("\n\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25")
        buf.write("\3\25\3\25\5\25\u033c\n\25\3\25\6\25\u033f\n\25\r\25\16")
        buf.write("\25\u0340\3\25\3\25\5\25\u0345\n\25\7\25\u0347\n\25\f")
        buf.write("\25\16\25\u034a\13\25\3\25\3\25\3\25\5\25\u034f\n\25\3")
        buf.write("\25\3\25\3\25\3\25\6\25\u0355\n\25\r\25\16\25\u0356\3")
        buf.write("\25\3\25\7\25\u035b\n\25\f\25\16\25\u035e\13\25\3\25\3")
        buf.write("\25\3\25\7\25\u0363\n\25\f\25\16\25\u0366\13\25\3\25\3")
        buf.write("\25\7\25\u036a\n\25\f\25\16\25\u036d\13\25\3\25\3\25\3")
        buf.write("\25\7\25\u0372\n\25\f\25\16\25\u0375\13\25\5\25\u0377")
        buf.write("\n\25\3\25\3\25\5\25\u037b\n\25\3\25\5\25\u037e\n\25\5")
        buf.write("\25\u0380\n\25\3\26\3\26\3\26\3\26\3\26\3\26\6\26\u0388")
        buf.write("\n\26\r\26\16\26\u0389\3\27\3\27\3\27\3\27\3\27\3\27\3")
        buf.write("\27\3\27\3\27\6\27\u0395\n\27\r\27\16\27\u0396\5\27\u0399")
        buf.write("\n\27\3\27\3\27\3\27\3\27\3\27\6\27\u03a0\n\27\r\27\16")
        buf.write("\27\u03a1\3\30\3\30\3\30\3\30\6\30\u03a8\n\30\r\30\16")
        buf.write("\30\u03a9\3\30\5\30\u03ad\n\30\3\30\3\30\3\30\6\30\u03b2")
        buf.write("\n\30\r\30\16\30\u03b3\3\30\5\30\u03b7\n\30\7\30\u03b9")
        buf.write("\n\30\f\30\16\30\u03bc\13\30\3\30\3\30\3\30\3\30\6\30")
        buf.write("\u03c2\n\30\r\30\16\30\u03c3\3\30\5\30\u03c7\n\30\3\30")
        buf.write("\3\30\3\30\6\30\u03cc\n\30\r\30\16\30\u03cd\3\30\5\30")
        buf.write("\u03d1\n\30\7\30\u03d3\n\30\f\30\16\30\u03d6\13\30\3\30")
        buf.write("\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30")
        buf.write("\7\30\u03e4\n\30\f\30\16\30\u03e7\13\30\5\30\u03e9\n\30")
        buf.write("\5\30\u03eb\n\30\3\31\3\31\3\31\3\31\3\31\7\31\u03f2\n")
        buf.write("\31\f\31\16\31\u03f5\13\31\3\31\3\31\3\32\3\32\3\32\3")
        buf.write("\32\3\32\3\33\3\33\3\33\3\33\7\33\u0402\n\33\f\33\16\33")
        buf.write("\u0405\13\33\3\33\3\33\5\33\u0409\n\33\3\33\3\33\3\33")
        buf.write("\3\33\5\33\u040f\n\33\3\34\3\34\3\34\7\34\u0414\n\34\f")
        buf.write("\34\16\34\u0417\13\34\3\35\3\35\3\35\5\35\u041c\n\35\3")
        buf.write("\35\3\35\3\35\3\35\5\35\u0422\n\35\3\35\5\35\u0425\n\35")
        buf.write("\3\35\3\35\3\35\3\35\3\35\5\35\u042c\n\35\3\36\6\36\u042f")
        buf.write("\n\36\r\36\16\36\u0430\3\37\6\37\u0434\n\37\r\37\16\37")
        buf.write("\u0435\3 \3 \3 \3 \6 \u043c\n \r \16 \u043d\3 \3 \5 \u0442")
        buf.write("\n \3 \3 \6 \u0446\n \r \16 \u0447\3 \3 \5 \u044c\n \7")
        buf.write(" \u044e\n \f \16 \u0451\13 \3 \3 \3 \3 \5 \u0457\n \3")
        buf.write(" \6 \u045a\n \r \16 \u045b\5 \u045e\n \3 \3 \5 \u0462")
        buf.write("\n \3 \3 \5 \u0466\n \3 \6 \u0469\n \r \16 \u046a\3 \5")
        buf.write(" \u046e\n \7 \u0470\n \f \16 \u0473\13 \3 \3 \3 \3 \7")
        buf.write(" \u0479\n \f \16 \u047c\13 \3 \3 \3 \5 \u0481\n \3 \3")
        buf.write(" \6 \u0485\n \r \16 \u0486\5 \u0489\n \3 \3 \5 \u048d")
        buf.write("\n \3 \3 \6 \u0491\n \r \16 \u0492\5 \u0495\n \7 \u0497")
        buf.write("\n \f \16 \u049a\13 \7 \u049c\n \f \16 \u049f\13 \3 \5")
        buf.write(" \u04a2\n \3!\3!\3\"\3\"\7\"\u04a8\n\"\f\"\16\"\u04ab")
        buf.write("\13\"\3\"\7\"\u04ae\n\"\f\"\16\"\u04b1\13\"\3\"\3\"\3")
        buf.write("#\5#\u04b6\n#\3#\3#\3#\3#\7#\u04bc\n#\f#\16#\u04bf\13")
        buf.write("#\3#\3#\3#\5#\u04c4\n#\3#\3#\3#\5#\u04c9\n#\3#\5#\u04cc")
        buf.write("\n#\6#\u04ce\n#\r#\16#\u04cf\3$\3$\3$\3$\5$\u04d6\n$\3")
        buf.write("$\3$\5$\u04da\n$\3$\6$\u04dd\n$\r$\16$\u04de\3%\3%\3%")
        buf.write("\5%\u04e4\n%\3%\5%\u04e7\n%\3&\3&\3\'\5\'\u04ec\n\'\3")
        buf.write("\'\3\'\3(\3(\3)\3)\3)\2\2*\2\4\6\b\n\f\16\20\22\24\26")
        buf.write("\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNP\2\r\3\2")
        buf.write("\3\4\3\2\3\5\5\2&&((\63\63\5\2\26\26\30\30+,\5\2&&((+")
        buf.write("+\5\2\32\32&(\63\63\3\2&(\3\2\16\20\4\2tt~~\3\2%\60\7")
        buf.write("\2YYru\u0081\u0081\u0086\u0090\u0092\u0092\2\u05cc\2[")
        buf.write("\3\2\2\2\4p\3\2\2\2\6r\3\2\2\2\b\u00c4\3\2\2\2\n\u00d5")
        buf.write("\3\2\2\2\f\u00e6\3\2\2\2\16\u010d\3\2\2\2\20\u010f\3\2")
        buf.write("\2\2\22\u011d\3\2\2\2\24\u0187\3\2\2\2\26\u0189\3\2\2")
        buf.write("\2\30\u0193\3\2\2\2\32\u019e\3\2\2\2\34\u01a6\3\2\2\2")
        buf.write("\36\u01b9\3\2\2\2 \u0276\3\2\2\2\"\u0278\3\2\2\2$\u0288")
        buf.write("\3\2\2\2&\u0291\3\2\2\2(\u037f\3\2\2\2*\u0381\3\2\2\2")
        buf.write(",\u038b\3\2\2\2.\u03ea\3\2\2\2\60\u03ec\3\2\2\2\62\u03f8")
        buf.write("\3\2\2\2\64\u040e\3\2\2\2\66\u0410\3\2\2\28\u042b\3\2")
        buf.write("\2\2:\u042e\3\2\2\2<\u0433\3\2\2\2>\u04a1\3\2\2\2@\u04a3")
        buf.write("\3\2\2\2B\u04a5\3\2\2\2D\u04b5\3\2\2\2F\u04d1\3\2\2\2")
        buf.write("H\u04e0\3\2\2\2J\u04e8\3\2\2\2L\u04eb\3\2\2\2N\u04ef\3")
        buf.write("\2\2\2P\u04f1\3\2\2\2RV\5\4\3\2SU\t\2\2\2TS\3\2\2\2UX")
        buf.write("\3\2\2\2VT\3\2\2\2VW\3\2\2\2WZ\3\2\2\2XV\3\2\2\2YR\3\2")
        buf.write("\2\2Z]\3\2\2\2[Y\3\2\2\2[\\\3\2\2\2\\\3\3\2\2\2][\3\2")
        buf.write("\2\2^q\5\6\4\2_q\5\f\7\2`q\5\16\b\2aq\5\b\5\2bq\5\n\6")
        buf.write("\2cq\5\20\t\2dq\5 \21\2eq\5\"\22\2fq\5$\23\2gq\5(\25\2")
        buf.write("hq\5*\26\2iq\5,\27\2jq\5.\30\2kq\5\60\31\2lq\5J&\2mq\5")
        buf.write("\62\32\2nq\5B\"\2oq\5\64\33\2p^\3\2\2\2p_\3\2\2\2p`\3")
        buf.write("\2\2\2pa\3\2\2\2pb\3\2\2\2pc\3\2\2\2pd\3\2\2\2pe\3\2\2")
        buf.write("\2pf\3\2\2\2pg\3\2\2\2ph\3\2\2\2pi\3\2\2\2pj\3\2\2\2p")
        buf.write("k\3\2\2\2pl\3\2\2\2pm\3\2\2\2pn\3\2\2\2po\3\2\2\2q\5\3")
        buf.write("\2\2\2r\u00c0\7\27\2\2st\7\3\2\2tv\7\22\2\2us\3\2\2\2")
        buf.write("uv\3\2\2\2vw\3\2\2\2w|\7~\2\2xy\7\63\2\2y{\7~\2\2zx\3")
        buf.write("\2\2\2{~\3\2\2\2|z\3\2\2\2|}\3\2\2\2}\177\3\2\2\2~|\3")
        buf.write("\2\2\2\177\u0082\7\62\2\2\u0080\u0083\5@!\2\u0081\u0083")
        buf.write("\7~\2\2\u0082\u0080\3\2\2\2\u0082\u0081\3\2\2\2\u0083")
        buf.write("\u0087\3\2\2\2\u0084\u0086\7\3\2\2\u0085\u0084\3\2\2\2")
        buf.write("\u0086\u0089\3\2\2\2\u0087\u0085\3\2\2\2\u0087\u0088\3")
        buf.write("\2\2\2\u0088\u00c1\3\2\2\2\u0089\u0087\3\2\2\2\u008a\u008b")
        buf.write("\7\3\2\2\u008b\u008d\7\22\2\2\u008c\u008a\3\2\2\2\u008c")
        buf.write("\u008d\3\2\2\2\u008d\u008e\3\2\2\2\u008e\u0092\7\5\2\2")
        buf.write("\u008f\u0091\n\3\2\2\u0090\u008f\3\2\2\2\u0091\u0094\3")
        buf.write("\2\2\2\u0092\u0090\3\2\2\2\u0092\u0093\3\2\2\2\u0093\u0098")
        buf.write("\3\2\2\2\u0094\u0092\3\2\2\2\u0095\u0097\7\3\2\2\u0096")
        buf.write("\u0095\3\2\2\2\u0097\u009a\3\2\2\2\u0098\u0096\3\2\2\2")
        buf.write("\u0098\u0099\3\2\2\2\u0099\u00c1\3\2\2\2\u009a\u0098\3")
        buf.write("\2\2\2\u009b\u00c1\5\f\7\2\u009c\u009d\7~\2\2\u009d\u009e")
        buf.write("\7%\2\2\u009e\u00c1\5\22\n\2\u009f\u00a0\7~\2\2\u00a0")
        buf.write("\u00a1\7%\2\2\u00a1\u00a2\7y\2\2\u00a2\u00ac\7o\2\2\u00a3")
        buf.write("\u00a5\7(\2\2\u00a4\u00a3\3\2\2\2\u00a4\u00a5\3\2\2\2")
        buf.write("\u00a5\u00a7\3\2\2\2\u00a6\u00a8\7\21\2\2\u00a7\u00a6")
        buf.write("\3\2\2\2\u00a8\u00a9\3\2\2\2\u00a9\u00a7\3\2\2\2\u00a9")
        buf.write("\u00aa\3\2\2\2\u00aa\u00ad\3\2\2\2\u00ab\u00ad\7~\2\2")
        buf.write("\u00ac\u00a4\3\2\2\2\u00ac\u00ab\3\2\2\2\u00ad\u00bc\3")
        buf.write("\2\2\2\u00ae\u00b8\7\63\2\2\u00af\u00b1\7(\2\2\u00b0\u00af")
        buf.write("\3\2\2\2\u00b0\u00b1\3\2\2\2\u00b1\u00b3\3\2\2\2\u00b2")
        buf.write("\u00b4\7\21\2\2\u00b3\u00b2\3\2\2\2\u00b4\u00b5\3\2\2")
        buf.write("\2\u00b5\u00b3\3\2\2\2\u00b5\u00b6\3\2\2\2\u00b6\u00b9")
        buf.write("\3\2\2\2\u00b7\u00b9\7~\2\2\u00b8\u00b0\3\2\2\2\u00b8")
        buf.write("\u00b7\3\2\2\2\u00b9\u00bb\3\2\2\2\u00ba\u00ae\3\2\2\2")
        buf.write("\u00bb\u00be\3\2\2\2\u00bc\u00ba\3\2\2\2\u00bc\u00bd\3")
        buf.write("\2\2\2\u00bd\u00bf\3\2\2\2\u00be\u00bc\3\2\2\2\u00bf\u00c1")
        buf.write("\7p\2\2\u00c0u\3\2\2\2\u00c0\u008c\3\2\2\2\u00c0\u009b")
        buf.write("\3\2\2\2\u00c0\u009c\3\2\2\2\u00c0\u009f\3\2\2\2\u00c1")
        buf.write("\u00c2\3\2\2\2\u00c2\u00c0\3\2\2\2\u00c2\u00c3\3\2\2\2")
        buf.write("\u00c3\7\3\2\2\2\u00c4\u00d1\7>\2\2\u00c5\u00c6\7\3\2")
        buf.write("\2\u00c6\u00c8\7\22\2\2\u00c7\u00c5\3\2\2\2\u00c7\u00c8")
        buf.write("\3\2\2\2\u00c8\u00c9\3\2\2\2\u00c9\u00cb\5\f\7\2\u00ca")
        buf.write("\u00cc\7\3\2\2\u00cb\u00ca\3\2\2\2\u00cb\u00cc\3\2\2\2")
        buf.write("\u00cc\u00cf\3\2\2\2\u00cd\u00ce\7\22\2\2\u00ce\u00d0")
        buf.write("\7z\2\2\u00cf\u00cd\3\2\2\2\u00cf\u00d0\3\2\2\2\u00d0")
        buf.write("\u00d2\3\2\2\2\u00d1\u00c7\3\2\2\2\u00d2\u00d3\3\2\2\2")
        buf.write("\u00d3\u00d1\3\2\2\2\u00d3\u00d4\3\2\2\2\u00d4\t\3\2\2")
        buf.write("\2\u00d5\u00e2\7U\2\2\u00d6\u00d7\7\3\2\2\u00d7\u00d9")
        buf.write("\7\22\2\2\u00d8\u00d6\3\2\2\2\u00d8\u00d9\3\2\2\2\u00d9")
        buf.write("\u00da\3\2\2\2\u00da\u00dc\5\f\7\2\u00db\u00dd\7\3\2\2")
        buf.write("\u00dc\u00db\3\2\2\2\u00dc\u00dd\3\2\2\2\u00dd\u00e0\3")
        buf.write("\2\2\2\u00de\u00df\7\22\2\2\u00df\u00e1\7z\2\2\u00e0\u00de")
        buf.write("\3\2\2\2\u00e0\u00e1\3\2\2\2\u00e1\u00e3\3\2\2\2\u00e2")
        buf.write("\u00d8\3\2\2\2\u00e3\u00e4\3\2\2\2\u00e4\u00e2\3\2\2\2")
        buf.write("\u00e4\u00e5\3\2\2\2\u00e5\13\3\2\2\2\u00e6\u00e7\7~\2")
        buf.write("\2\u00e7\u00e9\7%\2\2\u00e8\u00ea\7y\2\2\u00e9\u00e8\3")
        buf.write("\2\2\2\u00e9\u00ea\3\2\2\2\u00ea\u00eb\3\2\2\2\u00eb\u00ed")
        buf.write("\5> \2\u00ec\u00ee\7\64\2\2\u00ed\u00ec\3\2\2\2\u00ed")
        buf.write("\u00ee\3\2\2\2\u00ee\u00f2\3\2\2\2\u00ef\u00f1\7\3\2\2")
        buf.write("\u00f0\u00ef\3\2\2\2\u00f1\u00f4\3\2\2\2\u00f2\u00f0\3")
        buf.write("\2\2\2\u00f2\u00f3\3\2\2\2\u00f3\u00f6\3\2\2\2\u00f4\u00f2")
        buf.write("\3\2\2\2\u00f5\u00f7\7\22\2\2\u00f6\u00f5\3\2\2\2\u00f6")
        buf.write("\u00f7\3\2\2\2\u00f7\r\3\2\2\2\u00f8\u00f9\7\37\2\2\u00f9")
        buf.write("\u00fa\7k\2\2\u00fa\u00ff\5> \2\u00fb\u00fc\7\63\2\2\u00fc")
        buf.write("\u00fe\5> \2\u00fd\u00fb\3\2\2\2\u00fe\u0101\3\2\2\2\u00ff")
        buf.write("\u00fd\3\2\2\2\u00ff\u0100\3\2\2\2\u0100\u0102\3\2\2\2")
        buf.write("\u0101\u00ff\3\2\2\2\u0102\u0103\7l\2\2\u0103\u010e\3")
        buf.write("\2\2\2\u0104\u0105\7\37\2\2\u0105\u010a\5> \2\u0106\u0107")
        buf.write("\7\63\2\2\u0107\u0109\5> \2\u0108\u0106\3\2\2\2\u0109")
        buf.write("\u010c\3\2\2\2\u010a\u0108\3\2\2\2\u010a\u010b\3\2\2\2")
        buf.write("\u010b\u010e\3\2\2\2\u010c\u010a\3\2\2\2\u010d\u00f8\3")
        buf.write("\2\2\2\u010d\u0104\3\2\2\2\u010e\17\3\2\2\2\u010f\u0113")
        buf.write("\5\24\13\2\u0110\u0112\5\34\17\2\u0111\u0110\3\2\2\2\u0112")
        buf.write("\u0115\3\2\2\2\u0113\u0111\3\2\2\2\u0113\u0114\3\2\2\2")
        buf.write("\u0114\u0117\3\2\2\2\u0115\u0113\3\2\2\2\u0116\u0118\5")
        buf.write("\36\20\2\u0117\u0116\3\2\2\2\u0117\u0118\3\2\2\2\u0118")
        buf.write("\u011b\3\2\2\2\u0119\u011a\7\3\2\2\u011a\u011c\7\22\2")
        buf.write("\2\u011b\u0119\3\2\2\2\u011b\u011c\3\2\2\2\u011c\21\3")
        buf.write("\2\2\2\u011d\u0121\5\26\f\2\u011e\u0120\5\30\r\2\u011f")
        buf.write("\u011e\3\2\2\2\u0120\u0123\3\2\2\2\u0121\u011f\3\2\2\2")
        buf.write("\u0121\u0122\3\2\2\2\u0122\u0125\3\2\2\2\u0123\u0121\3")
        buf.write("\2\2\2\u0124\u0126\5\32\16\2\u0125\u0124\3\2\2\2\u0125")
        buf.write("\u0126\3\2\2\2\u0126\23\3\2\2\2\u0127\u0129\7O\2\2\u0128")
        buf.write("\u012a\7\31\2\2\u0129\u0128\3\2\2\2\u0129\u012a\3\2\2")
        buf.write("\2\u012a\u012b\3\2\2\2\u012b\u012c\5\66\34\2\u012c\u012d")
        buf.write("\7\62\2\2\u012d\u012e\5\f\7\2\u012e\u0188\3\2\2\2\u012f")
        buf.write("\u0131\7O\2\2\u0130\u0132\7\31\2\2\u0131\u0130\3\2\2\2")
        buf.write("\u0131\u0132\3\2\2\2\u0132\u0133\3\2\2\2\u0133\u0134\5")
        buf.write("\66\34\2\u0134\u0141\7\62\2\2\u0135\u0136\7\3\2\2\u0136")
        buf.write("\u013f\7\22\2\2\u0137\u0140\5\4\3\2\u0138\u0139\7:\2\2")
        buf.write("\u0139\u0140\7~\2\2\u013a\u0140\7?\2\2\u013b\u013c\7\6")
        buf.write("\2\2\u013c\u0140\7~\2\2\u013d\u013e\7\7\2\2\u013e\u0140")
        buf.write("\7~\2\2\u013f\u0137\3\2\2\2\u013f\u0138\3\2\2\2\u013f")
        buf.write("\u013a\3\2\2\2\u013f\u013b\3\2\2\2\u013f\u013d\3\2\2\2")
        buf.write("\u0140\u0142\3\2\2\2\u0141\u0135\3\2\2\2\u0142\u0143\3")
        buf.write("\2\2\2\u0143\u0141\3\2\2\2\u0143\u0144\3\2\2\2\u0144\u0188")
        buf.write("\3\2\2\2\u0145\u0147\7O\2\2\u0146\u0148\7\31\2\2\u0147")
        buf.write("\u0146\3\2\2\2\u0147\u0148\3\2\2\2\u0148\u0149\3\2\2\2")
        buf.write("\u0149\u014a\5\66\34\2\u014a\u015a\7\62\2\2\u014b\u014c")
        buf.write("\7\3\2\2\u014c\u0151\7\22\2\2\u014d\u0152\5\4\3\2\u014e")
        buf.write("\u014f\7:\2\2\u014f\u0152\7~\2\2\u0150\u0152\7?\2\2\u0151")
        buf.write("\u014d\3\2\2\2\u0151\u014e\3\2\2\2\u0151\u0150\3\2\2\2")
        buf.write("\u0152\u0153\3\2\2\2\u0153\u0151\3\2\2\2\u0153\u0154\3")
        buf.write("\2\2\2\u0154\u0156\3\2\2\2\u0155\u0157\7\3\2\2\u0156\u0155")
        buf.write("\3\2\2\2\u0157\u0158\3\2\2\2\u0158\u0156\3\2\2\2\u0158")
        buf.write("\u0159\3\2\2\2\u0159\u015b\3\2\2\2\u015a\u014b\3\2\2\2")
        buf.write("\u015b\u015c\3\2\2\2\u015c\u015a\3\2\2\2\u015c\u015d\3")
        buf.write("\2\2\2\u015d\u0188\3\2\2\2\u015e\u0160\7O\2\2\u015f\u0161")
        buf.write("\7\31\2\2\u0160\u015f\3\2\2\2\u0160\u0161\3\2\2\2\u0161")
        buf.write("\u0162\3\2\2\2\u0162\u0163\5\66\34\2\u0163\u0164\7\62")
        buf.write("\2\2\u0164\u0165\7a\2\2\u0165\u0188\3\2\2\2\u0166\u0168")
        buf.write("\7O\2\2\u0167\u0169\7\31\2\2\u0168\u0167\3\2\2\2\u0168")
        buf.write("\u0169\3\2\2\2\u0169\u016a\3\2\2\2\u016a\u016b\7~\2\2")
        buf.write("\u016b\u016c\7k\2\2\u016c\u016d\5> \2\u016d\u016e\7l\2")
        buf.write("\2\u016e\u0178\7\62\2\2\u016f\u0170\7\3\2\2\u0170\u0171")
        buf.write("\7\22\2\2\u0171\u0175\5\4\3\2\u0172\u0174\7\3\2\2\u0173")
        buf.write("\u0172\3\2\2\2\u0174\u0177\3\2\2\2\u0175\u0173\3\2\2\2")
        buf.write("\u0175\u0176\3\2\2\2\u0176\u0179\3\2\2\2\u0177\u0175\3")
        buf.write("\2\2\2\u0178\u016f\3\2\2\2\u0179\u017a\3\2\2\2\u017a\u0178")
        buf.write("\3\2\2\2\u017a\u017b\3\2\2\2\u017b\u0188\3\2\2\2\u017c")
        buf.write("\u017e\7O\2\2\u017d\u017f\7\31\2\2\u017e\u017d\3\2\2\2")
        buf.write("\u017e\u017f\3\2\2\2\u017f\u0180\3\2\2\2\u0180\u0181\7")
        buf.write("~\2\2\u0181\u0182\7k\2\2\u0182\u0183\5> \2\u0183\u0184")
        buf.write("\7l\2\2\u0184\u0185\7\62\2\2\u0185\u0186\5\f\7\2\u0186")
        buf.write("\u0188\3\2\2\2\u0187\u0127\3\2\2\2\u0187\u012f\3\2\2\2")
        buf.write("\u0187\u0145\3\2\2\2\u0187\u015e\3\2\2\2\u0187\u0166\3")
        buf.write("\2\2\2\u0187\u017c\3\2\2\2\u0188\25\3\2\2\2\u0189\u018b")
        buf.write("\7O\2\2\u018a\u018c\7\31\2\2\u018b\u018a\3\2\2\2\u018b")
        buf.write("\u018c\3\2\2\2\u018c\u018d\3\2\2\2\u018d\u018e\5\66\34")
        buf.write("\2\u018e\u0191\7\62\2\2\u018f\u0192\5> \2\u0190\u0192")
        buf.write("\7\u0098\2\2\u0191\u018f\3\2\2\2\u0191\u0190\3\2\2\2\u0192")
        buf.write("\27\3\2\2\2\u0193\u0195\7E\2\2\u0194\u0196\7\31\2\2\u0195")
        buf.write("\u0194\3\2\2\2\u0195\u0196\3\2\2\2\u0196\u0197\3\2\2\2")
        buf.write("\u0197\u0198\5\66\34\2\u0198\u019b\7\62\2\2\u0199\u019c")
        buf.write("\5> \2\u019a\u019c\7\u0098\2\2\u019b\u0199\3\2\2\2\u019b")
        buf.write("\u019a\3\2\2\2\u019c\31\3\2\2\2\u019d\u019f\7\22\2\2\u019e")
        buf.write("\u019d\3\2\2\2\u019e\u019f\3\2\2\2\u019f\u01a0\3\2\2\2")
        buf.write("\u01a0\u01a1\7F\2\2\u01a1\u01a4\7\62\2\2\u01a2\u01a5\5")
        buf.write("> \2\u01a3\u01a5\7\u0098\2\2\u01a4\u01a2\3\2\2\2\u01a4")
        buf.write("\u01a3\3\2\2\2\u01a5\33\3\2\2\2\u01a6\u01a7\7E\2\2\u01a7")
        buf.write("\u01a8\5> \2\u01a8\u01a9\7$\2\2\u01a9\u01aa\5> \2\u01aa")
        buf.write("\u01b4\7\62\2\2\u01ab\u01ac\7\3\2\2\u01ac\u01ad\7\22\2")
        buf.write("\2\u01ad\u01b1\5\4\3\2\u01ae\u01b0\7\3\2\2\u01af\u01ae")
        buf.write("\3\2\2\2\u01b0\u01b3\3\2\2\2\u01b1\u01af\3\2\2\2\u01b1")
        buf.write("\u01b2\3\2\2\2\u01b2\u01b5\3\2\2\2\u01b3\u01b1\3\2\2\2")
        buf.write("\u01b4\u01ab\3\2\2\2\u01b5\u01b6\3\2\2\2\u01b6\u01b4\3")
        buf.write("\2\2\2\u01b6\u01b7\3\2\2\2\u01b7\35\3\2\2\2\u01b8\u01ba")
        buf.write("\7\22\2\2\u01b9\u01b8\3\2\2\2\u01b9\u01ba\3\2\2\2\u01ba")
        buf.write("\u01bb\3\2\2\2\u01bb\u01bc\7F\2\2\u01bc\u01c2\7\62\2\2")
        buf.write("\u01bd\u01be\7\3\2\2\u01be\u01bf\7\22\2\2\u01bf\u01c3")
        buf.write("\5\4\3\2\u01c0\u01c3\5\16\b\2\u01c1\u01c3\5\f\7\2\u01c2")
        buf.write("\u01bd\3\2\2\2\u01c2\u01c0\3\2\2\2\u01c2\u01c1\3\2\2\2")
        buf.write("\u01c3\u01c4\3\2\2\2\u01c4\u01c2\3\2\2\2\u01c4\u01c5\3")
        buf.write("\2\2\2\u01c5\u01c9\3\2\2\2\u01c6\u01c8\7\3\2\2\u01c7\u01c6")
        buf.write("\3\2\2\2\u01c8\u01cb\3\2\2\2\u01c9\u01c7\3\2\2\2\u01c9")
        buf.write("\u01ca\3\2\2\2\u01ca\u01cd\3\2\2\2\u01cb\u01c9\3\2\2\2")
        buf.write("\u01cc\u01ce\7\22\2\2\u01cd\u01cc\3\2\2\2\u01cd\u01ce")
        buf.write("\3\2\2\2\u01ce\37\3\2\2\2\u01cf\u01d0\7L\2\2\u01d0\u01d1")
        buf.write("\7~\2\2\u01d1\u01d2\7Q\2\2\u01d2\u01d3\7s\2\2\u01d3\u01d4")
        buf.write("\7#\2\2\u01d4\u01d5\7s\2\2\u01d5\u01d7\7\62\2\2\u01d6")
        buf.write("\u01d8\7z\2\2\u01d7\u01d6\3\2\2\2\u01d7\u01d8\3\2\2\2")
        buf.write("\u01d8\u01dc\3\2\2\2\u01d9\u01da\7\3\2\2\u01da\u01db\7")
        buf.write("\22\2\2\u01db\u01dd\5\4\3\2\u01dc\u01d9\3\2\2\2\u01dd")
        buf.write("\u01de\3\2\2\2\u01de\u01dc\3\2\2\2\u01de\u01df\3\2\2\2")
        buf.write("\u01df\u01e3\3\2\2\2\u01e0\u01e2\7\22\2\2\u01e1\u01e0")
        buf.write("\3\2\2\2\u01e2\u01e5\3\2\2\2\u01e3\u01e1\3\2\2\2\u01e3")
        buf.write("\u01e4\3\2\2\2\u01e4\u0277\3\2\2\2\u01e5\u01e3\3\2\2\2")
        buf.write("\u01e6\u01e7\7L\2\2\u01e7\u01e8\7~\2\2\u01e8\u01eb\7Q")
        buf.write("\2\2\u01e9\u01ec\7\u009a\2\2\u01ea\u01ec\5.\30\2\u01eb")
        buf.write("\u01e9\3\2\2\2\u01eb\u01ea\3\2\2\2\u01ec\u01ed\3\2\2\2")
        buf.write("\u01ed\u01ef\7\62\2\2\u01ee\u01f0\7z\2\2\u01ef\u01ee\3")
        buf.write("\2\2\2\u01ef\u01f0\3\2\2\2\u01f0\u01f4\3\2\2\2\u01f1\u01f2")
        buf.write("\7\3\2\2\u01f2\u01f3\7\22\2\2\u01f3\u01f5\5\4\3\2\u01f4")
        buf.write("\u01f1\3\2\2\2\u01f5\u01f6\3\2\2\2\u01f6\u01f4\3\2\2\2")
        buf.write("\u01f6\u01f7\3\2\2\2\u01f7\u01fb\3\2\2\2\u01f8\u01fa\7")
        buf.write("\22\2\2\u01f9\u01f8\3\2\2\2\u01fa\u01fd\3\2\2\2\u01fb")
        buf.write("\u01f9\3\2\2\2\u01fb\u01fc\3\2\2\2\u01fc\u0277\3\2\2\2")
        buf.write("\u01fd\u01fb\3\2\2\2\u01fe\u01ff\7L\2\2\u01ff\u0200\7")
        buf.write("~\2\2\u0200\u0202\7Q\2\2\u0201\u0203\7\21\2\2\u0202\u0201")
        buf.write("\3\2\2\2\u0203\u0204\3\2\2\2\u0204\u0202\3\2\2\2\u0204")
        buf.write("\u0205\3\2\2\2\u0205\u0206\3\2\2\2\u0206\u0207\7#\2\2")
        buf.write("\u0207\u0208\7-\2\2\u0208\u0209\7\u0098\2\2\u0209\u020b")
        buf.write("\7\62\2\2\u020a\u020c\7z\2\2\u020b\u020a\3\2\2\2\u020b")
        buf.write("\u020c\3\2\2\2\u020c\u0210\3\2\2\2\u020d\u020e\7\3\2\2")
        buf.write("\u020e\u020f\7\22\2\2\u020f\u0211\5\4\3\2\u0210\u020d")
        buf.write("\3\2\2\2\u0211\u0212\3\2\2\2\u0212\u0210\3\2\2\2\u0212")
        buf.write("\u0213\3\2\2\2\u0213\u0217\3\2\2\2\u0214\u0216\7\22\2")
        buf.write("\2\u0215\u0214\3\2\2\2\u0216\u0219\3\2\2\2\u0217\u0215")
        buf.write("\3\2\2\2\u0217\u0218\3\2\2\2\u0218\u0277\3\2\2\2\u0219")
        buf.write("\u0217\3\2\2\2\u021a\u021b\7L\2\2\u021b\u0220\7~\2\2\u021c")
        buf.write("\u021d\7\63\2\2\u021d\u021f\7~\2\2\u021e\u021c\3\2\2\2")
        buf.write("\u021f\u0222\3\2\2\2\u0220\u021e\3\2\2\2\u0220\u0221\3")
        buf.write("\2\2\2\u0221\u0223\3\2\2\2\u0222\u0220\3\2\2\2\u0223\u0224")
        buf.write("\7Q\2\2\u0224\u0225\7y\2\2\u0225\u023e\7o\2\2\u0226\u022d")
        buf.write("\5P)\2\u0227\u0229\7\21\2\2\u0228\u0227\3\2\2\2\u0229")
        buf.write("\u022a\3\2\2\2\u022a\u0228\3\2\2\2\u022a\u022b\3\2\2\2")
        buf.write("\u022b\u022d\3\2\2\2\u022c\u0226\3\2\2\2\u022c\u0228\3")
        buf.write("\2\2\2\u022d\u0239\3\2\2\2\u022e\u0235\7\63\2\2\u022f")
        buf.write("\u0236\5P)\2\u0230\u0232\7\21\2\2\u0231\u0230\3\2\2\2")
        buf.write("\u0232\u0233\3\2\2\2\u0233\u0231\3\2\2\2\u0233\u0234\3")
        buf.write("\2\2\2\u0234\u0236\3\2\2\2\u0235\u022f\3\2\2\2\u0235\u0231")
        buf.write("\3\2\2\2\u0236\u0238\3\2\2\2\u0237\u022e\3\2\2\2\u0238")
        buf.write("\u023b\3\2\2\2\u0239\u0237\3\2\2\2\u0239\u023a\3\2\2\2")
        buf.write("\u023a\u023d\3\2\2\2\u023b\u0239\3\2\2\2\u023c\u022c\3")
        buf.write("\2\2\2\u023d\u0240\3\2\2\2\u023e\u023c\3\2\2\2\u023e\u023f")
        buf.write("\3\2\2\2\u023f\u0241\3\2\2\2\u0240\u023e\3\2\2\2\u0241")
        buf.write("\u0242\7p\2\2\u0242\u0244\7\62\2\2\u0243\u0245\7z\2\2")
        buf.write("\u0244\u0243\3\2\2\2\u0244\u0245\3\2\2\2\u0245\u0249\3")
        buf.write("\2\2\2\u0246\u0247\7\3\2\2\u0247\u0248\7\22\2\2\u0248")
        buf.write("\u024a\5\4\3\2\u0249\u0246\3\2\2\2\u024a\u024b\3\2\2\2")
        buf.write("\u024b\u0249\3\2\2\2\u024b\u024c\3\2\2\2\u024c\u0250\3")
        buf.write("\2\2\2\u024d\u024f\7\22\2\2\u024e\u024d\3\2\2\2\u024f")
        buf.write("\u0252\3\2\2\2\u0250\u024e\3\2\2\2\u0250\u0251\3\2\2\2")
        buf.write("\u0251\u0277\3\2\2\2\u0252\u0250\3\2\2\2\u0253\u0254\7")
        buf.write("L\2\2\u0254\u0255\7~\2\2\u0255\u0256\7Q\2\2\u0256\u0257")
        buf.write("\7~\2\2\u0257\u0258\7k\2\2\u0258\u0259\7~\2\2\u0259\u025a")
        buf.write("\7l\2\2\u025a\u025c\7\62\2\2\u025b\u025d\7z\2\2\u025c")
        buf.write("\u025b\3\2\2\2\u025c\u025d\3\2\2\2\u025d\u0261\3\2\2\2")
        buf.write("\u025e\u025f\7\3\2\2\u025f\u0260\7\22\2\2\u0260\u0262")
        buf.write("\5\4\3\2\u0261\u025e\3\2\2\2\u0262\u0263\3\2\2\2\u0263")
        buf.write("\u0261\3\2\2\2\u0263\u0264\3\2\2\2\u0264\u0268\3\2\2\2")
        buf.write("\u0265\u0267\7\22\2\2\u0266\u0265\3\2\2\2\u0267\u026a")
        buf.write("\3\2\2\2\u0268\u0266\3\2\2\2\u0268\u0269\3\2\2\2\u0269")
        buf.write("\u0277\3\2\2\2\u026a\u0268\3\2\2\2\u026b\u026c\7L\2\2")
        buf.write("\u026c\u026d\7~\2\2\u026d\u026e\7Q\2\2\u026e\u026f\5.")
        buf.write("\30\2\u026f\u0270\7\62\2\2\u0270\u0271\7\3\2\2\u0271\u0272")
        buf.write("\7\22\2\2\u0272\u0274\5.\30\2\u0273\u0275\7\3\2\2\u0274")
        buf.write("\u0273\3\2\2\2\u0274\u0275\3\2\2\2\u0275\u0277\3\2\2\2")
        buf.write("\u0276\u01cf\3\2\2\2\u0276\u01e6\3\2\2\2\u0276\u01fe\3")
        buf.write("\2\2\2\u0276\u021a\3\2\2\2\u0276\u0253\3\2\2\2\u0276\u026b")
        buf.write("\3\2\2\2\u0277!\3\2\2\2\u0278\u027b\7i\2\2\u0279\u027c")
        buf.write("\5\66\34\2\u027a\u027c\7\b\2\2\u027b\u0279\3\2\2\2\u027b")
        buf.write("\u027a\3\2\2\2\u027c\u027d\3\2\2\2\u027d\u0284\7\62\2")
        buf.write("\2\u027e\u027f\7\3\2\2\u027f\u0282\7\22\2\2\u0280\u0283")
        buf.write("\5\4\3\2\u0281\u0283\7:\2\2\u0282\u0280\3\2\2\2\u0282")
        buf.write("\u0281\3\2\2\2\u0283\u0285\3\2\2\2\u0284\u027e\3\2\2\2")
        buf.write("\u0285\u0286\3\2\2\2\u0286\u0284\3\2\2\2\u0286\u0287\3")
        buf.write("\2\2\2\u0287#\3\2\2\2\u0288\u028c\5&\24\2\u0289\u028b")
        buf.write("\5\34\17\2\u028a\u0289\3\2\2\2\u028b\u028e\3\2\2\2\u028c")
        buf.write("\u028a\3\2\2\2\u028c\u028d\3\2\2\2\u028d\u028f\3\2\2\2")
        buf.write("\u028e\u028c\3\2\2\2\u028f\u0290\5\36\20\2\u0290%\3\2")
        buf.write("\2\2\u0291\u0292\7h\2\2\u0292\u0293\5\66\34\2\u0293\u029c")
        buf.write("\7\62\2\2\u0294\u0295\7\3\2\2\u0295\u0297\7\22\2\2\u0296")
        buf.write("\u0294\3\2\2\2\u0296\u0297\3\2\2\2\u0297\u029a\3\2\2\2")
        buf.write("\u0298\u029b\5\4\3\2\u0299\u029b\7:\2\2\u029a\u0298\3")
        buf.write("\2\2\2\u029a\u0299\3\2\2\2\u029b\u029d\3\2\2\2\u029c\u0296")
        buf.write("\3\2\2\2\u029d\u029e\3\2\2\2\u029e\u029c\3\2\2\2\u029e")
        buf.write("\u029f\3\2\2\2\u029f\'\3\2\2\2\u02a0\u02a1\7]\2\2\u02a1")
        buf.write("\u02a5\7~\2\2\u02a2\u02a3\7o\2\2\u02a3\u02a4\7~\2\2\u02a4")
        buf.write("\u02a6\7p\2\2\u02a5\u02a2\3\2\2\2\u02a5\u02a6\3\2\2\2")
        buf.write("\u02a6\u02a7\3\2\2\2\u02a7\u02b2\7k\2\2\u02a8\u02ad\7")
        buf.write("~\2\2\u02a9\u02aa\7\62\2\2\u02aa\u02ae\5@!\2\u02ab\u02ac")
        buf.write("\7%\2\2\u02ac\u02ae\5> \2\u02ad\u02a9\3\2\2\2\u02ad\u02ab")
        buf.write("\3\2\2\2\u02ae\u02b0\3\2\2\2\u02af\u02b1\7\63\2\2\u02b0")
        buf.write("\u02af\3\2\2\2\u02b0\u02b1\3\2\2\2\u02b1\u02b3\3\2\2\2")
        buf.write("\u02b2\u02a8\3\2\2\2\u02b3\u02b4\3\2\2\2\u02b4\u02b2\3")
        buf.write("\2\2\2\u02b4\u02b5\3\2\2\2\u02b5\u02b6\3\2\2\2\u02b6\u02b9")
        buf.write("\7l\2\2\u02b7\u02b8\7\62\2\2\u02b8\u02ba\5@!\2\u02b9\u02b7")
        buf.write("\3\2\2\2\u02b9\u02ba\3\2\2\2\u02ba\u02bb\3\2\2\2\u02bb")
        buf.write("\u02e1\7%\2\2\u02bc\u02bd\7\3\2\2\u02bd\u02be\7\22\2\2")
        buf.write("\u02be\u02c0\5\4\3\2\u02bf\u02bc\3\2\2\2\u02c0\u02c1\3")
        buf.write("\2\2\2\u02c1\u02bf\3\2\2\2\u02c1\u02c2\3\2\2\2\u02c2\u02e2")
        buf.write("\3\2\2\2\u02c3\u02c7\5\f\7\2\u02c4\u02c6\7\3\2\2\u02c5")
        buf.write("\u02c4\3\2\2\2\u02c6\u02c9\3\2\2\2\u02c7\u02c5\3\2\2\2")
        buf.write("\u02c7\u02c8\3\2\2\2\u02c8\u02cf\3\2\2\2\u02c9\u02c7\3")
        buf.write("\2\2\2\u02ca\u02cb\7\3\2\2\u02cb\u02cc\7\22\2\2\u02cc")
        buf.write("\u02ce\5\4\3\2\u02cd\u02ca\3\2\2\2\u02ce\u02d1\3\2\2\2")
        buf.write("\u02cf\u02cd\3\2\2\2\u02cf\u02d0\3\2\2\2\u02d0\u02e2\3")
        buf.write("\2\2\2\u02d1\u02cf\3\2\2\2\u02d2\u02d6\5\16\b\2\u02d3")
        buf.write("\u02d5\7\3\2\2\u02d4\u02d3\3\2\2\2\u02d5\u02d8\3\2\2\2")
        buf.write("\u02d6\u02d4\3\2\2\2\u02d6\u02d7\3\2\2\2\u02d7\u02de\3")
        buf.write("\2\2\2\u02d8\u02d6\3\2\2\2\u02d9\u02da\7\3\2\2\u02da\u02db")
        buf.write("\7\22\2\2\u02db\u02dd\5\4\3\2\u02dc\u02d9\3\2\2\2\u02dd")
        buf.write("\u02e0\3\2\2\2\u02de\u02dc\3\2\2\2\u02de\u02df\3\2\2\2")
        buf.write("\u02df\u02e2\3\2\2\2\u02e0\u02de\3\2\2\2\u02e1\u02bf\3")
        buf.write("\2\2\2\u02e1\u02c3\3\2\2\2\u02e1\u02d2\3\2\2\2\u02e2\u02e5")
        buf.write("\3\2\2\2\u02e3\u02e4\7a\2\2\u02e4\u02e6\5> \2\u02e5\u02e3")
        buf.write("\3\2\2\2\u02e5\u02e6\3\2\2\2\u02e6\u02e8\3\2\2\2\u02e7")
        buf.write("\u02e9\7\3\2\2\u02e8\u02e7\3\2\2\2\u02e8\u02e9\3\2\2\2")
        buf.write("\u02e9\u0380\3\2\2\2\u02ea\u02eb\7]\2\2\u02eb\u02ec\7")
        buf.write("\t\2\2\u02ec\u02ed\7k\2\2\u02ed\u02ee\7~\2\2\u02ee\u02ef")
        buf.write("\7\62\2\2\u02ef\u02f0\7]\2\2\u02f0\u02f1\7k\2\2\u02f1")
        buf.write("\u02f2\7~\2\2\u02f2\u02f3\7\62\2\2\u02f3\u02f4\5@!\2\u02f4")
        buf.write("\u02f5\7l\2\2\u02f5\u02f8\7l\2\2\u02f6\u02f7\7\62\2\2")
        buf.write("\u02f7\u02f9\5@!\2\u02f8\u02f6\3\2\2\2\u02f8\u02f9\3\2")
        buf.write("\2\2\u02f9\u02fa\3\2\2\2\u02fa\u0320\7%\2\2\u02fb\u02fc")
        buf.write("\7\3\2\2\u02fc\u02fd\7\22\2\2\u02fd\u02ff\5\4\3\2\u02fe")
        buf.write("\u02fb\3\2\2\2\u02ff\u0300\3\2\2\2\u0300\u02fe\3\2\2\2")
        buf.write("\u0300\u0301\3\2\2\2\u0301\u0321\3\2\2\2\u0302\u0306\5")
        buf.write("\f\7\2\u0303\u0305\7\3\2\2\u0304\u0303\3\2\2\2\u0305\u0308")
        buf.write("\3\2\2\2\u0306\u0304\3\2\2\2\u0306\u0307\3\2\2\2\u0307")
        buf.write("\u030e\3\2\2\2\u0308\u0306\3\2\2\2\u0309\u030a\7\3\2\2")
        buf.write("\u030a\u030b\7\22\2\2\u030b\u030d\5\4\3\2\u030c\u0309")
        buf.write("\3\2\2\2\u030d\u0310\3\2\2\2\u030e\u030c\3\2\2\2\u030e")
        buf.write("\u030f\3\2\2\2\u030f\u0321\3\2\2\2\u0310\u030e\3\2\2\2")
        buf.write("\u0311\u0315\5\16\b\2\u0312\u0314\7\3\2\2\u0313\u0312")
        buf.write("\3\2\2\2\u0314\u0317\3\2\2\2\u0315\u0313\3\2\2\2\u0315")
        buf.write("\u0316\3\2\2\2\u0316\u031d\3\2\2\2\u0317\u0315\3\2\2\2")
        buf.write("\u0318\u0319\7\3\2\2\u0319\u031a\7\22\2\2\u031a\u031c")
        buf.write("\5\4\3\2\u031b\u0318\3\2\2\2\u031c\u031f\3\2\2\2\u031d")
        buf.write("\u031b\3\2\2\2\u031d\u031e\3\2\2\2\u031e\u0321\3\2\2\2")
        buf.write("\u031f\u031d\3\2\2\2\u0320\u02fe\3\2\2\2\u0320\u0302\3")
        buf.write("\2\2\2\u0320\u0311\3\2\2\2\u0321\u0322\3\2\2\2\u0322\u0323")
        buf.write("\7a\2\2\u0323\u0324\5> \2\u0324\u0326\3\2\2\2\u0325\u0327")
        buf.write("\7\3\2\2\u0326\u0325\3\2\2\2\u0326\u0327\3\2\2\2\u0327")
        buf.write("\u0380\3\2\2\2\u0328\u0329\7]\2\2\u0329\u032d\7~\2\2\u032a")
        buf.write("\u032b\7o\2\2\u032b\u032c\7~\2\2\u032c\u032e\7p\2\2\u032d")
        buf.write("\u032a\3\2\2\2\u032d\u032e\3\2\2\2\u032e\u032f\3\2\2\2")
        buf.write("\u032f\u0330\7k\2\2\u0330\u0331\7~\2\2\u0331\u0332\7\62")
        buf.write("\2\2\u0332\u0333\7\27\2\2\u0333\u0334\7~\2\2\u0334\u0335")
        buf.write("\7o\2\2\u0335\u0336\7~\2\2\u0336\u0348\7p\2\2\u0337\u0338")
        buf.write("\7\63\2\2\u0338\u0339\7~\2\2\u0339\u0344\7%\2\2\u033a")
        buf.write("\u033c\7(\2\2\u033b\u033a\3\2\2\2\u033b\u033c\3\2\2\2")
        buf.write("\u033c\u033e\3\2\2\2\u033d\u033f\7\21\2\2\u033e\u033d")
        buf.write("\3\2\2\2\u033f\u0340\3\2\2\2\u0340\u033e\3\2\2\2\u0340")
        buf.write("\u0341\3\2\2\2\u0341\u0345\3\2\2\2\u0342\u0345\7~\2\2")
        buf.write("\u0343\u0345\5P)\2\u0344\u033b\3\2\2\2\u0344\u0342\3\2")
        buf.write("\2\2\u0344\u0343\3\2\2\2\u0345\u0347\3\2\2\2\u0346\u0337")
        buf.write("\3\2\2\2\u0347\u034a\3\2\2\2\u0348\u0346\3\2\2\2\u0348")
        buf.write("\u0349\3\2\2\2\u0349\u034b\3\2\2\2\u034a\u0348\3\2\2\2")
        buf.write("\u034b\u034e\7l\2\2\u034c\u034d\7\62\2\2\u034d\u034f\5")
        buf.write("@!\2\u034e\u034c\3\2\2\2\u034e\u034f\3\2\2\2\u034f\u0350")
        buf.write("\3\2\2\2\u0350\u0376\7%\2\2\u0351\u0352\7\3\2\2\u0352")
        buf.write("\u0353\7\22\2\2\u0353\u0355\5\4\3\2\u0354\u0351\3\2\2")
        buf.write("\2\u0355\u0356\3\2\2\2\u0356\u0354\3\2\2\2\u0356\u0357")
        buf.write("\3\2\2\2\u0357\u0377\3\2\2\2\u0358\u035c\5\f\7\2\u0359")
        buf.write("\u035b\7\3\2\2\u035a\u0359\3\2\2\2\u035b\u035e\3\2\2\2")
        buf.write("\u035c\u035a\3\2\2\2\u035c\u035d\3\2\2\2\u035d\u0364\3")
        buf.write("\2\2\2\u035e\u035c\3\2\2\2\u035f\u0360\7\3\2\2\u0360\u0361")
        buf.write("\7\22\2\2\u0361\u0363\5\4\3\2\u0362\u035f\3\2\2\2\u0363")
        buf.write("\u0366\3\2\2\2\u0364\u0362\3\2\2\2\u0364\u0365\3\2\2\2")
        buf.write("\u0365\u0377\3\2\2\2\u0366\u0364\3\2\2\2\u0367\u036b\5")
        buf.write("\16\b\2\u0368\u036a\7\3\2\2\u0369\u0368\3\2\2\2\u036a")
        buf.write("\u036d\3\2\2\2\u036b\u0369\3\2\2\2\u036b\u036c\3\2\2\2")
        buf.write("\u036c\u0373\3\2\2\2\u036d\u036b\3\2\2\2\u036e\u036f\7")
        buf.write("\3\2\2\u036f\u0370\7\22\2\2\u0370\u0372\5\4\3\2\u0371")
        buf.write("\u036e\3\2\2\2\u0372\u0375\3\2\2\2\u0373\u0371\3\2\2\2")
        buf.write("\u0373\u0374\3\2\2\2\u0374\u0377\3\2\2\2\u0375\u0373\3")
        buf.write("\2\2\2\u0376\u0354\3\2\2\2\u0376\u0358\3\2\2\2\u0376\u0367")
        buf.write("\3\2\2\2\u0377\u037a\3\2\2\2\u0378\u0379\7a\2\2\u0379")
        buf.write("\u037b\5> \2\u037a\u0378\3\2\2\2\u037a\u037b\3\2\2\2\u037b")
        buf.write("\u037d\3\2\2\2\u037c\u037e\7\3\2\2\u037d\u037c\3\2\2\2")
        buf.write("\u037d\u037e\3\2\2\2\u037e\u0380\3\2\2\2\u037f\u02a0\3")
        buf.write("\2\2\2\u037f\u02ea\3\2\2\2\u037f\u0328\3\2\2\2\u0380)")
        buf.write("\3\2\2\2\u0381\u0382\79\2\2\u0382\u0383\7~\2\2\u0383\u0387")
        buf.write("\7\62\2\2\u0384\u0385\7\3\2\2\u0385\u0386\7\22\2\2\u0386")
        buf.write("\u0388\5\4\3\2\u0387\u0384\3\2\2\2\u0388\u0389\3\2\2\2")
        buf.write("\u0389\u0387\3\2\2\2\u0389\u038a\3\2\2\2\u038a+\3\2\2")
        buf.write("\2\u038b\u038c\7f\2\2\u038c\u039f\7\3\2\2\u038d\u038e")
        buf.write("\7\22\2\2\u038e\u038f\7~\2\2\u038f\u0390\7%\2\2\u0390")
        buf.write("\u0391\7\n\2\2\u0391\u0398\7o\2\2\u0392\u0399\7\u009a")
        buf.write("\2\2\u0393\u0395\7\21\2\2\u0394\u0393\3\2\2\2\u0395\u0396")
        buf.write("\3\2\2\2\u0396\u0394\3\2\2\2\u0396\u0397\3\2\2\2\u0397")
        buf.write("\u0399\3\2\2\2\u0398\u0392\3\2\2\2\u0398\u0394\3\2\2\2")
        buf.write("\u0399\u039a\3\2\2\2\u039a\u039b\7\63\2\2\u039b\u039c")
        buf.write("\5@!\2\u039c\u039d\7p\2\2\u039d\u039e\7\3\2\2\u039e\u03a0")
        buf.write("\3\2\2\2\u039f\u038d\3\2\2\2\u03a0\u03a1\3\2\2\2\u03a1")
        buf.write("\u039f\3\2\2\2\u03a1\u03a2\3\2\2\2\u03a2-\3\2\2\2\u03a3")
        buf.write("\u03a4\7~\2\2\u03a4\u03ac\7k\2\2\u03a5\u03ad\7~\2\2\u03a6")
        buf.write("\u03a8\7\21\2\2\u03a7\u03a6\3\2\2\2\u03a8\u03a9\3\2\2")
        buf.write("\2\u03a9\u03a7\3\2\2\2\u03a9\u03aa\3\2\2\2\u03aa\u03ad")
        buf.write("\3\2\2\2\u03ab\u03ad\5P)\2\u03ac\u03a5\3\2\2\2\u03ac\u03a7")
        buf.write("\3\2\2\2\u03ac\u03ab\3\2\2\2\u03ad\u03ba\3\2\2\2\u03ae")
        buf.write("\u03b6\t\4\2\2\u03af\u03b7\7~\2\2\u03b0\u03b2\7\21\2\2")
        buf.write("\u03b1\u03b0\3\2\2\2\u03b2\u03b3\3\2\2\2\u03b3\u03b1\3")
        buf.write("\2\2\2\u03b3\u03b4\3\2\2\2\u03b4\u03b7\3\2\2\2\u03b5\u03b7")
        buf.write("\5P)\2\u03b6\u03af\3\2\2\2\u03b6\u03b1\3\2\2\2\u03b6\u03b5")
        buf.write("\3\2\2\2\u03b7\u03b9\3\2\2\2\u03b8\u03ae\3\2\2\2\u03b9")
        buf.write("\u03bc\3\2\2\2\u03ba\u03b8\3\2\2\2\u03ba\u03bb\3\2\2\2")
        buf.write("\u03bb\u03bd\3\2\2\2\u03bc\u03ba\3\2\2\2\u03bd\u03eb\7")
        buf.write("l\2\2\u03be\u03c6\7k\2\2\u03bf\u03c7\7~\2\2\u03c0\u03c2")
        buf.write("\7\21\2\2\u03c1\u03c0\3\2\2\2\u03c2\u03c3\3\2\2\2\u03c3")
        buf.write("\u03c1\3\2\2\2\u03c3\u03c4\3\2\2\2\u03c4\u03c7\3\2\2\2")
        buf.write("\u03c5\u03c7\5P)\2\u03c6\u03bf\3\2\2\2\u03c6\u03c1\3\2")
        buf.write("\2\2\u03c6\u03c5\3\2\2\2\u03c7\u03d4\3\2\2\2\u03c8\u03d0")
        buf.write("\t\4\2\2\u03c9\u03d1\7~\2\2\u03ca\u03cc\7\21\2\2\u03cb")
        buf.write("\u03ca\3\2\2\2\u03cc\u03cd\3\2\2\2\u03cd\u03cb\3\2\2\2")
        buf.write("\u03cd\u03ce\3\2\2\2\u03ce\u03d1\3\2\2\2\u03cf\u03d1\5")
        buf.write("P)\2\u03d0\u03c9\3\2\2\2\u03d0\u03cb\3\2\2\2\u03d0\u03cf")
        buf.write("\3\2\2\2\u03d1\u03d3\3\2\2\2\u03d2\u03c8\3\2\2\2\u03d3")
        buf.write("\u03d6\3\2\2\2\u03d4\u03d2\3\2\2\2\u03d4\u03d5\3\2\2\2")
        buf.write("\u03d5\u03d7\3\2\2\2\u03d6\u03d4\3\2\2\2\u03d7\u03d8\7")
        buf.write("l\2\2\u03d8\u03eb\7\u0098\2\2\u03d9\u03da\7~\2\2\u03da")
        buf.write("\u03e8\7~\2\2\u03db\u03dc\7o\2\2\u03dc\u03dd\7~\2\2\u03dd")
        buf.write("\u03e5\7p\2\2\u03de\u03df\7\63\2\2\u03df\u03e0\7~\2\2")
        buf.write("\u03e0\u03e1\7o\2\2\u03e1\u03e2\7~\2\2\u03e2\u03e4\7p")
        buf.write("\2\2\u03e3\u03de\3\2\2\2\u03e4\u03e7\3\2\2\2\u03e5\u03e3")
        buf.write("\3\2\2\2\u03e5\u03e6\3\2\2\2\u03e6\u03e9\3\2\2\2\u03e7")
        buf.write("\u03e5\3\2\2\2\u03e8\u03db\3\2\2\2\u03e8\u03e9\3\2\2\2")
        buf.write("\u03e9\u03eb\3\2\2\2\u03ea\u03a3\3\2\2\2\u03ea\u03be\3")
        buf.write("\2\2\2\u03ea\u03d9\3\2\2\2\u03eb/\3\2\2\2\u03ec\u03ed")
        buf.write("\7\u0098\2\2\u03ed\u03ee\7k\2\2\u03ee\u03f3\5> \2\u03ef")
        buf.write("\u03f0\7\63\2\2\u03f0\u03f2\5> \2\u03f1\u03ef\3\2\2\2")
        buf.write("\u03f2\u03f5\3\2\2\2\u03f3\u03f1\3\2\2\2\u03f3\u03f4\3")
        buf.write("\2\2\2\u03f4\u03f6\3\2\2\2\u03f5\u03f3\3\2\2\2\u03f6\u03f7")
        buf.write("\7l\2\2\u03f7\61\3\2\2\2\u03f8\u03f9\7\t\2\2\u03f9\u03fa")
        buf.write("\7k\2\2\u03fa\u03fb\7~\2\2\u03fb\u03fc\7l\2\2\u03fc\63")
        buf.write("\3\2\2\2\u03fd\u03fe\7P\2\2\u03fe\u0403\7~\2\2\u03ff\u0400")
        buf.write("\7\63\2\2\u0400\u0402\7~\2\2\u0401\u03ff\3\2\2\2\u0402")
        buf.write("\u0405\3\2\2\2\u0403\u0401\3\2\2\2\u0403\u0404\3\2\2\2")
        buf.write("\u0404\u0408\3\2\2\2\u0405\u0403\3\2\2\2\u0406\u0407\7")
        buf.write("M\2\2\u0407\u0409\7~\2\2\u0408\u0406\3\2\2\2\u0408\u0409")
        buf.write("\3\2\2\2\u0409\u040f\3\2\2\2\u040a\u040b\7M\2\2\u040b")
        buf.write("\u040c\7~\2\2\u040c\u040d\7P\2\2\u040d\u040f\7~\2\2\u040e")
        buf.write("\u03fd\3\2\2\2\u040e\u040a\3\2\2\2\u040f\65\3\2\2\2\u0410")
        buf.write("\u0415\58\35\2\u0411\u0412\t\5\2\2\u0412\u0414\58\35\2")
        buf.write("\u0413\u0411\3\2\2\2\u0414\u0417\3\2\2\2\u0415\u0413\3")
        buf.write("\2\2\2\u0415\u0416\3\2\2\2\u0416\67\3\2\2\2\u0417\u0415")
        buf.write("\3\2\2\2\u0418\u0424\5> \2\u0419\u041b\7-\2\2\u041a\u041c")
        buf.write("\7%\2\2\u041b\u041a\3\2\2\2\u041b\u041c\3\2\2\2\u041c")
        buf.write("\u0425\3\2\2\2\u041d\u0425\7\13\2\2\u041e\u0425\7\f\2")
        buf.write("\2\u041f\u0421\7.\2\2\u0420\u0422\7%\2\2\u0421\u0420\3")
        buf.write("\2\2\2\u0421\u0422\3\2\2\2\u0422\u0425\3\2\2\2\u0423\u0425")
        buf.write("\7$\2\2\u0424\u0419\3\2\2\2\u0424\u041d\3\2\2\2\u0424")
        buf.write("\u041e\3\2\2\2\u0424\u041f\3\2\2\2\u0424\u0423\3\2\2\2")
        buf.write("\u0425\u0426\3\2\2\2\u0426\u0427\5> \2\u0427\u042c\3\2")
        buf.write("\2\2\u0428\u042c\7\b\2\2\u0429\u042c\7\r\2\2\u042a\u042c")
        buf.write("\7~\2\2\u042b\u0418\3\2\2\2\u042b\u0428\3\2\2\2\u042b")
        buf.write("\u0429\3\2\2\2\u042b\u042a\3\2\2\2\u042c9\3\2\2\2\u042d")
        buf.write("\u042f\7s\2\2\u042e\u042d\3\2\2\2\u042f\u0430\3\2\2\2")
        buf.write("\u0430\u042e\3\2\2\2\u0430\u0431\3\2\2\2\u0431;\3\2\2")
        buf.write("\2\u0432\u0434\7t\2\2\u0433\u0432\3\2\2\2\u0434\u0435")
        buf.write("\3\2\2\2\u0435\u0433\3\2\2\2\u0435\u0436\3\2\2\2\u0436")
        buf.write("=\3\2\2\2\u0437\u04a2\7\b\2\2\u0438\u04a2\7\r\2\2\u0439")
        buf.write("\u04a2\7t\2\2\u043a\u043c\7\21\2\2\u043b\u043a\3\2\2\2")
        buf.write("\u043c\u043d\3\2\2\2\u043d\u043b\3\2\2\2\u043d\u043e\3")
        buf.write("\2\2\2\u043e\u0442\3\2\2\2\u043f\u0442\7~\2\2\u0440\u0442")
        buf.write("\5P)\2\u0441\u043b\3\2\2\2\u0441\u043f\3\2\2\2\u0441\u0440")
        buf.write("\3\2\2\2\u0442\u044f\3\2\2\2\u0443\u044b\t\6\2\2\u0444")
        buf.write("\u0446\7\21\2\2\u0445\u0444\3\2\2\2\u0446\u0447\3\2\2")
        buf.write("\2\u0447\u0445\3\2\2\2\u0447\u0448\3\2\2\2\u0448\u044c")
        buf.write("\3\2\2\2\u0449\u044c\7~\2\2\u044a\u044c\5P)\2\u044b\u0445")
        buf.write("\3\2\2\2\u044b\u0449\3\2\2\2\u044b\u044a\3\2\2\2\u044c")
        buf.write("\u044e\3\2\2\2\u044d\u0443\3\2\2\2\u044e\u0451\3\2\2\2")
        buf.write("\u044f\u044d\3\2\2\2\u044f\u0450\3\2\2\2\u0450\u04a2\3")
        buf.write("\2\2\2\u0451\u044f\3\2\2\2\u0452\u0453\7~\2\2\u0453\u045d")
        buf.write("\7o\2\2\u0454\u045e\7~\2\2\u0455\u0457\7(\2\2\u0456\u0455")
        buf.write("\3\2\2\2\u0456\u0457\3\2\2\2\u0457\u0459\3\2\2\2\u0458")
        buf.write("\u045a\7\21\2\2\u0459\u0458\3\2\2\2\u045a\u045b\3\2\2")
        buf.write("\2\u045b\u0459\3\2\2\2\u045b\u045c\3\2\2\2\u045c\u045e")
        buf.write("\3\2\2\2\u045d\u0454\3\2\2\2\u045d\u0456\3\2\2\2\u045e")
        buf.write("\u0471\3\2\2\2\u045f\u046d\t\7\2\2\u0460\u0462\7(\2\2")
        buf.write("\u0461\u0460\3\2\2\2\u0461\u0462\3\2\2\2\u0462\u0463\3")
        buf.write("\2\2\2\u0463\u046e\5P)\2\u0464\u0466\7(\2\2\u0465\u0464")
        buf.write("\3\2\2\2\u0465\u0466\3\2\2\2\u0466\u0468\3\2\2\2\u0467")
        buf.write("\u0469\7\21\2\2\u0468\u0467\3\2\2\2\u0469\u046a\3\2\2")
        buf.write("\2\u046a\u0468\3\2\2\2\u046a\u046b\3\2\2\2\u046b\u046e")
        buf.write("\3\2\2\2\u046c\u046e\7~\2\2\u046d\u0461\3\2\2\2\u046d")
        buf.write("\u0465\3\2\2\2\u046d\u046c\3\2\2\2\u046e\u0470\3\2\2\2")
        buf.write("\u046f\u045f\3\2\2\2\u0470\u0473\3\2\2\2\u0471\u046f\3")
        buf.write("\2\2\2\u0471\u0472\3\2\2\2\u0472\u0474\3\2\2\2\u0473\u0471")
        buf.write("\3\2\2\2\u0474\u04a2\7p\2\2\u0475\u047a\5.\30\2\u0476")
        buf.write("\u0477\t\b\2\2\u0477\u0479\5.\30\2\u0478\u0476\3\2\2\2")
        buf.write("\u0479\u047c\3\2\2\2\u047a\u0478\3\2\2\2\u047a\u047b\3")
        buf.write("\2\2\2\u047b\u04a2\3\2\2\2\u047c\u047a\3\2\2\2\u047d\u04a2")
        buf.write("\5P)\2\u047e\u049d\7o\2\2\u047f\u0481\7(\2\2\u0480\u047f")
        buf.write("\3\2\2\2\u0480\u0481\3\2\2\2\u0481\u0482\3\2\2\2\u0482")
        buf.write("\u0489\5P)\2\u0483\u0485\7\21\2\2\u0484\u0483\3\2\2\2")
        buf.write("\u0485\u0486\3\2\2\2\u0486\u0484\3\2\2\2\u0486\u0487\3")
        buf.write("\2\2\2\u0487\u0489\3\2\2\2\u0488\u0480\3\2\2\2\u0488\u0484")
        buf.write("\3\2\2\2\u0489\u0498\3\2\2\2\u048a\u0494\7\63\2\2\u048b")
        buf.write("\u048d\7(\2\2\u048c\u048b\3\2\2\2\u048c\u048d\3\2\2\2")
        buf.write("\u048d\u048e\3\2\2\2\u048e\u0495\5P)\2\u048f\u0491\7\21")
        buf.write("\2\2\u0490\u048f\3\2\2\2\u0491\u0492\3\2\2\2\u0492\u0490")
        buf.write("\3\2\2\2\u0492\u0493\3\2\2\2\u0493\u0495\3\2\2\2\u0494")
        buf.write("\u048c\3\2\2\2\u0494\u0490\3\2\2\2\u0495\u0497\3\2\2\2")
        buf.write("\u0496\u048a\3\2\2\2\u0497\u049a\3\2\2\2\u0498\u0496\3")
        buf.write("\2\2\2\u0498\u0499\3\2\2\2\u0499\u049c\3\2\2\2\u049a\u0498")
        buf.write("\3\2\2\2\u049b\u0488\3\2\2\2\u049c\u049f\3\2\2\2\u049d")
        buf.write("\u049b\3\2\2\2\u049d\u049e\3\2\2\2\u049e\u04a0\3\2\2\2")
        buf.write("\u049f\u049d\3\2\2\2\u04a0\u04a2\7p\2\2\u04a1\u0437\3")
        buf.write("\2\2\2\u04a1\u0438\3\2\2\2\u04a1\u0439\3\2\2\2\u04a1\u0441")
        buf.write("\3\2\2\2\u04a1\u0452\3\2\2\2\u04a1\u0475\3\2\2\2\u04a1")
        buf.write("\u047d\3\2\2\2\u04a1\u047e\3\2\2\2\u04a2?\3\2\2\2\u04a3")
        buf.write("\u04a4\t\t\2\2\u04a4A\3\2\2\2\u04a5\u04a9\5H%\2\u04a6")
        buf.write("\u04a8\5D#\2\u04a7\u04a6\3\2\2\2\u04a8\u04ab\3\2\2\2\u04a9")
        buf.write("\u04a7\3\2\2\2\u04a9\u04aa\3\2\2\2\u04aa\u04af\3\2\2\2")
        buf.write("\u04ab\u04a9\3\2\2\2\u04ac\u04ae\5F$\2\u04ad\u04ac\3\2")
        buf.write("\2\2\u04ae\u04b1\3\2\2\2\u04af\u04ad\3\2\2\2\u04af\u04b0")
        buf.write("\3\2\2\2\u04b0\u04b2\3\2\2\2\u04b1\u04af\3\2\2\2\u04b2")
        buf.write("\u04b3\5\36\20\2\u04b3C\3\2\2\2\u04b4\u04b6\7\22\2\2\u04b5")
        buf.write("\u04b4\3\2\2\2\u04b5\u04b6\3\2\2\2\u04b6\u04b7\3\2\2\2")
        buf.write("\u04b7\u04b8\7\"\2\2\u04b8\u04bd\t\n\2\2\u04b9\u04ba\7")
        buf.write("\63\2\2\u04ba\u04bc\t\n\2\2\u04bb\u04b9\3\2\2\2\u04bc")
        buf.write("\u04bf\3\2\2\2\u04bd\u04bb\3\2\2\2\u04bd\u04be\3\2\2\2")
        buf.write("\u04be\u04c0\3\2\2\2\u04bf\u04bd\3\2\2\2\u04c0\u04cd\7")
        buf.write("\62\2\2\u04c1\u04c2\7\3\2\2\u04c2\u04c4\7\22\2\2\u04c3")
        buf.write("\u04c1\3\2\2\2\u04c3\u04c4\3\2\2\2\u04c4\u04c8\3\2\2\2")
        buf.write("\u04c5\u04c9\5\4\3\2\u04c6\u04c7\7a\2\2\u04c7\u04c9\5")
        buf.write("> \2\u04c8\u04c5\3\2\2\2\u04c8\u04c6\3\2\2\2\u04c9\u04cb")
        buf.write("\3\2\2\2\u04ca\u04cc\7\3\2\2\u04cb\u04ca\3\2\2\2\u04cb")
        buf.write("\u04cc\3\2\2\2\u04cc\u04ce\3\2\2\2\u04cd\u04c3\3\2\2\2")
        buf.write("\u04ce\u04cf\3\2\2\2\u04cf\u04cd\3\2\2\2\u04cf\u04d0\3")
        buf.write("\2\2\2\u04d0E\3\2\2\2\u04d1\u04d2\7E\2\2\u04d2\u04d3\5")
        buf.write("> \2\u04d3\u04d5\7\62\2\2\u04d4\u04d6\7z\2\2\u04d5\u04d4")
        buf.write("\3\2\2\2\u04d5\u04d6\3\2\2\2\u04d6\u04dc\3\2\2\2\u04d7")
        buf.write("\u04d9\7\3\2\2\u04d8\u04da\7\22\2\2\u04d9\u04d8\3\2\2")
        buf.write("\2\u04d9\u04da\3\2\2\2\u04da\u04db\3\2\2\2\u04db\u04dd")
        buf.write("\5\4\3\2\u04dc\u04d7\3\2\2\2\u04dd\u04de\3\2\2\2\u04de")
        buf.write("\u04dc\3\2\2\2\u04de\u04df\3\2\2\2\u04dfG\3\2\2\2\u04e0")
        buf.write("\u04e1\7;\2\2\u04e1\u04e3\7~\2\2\u04e2\u04e4\7z\2\2\u04e3")
        buf.write("\u04e2\3\2\2\2\u04e3\u04e4\3\2\2\2\u04e4\u04e6\3\2\2\2")
        buf.write("\u04e5\u04e7\7\3\2\2\u04e6\u04e5\3\2\2\2\u04e6\u04e7\3")
        buf.write("\2\2\2\u04e7I\3\2\2\2\u04e8\u04e9\7\3\2\2\u04e9K\3\2\2")
        buf.write("\2\u04ea\u04ec\7\22\2\2\u04eb\u04ea\3\2\2\2\u04eb\u04ec")
        buf.write("\3\2\2\2\u04ec\u04ed\3\2\2\2\u04ed\u04ee\7z\2\2\u04ee")
        buf.write("M\3\2\2\2\u04ef\u04f0\t\13\2\2\u04f0O\3\2\2\2\u04f1\u04f2")
        buf.write("\t\f\2\2\u04f2Q\3\2\2\2\u00cbV[pu|\u0082\u0087\u008c\u0092")
        buf.write("\u0098\u00a4\u00a9\u00ac\u00b0\u00b5\u00b8\u00bc\u00c0")
        buf.write("\u00c2\u00c7\u00cb\u00cf\u00d3\u00d8\u00dc\u00e0\u00e4")
        buf.write("\u00e9\u00ed\u00f2\u00f6\u00ff\u010a\u010d\u0113\u0117")
        buf.write("\u011b\u0121\u0125\u0129\u0131\u013f\u0143\u0147\u0151")
        buf.write("\u0153\u0158\u015c\u0160\u0168\u0175\u017a\u017e\u0187")
        buf.write("\u018b\u0191\u0195\u019b\u019e\u01a4\u01b1\u01b6\u01b9")
        buf.write("\u01c2\u01c4\u01c9\u01cd\u01d7\u01de\u01e3\u01eb\u01ef")
        buf.write("\u01f6\u01fb\u0204\u020b\u0212\u0217\u0220\u022a\u022c")
        buf.write("\u0233\u0235\u0239\u023e\u0244\u024b\u0250\u025c\u0263")
        buf.write("\u0268\u0274\u0276\u027b\u0282\u0286\u028c\u0296\u029a")
        buf.write("\u029e\u02a5\u02ad\u02b0\u02b4\u02b9\u02c1\u02c7\u02cf")
        buf.write("\u02d6\u02de\u02e1\u02e5\u02e8\u02f8\u0300\u0306\u030e")
        buf.write("\u0315\u031d\u0320\u0326\u032d\u033b\u0340\u0344\u0348")
        buf.write("\u034e\u0356\u035c\u0364\u036b\u0373\u0376\u037a\u037d")
        buf.write("\u037f\u0389\u0396\u0398\u03a1\u03a9\u03ac\u03b3\u03b6")
        buf.write("\u03ba\u03c3\u03c6\u03cd\u03d0\u03d4\u03e5\u03e8\u03ea")
        buf.write("\u03f3\u0403\u0408\u040e\u0415\u041b\u0421\u0424\u042b")
        buf.write("\u0430\u0435\u043d\u0441\u0447\u044b\u044f\u0456\u045b")
        buf.write("\u045d\u0461\u0465\u046a\u046d\u0471\u047a\u0480\u0486")
        buf.write("\u0488\u048c\u0492\u0494\u0498\u049d\u04a1\u04a9\u04af")
        buf.write("\u04b5\u04bd\u04c3\u04c8\u04cb\u04cf\u04d5\u04d9\u04de")
        buf.write("\u04e3\u04e6\u04eb")
        return buf.getvalue()


class nimParser ( Parser ):

    grammarFileName = "nim.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'\n'", "'\r'", "'#'", "'inc'", "'dec'", 
                     "'true'", "'forEach'", "'array'", "'<='", "'>='", "'false'", 
                     "'string'", "'int'", "'bool'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "' '", "<INVALID>", "'and'", "'var'", 
                     "'or'", "'not'", "'div'", "'shl'", "'shr'", "'xor'", 
                     "'mod'", "'echo'", "'is'", "'isnot'", "'of'", "'..'", 
                     "'=='", "'='", "'+'", "'*'", "'-'", "'/'", "'~'", "'&'", 
                     "'|'", "'<'", "'>'", "'!'", "'^'", "'.'", "':'", "','", 
                     "';'", "'addr'", "'as'", "'asm'", "'bind'", "'block'", 
                     "'break'", "'case'", "'cast'", "'concept'", "'const'", 
                     "'continue'", "'converter'", "'defer'", "'discard'", 
                     "'distinct'", "'do'", "'elif'", "'else'", "'end'", 
                     "'enum'", "'except'", "'export'", "'finally'", "'for'", 
                     "'from'", "'func'", "'if'", "'import'", "'in'", "'include'", 
                     "'interface'", "'iterator'", "'let'", "'macro'", "'method'", 
                     "'mixin'", "'nil'", "'notin'", "'object'", "'out'", 
                     "'proc'", "'ptr'", "'raise'", "'ref'", "'return'", 
                     "'static'", "'template'", "'try'", "'tuple'", "'type'", 
                     "'using'", "'when'", "'while'", "'yield'", "'('", "')'", 
                     "'{'", "'}'", "'['", "']'", "'%'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "DIGIT", "INDENT", 
                      "NOT_INDENT", "SPACE", "NEWLINE", "AND", "VARIABLE", 
                      "OR", "NOT", "DIV", "SHL", "SHR", "XOR", "MOD", "ECHO", 
                      "IS", "ISNOT", "OF", "OP6", "EQUALS_EQUALS", "EQUALS_OPERATOR", 
                      "ADD_OPERATOR", "MUL_OPERATOR", "MINUS_OPERATOR", 
                      "DIV_OPERATOR", "BITWISE_NOT_OPERATOR", "AND_OPERATOR", 
                      "OR_OPERATOR", "LESS_THAN", "GREATER_THAN", "NOT_OPERATOR", 
                      "XOR_OPERATOR", "DOT", "COLON", "COMMA", "SEMI_COLON", 
                      "ADDR", "AS", "ASM", "BIND", "BLOCK", "BREAK", "CASE", 
                      "CAST", "CONCEPT", "CONST", "CONTINUE", "CONVERTER", 
                      "DEFER", "DISCARD", "DISTINCT", "DO", "ELIF", "ELSE", 
                      "END", "ENUM", "EXCEPT", "EXPORT", "FINALLY", "FOR", 
                      "FROM", "FUNC", "IF", "IMPORT", "IN", "INCLUDE", "INTERFACE", 
                      "ITERATOR", "LET", "MACRO", "METHOD", "MIXIN", "NIL", 
                      "NOTIN", "OBJECT", "OUT", "PROC", "PTR", "RAISE", 
                      "REF", "RETURN", "STATIC", "TEMPLATE", "TRY", "TUPLE", 
                      "TYPE", "USING", "WHEN", "WHILE", "YIELD", "OPEN_PAREN", 
                      "CLOSE_PAREN", "OPEN_BRACE", "CLOSE_BRACE", "OPEN_BRACK", 
                      "CLOSE_BRACK", "MODULUS", "TRIPLESTR_LIT", "CHAR_LIT", 
                      "STR_LIT", "RSTR_LIT", "GENERALIZED_STR_LIT", "GENERALIZED_TRIPLESTR_LIT", 
                      "WS", "AT", "COMMENT", "MULTI_LINE_COMMENT", "MULTI_LINE_COMMENT2", 
                      "SINGLE_MULTI_LINE_COMMENT", "IDENTIFIER", "H", "LETTER", 
                      "INT_LIT", "HEX_LIT", "DEC_LIT", "OCT_LIT", "BIN_LIT", 
                      "INT8_LIT", "INT16_LIT", "INT32_LIT", "INT64_LIT", 
                      "UINT_LIT", "UINT8_LIT", "UINT16_LIT", "UINT32_LIT", 
                      "UINT64_LIT", "FLOAT_LIT", "FLOAT32_LIT", "FLOAT32_SUFFIX", 
                      "FLOAT64_LIT", "FLOAT64_SUFFIX", "EXP", "HEXDIGIT", 
                      "OCTDIGIT", "BINDIGIT", "NEW_IDENTIFIER", "ARRAY_LEN", 
                      "FORLOOP_RANGE" ]

    RULE_start = 0
    RULE_stmt = 1
    RULE_varDec = 2
    RULE_constDec = 3
    RULE_letDec = 4
    RULE_assignStmt = 5
    RULE_printStmt = 6
    RULE_complexIfStmt = 7
    RULE_varComplexIfStmt = 8
    RULE_simpleIfStmt = 9
    RULE_varSimpleIfStmt = 10
    RULE_varSimpleElifStmt = 11
    RULE_varSimpleElseStmt = 12
    RULE_simpleElifStmt = 13
    RULE_simpleElseStmt = 14
    RULE_forLoop = 15
    RULE_whileLoop = 16
    RULE_whenStmt = 17
    RULE_simpleWhenStmt = 18
    RULE_procBlock = 19
    RULE_block = 20
    RULE_typeBlock = 21
    RULE_methodInvoke = 22
    RULE_instanceMethodInvoke = 23
    RULE_forEachStmt = 24
    RULE_importStmt = 25
    RULE_condition = 26
    RULE_simpleCondition = 27
    RULE_character_literals = 28
    RULE_string_literals = 29
    RULE_rightHandSideStmt = 30
    RULE_dataType = 31
    RULE_caseStmt = 32
    RULE_simpleOfStmt = 33
    RULE_simpleElifOfStmt = 34
    RULE_simpleCaseStmt = 35
    RULE_emptyStmt = 36
    RULE_commentStmt = 37
    RULE_operator = 38
    RULE_literal = 39

    ruleNames =  [ "start", "stmt", "varDec", "constDec", "letDec", "assignStmt", 
                   "printStmt", "complexIfStmt", "varComplexIfStmt", "simpleIfStmt", 
                   "varSimpleIfStmt", "varSimpleElifStmt", "varSimpleElseStmt", 
                   "simpleElifStmt", "simpleElseStmt", "forLoop", "whileLoop", 
                   "whenStmt", "simpleWhenStmt", "procBlock", "block", "typeBlock", 
                   "methodInvoke", "instanceMethodInvoke", "forEachStmt", 
                   "importStmt", "condition", "simpleCondition", "character_literals", 
                   "string_literals", "rightHandSideStmt", "dataType", "caseStmt", 
                   "simpleOfStmt", "simpleElifOfStmt", "simpleCaseStmt", 
                   "emptyStmt", "commentStmt", "operator", "literal" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    DIGIT=15
    INDENT=16
    NOT_INDENT=17
    SPACE=18
    NEWLINE=19
    AND=20
    VARIABLE=21
    OR=22
    NOT=23
    DIV=24
    SHL=25
    SHR=26
    XOR=27
    MOD=28
    ECHO=29
    IS=30
    ISNOT=31
    OF=32
    OP6=33
    EQUALS_EQUALS=34
    EQUALS_OPERATOR=35
    ADD_OPERATOR=36
    MUL_OPERATOR=37
    MINUS_OPERATOR=38
    DIV_OPERATOR=39
    BITWISE_NOT_OPERATOR=40
    AND_OPERATOR=41
    OR_OPERATOR=42
    LESS_THAN=43
    GREATER_THAN=44
    NOT_OPERATOR=45
    XOR_OPERATOR=46
    DOT=47
    COLON=48
    COMMA=49
    SEMI_COLON=50
    ADDR=51
    AS=52
    ASM=53
    BIND=54
    BLOCK=55
    BREAK=56
    CASE=57
    CAST=58
    CONCEPT=59
    CONST=60
    CONTINUE=61
    CONVERTER=62
    DEFER=63
    DISCARD=64
    DISTINCT=65
    DO=66
    ELIF=67
    ELSE=68
    END=69
    ENUM=70
    EXCEPT=71
    EXPORT=72
    FINALLY=73
    FOR=74
    FROM=75
    FUNC=76
    IF=77
    IMPORT=78
    IN=79
    INCLUDE=80
    INTERFACE=81
    ITERATOR=82
    LET=83
    MACRO=84
    METHOD=85
    MIXIN=86
    NIL=87
    NOTIN=88
    OBJECT=89
    OUT=90
    PROC=91
    PTR=92
    RAISE=93
    REF=94
    RETURN=95
    STATIC=96
    TEMPLATE=97
    TRY=98
    TUPLE=99
    TYPE=100
    USING=101
    WHEN=102
    WHILE=103
    YIELD=104
    OPEN_PAREN=105
    CLOSE_PAREN=106
    OPEN_BRACE=107
    CLOSE_BRACE=108
    OPEN_BRACK=109
    CLOSE_BRACK=110
    MODULUS=111
    TRIPLESTR_LIT=112
    CHAR_LIT=113
    STR_LIT=114
    RSTR_LIT=115
    GENERALIZED_STR_LIT=116
    GENERALIZED_TRIPLESTR_LIT=117
    WS=118
    AT=119
    COMMENT=120
    MULTI_LINE_COMMENT=121
    MULTI_LINE_COMMENT2=122
    SINGLE_MULTI_LINE_COMMENT=123
    IDENTIFIER=124
    H=125
    LETTER=126
    INT_LIT=127
    HEX_LIT=128
    DEC_LIT=129
    OCT_LIT=130
    BIN_LIT=131
    INT8_LIT=132
    INT16_LIT=133
    INT32_LIT=134
    INT64_LIT=135
    UINT_LIT=136
    UINT8_LIT=137
    UINT16_LIT=138
    UINT32_LIT=139
    UINT64_LIT=140
    FLOAT_LIT=141
    FLOAT32_LIT=142
    FLOAT32_SUFFIX=143
    FLOAT64_LIT=144
    FLOAT64_SUFFIX=145
    EXP=146
    HEXDIGIT=147
    OCTDIGIT=148
    BINDIGIT=149
    NEW_IDENTIFIER=150
    ARRAY_LEN=151
    FORLOOP_RANGE=152

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class StartContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def getRuleIndex(self):
            return nimParser.RULE_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart" ):
                listener.enterStart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart" ):
                listener.exitStart(self)




    def start(self):

        localctx = nimParser.StartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_start)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 89
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.T__0) | (1 << nimParser.T__6) | (1 << nimParser.VARIABLE) | (1 << nimParser.ECHO) | (1 << nimParser.BLOCK) | (1 << nimParser.CASE) | (1 << nimParser.CONST))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (nimParser.FOR - 74)) | (1 << (nimParser.FROM - 74)) | (1 << (nimParser.IF - 74)) | (1 << (nimParser.IMPORT - 74)) | (1 << (nimParser.LET - 74)) | (1 << (nimParser.PROC - 74)) | (1 << (nimParser.TYPE - 74)) | (1 << (nimParser.WHEN - 74)) | (1 << (nimParser.WHILE - 74)) | (1 << (nimParser.OPEN_PAREN - 74)) | (1 << (nimParser.IDENTIFIER - 74)))) != 0) or _la==nimParser.NEW_IDENTIFIER:
                self.state = 80
                self.stmt()
                self.state = 84
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 81
                        _la = self._input.LA(1)
                        if not(_la==nimParser.T__0 or _la==nimParser.T__1):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 86
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

                self.state = 91
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varDec(self):
            return self.getTypedRuleContext(nimParser.VarDecContext,0)


        def assignStmt(self):
            return self.getTypedRuleContext(nimParser.AssignStmtContext,0)


        def printStmt(self):
            return self.getTypedRuleContext(nimParser.PrintStmtContext,0)


        def constDec(self):
            return self.getTypedRuleContext(nimParser.ConstDecContext,0)


        def letDec(self):
            return self.getTypedRuleContext(nimParser.LetDecContext,0)


        def complexIfStmt(self):
            return self.getTypedRuleContext(nimParser.ComplexIfStmtContext,0)


        def forLoop(self):
            return self.getTypedRuleContext(nimParser.ForLoopContext,0)


        def whileLoop(self):
            return self.getTypedRuleContext(nimParser.WhileLoopContext,0)


        def whenStmt(self):
            return self.getTypedRuleContext(nimParser.WhenStmtContext,0)


        def procBlock(self):
            return self.getTypedRuleContext(nimParser.ProcBlockContext,0)


        def block(self):
            return self.getTypedRuleContext(nimParser.BlockContext,0)


        def typeBlock(self):
            return self.getTypedRuleContext(nimParser.TypeBlockContext,0)


        def methodInvoke(self):
            return self.getTypedRuleContext(nimParser.MethodInvokeContext,0)


        def instanceMethodInvoke(self):
            return self.getTypedRuleContext(nimParser.InstanceMethodInvokeContext,0)


        def emptyStmt(self):
            return self.getTypedRuleContext(nimParser.EmptyStmtContext,0)


        def forEachStmt(self):
            return self.getTypedRuleContext(nimParser.ForEachStmtContext,0)


        def caseStmt(self):
            return self.getTypedRuleContext(nimParser.CaseStmtContext,0)


        def importStmt(self):
            return self.getTypedRuleContext(nimParser.ImportStmtContext,0)


        def getRuleIndex(self):
            return nimParser.RULE_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt" ):
                listener.enterStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt" ):
                listener.exitStmt(self)




    def stmt(self):

        localctx = nimParser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_stmt)
        try:
            self.state = 110
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 92
                self.varDec()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 93
                self.assignStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 94
                self.printStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 95
                self.constDec()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 96
                self.letDec()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 97
                self.complexIfStmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 98
                self.forLoop()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 99
                self.whileLoop()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 100
                self.whenStmt()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 101
                self.procBlock()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 102
                self.block()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 103
                self.typeBlock()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 104
                self.methodInvoke()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 105
                self.instanceMethodInvoke()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 106
                self.emptyStmt()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 107
                self.forEachStmt()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 108
                self.caseStmt()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 109
                self.importStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarDecContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARIABLE(self):
            return self.getToken(nimParser.VARIABLE, 0)

        def assignStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.AssignStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.AssignStmtContext,i)


        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.IDENTIFIER)
            else:
                return self.getToken(nimParser.IDENTIFIER, i)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COLON)
            else:
                return self.getToken(nimParser.COLON, i)

        def EQUALS_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.EQUALS_OPERATOR)
            else:
                return self.getToken(nimParser.EQUALS_OPERATOR, i)

        def varComplexIfStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.VarComplexIfStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.VarComplexIfStmtContext,i)


        def AT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.AT)
            else:
                return self.getToken(nimParser.AT, i)

        def OPEN_BRACK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.OPEN_BRACK)
            else:
                return self.getToken(nimParser.OPEN_BRACK, i)

        def CLOSE_BRACK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.CLOSE_BRACK)
            else:
                return self.getToken(nimParser.CLOSE_BRACK, i)

        def dataType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.DataTypeContext)
            else:
                return self.getTypedRuleContext(nimParser.DataTypeContext,i)


        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMA)
            else:
                return self.getToken(nimParser.COMMA, i)

        def MINUS_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.MINUS_OPERATOR)
            else:
                return self.getToken(nimParser.MINUS_OPERATOR, i)

        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.DIGIT)
            else:
                return self.getToken(nimParser.DIGIT, i)

        def getRuleIndex(self):
            return nimParser.RULE_varDec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarDec" ):
                listener.enterVarDec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarDec" ):
                listener.exitVarDec(self)




    def varDec(self):

        localctx = nimParser.VarDecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_varDec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 112
            self.match(nimParser.VARIABLE)
            self.state = 190 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 190
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
                    if la_ == 1:
                        self.state = 115
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==nimParser.T__0:
                            self.state = 113
                            self.match(nimParser.T__0)
                            self.state = 114
                            self.match(nimParser.INDENT)


                        self.state = 117
                        self.match(nimParser.IDENTIFIER)
                        self.state = 122
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==nimParser.COMMA:
                            self.state = 118
                            self.match(nimParser.COMMA)
                            self.state = 119
                            self.match(nimParser.IDENTIFIER)
                            self.state = 124
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 125
                        self.match(nimParser.COLON)
                        self.state = 128
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [nimParser.T__11, nimParser.T__12, nimParser.T__13]:
                            self.state = 126
                            self.dataType()
                            pass
                        elif token in [nimParser.IDENTIFIER]:
                            self.state = 127
                            self.match(nimParser.IDENTIFIER)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 133
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,6,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 130
                                self.match(nimParser.T__0) 
                            self.state = 135
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,6,self._ctx)

                        pass

                    elif la_ == 2:
                        self.state = 138
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==nimParser.T__0:
                            self.state = 136
                            self.match(nimParser.T__0)
                            self.state = 137
                            self.match(nimParser.INDENT)


                        self.state = 140
                        self.match(nimParser.T__2)
                        self.state = 144
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 141
                                _la = self._input.LA(1)
                                if _la <= 0 or (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.T__0) | (1 << nimParser.T__1) | (1 << nimParser.T__2))) != 0):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume() 
                            self.state = 146
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

                        self.state = 150
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 147
                                self.match(nimParser.T__0) 
                            self.state = 152
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

                        pass

                    elif la_ == 3:
                        self.state = 153
                        self.assignStmt()
                        pass

                    elif la_ == 4:
                        self.state = 154
                        self.match(nimParser.IDENTIFIER)
                        self.state = 155
                        self.match(nimParser.EQUALS_OPERATOR)
                        self.state = 156
                        self.varComplexIfStmt()
                        pass

                    elif la_ == 5:
                        self.state = 157
                        self.match(nimParser.IDENTIFIER)
                        self.state = 158
                        self.match(nimParser.EQUALS_OPERATOR)
                        self.state = 159
                        self.match(nimParser.AT)
                        self.state = 160
                        self.match(nimParser.OPEN_BRACK)
                        self.state = 170
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [nimParser.DIGIT, nimParser.MINUS_OPERATOR]:
                            self.state = 162
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==nimParser.MINUS_OPERATOR:
                                self.state = 161
                                self.match(nimParser.MINUS_OPERATOR)


                            self.state = 165 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 164
                                self.match(nimParser.DIGIT)
                                self.state = 167 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==nimParser.DIGIT):
                                    break

                            pass
                        elif token in [nimParser.IDENTIFIER]:
                            self.state = 169
                            self.match(nimParser.IDENTIFIER)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 186
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==nimParser.COMMA:
                            self.state = 172
                            self.match(nimParser.COMMA)
                            self.state = 182
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [nimParser.DIGIT, nimParser.MINUS_OPERATOR]:
                                self.state = 174
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==nimParser.MINUS_OPERATOR:
                                    self.state = 173
                                    self.match(nimParser.MINUS_OPERATOR)


                                self.state = 177 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 176
                                    self.match(nimParser.DIGIT)
                                    self.state = 179 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==nimParser.DIGIT):
                                        break

                                pass
                            elif token in [nimParser.IDENTIFIER]:
                                self.state = 181
                                self.match(nimParser.IDENTIFIER)
                                pass
                            else:
                                raise NoViableAltException(self)

                            self.state = 188
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 189
                        self.match(nimParser.CLOSE_BRACK)
                        pass



                else:
                    raise NoViableAltException(self)
                self.state = 192 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,18,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstDecContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(nimParser.CONST, 0)

        def assignStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.AssignStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.AssignStmtContext,i)


        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def COMMENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMENT)
            else:
                return self.getToken(nimParser.COMMENT, i)

        def getRuleIndex(self):
            return nimParser.RULE_constDec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstDec" ):
                listener.enterConstDec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstDec" ):
                listener.exitConstDec(self)




    def constDec(self):

        localctx = nimParser.ConstDecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_constDec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 194
            self.match(nimParser.CONST)
            self.state = 207 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 197
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==nimParser.T__0:
                        self.state = 195
                        self.match(nimParser.T__0)
                        self.state = 196
                        self.match(nimParser.INDENT)


                    self.state = 199
                    self.assignStmt()
                    self.state = 201
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
                    if la_ == 1:
                        self.state = 200
                        self.match(nimParser.T__0)


                    self.state = 205
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
                    if la_ == 1:
                        self.state = 203
                        self.match(nimParser.INDENT)
                        self.state = 204
                        self.match(nimParser.COMMENT)



                else:
                    raise NoViableAltException(self)
                self.state = 209 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,22,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetDecContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LET(self):
            return self.getToken(nimParser.LET, 0)

        def assignStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.AssignStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.AssignStmtContext,i)


        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def COMMENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMENT)
            else:
                return self.getToken(nimParser.COMMENT, i)

        def getRuleIndex(self):
            return nimParser.RULE_letDec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetDec" ):
                listener.enterLetDec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetDec" ):
                listener.exitLetDec(self)




    def letDec(self):

        localctx = nimParser.LetDecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_letDec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 211
            self.match(nimParser.LET)
            self.state = 224 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 214
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==nimParser.T__0:
                        self.state = 212
                        self.match(nimParser.T__0)
                        self.state = 213
                        self.match(nimParser.INDENT)


                    self.state = 216
                    self.assignStmt()
                    self.state = 218
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
                    if la_ == 1:
                        self.state = 217
                        self.match(nimParser.T__0)


                    self.state = 222
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
                    if la_ == 1:
                        self.state = 220
                        self.match(nimParser.INDENT)
                        self.state = 221
                        self.match(nimParser.COMMENT)



                else:
                    raise NoViableAltException(self)
                self.state = 226 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(nimParser.IDENTIFIER, 0)

        def EQUALS_OPERATOR(self):
            return self.getToken(nimParser.EQUALS_OPERATOR, 0)

        def rightHandSideStmt(self):
            return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,0)


        def AT(self):
            return self.getToken(nimParser.AT, 0)

        def SEMI_COLON(self):
            return self.getToken(nimParser.SEMI_COLON, 0)

        def INDENT(self):
            return self.getToken(nimParser.INDENT, 0)

        def getRuleIndex(self):
            return nimParser.RULE_assignStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignStmt" ):
                listener.enterAssignStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignStmt" ):
                listener.exitAssignStmt(self)




    def assignStmt(self):

        localctx = nimParser.AssignStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_assignStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 228
            self.match(nimParser.IDENTIFIER)
            self.state = 229
            self.match(nimParser.EQUALS_OPERATOR)
            self.state = 231
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.AT:
                self.state = 230
                self.match(nimParser.AT)


            self.state = 233
            self.rightHandSideStmt()
            self.state = 235
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.SEMI_COLON:
                self.state = 234
                self.match(nimParser.SEMI_COLON)


            self.state = 240
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,29,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 237
                    self.match(nimParser.T__0) 
                self.state = 242
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

            self.state = 244
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.state = 243
                self.match(nimParser.INDENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrintStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ECHO(self):
            return self.getToken(nimParser.ECHO, 0)

        def OPEN_PAREN(self):
            return self.getToken(nimParser.OPEN_PAREN, 0)

        def rightHandSideStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.RightHandSideStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,i)


        def CLOSE_PAREN(self):
            return self.getToken(nimParser.CLOSE_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMA)
            else:
                return self.getToken(nimParser.COMMA, i)

        def getRuleIndex(self):
            return nimParser.RULE_printStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrintStmt" ):
                listener.enterPrintStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrintStmt" ):
                listener.exitPrintStmt(self)




    def printStmt(self):

        localctx = nimParser.PrintStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_printStmt)
        self._la = 0 # Token type
        try:
            self.state = 267
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 246
                self.match(nimParser.ECHO)
                self.state = 247
                self.match(nimParser.OPEN_PAREN)
                self.state = 248
                self.rightHandSideStmt()
                self.state = 253
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nimParser.COMMA:
                    self.state = 249
                    self.match(nimParser.COMMA)
                    self.state = 250
                    self.rightHandSideStmt()
                    self.state = 255
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 256
                self.match(nimParser.CLOSE_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 258
                self.match(nimParser.ECHO)
                self.state = 259
                self.rightHandSideStmt()
                self.state = 264
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nimParser.COMMA:
                    self.state = 260
                    self.match(nimParser.COMMA)
                    self.state = 261
                    self.rightHandSideStmt()
                    self.state = 266
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexIfStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIfStmt(self):
            return self.getTypedRuleContext(nimParser.SimpleIfStmtContext,0)


        def simpleElifStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.SimpleElifStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.SimpleElifStmtContext,i)


        def simpleElseStmt(self):
            return self.getTypedRuleContext(nimParser.SimpleElseStmtContext,0)


        def INDENT(self):
            return self.getToken(nimParser.INDENT, 0)

        def getRuleIndex(self):
            return nimParser.RULE_complexIfStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplexIfStmt" ):
                listener.enterComplexIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplexIfStmt" ):
                listener.exitComplexIfStmt(self)




    def complexIfStmt(self):

        localctx = nimParser.ComplexIfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_complexIfStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 269
            self.simpleIfStmt()
            self.state = 273
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,34,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 270
                    self.simpleElifStmt() 
                self.state = 275
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,34,self._ctx)

            self.state = 277
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.state = 276
                self.simpleElseStmt()


            self.state = 281
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.state = 279
                self.match(nimParser.T__0)
                self.state = 280
                self.match(nimParser.INDENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarComplexIfStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varSimpleIfStmt(self):
            return self.getTypedRuleContext(nimParser.VarSimpleIfStmtContext,0)


        def varSimpleElifStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.VarSimpleElifStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.VarSimpleElifStmtContext,i)


        def varSimpleElseStmt(self):
            return self.getTypedRuleContext(nimParser.VarSimpleElseStmtContext,0)


        def getRuleIndex(self):
            return nimParser.RULE_varComplexIfStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarComplexIfStmt" ):
                listener.enterVarComplexIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarComplexIfStmt" ):
                listener.exitVarComplexIfStmt(self)




    def varComplexIfStmt(self):

        localctx = nimParser.VarComplexIfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_varComplexIfStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 283
            self.varSimpleIfStmt()
            self.state = 287
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,37,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 284
                    self.varSimpleElifStmt() 
                self.state = 289
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,37,self._ctx)

            self.state = 291
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.state = 290
                self.varSimpleElseStmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleIfStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(nimParser.IF, 0)

        def condition(self):
            return self.getTypedRuleContext(nimParser.ConditionContext,0)


        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def assignStmt(self):
            return self.getTypedRuleContext(nimParser.AssignStmtContext,0)


        def NOT(self):
            return self.getToken(nimParser.NOT, 0)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def BREAK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.BREAK)
            else:
                return self.getToken(nimParser.BREAK, i)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.IDENTIFIER)
            else:
                return self.getToken(nimParser.IDENTIFIER, i)

        def CONTINUE(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.CONTINUE)
            else:
                return self.getToken(nimParser.CONTINUE, i)

        def RETURN(self):
            return self.getToken(nimParser.RETURN, 0)

        def OPEN_PAREN(self):
            return self.getToken(nimParser.OPEN_PAREN, 0)

        def rightHandSideStmt(self):
            return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(nimParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return nimParser.RULE_simpleIfStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleIfStmt" ):
                listener.enterSimpleIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleIfStmt" ):
                listener.exitSimpleIfStmt(self)




    def simpleIfStmt(self):

        localctx = nimParser.SimpleIfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_simpleIfStmt)
        self._la = 0 # Token type
        try:
            self.state = 389
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 293
                self.match(nimParser.IF)
                self.state = 295
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.NOT:
                    self.state = 294
                    self.match(nimParser.NOT)


                self.state = 297
                self.condition()
                self.state = 298
                self.match(nimParser.COLON)
                self.state = 299
                self.assignStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 301
                self.match(nimParser.IF)
                self.state = 303
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.NOT:
                    self.state = 302
                    self.match(nimParser.NOT)


                self.state = 305
                self.condition()
                self.state = 306
                self.match(nimParser.COLON)
                self.state = 319 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 307
                        self.match(nimParser.T__0)
                        self.state = 308
                        self.match(nimParser.INDENT)
                        self.state = 317
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [nimParser.T__0, nimParser.T__6, nimParser.VARIABLE, nimParser.ECHO, nimParser.BLOCK, nimParser.CASE, nimParser.CONST, nimParser.FOR, nimParser.FROM, nimParser.IF, nimParser.IMPORT, nimParser.LET, nimParser.PROC, nimParser.TYPE, nimParser.WHEN, nimParser.WHILE, nimParser.OPEN_PAREN, nimParser.IDENTIFIER, nimParser.NEW_IDENTIFIER]:
                            self.state = 309
                            self.stmt()
                            pass
                        elif token in [nimParser.BREAK]:
                            self.state = 310
                            self.match(nimParser.BREAK)
                            self.state = 311
                            self.match(nimParser.IDENTIFIER)
                            pass
                        elif token in [nimParser.CONTINUE]:
                            self.state = 312
                            self.match(nimParser.CONTINUE)
                            pass
                        elif token in [nimParser.T__3]:
                            self.state = 313
                            self.match(nimParser.T__3)
                            self.state = 314
                            self.match(nimParser.IDENTIFIER)
                            pass
                        elif token in [nimParser.T__4]:
                            self.state = 315
                            self.match(nimParser.T__4)
                            self.state = 316
                            self.match(nimParser.IDENTIFIER)
                            pass
                        else:
                            raise NoViableAltException(self)


                    else:
                        raise NoViableAltException(self)
                    self.state = 321 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,42,self._ctx)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 323
                self.match(nimParser.IF)
                self.state = 325
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.NOT:
                    self.state = 324
                    self.match(nimParser.NOT)


                self.state = 327
                self.condition()
                self.state = 328
                self.match(nimParser.COLON)
                self.state = 344 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 329
                        self.match(nimParser.T__0)
                        self.state = 330
                        self.match(nimParser.INDENT)
                        self.state = 335 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 335
                                self._errHandler.sync(self)
                                token = self._input.LA(1)
                                if token in [nimParser.T__0, nimParser.T__6, nimParser.VARIABLE, nimParser.ECHO, nimParser.BLOCK, nimParser.CASE, nimParser.CONST, nimParser.FOR, nimParser.FROM, nimParser.IF, nimParser.IMPORT, nimParser.LET, nimParser.PROC, nimParser.TYPE, nimParser.WHEN, nimParser.WHILE, nimParser.OPEN_PAREN, nimParser.IDENTIFIER, nimParser.NEW_IDENTIFIER]:
                                    self.state = 331
                                    self.stmt()
                                    pass
                                elif token in [nimParser.BREAK]:
                                    self.state = 332
                                    self.match(nimParser.BREAK)
                                    self.state = 333
                                    self.match(nimParser.IDENTIFIER)
                                    pass
                                elif token in [nimParser.CONTINUE]:
                                    self.state = 334
                                    self.match(nimParser.CONTINUE)
                                    pass
                                else:
                                    raise NoViableAltException(self)


                            else:
                                raise NoViableAltException(self)
                            self.state = 337 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,45,self._ctx)

                        self.state = 340 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 339
                                self.match(nimParser.T__0)

                            else:
                                raise NoViableAltException(self)
                            self.state = 342 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,46,self._ctx)


                    else:
                        raise NoViableAltException(self)
                    self.state = 346 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 348
                self.match(nimParser.IF)
                self.state = 350
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.NOT:
                    self.state = 349
                    self.match(nimParser.NOT)


                self.state = 352
                self.condition()
                self.state = 353
                self.match(nimParser.COLON)
                self.state = 354
                self.match(nimParser.RETURN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 356
                self.match(nimParser.IF)
                self.state = 358
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.NOT:
                    self.state = 357
                    self.match(nimParser.NOT)


                self.state = 360
                self.match(nimParser.IDENTIFIER)
                self.state = 361
                self.match(nimParser.OPEN_PAREN)
                self.state = 362
                self.rightHandSideStmt()
                self.state = 363
                self.match(nimParser.CLOSE_PAREN)
                self.state = 364
                self.match(nimParser.COLON)
                self.state = 374 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 365
                        self.match(nimParser.T__0)
                        self.state = 366
                        self.match(nimParser.INDENT)
                        self.state = 367
                        self.stmt()
                        self.state = 371
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,50,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 368
                                self.match(nimParser.T__0) 
                            self.state = 373
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,50,self._ctx)


                    else:
                        raise NoViableAltException(self)
                    self.state = 376 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,51,self._ctx)

                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 378
                self.match(nimParser.IF)
                self.state = 380
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.NOT:
                    self.state = 379
                    self.match(nimParser.NOT)


                self.state = 382
                self.match(nimParser.IDENTIFIER)
                self.state = 383
                self.match(nimParser.OPEN_PAREN)
                self.state = 384
                self.rightHandSideStmt()
                self.state = 385
                self.match(nimParser.CLOSE_PAREN)
                self.state = 386
                self.match(nimParser.COLON)
                self.state = 387
                self.assignStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarSimpleIfStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(nimParser.IF, 0)

        def condition(self):
            return self.getTypedRuleContext(nimParser.ConditionContext,0)


        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def rightHandSideStmt(self):
            return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,0)


        def NEW_IDENTIFIER(self):
            return self.getToken(nimParser.NEW_IDENTIFIER, 0)

        def NOT(self):
            return self.getToken(nimParser.NOT, 0)

        def getRuleIndex(self):
            return nimParser.RULE_varSimpleIfStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarSimpleIfStmt" ):
                listener.enterVarSimpleIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarSimpleIfStmt" ):
                listener.exitVarSimpleIfStmt(self)




    def varSimpleIfStmt(self):

        localctx = nimParser.VarSimpleIfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_varSimpleIfStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 391
            self.match(nimParser.IF)
            self.state = 393
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.NOT:
                self.state = 392
                self.match(nimParser.NOT)


            self.state = 395
            self.condition()
            self.state = 396
            self.match(nimParser.COLON)
            self.state = 399
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nimParser.T__5, nimParser.T__10, nimParser.DIGIT, nimParser.NIL, nimParser.OPEN_PAREN, nimParser.OPEN_BRACK, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.IDENTIFIER, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                self.state = 397
                self.rightHandSideStmt()
                pass
            elif token in [nimParser.NEW_IDENTIFIER]:
                self.state = 398
                self.match(nimParser.NEW_IDENTIFIER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarSimpleElifStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELIF(self):
            return self.getToken(nimParser.ELIF, 0)

        def condition(self):
            return self.getTypedRuleContext(nimParser.ConditionContext,0)


        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def rightHandSideStmt(self):
            return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,0)


        def NEW_IDENTIFIER(self):
            return self.getToken(nimParser.NEW_IDENTIFIER, 0)

        def NOT(self):
            return self.getToken(nimParser.NOT, 0)

        def getRuleIndex(self):
            return nimParser.RULE_varSimpleElifStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarSimpleElifStmt" ):
                listener.enterVarSimpleElifStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarSimpleElifStmt" ):
                listener.exitVarSimpleElifStmt(self)




    def varSimpleElifStmt(self):

        localctx = nimParser.VarSimpleElifStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_varSimpleElifStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 401
            self.match(nimParser.ELIF)
            self.state = 403
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.NOT:
                self.state = 402
                self.match(nimParser.NOT)


            self.state = 405
            self.condition()
            self.state = 406
            self.match(nimParser.COLON)
            self.state = 409
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nimParser.T__5, nimParser.T__10, nimParser.DIGIT, nimParser.NIL, nimParser.OPEN_PAREN, nimParser.OPEN_BRACK, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.IDENTIFIER, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                self.state = 407
                self.rightHandSideStmt()
                pass
            elif token in [nimParser.NEW_IDENTIFIER]:
                self.state = 408
                self.match(nimParser.NEW_IDENTIFIER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarSimpleElseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(nimParser.ELSE, 0)

        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def rightHandSideStmt(self):
            return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,0)


        def NEW_IDENTIFIER(self):
            return self.getToken(nimParser.NEW_IDENTIFIER, 0)

        def INDENT(self):
            return self.getToken(nimParser.INDENT, 0)

        def getRuleIndex(self):
            return nimParser.RULE_varSimpleElseStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarSimpleElseStmt" ):
                listener.enterVarSimpleElseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarSimpleElseStmt" ):
                listener.exitVarSimpleElseStmt(self)




    def varSimpleElseStmt(self):

        localctx = nimParser.VarSimpleElseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_varSimpleElseStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 412
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.INDENT:
                self.state = 411
                self.match(nimParser.INDENT)


            self.state = 414
            self.match(nimParser.ELSE)
            self.state = 415
            self.match(nimParser.COLON)
            self.state = 418
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nimParser.T__5, nimParser.T__10, nimParser.DIGIT, nimParser.NIL, nimParser.OPEN_PAREN, nimParser.OPEN_BRACK, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.IDENTIFIER, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                self.state = 416
                self.rightHandSideStmt()
                pass
            elif token in [nimParser.NEW_IDENTIFIER]:
                self.state = 417
                self.match(nimParser.NEW_IDENTIFIER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleElifStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELIF(self):
            return self.getToken(nimParser.ELIF, 0)

        def rightHandSideStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.RightHandSideStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,i)


        def EQUALS_EQUALS(self):
            return self.getToken(nimParser.EQUALS_EQUALS, 0)

        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def getRuleIndex(self):
            return nimParser.RULE_simpleElifStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleElifStmt" ):
                listener.enterSimpleElifStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleElifStmt" ):
                listener.exitSimpleElifStmt(self)




    def simpleElifStmt(self):

        localctx = nimParser.SimpleElifStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_simpleElifStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 420
            self.match(nimParser.ELIF)
            self.state = 421
            self.rightHandSideStmt()
            self.state = 422
            self.match(nimParser.EQUALS_EQUALS)
            self.state = 423
            self.rightHandSideStmt()
            self.state = 424
            self.match(nimParser.COLON)
            self.state = 434 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 425
                    self.match(nimParser.T__0)
                    self.state = 426
                    self.match(nimParser.INDENT)
                    self.state = 427
                    self.stmt()
                    self.state = 431
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,60,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 428
                            self.match(nimParser.T__0) 
                        self.state = 433
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,60,self._ctx)


                else:
                    raise NoViableAltException(self)
                self.state = 436 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,61,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleElseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(nimParser.ELSE, 0)

        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def printStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.PrintStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.PrintStmtContext,i)


        def assignStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.AssignStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.AssignStmtContext,i)


        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def getRuleIndex(self):
            return nimParser.RULE_simpleElseStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleElseStmt" ):
                listener.enterSimpleElseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleElseStmt" ):
                listener.exitSimpleElseStmt(self)




    def simpleElseStmt(self):

        localctx = nimParser.SimpleElseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_simpleElseStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 439
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.INDENT:
                self.state = 438
                self.match(nimParser.INDENT)


            self.state = 441
            self.match(nimParser.ELSE)
            self.state = 442
            self.match(nimParser.COLON)
            self.state = 448 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 448
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [nimParser.T__0]:
                        self.state = 443
                        self.match(nimParser.T__0)
                        self.state = 444
                        self.match(nimParser.INDENT)
                        self.state = 445
                        self.stmt()
                        pass
                    elif token in [nimParser.ECHO]:
                        self.state = 446
                        self.printStmt()
                        pass
                    elif token in [nimParser.IDENTIFIER]:
                        self.state = 447
                        self.assignStmt()
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 450 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,64,self._ctx)

            self.state = 455
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,65,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 452
                    self.match(nimParser.T__0) 
                self.state = 457
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,65,self._ctx)

            self.state = 459
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.state = 458
                self.match(nimParser.INDENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForLoopContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(nimParser.FOR, 0)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.IDENTIFIER)
            else:
                return self.getToken(nimParser.IDENTIFIER, i)

        def IN(self):
            return self.getToken(nimParser.IN, 0)

        def CHAR_LIT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.CHAR_LIT)
            else:
                return self.getToken(nimParser.CHAR_LIT, i)

        def OP6(self):
            return self.getToken(nimParser.OP6, 0)

        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def COMMENT(self):
            return self.getToken(nimParser.COMMENT, 0)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def FORLOOP_RANGE(self):
            return self.getToken(nimParser.FORLOOP_RANGE, 0)

        def methodInvoke(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.MethodInvokeContext)
            else:
                return self.getTypedRuleContext(nimParser.MethodInvokeContext,i)


        def LESS_THAN(self):
            return self.getToken(nimParser.LESS_THAN, 0)

        def NEW_IDENTIFIER(self):
            return self.getToken(nimParser.NEW_IDENTIFIER, 0)

        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.DIGIT)
            else:
                return self.getToken(nimParser.DIGIT, i)

        def AT(self):
            return self.getToken(nimParser.AT, 0)

        def OPEN_BRACK(self):
            return self.getToken(nimParser.OPEN_BRACK, 0)

        def CLOSE_BRACK(self):
            return self.getToken(nimParser.CLOSE_BRACK, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMA)
            else:
                return self.getToken(nimParser.COMMA, i)

        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.LiteralContext)
            else:
                return self.getTypedRuleContext(nimParser.LiteralContext,i)


        def OPEN_PAREN(self):
            return self.getToken(nimParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(nimParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return nimParser.RULE_forLoop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForLoop" ):
                listener.enterForLoop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForLoop" ):
                listener.exitForLoop(self)




    def forLoop(self):

        localctx = nimParser.ForLoopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_forLoop)
        self._la = 0 # Token type
        try:
            self.state = 628
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 461
                self.match(nimParser.FOR)
                self.state = 462
                self.match(nimParser.IDENTIFIER)
                self.state = 463
                self.match(nimParser.IN)
                self.state = 464
                self.match(nimParser.CHAR_LIT)
                self.state = 465
                self.match(nimParser.OP6)
                self.state = 466
                self.match(nimParser.CHAR_LIT)
                self.state = 467
                self.match(nimParser.COLON)
                self.state = 469
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.COMMENT:
                    self.state = 468
                    self.match(nimParser.COMMENT)


                self.state = 474 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 471
                        self.match(nimParser.T__0)
                        self.state = 472
                        self.match(nimParser.INDENT)
                        self.state = 473
                        self.stmt()

                    else:
                        raise NoViableAltException(self)
                    self.state = 476 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,68,self._ctx)

                self.state = 481
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,69,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 478
                        self.match(nimParser.INDENT) 
                    self.state = 483
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,69,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 484
                self.match(nimParser.FOR)
                self.state = 485
                self.match(nimParser.IDENTIFIER)
                self.state = 486
                self.match(nimParser.IN)
                self.state = 489
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.FORLOOP_RANGE]:
                    self.state = 487
                    self.match(nimParser.FORLOOP_RANGE)
                    pass
                elif token in [nimParser.OPEN_PAREN, nimParser.IDENTIFIER]:
                    self.state = 488
                    self.methodInvoke()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 491
                self.match(nimParser.COLON)
                self.state = 493
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.COMMENT:
                    self.state = 492
                    self.match(nimParser.COMMENT)


                self.state = 498 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 495
                        self.match(nimParser.T__0)
                        self.state = 496
                        self.match(nimParser.INDENT)
                        self.state = 497
                        self.stmt()

                    else:
                        raise NoViableAltException(self)
                    self.state = 500 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,72,self._ctx)

                self.state = 505
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,73,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 502
                        self.match(nimParser.INDENT) 
                    self.state = 507
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,73,self._ctx)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 508
                self.match(nimParser.FOR)
                self.state = 509
                self.match(nimParser.IDENTIFIER)
                self.state = 510
                self.match(nimParser.IN)
                self.state = 512 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 511
                    self.match(nimParser.DIGIT)
                    self.state = 514 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==nimParser.DIGIT):
                        break

                self.state = 516
                self.match(nimParser.OP6)
                self.state = 517
                self.match(nimParser.LESS_THAN)
                self.state = 518
                self.match(nimParser.NEW_IDENTIFIER)
                self.state = 519
                self.match(nimParser.COLON)
                self.state = 521
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.COMMENT:
                    self.state = 520
                    self.match(nimParser.COMMENT)


                self.state = 526 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 523
                        self.match(nimParser.T__0)
                        self.state = 524
                        self.match(nimParser.INDENT)
                        self.state = 525
                        self.stmt()

                    else:
                        raise NoViableAltException(self)
                    self.state = 528 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,76,self._ctx)

                self.state = 533
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,77,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 530
                        self.match(nimParser.INDENT) 
                    self.state = 535
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,77,self._ctx)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 536
                self.match(nimParser.FOR)
                self.state = 537
                self.match(nimParser.IDENTIFIER)
                self.state = 542
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nimParser.COMMA:
                    self.state = 538
                    self.match(nimParser.COMMA)
                    self.state = 539
                    self.match(nimParser.IDENTIFIER)
                    self.state = 544
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 545
                self.match(nimParser.IN)
                self.state = 546
                self.match(nimParser.AT)
                self.state = 547
                self.match(nimParser.OPEN_BRACK)
                self.state = 572
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nimParser.DIGIT or ((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & ((1 << (nimParser.NIL - 87)) | (1 << (nimParser.TRIPLESTR_LIT - 87)) | (1 << (nimParser.CHAR_LIT - 87)) | (1 << (nimParser.STR_LIT - 87)) | (1 << (nimParser.RSTR_LIT - 87)) | (1 << (nimParser.INT_LIT - 87)) | (1 << (nimParser.INT8_LIT - 87)) | (1 << (nimParser.INT16_LIT - 87)) | (1 << (nimParser.INT32_LIT - 87)) | (1 << (nimParser.INT64_LIT - 87)) | (1 << (nimParser.UINT_LIT - 87)) | (1 << (nimParser.UINT8_LIT - 87)) | (1 << (nimParser.UINT16_LIT - 87)) | (1 << (nimParser.UINT32_LIT - 87)) | (1 << (nimParser.UINT64_LIT - 87)) | (1 << (nimParser.FLOAT_LIT - 87)) | (1 << (nimParser.FLOAT32_LIT - 87)) | (1 << (nimParser.FLOAT64_LIT - 87)))) != 0):
                    self.state = 554
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                        self.state = 548
                        self.literal()
                        pass
                    elif token in [nimParser.DIGIT]:
                        self.state = 550 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 549
                                self.match(nimParser.DIGIT)

                            else:
                                raise NoViableAltException(self)
                            self.state = 552 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,79,self._ctx)

                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 567
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==nimParser.COMMA:
                        self.state = 556
                        self.match(nimParser.COMMA)
                        self.state = 563
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                            self.state = 557
                            self.literal()
                            pass
                        elif token in [nimParser.DIGIT]:
                            self.state = 559 
                            self._errHandler.sync(self)
                            _alt = 1
                            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                if _alt == 1:
                                    self.state = 558
                                    self.match(nimParser.DIGIT)

                                else:
                                    raise NoViableAltException(self)
                                self.state = 561 
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 569
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 574
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 575
                self.match(nimParser.CLOSE_BRACK)
                self.state = 576
                self.match(nimParser.COLON)
                self.state = 578
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.COMMENT:
                    self.state = 577
                    self.match(nimParser.COMMENT)


                self.state = 583 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 580
                        self.match(nimParser.T__0)
                        self.state = 581
                        self.match(nimParser.INDENT)
                        self.state = 582
                        self.stmt()

                    else:
                        raise NoViableAltException(self)
                    self.state = 585 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,86,self._ctx)

                self.state = 590
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,87,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 587
                        self.match(nimParser.INDENT) 
                    self.state = 592
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,87,self._ctx)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 593
                self.match(nimParser.FOR)
                self.state = 594
                self.match(nimParser.IDENTIFIER)
                self.state = 595
                self.match(nimParser.IN)
                self.state = 596
                self.match(nimParser.IDENTIFIER)
                self.state = 597
                self.match(nimParser.OPEN_PAREN)
                self.state = 598
                self.match(nimParser.IDENTIFIER)
                self.state = 599
                self.match(nimParser.CLOSE_PAREN)
                self.state = 600
                self.match(nimParser.COLON)
                self.state = 602
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.COMMENT:
                    self.state = 601
                    self.match(nimParser.COMMENT)


                self.state = 607 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 604
                        self.match(nimParser.T__0)
                        self.state = 605
                        self.match(nimParser.INDENT)
                        self.state = 606
                        self.stmt()

                    else:
                        raise NoViableAltException(self)
                    self.state = 609 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,89,self._ctx)

                self.state = 614
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,90,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 611
                        self.match(nimParser.INDENT) 
                    self.state = 616
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,90,self._ctx)

                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 617
                self.match(nimParser.FOR)
                self.state = 618
                self.match(nimParser.IDENTIFIER)
                self.state = 619
                self.match(nimParser.IN)
                self.state = 620
                self.methodInvoke()
                self.state = 621
                self.match(nimParser.COLON)
                self.state = 622
                self.match(nimParser.T__0)
                self.state = 623
                self.match(nimParser.INDENT)
                self.state = 624
                self.methodInvoke()
                self.state = 626
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
                if la_ == 1:
                    self.state = 625
                    self.match(nimParser.T__0)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileLoopContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(nimParser.WHILE, 0)

        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def condition(self):
            return self.getTypedRuleContext(nimParser.ConditionContext,0)


        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def BREAK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.BREAK)
            else:
                return self.getToken(nimParser.BREAK, i)

        def getRuleIndex(self):
            return nimParser.RULE_whileLoop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileLoop" ):
                listener.enterWhileLoop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileLoop" ):
                listener.exitWhileLoop(self)




    def whileLoop(self):

        localctx = nimParser.WhileLoopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_whileLoop)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 630
            self.match(nimParser.WHILE)
            self.state = 633
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.state = 631
                self.condition()
                pass

            elif la_ == 2:
                self.state = 632
                self.match(nimParser.T__5)
                pass


            self.state = 635
            self.match(nimParser.COLON)
            self.state = 642 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 636
                    self.match(nimParser.T__0)
                    self.state = 637
                    self.match(nimParser.INDENT)
                    self.state = 640
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [nimParser.T__0, nimParser.T__6, nimParser.VARIABLE, nimParser.ECHO, nimParser.BLOCK, nimParser.CASE, nimParser.CONST, nimParser.FOR, nimParser.FROM, nimParser.IF, nimParser.IMPORT, nimParser.LET, nimParser.PROC, nimParser.TYPE, nimParser.WHEN, nimParser.WHILE, nimParser.OPEN_PAREN, nimParser.IDENTIFIER, nimParser.NEW_IDENTIFIER]:
                        self.state = 638
                        self.stmt()
                        pass
                    elif token in [nimParser.BREAK]:
                        self.state = 639
                        self.match(nimParser.BREAK)
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 644 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,95,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleWhenStmt(self):
            return self.getTypedRuleContext(nimParser.SimpleWhenStmtContext,0)


        def simpleElseStmt(self):
            return self.getTypedRuleContext(nimParser.SimpleElseStmtContext,0)


        def simpleElifStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.SimpleElifStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.SimpleElifStmtContext,i)


        def getRuleIndex(self):
            return nimParser.RULE_whenStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenStmt" ):
                listener.enterWhenStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenStmt" ):
                listener.exitWhenStmt(self)




    def whenStmt(self):

        localctx = nimParser.WhenStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_whenStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 646
            self.simpleWhenStmt()
            self.state = 650
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==nimParser.ELIF:
                self.state = 647
                self.simpleElifStmt()
                self.state = 652
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 653
            self.simpleElseStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleWhenStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(nimParser.WHEN, 0)

        def condition(self):
            return self.getTypedRuleContext(nimParser.ConditionContext,0)


        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def BREAK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.BREAK)
            else:
                return self.getToken(nimParser.BREAK, i)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def getRuleIndex(self):
            return nimParser.RULE_simpleWhenStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleWhenStmt" ):
                listener.enterSimpleWhenStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleWhenStmt" ):
                listener.exitSimpleWhenStmt(self)




    def simpleWhenStmt(self):

        localctx = nimParser.SimpleWhenStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_simpleWhenStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 655
            self.match(nimParser.WHEN)
            self.state = 656
            self.condition()
            self.state = 657
            self.match(nimParser.COLON)
            self.state = 666 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 660
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
                if la_ == 1:
                    self.state = 658
                    self.match(nimParser.T__0)
                    self.state = 659
                    self.match(nimParser.INDENT)


                self.state = 664
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.T__0, nimParser.T__6, nimParser.VARIABLE, nimParser.ECHO, nimParser.BLOCK, nimParser.CASE, nimParser.CONST, nimParser.FOR, nimParser.FROM, nimParser.IF, nimParser.IMPORT, nimParser.LET, nimParser.PROC, nimParser.TYPE, nimParser.WHEN, nimParser.WHILE, nimParser.OPEN_PAREN, nimParser.IDENTIFIER, nimParser.NEW_IDENTIFIER]:
                    self.state = 662
                    self.stmt()
                    pass
                elif token in [nimParser.BREAK]:
                    self.state = 663
                    self.match(nimParser.BREAK)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 668 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.T__0) | (1 << nimParser.T__6) | (1 << nimParser.VARIABLE) | (1 << nimParser.ECHO) | (1 << nimParser.BLOCK) | (1 << nimParser.BREAK) | (1 << nimParser.CASE) | (1 << nimParser.CONST))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (nimParser.FOR - 74)) | (1 << (nimParser.FROM - 74)) | (1 << (nimParser.IF - 74)) | (1 << (nimParser.IMPORT - 74)) | (1 << (nimParser.LET - 74)) | (1 << (nimParser.PROC - 74)) | (1 << (nimParser.TYPE - 74)) | (1 << (nimParser.WHEN - 74)) | (1 << (nimParser.WHILE - 74)) | (1 << (nimParser.OPEN_PAREN - 74)) | (1 << (nimParser.IDENTIFIER - 74)))) != 0) or _la==nimParser.NEW_IDENTIFIER):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROC(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.PROC)
            else:
                return self.getToken(nimParser.PROC, i)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.IDENTIFIER)
            else:
                return self.getToken(nimParser.IDENTIFIER, i)

        def OPEN_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.OPEN_PAREN)
            else:
                return self.getToken(nimParser.OPEN_PAREN, i)

        def CLOSE_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.CLOSE_PAREN)
            else:
                return self.getToken(nimParser.CLOSE_PAREN, i)

        def EQUALS_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.EQUALS_OPERATOR)
            else:
                return self.getToken(nimParser.EQUALS_OPERATOR, i)

        def OPEN_BRACK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.OPEN_BRACK)
            else:
                return self.getToken(nimParser.OPEN_BRACK, i)

        def CLOSE_BRACK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.CLOSE_BRACK)
            else:
                return self.getToken(nimParser.CLOSE_BRACK, i)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COLON)
            else:
                return self.getToken(nimParser.COLON, i)

        def dataType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.DataTypeContext)
            else:
                return self.getTypedRuleContext(nimParser.DataTypeContext,i)


        def RETURN(self):
            return self.getToken(nimParser.RETURN, 0)

        def rightHandSideStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.RightHandSideStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,i)


        def assignStmt(self):
            return self.getTypedRuleContext(nimParser.AssignStmtContext,0)


        def printStmt(self):
            return self.getTypedRuleContext(nimParser.PrintStmtContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMA)
            else:
                return self.getToken(nimParser.COMMA, i)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def VARIABLE(self):
            return self.getToken(nimParser.VARIABLE, 0)

        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.LiteralContext)
            else:
                return self.getTypedRuleContext(nimParser.LiteralContext,i)


        def MINUS_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.MINUS_OPERATOR)
            else:
                return self.getToken(nimParser.MINUS_OPERATOR, i)

        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.DIGIT)
            else:
                return self.getToken(nimParser.DIGIT, i)

        def getRuleIndex(self):
            return nimParser.RULE_procBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcBlock" ):
                listener.enterProcBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcBlock" ):
                listener.exitProcBlock(self)




    def procBlock(self):

        localctx = nimParser.ProcBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_procBlock)
        self._la = 0 # Token type
        try:
            self.state = 893
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 670
                self.match(nimParser.PROC)
                self.state = 671
                self.match(nimParser.IDENTIFIER)
                self.state = 675
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.OPEN_BRACK:
                    self.state = 672
                    self.match(nimParser.OPEN_BRACK)
                    self.state = 673
                    self.match(nimParser.IDENTIFIER)
                    self.state = 674
                    self.match(nimParser.CLOSE_BRACK)


                self.state = 677
                self.match(nimParser.OPEN_PAREN)
                self.state = 688 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 678
                    self.match(nimParser.IDENTIFIER)
                    self.state = 683
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [nimParser.COLON]:
                        self.state = 679
                        self.match(nimParser.COLON)
                        self.state = 680
                        self.dataType()
                        pass
                    elif token in [nimParser.EQUALS_OPERATOR]:
                        self.state = 681
                        self.match(nimParser.EQUALS_OPERATOR)
                        self.state = 682
                        self.rightHandSideStmt()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 686
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==nimParser.COMMA:
                        self.state = 685
                        self.match(nimParser.COMMA)


                    self.state = 690 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==nimParser.IDENTIFIER):
                        break

                self.state = 692
                self.match(nimParser.CLOSE_PAREN)
                self.state = 695
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.COLON:
                    self.state = 693
                    self.match(nimParser.COLON)
                    self.state = 694
                    self.dataType()


                self.state = 697
                self.match(nimParser.EQUALS_OPERATOR)
                self.state = 735
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.T__0]:
                    self.state = 701 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 698
                            self.match(nimParser.T__0)
                            self.state = 699
                            self.match(nimParser.INDENT)
                            self.state = 700
                            self.stmt()

                        else:
                            raise NoViableAltException(self)
                        self.state = 703 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,105,self._ctx)

                    pass
                elif token in [nimParser.IDENTIFIER]:
                    self.state = 705
                    self.assignStmt()
                    self.state = 709
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,106,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 706
                            self.match(nimParser.T__0) 
                        self.state = 711
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,106,self._ctx)

                    self.state = 717
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,107,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 712
                            self.match(nimParser.T__0)
                            self.state = 713
                            self.match(nimParser.INDENT)
                            self.state = 714
                            self.stmt() 
                        self.state = 719
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,107,self._ctx)

                    pass
                elif token in [nimParser.ECHO]:
                    self.state = 720
                    self.printStmt()
                    self.state = 724
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,108,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 721
                            self.match(nimParser.T__0) 
                        self.state = 726
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,108,self._ctx)

                    self.state = 732
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,109,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 727
                            self.match(nimParser.T__0)
                            self.state = 728
                            self.match(nimParser.INDENT)
                            self.state = 729
                            self.stmt() 
                        self.state = 734
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,109,self._ctx)

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 739
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
                if la_ == 1:
                    self.state = 737
                    self.match(nimParser.RETURN)
                    self.state = 738
                    self.rightHandSideStmt()


                self.state = 742
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
                if la_ == 1:
                    self.state = 741
                    self.match(nimParser.T__0)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 744
                self.match(nimParser.PROC)
                self.state = 745
                self.match(nimParser.T__6)
                self.state = 746
                self.match(nimParser.OPEN_PAREN)
                self.state = 747
                self.match(nimParser.IDENTIFIER)
                self.state = 748
                self.match(nimParser.COLON)
                self.state = 749
                self.match(nimParser.PROC)
                self.state = 750
                self.match(nimParser.OPEN_PAREN)
                self.state = 751
                self.match(nimParser.IDENTIFIER)
                self.state = 752
                self.match(nimParser.COLON)
                self.state = 753
                self.dataType()
                self.state = 754
                self.match(nimParser.CLOSE_PAREN)
                self.state = 755
                self.match(nimParser.CLOSE_PAREN)
                self.state = 758
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.COLON:
                    self.state = 756
                    self.match(nimParser.COLON)
                    self.state = 757
                    self.dataType()


                self.state = 760
                self.match(nimParser.EQUALS_OPERATOR)
                self.state = 798
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.T__0]:
                    self.state = 764 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 761
                        self.match(nimParser.T__0)
                        self.state = 762
                        self.match(nimParser.INDENT)
                        self.state = 763
                        self.stmt()
                        self.state = 766 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==nimParser.T__0):
                            break

                    pass
                elif token in [nimParser.IDENTIFIER]:
                    self.state = 768
                    self.assignStmt()
                    self.state = 772
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,115,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 769
                            self.match(nimParser.T__0) 
                        self.state = 774
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,115,self._ctx)

                    self.state = 780
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==nimParser.T__0:
                        self.state = 775
                        self.match(nimParser.T__0)
                        self.state = 776
                        self.match(nimParser.INDENT)
                        self.state = 777
                        self.stmt()
                        self.state = 782
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [nimParser.ECHO]:
                    self.state = 783
                    self.printStmt()
                    self.state = 787
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,117,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 784
                            self.match(nimParser.T__0) 
                        self.state = 789
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,117,self._ctx)

                    self.state = 795
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==nimParser.T__0:
                        self.state = 790
                        self.match(nimParser.T__0)
                        self.state = 791
                        self.match(nimParser.INDENT)
                        self.state = 792
                        self.stmt()
                        self.state = 797
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 800
                self.match(nimParser.RETURN)
                self.state = 801
                self.rightHandSideStmt()
                self.state = 804
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
                if la_ == 1:
                    self.state = 803
                    self.match(nimParser.T__0)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 806
                self.match(nimParser.PROC)
                self.state = 807
                self.match(nimParser.IDENTIFIER)
                self.state = 811
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.OPEN_BRACK:
                    self.state = 808
                    self.match(nimParser.OPEN_BRACK)
                    self.state = 809
                    self.match(nimParser.IDENTIFIER)
                    self.state = 810
                    self.match(nimParser.CLOSE_BRACK)


                self.state = 813
                self.match(nimParser.OPEN_PAREN)
                self.state = 814
                self.match(nimParser.IDENTIFIER)
                self.state = 815
                self.match(nimParser.COLON)
                self.state = 816
                self.match(nimParser.VARIABLE)
                self.state = 817
                self.match(nimParser.IDENTIFIER)
                self.state = 818
                self.match(nimParser.OPEN_BRACK)
                self.state = 819
                self.match(nimParser.IDENTIFIER)
                self.state = 820
                self.match(nimParser.CLOSE_BRACK)
                self.state = 838
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nimParser.COMMA:
                    self.state = 821
                    self.match(nimParser.COMMA)
                    self.state = 822
                    self.match(nimParser.IDENTIFIER)
                    self.state = 823
                    self.match(nimParser.EQUALS_OPERATOR)
                    self.state = 834
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [nimParser.DIGIT, nimParser.MINUS_OPERATOR]:
                        self.state = 825
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==nimParser.MINUS_OPERATOR:
                            self.state = 824
                            self.match(nimParser.MINUS_OPERATOR)


                        self.state = 828 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 827
                            self.match(nimParser.DIGIT)
                            self.state = 830 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==nimParser.DIGIT):
                                break

                        pass
                    elif token in [nimParser.IDENTIFIER]:
                        self.state = 832
                        self.match(nimParser.IDENTIFIER)
                        pass
                    elif token in [nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                        self.state = 833
                        self.literal()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 840
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 841
                self.match(nimParser.CLOSE_PAREN)
                self.state = 844
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.COLON:
                    self.state = 842
                    self.match(nimParser.COLON)
                    self.state = 843
                    self.dataType()


                self.state = 846
                self.match(nimParser.EQUALS_OPERATOR)
                self.state = 884
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.T__0]:
                    self.state = 850 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 847
                            self.match(nimParser.T__0)
                            self.state = 848
                            self.match(nimParser.INDENT)
                            self.state = 849
                            self.stmt()

                        else:
                            raise NoViableAltException(self)
                        self.state = 852 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,127,self._ctx)

                    pass
                elif token in [nimParser.IDENTIFIER]:
                    self.state = 854
                    self.assignStmt()
                    self.state = 858
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,128,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 855
                            self.match(nimParser.T__0) 
                        self.state = 860
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,128,self._ctx)

                    self.state = 866
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,129,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 861
                            self.match(nimParser.T__0)
                            self.state = 862
                            self.match(nimParser.INDENT)
                            self.state = 863
                            self.stmt() 
                        self.state = 868
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,129,self._ctx)

                    pass
                elif token in [nimParser.ECHO]:
                    self.state = 869
                    self.printStmt()
                    self.state = 873
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,130,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 870
                            self.match(nimParser.T__0) 
                        self.state = 875
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,130,self._ctx)

                    self.state = 881
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,131,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 876
                            self.match(nimParser.T__0)
                            self.state = 877
                            self.match(nimParser.INDENT)
                            self.state = 878
                            self.stmt() 
                        self.state = 883
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,131,self._ctx)

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 888
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
                if la_ == 1:
                    self.state = 886
                    self.match(nimParser.RETURN)
                    self.state = 887
                    self.rightHandSideStmt()


                self.state = 891
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
                if la_ == 1:
                    self.state = 890
                    self.match(nimParser.T__0)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BLOCK(self):
            return self.getToken(nimParser.BLOCK, 0)

        def IDENTIFIER(self):
            return self.getToken(nimParser.IDENTIFIER, 0)

        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def getRuleIndex(self):
            return nimParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = nimParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 895
            self.match(nimParser.BLOCK)
            self.state = 896
            self.match(nimParser.IDENTIFIER)
            self.state = 897
            self.match(nimParser.COLON)
            self.state = 901 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 898
                    self.match(nimParser.T__0)
                    self.state = 899
                    self.match(nimParser.INDENT)
                    self.state = 900
                    self.stmt()

                else:
                    raise NoViableAltException(self)
                self.state = 903 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,136,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(nimParser.TYPE, 0)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.IDENTIFIER)
            else:
                return self.getToken(nimParser.IDENTIFIER, i)

        def EQUALS_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.EQUALS_OPERATOR)
            else:
                return self.getToken(nimParser.EQUALS_OPERATOR, i)

        def OPEN_BRACK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.OPEN_BRACK)
            else:
                return self.getToken(nimParser.OPEN_BRACK, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMA)
            else:
                return self.getToken(nimParser.COMMA, i)

        def dataType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.DataTypeContext)
            else:
                return self.getTypedRuleContext(nimParser.DataTypeContext,i)


        def CLOSE_BRACK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.CLOSE_BRACK)
            else:
                return self.getToken(nimParser.CLOSE_BRACK, i)

        def FORLOOP_RANGE(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.FORLOOP_RANGE)
            else:
                return self.getToken(nimParser.FORLOOP_RANGE, i)

        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.DIGIT)
            else:
                return self.getToken(nimParser.DIGIT, i)

        def getRuleIndex(self):
            return nimParser.RULE_typeBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeBlock" ):
                listener.enterTypeBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeBlock" ):
                listener.exitTypeBlock(self)




    def typeBlock(self):

        localctx = nimParser.TypeBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_typeBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 905
            self.match(nimParser.TYPE)
            self.state = 906
            self.match(nimParser.T__0)
            self.state = 925 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 907
                    self.match(nimParser.INDENT)
                    self.state = 908
                    self.match(nimParser.IDENTIFIER)
                    self.state = 909
                    self.match(nimParser.EQUALS_OPERATOR)
                    self.state = 910
                    self.match(nimParser.T__7)
                    self.state = 911
                    self.match(nimParser.OPEN_BRACK)
                    self.state = 918
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [nimParser.FORLOOP_RANGE]:
                        self.state = 912
                        self.match(nimParser.FORLOOP_RANGE)
                        pass
                    elif token in [nimParser.DIGIT]:
                        self.state = 914 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 913
                            self.match(nimParser.DIGIT)
                            self.state = 916 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==nimParser.DIGIT):
                                break

                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 920
                    self.match(nimParser.COMMA)
                    self.state = 921
                    self.dataType()
                    self.state = 922
                    self.match(nimParser.CLOSE_BRACK)
                    self.state = 923
                    self.match(nimParser.T__0)

                else:
                    raise NoViableAltException(self)
                self.state = 927 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,139,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodInvokeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.IDENTIFIER)
            else:
                return self.getToken(nimParser.IDENTIFIER, i)

        def OPEN_PAREN(self):
            return self.getToken(nimParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(nimParser.CLOSE_PAREN, 0)

        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.LiteralContext)
            else:
                return self.getTypedRuleContext(nimParser.LiteralContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMA)
            else:
                return self.getToken(nimParser.COMMA, i)

        def ADD_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.ADD_OPERATOR)
            else:
                return self.getToken(nimParser.ADD_OPERATOR, i)

        def MINUS_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.MINUS_OPERATOR)
            else:
                return self.getToken(nimParser.MINUS_OPERATOR, i)

        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.DIGIT)
            else:
                return self.getToken(nimParser.DIGIT, i)

        def NEW_IDENTIFIER(self):
            return self.getToken(nimParser.NEW_IDENTIFIER, 0)

        def OPEN_BRACK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.OPEN_BRACK)
            else:
                return self.getToken(nimParser.OPEN_BRACK, i)

        def CLOSE_BRACK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.CLOSE_BRACK)
            else:
                return self.getToken(nimParser.CLOSE_BRACK, i)

        def getRuleIndex(self):
            return nimParser.RULE_methodInvoke

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodInvoke" ):
                listener.enterMethodInvoke(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodInvoke" ):
                listener.exitMethodInvoke(self)




    def methodInvoke(self):

        localctx = nimParser.MethodInvokeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_methodInvoke)
        self._la = 0 # Token type
        try:
            self.state = 1000
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 929
                self.match(nimParser.IDENTIFIER)
                self.state = 930
                self.match(nimParser.OPEN_PAREN)
                self.state = 938
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.IDENTIFIER]:
                    self.state = 931
                    self.match(nimParser.IDENTIFIER)
                    pass
                elif token in [nimParser.DIGIT]:
                    self.state = 933 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 932
                        self.match(nimParser.DIGIT)
                        self.state = 935 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==nimParser.DIGIT):
                            break

                    pass
                elif token in [nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                    self.state = 937
                    self.literal()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 952
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.ADD_OPERATOR) | (1 << nimParser.MINUS_OPERATOR) | (1 << nimParser.COMMA))) != 0):
                    self.state = 940
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.ADD_OPERATOR) | (1 << nimParser.MINUS_OPERATOR) | (1 << nimParser.COMMA))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 948
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [nimParser.IDENTIFIER]:
                        self.state = 941
                        self.match(nimParser.IDENTIFIER)
                        pass
                    elif token in [nimParser.DIGIT]:
                        self.state = 943 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 942
                            self.match(nimParser.DIGIT)
                            self.state = 945 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==nimParser.DIGIT):
                                break

                        pass
                    elif token in [nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                        self.state = 947
                        self.literal()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 954
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 955
                self.match(nimParser.CLOSE_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 956
                self.match(nimParser.OPEN_PAREN)
                self.state = 964
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.IDENTIFIER]:
                    self.state = 957
                    self.match(nimParser.IDENTIFIER)
                    pass
                elif token in [nimParser.DIGIT]:
                    self.state = 959 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 958
                        self.match(nimParser.DIGIT)
                        self.state = 961 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==nimParser.DIGIT):
                            break

                    pass
                elif token in [nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                    self.state = 963
                    self.literal()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 978
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.ADD_OPERATOR) | (1 << nimParser.MINUS_OPERATOR) | (1 << nimParser.COMMA))) != 0):
                    self.state = 966
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.ADD_OPERATOR) | (1 << nimParser.MINUS_OPERATOR) | (1 << nimParser.COMMA))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 974
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [nimParser.IDENTIFIER]:
                        self.state = 967
                        self.match(nimParser.IDENTIFIER)
                        pass
                    elif token in [nimParser.DIGIT]:
                        self.state = 969 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 968
                            self.match(nimParser.DIGIT)
                            self.state = 971 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==nimParser.DIGIT):
                                break

                        pass
                    elif token in [nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                        self.state = 973
                        self.literal()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 980
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 981
                self.match(nimParser.CLOSE_PAREN)
                self.state = 982
                self.match(nimParser.NEW_IDENTIFIER)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 983
                self.match(nimParser.IDENTIFIER)
                self.state = 984
                self.match(nimParser.IDENTIFIER)
                self.state = 998
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.OPEN_BRACK:
                    self.state = 985
                    self.match(nimParser.OPEN_BRACK)
                    self.state = 986
                    self.match(nimParser.IDENTIFIER)
                    self.state = 987
                    self.match(nimParser.CLOSE_BRACK)
                    self.state = 995
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,150,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 988
                            self.match(nimParser.COMMA)
                            self.state = 989
                            self.match(nimParser.IDENTIFIER)
                            self.state = 990
                            self.match(nimParser.OPEN_BRACK)
                            self.state = 991
                            self.match(nimParser.IDENTIFIER)
                            self.state = 992
                            self.match(nimParser.CLOSE_BRACK) 
                        self.state = 997
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,150,self._ctx)



                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstanceMethodInvokeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW_IDENTIFIER(self):
            return self.getToken(nimParser.NEW_IDENTIFIER, 0)

        def OPEN_PAREN(self):
            return self.getToken(nimParser.OPEN_PAREN, 0)

        def rightHandSideStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.RightHandSideStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,i)


        def CLOSE_PAREN(self):
            return self.getToken(nimParser.CLOSE_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMA)
            else:
                return self.getToken(nimParser.COMMA, i)

        def getRuleIndex(self):
            return nimParser.RULE_instanceMethodInvoke

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstanceMethodInvoke" ):
                listener.enterInstanceMethodInvoke(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstanceMethodInvoke" ):
                listener.exitInstanceMethodInvoke(self)




    def instanceMethodInvoke(self):

        localctx = nimParser.InstanceMethodInvokeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_instanceMethodInvoke)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1002
            self.match(nimParser.NEW_IDENTIFIER)
            self.state = 1003
            self.match(nimParser.OPEN_PAREN)
            self.state = 1004
            self.rightHandSideStmt()
            self.state = 1009
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==nimParser.COMMA:
                self.state = 1005
                self.match(nimParser.COMMA)
                self.state = 1006
                self.rightHandSideStmt()
                self.state = 1011
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1012
            self.match(nimParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForEachStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(nimParser.OPEN_PAREN, 0)

        def IDENTIFIER(self):
            return self.getToken(nimParser.IDENTIFIER, 0)

        def CLOSE_PAREN(self):
            return self.getToken(nimParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return nimParser.RULE_forEachStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForEachStmt" ):
                listener.enterForEachStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForEachStmt" ):
                listener.exitForEachStmt(self)




    def forEachStmt(self):

        localctx = nimParser.ForEachStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_forEachStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1014
            self.match(nimParser.T__6)
            self.state = 1015
            self.match(nimParser.OPEN_PAREN)
            self.state = 1016
            self.match(nimParser.IDENTIFIER)
            self.state = 1017
            self.match(nimParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(nimParser.IMPORT, 0)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.IDENTIFIER)
            else:
                return self.getToken(nimParser.IDENTIFIER, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMA)
            else:
                return self.getToken(nimParser.COMMA, i)

        def FROM(self):
            return self.getToken(nimParser.FROM, 0)

        def getRuleIndex(self):
            return nimParser.RULE_importStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportStmt" ):
                listener.enterImportStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportStmt" ):
                listener.exitImportStmt(self)




    def importStmt(self):

        localctx = nimParser.ImportStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_importStmt)
        self._la = 0 # Token type
        try:
            self.state = 1036
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nimParser.IMPORT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1019
                self.match(nimParser.IMPORT)
                self.state = 1020
                self.match(nimParser.IDENTIFIER)
                self.state = 1025
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nimParser.COMMA:
                    self.state = 1021
                    self.match(nimParser.COMMA)
                    self.state = 1022
                    self.match(nimParser.IDENTIFIER)
                    self.state = 1027
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1030
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
                if la_ == 1:
                    self.state = 1028
                    self.match(nimParser.FROM)
                    self.state = 1029
                    self.match(nimParser.IDENTIFIER)


                pass
            elif token in [nimParser.FROM]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1032
                self.match(nimParser.FROM)
                self.state = 1033
                self.match(nimParser.IDENTIFIER)
                self.state = 1034
                self.match(nimParser.IMPORT)
                self.state = 1035
                self.match(nimParser.IDENTIFIER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleCondition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.SimpleConditionContext)
            else:
                return self.getTypedRuleContext(nimParser.SimpleConditionContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.AND)
            else:
                return self.getToken(nimParser.AND, i)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.OR)
            else:
                return self.getToken(nimParser.OR, i)

        def AND_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.AND_OPERATOR)
            else:
                return self.getToken(nimParser.AND_OPERATOR, i)

        def OR_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.OR_OPERATOR)
            else:
                return self.getToken(nimParser.OR_OPERATOR, i)

        def getRuleIndex(self):
            return nimParser.RULE_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition" ):
                listener.enterCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition" ):
                listener.exitCondition(self)




    def condition(self):

        localctx = nimParser.ConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_condition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1038
            self.simpleCondition()
            self.state = 1043
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.AND) | (1 << nimParser.OR) | (1 << nimParser.AND_OPERATOR) | (1 << nimParser.OR_OPERATOR))) != 0):
                self.state = 1039
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.AND) | (1 << nimParser.OR) | (1 << nimParser.AND_OPERATOR) | (1 << nimParser.OR_OPERATOR))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1040
                self.simpleCondition()
                self.state = 1045
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleConditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rightHandSideStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.RightHandSideStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,i)


        def LESS_THAN(self):
            return self.getToken(nimParser.LESS_THAN, 0)

        def GREATER_THAN(self):
            return self.getToken(nimParser.GREATER_THAN, 0)

        def EQUALS_EQUALS(self):
            return self.getToken(nimParser.EQUALS_EQUALS, 0)

        def EQUALS_OPERATOR(self):
            return self.getToken(nimParser.EQUALS_OPERATOR, 0)

        def IDENTIFIER(self):
            return self.getToken(nimParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return nimParser.RULE_simpleCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleCondition" ):
                listener.enterSimpleCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleCondition" ):
                listener.exitSimpleCondition(self)




    def simpleCondition(self):

        localctx = nimParser.SimpleConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_simpleCondition)
        self._la = 0 # Token type
        try:
            self.state = 1065
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1046
                self.rightHandSideStmt()
                self.state = 1058
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.LESS_THAN]:
                    self.state = 1047
                    self.match(nimParser.LESS_THAN)
                    self.state = 1049
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==nimParser.EQUALS_OPERATOR:
                        self.state = 1048
                        self.match(nimParser.EQUALS_OPERATOR)


                    pass
                elif token in [nimParser.T__8]:
                    self.state = 1051
                    self.match(nimParser.T__8)
                    pass
                elif token in [nimParser.T__9]:
                    self.state = 1052
                    self.match(nimParser.T__9)
                    pass
                elif token in [nimParser.GREATER_THAN]:
                    self.state = 1053
                    self.match(nimParser.GREATER_THAN)
                    self.state = 1055
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==nimParser.EQUALS_OPERATOR:
                        self.state = 1054
                        self.match(nimParser.EQUALS_OPERATOR)


                    pass
                elif token in [nimParser.EQUALS_EQUALS]:
                    self.state = 1057
                    self.match(nimParser.EQUALS_EQUALS)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1060
                self.rightHandSideStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1062
                self.match(nimParser.T__5)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1063
                self.match(nimParser.T__10)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1064
                self.match(nimParser.IDENTIFIER)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Character_literalsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_LIT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.CHAR_LIT)
            else:
                return self.getToken(nimParser.CHAR_LIT, i)

        def getRuleIndex(self):
            return nimParser.RULE_character_literals

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharacter_literals" ):
                listener.enterCharacter_literals(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharacter_literals" ):
                listener.exitCharacter_literals(self)




    def character_literals(self):

        localctx = nimParser.Character_literalsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_character_literals)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1068 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1067
                self.match(nimParser.CHAR_LIT)
                self.state = 1070 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==nimParser.CHAR_LIT):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class String_literalsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STR_LIT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.STR_LIT)
            else:
                return self.getToken(nimParser.STR_LIT, i)

        def getRuleIndex(self):
            return nimParser.RULE_string_literals

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_literals" ):
                listener.enterString_literals(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_literals" ):
                listener.exitString_literals(self)




    def string_literals(self):

        localctx = nimParser.String_literalsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_string_literals)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1073 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1072
                self.match(nimParser.STR_LIT)
                self.state = 1075 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==nimParser.STR_LIT):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RightHandSideStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STR_LIT(self):
            return self.getToken(nimParser.STR_LIT, 0)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.IDENTIFIER)
            else:
                return self.getToken(nimParser.IDENTIFIER, i)

        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.LiteralContext)
            else:
                return self.getTypedRuleContext(nimParser.LiteralContext,i)


        def ADD_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.ADD_OPERATOR)
            else:
                return self.getToken(nimParser.ADD_OPERATOR, i)

        def AND_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.AND_OPERATOR)
            else:
                return self.getToken(nimParser.AND_OPERATOR, i)

        def MINUS_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.MINUS_OPERATOR)
            else:
                return self.getToken(nimParser.MINUS_OPERATOR, i)

        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.DIGIT)
            else:
                return self.getToken(nimParser.DIGIT, i)

        def OPEN_BRACK(self):
            return self.getToken(nimParser.OPEN_BRACK, 0)

        def CLOSE_BRACK(self):
            return self.getToken(nimParser.CLOSE_BRACK, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMA)
            else:
                return self.getToken(nimParser.COMMA, i)

        def MUL_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.MUL_OPERATOR)
            else:
                return self.getToken(nimParser.MUL_OPERATOR, i)

        def DIV(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.DIV)
            else:
                return self.getToken(nimParser.DIV, i)

        def methodInvoke(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.MethodInvokeContext)
            else:
                return self.getTypedRuleContext(nimParser.MethodInvokeContext,i)


        def getRuleIndex(self):
            return nimParser.RULE_rightHandSideStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRightHandSideStmt" ):
                listener.enterRightHandSideStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRightHandSideStmt" ):
                listener.exitRightHandSideStmt(self)




    def rightHandSideStmt(self):

        localctx = nimParser.RightHandSideStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_rightHandSideStmt)
        self._la = 0 # Token type
        try:
            self.state = 1183
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1077
                self.match(nimParser.T__5)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1078
                self.match(nimParser.T__10)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1079
                self.match(nimParser.STR_LIT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1087
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.DIGIT]:
                    self.state = 1081 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 1080
                        self.match(nimParser.DIGIT)
                        self.state = 1083 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==nimParser.DIGIT):
                            break

                    pass
                elif token in [nimParser.IDENTIFIER]:
                    self.state = 1085
                    self.match(nimParser.IDENTIFIER)
                    pass
                elif token in [nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                    self.state = 1086
                    self.literal()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1101
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,168,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1089
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.ADD_OPERATOR) | (1 << nimParser.MINUS_OPERATOR) | (1 << nimParser.AND_OPERATOR))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1097
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [nimParser.DIGIT]:
                            self.state = 1091 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 1090
                                self.match(nimParser.DIGIT)
                                self.state = 1093 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==nimParser.DIGIT):
                                    break

                            pass
                        elif token in [nimParser.IDENTIFIER]:
                            self.state = 1095
                            self.match(nimParser.IDENTIFIER)
                            pass
                        elif token in [nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                            self.state = 1096
                            self.literal()
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 1103
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,168,self._ctx)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1104
                self.match(nimParser.IDENTIFIER)
                self.state = 1105
                self.match(nimParser.OPEN_BRACK)
                self.state = 1115
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.IDENTIFIER]:
                    self.state = 1106
                    self.match(nimParser.IDENTIFIER)
                    pass
                elif token in [nimParser.DIGIT, nimParser.MINUS_OPERATOR]:
                    self.state = 1108
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==nimParser.MINUS_OPERATOR:
                        self.state = 1107
                        self.match(nimParser.MINUS_OPERATOR)


                    self.state = 1111 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 1110
                        self.match(nimParser.DIGIT)
                        self.state = 1113 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==nimParser.DIGIT):
                            break

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1135
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.DIV) | (1 << nimParser.ADD_OPERATOR) | (1 << nimParser.MUL_OPERATOR) | (1 << nimParser.MINUS_OPERATOR) | (1 << nimParser.COMMA))) != 0):
                    self.state = 1117
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.DIV) | (1 << nimParser.ADD_OPERATOR) | (1 << nimParser.MUL_OPERATOR) | (1 << nimParser.MINUS_OPERATOR) | (1 << nimParser.COMMA))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1131
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
                    if la_ == 1:
                        self.state = 1119
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==nimParser.MINUS_OPERATOR:
                            self.state = 1118
                            self.match(nimParser.MINUS_OPERATOR)


                        self.state = 1121
                        self.literal()
                        pass

                    elif la_ == 2:
                        self.state = 1123
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==nimParser.MINUS_OPERATOR:
                            self.state = 1122
                            self.match(nimParser.MINUS_OPERATOR)


                        self.state = 1126 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 1125
                            self.match(nimParser.DIGIT)
                            self.state = 1128 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==nimParser.DIGIT):
                                break

                        pass

                    elif la_ == 3:
                        self.state = 1130
                        self.match(nimParser.IDENTIFIER)
                        pass


                    self.state = 1137
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1138
                self.match(nimParser.CLOSE_BRACK)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1139
                self.methodInvoke()
                self.state = 1144
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.ADD_OPERATOR) | (1 << nimParser.MUL_OPERATOR) | (1 << nimParser.MINUS_OPERATOR))) != 0):
                    self.state = 1140
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.ADD_OPERATOR) | (1 << nimParser.MUL_OPERATOR) | (1 << nimParser.MINUS_OPERATOR))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1141
                    self.methodInvoke()
                    self.state = 1146
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1147
                self.literal()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1148
                self.match(nimParser.OPEN_BRACK)
                self.state = 1179
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nimParser.DIGIT or _la==nimParser.MINUS_OPERATOR or ((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & ((1 << (nimParser.NIL - 87)) | (1 << (nimParser.TRIPLESTR_LIT - 87)) | (1 << (nimParser.CHAR_LIT - 87)) | (1 << (nimParser.STR_LIT - 87)) | (1 << (nimParser.RSTR_LIT - 87)) | (1 << (nimParser.INT_LIT - 87)) | (1 << (nimParser.INT8_LIT - 87)) | (1 << (nimParser.INT16_LIT - 87)) | (1 << (nimParser.INT32_LIT - 87)) | (1 << (nimParser.INT64_LIT - 87)) | (1 << (nimParser.UINT_LIT - 87)) | (1 << (nimParser.UINT8_LIT - 87)) | (1 << (nimParser.UINT16_LIT - 87)) | (1 << (nimParser.UINT32_LIT - 87)) | (1 << (nimParser.UINT64_LIT - 87)) | (1 << (nimParser.FLOAT_LIT - 87)) | (1 << (nimParser.FLOAT32_LIT - 87)) | (1 << (nimParser.FLOAT64_LIT - 87)))) != 0):
                    self.state = 1158
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [nimParser.MINUS_OPERATOR, nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                        self.state = 1150
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==nimParser.MINUS_OPERATOR:
                            self.state = 1149
                            self.match(nimParser.MINUS_OPERATOR)


                        self.state = 1152
                        self.literal()
                        pass
                    elif token in [nimParser.DIGIT]:
                        self.state = 1154 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 1153
                                self.match(nimParser.DIGIT)

                            else:
                                raise NoViableAltException(self)
                            self.state = 1156 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,179,self._ctx)

                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1174
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==nimParser.COMMA:
                        self.state = 1160
                        self.match(nimParser.COMMA)
                        self.state = 1170
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [nimParser.MINUS_OPERATOR, nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                            self.state = 1162
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==nimParser.MINUS_OPERATOR:
                                self.state = 1161
                                self.match(nimParser.MINUS_OPERATOR)


                            self.state = 1164
                            self.literal()
                            pass
                        elif token in [nimParser.DIGIT]:
                            self.state = 1166 
                            self._errHandler.sync(self)
                            _alt = 1
                            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                if _alt == 1:
                                    self.state = 1165
                                    self.match(nimParser.DIGIT)

                                else:
                                    raise NoViableAltException(self)
                                self.state = 1168 
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,182,self._ctx)

                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 1176
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1181
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1182
                self.match(nimParser.CLOSE_BRACK)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return nimParser.RULE_dataType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataType" ):
                listener.enterDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataType" ):
                listener.exitDataType(self)




    def dataType(self):

        localctx = nimParser.DataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_dataType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1185
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.T__11) | (1 << nimParser.T__12) | (1 << nimParser.T__13))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleCaseStmt(self):
            return self.getTypedRuleContext(nimParser.SimpleCaseStmtContext,0)


        def simpleElseStmt(self):
            return self.getTypedRuleContext(nimParser.SimpleElseStmtContext,0)


        def simpleOfStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.SimpleOfStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.SimpleOfStmtContext,i)


        def simpleElifOfStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.SimpleElifOfStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.SimpleElifOfStmtContext,i)


        def getRuleIndex(self):
            return nimParser.RULE_caseStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseStmt" ):
                listener.enterCaseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseStmt" ):
                listener.exitCaseStmt(self)




    def caseStmt(self):

        localctx = nimParser.CaseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_caseStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1187
            self.simpleCaseStmt()
            self.state = 1191
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,187,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1188
                    self.simpleOfStmt() 
                self.state = 1193
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,187,self._ctx)

            self.state = 1197
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==nimParser.ELIF:
                self.state = 1194
                self.simpleElifOfStmt()
                self.state = 1199
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1200
            self.simpleElseStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleOfStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OF(self):
            return self.getToken(nimParser.OF, 0)

        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.IDENTIFIER)
            else:
                return self.getToken(nimParser.IDENTIFIER, i)

        def STR_LIT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.STR_LIT)
            else:
                return self.getToken(nimParser.STR_LIT, i)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMA)
            else:
                return self.getToken(nimParser.COMMA, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def RETURN(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.RETURN)
            else:
                return self.getToken(nimParser.RETURN, i)

        def rightHandSideStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.RightHandSideStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,i)


        def getRuleIndex(self):
            return nimParser.RULE_simpleOfStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleOfStmt" ):
                listener.enterSimpleOfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleOfStmt" ):
                listener.exitSimpleOfStmt(self)




    def simpleOfStmt(self):

        localctx = nimParser.SimpleOfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_simpleOfStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1203
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.INDENT:
                self.state = 1202
                self.match(nimParser.INDENT)


            self.state = 1205
            self.match(nimParser.OF)
            self.state = 1206
            _la = self._input.LA(1)
            if not(_la==nimParser.STR_LIT or _la==nimParser.IDENTIFIER):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1211
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==nimParser.COMMA:
                self.state = 1207
                self.match(nimParser.COMMA)
                self.state = 1208
                _la = self._input.LA(1)
                if not(_la==nimParser.STR_LIT or _la==nimParser.IDENTIFIER):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1213
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1214
            self.match(nimParser.COLON)
            self.state = 1227 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1217
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
                if la_ == 1:
                    self.state = 1215
                    self.match(nimParser.T__0)
                    self.state = 1216
                    self.match(nimParser.INDENT)


                self.state = 1222
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.T__0, nimParser.T__6, nimParser.VARIABLE, nimParser.ECHO, nimParser.BLOCK, nimParser.CASE, nimParser.CONST, nimParser.FOR, nimParser.FROM, nimParser.IF, nimParser.IMPORT, nimParser.LET, nimParser.PROC, nimParser.TYPE, nimParser.WHEN, nimParser.WHILE, nimParser.OPEN_PAREN, nimParser.IDENTIFIER, nimParser.NEW_IDENTIFIER]:
                    self.state = 1219
                    self.stmt()
                    pass
                elif token in [nimParser.RETURN]:
                    self.state = 1220
                    self.match(nimParser.RETURN)
                    self.state = 1221
                    self.rightHandSideStmt()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1225
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
                if la_ == 1:
                    self.state = 1224
                    self.match(nimParser.T__0)


                self.state = 1229 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.T__0) | (1 << nimParser.T__6) | (1 << nimParser.VARIABLE) | (1 << nimParser.ECHO) | (1 << nimParser.BLOCK) | (1 << nimParser.CASE) | (1 << nimParser.CONST))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (nimParser.FOR - 74)) | (1 << (nimParser.FROM - 74)) | (1 << (nimParser.IF - 74)) | (1 << (nimParser.IMPORT - 74)) | (1 << (nimParser.LET - 74)) | (1 << (nimParser.PROC - 74)) | (1 << (nimParser.RETURN - 74)) | (1 << (nimParser.TYPE - 74)) | (1 << (nimParser.WHEN - 74)) | (1 << (nimParser.WHILE - 74)) | (1 << (nimParser.OPEN_PAREN - 74)) | (1 << (nimParser.IDENTIFIER - 74)))) != 0) or _la==nimParser.NEW_IDENTIFIER):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleElifOfStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELIF(self):
            return self.getToken(nimParser.ELIF, 0)

        def rightHandSideStmt(self):
            return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,0)


        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def COMMENT(self):
            return self.getToken(nimParser.COMMENT, 0)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def getRuleIndex(self):
            return nimParser.RULE_simpleElifOfStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleElifOfStmt" ):
                listener.enterSimpleElifOfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleElifOfStmt" ):
                listener.exitSimpleElifOfStmt(self)




    def simpleElifOfStmt(self):

        localctx = nimParser.SimpleElifOfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_simpleElifOfStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1231
            self.match(nimParser.ELIF)
            self.state = 1232
            self.rightHandSideStmt()
            self.state = 1233
            self.match(nimParser.COLON)
            self.state = 1235
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.COMMENT:
                self.state = 1234
                self.match(nimParser.COMMENT)


            self.state = 1242 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1237
                self.match(nimParser.T__0)
                self.state = 1239
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.INDENT:
                    self.state = 1238
                    self.match(nimParser.INDENT)


                self.state = 1241
                self.stmt()
                self.state = 1244 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==nimParser.T__0):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleCaseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(nimParser.CASE, 0)

        def IDENTIFIER(self):
            return self.getToken(nimParser.IDENTIFIER, 0)

        def COMMENT(self):
            return self.getToken(nimParser.COMMENT, 0)

        def getRuleIndex(self):
            return nimParser.RULE_simpleCaseStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleCaseStmt" ):
                listener.enterSimpleCaseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleCaseStmt" ):
                listener.exitSimpleCaseStmt(self)




    def simpleCaseStmt(self):

        localctx = nimParser.SimpleCaseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_simpleCaseStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1246
            self.match(nimParser.CASE)
            self.state = 1247
            self.match(nimParser.IDENTIFIER)
            self.state = 1249
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.COMMENT:
                self.state = 1248
                self.match(nimParser.COMMENT)


            self.state = 1252
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.T__0:
                self.state = 1251
                self.match(nimParser.T__0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmptyStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return nimParser.RULE_emptyStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptyStmt" ):
                listener.enterEmptyStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptyStmt" ):
                listener.exitEmptyStmt(self)




    def emptyStmt(self):

        localctx = nimParser.EmptyStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_emptyStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1254
            self.match(nimParser.T__0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommentStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(nimParser.COMMENT, 0)

        def INDENT(self):
            return self.getToken(nimParser.INDENT, 0)

        def getRuleIndex(self):
            return nimParser.RULE_commentStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommentStmt" ):
                listener.enterCommentStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommentStmt" ):
                listener.exitCommentStmt(self)




    def commentStmt(self):

        localctx = nimParser.CommentStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_commentStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1257
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.INDENT:
                self.state = 1256
                self.match(nimParser.INDENT)


            self.state = 1259
            self.match(nimParser.COMMENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUALS_OPERATOR(self):
            return self.getToken(nimParser.EQUALS_OPERATOR, 0)

        def ADD_OPERATOR(self):
            return self.getToken(nimParser.ADD_OPERATOR, 0)

        def MUL_OPERATOR(self):
            return self.getToken(nimParser.MUL_OPERATOR, 0)

        def MINUS_OPERATOR(self):
            return self.getToken(nimParser.MINUS_OPERATOR, 0)

        def DIV_OPERATOR(self):
            return self.getToken(nimParser.DIV_OPERATOR, 0)

        def BITWISE_NOT_OPERATOR(self):
            return self.getToken(nimParser.BITWISE_NOT_OPERATOR, 0)

        def AND_OPERATOR(self):
            return self.getToken(nimParser.AND_OPERATOR, 0)

        def OR_OPERATOR(self):
            return self.getToken(nimParser.OR_OPERATOR, 0)

        def LESS_THAN(self):
            return self.getToken(nimParser.LESS_THAN, 0)

        def GREATER_THAN(self):
            return self.getToken(nimParser.GREATER_THAN, 0)

        def NOT_OPERATOR(self):
            return self.getToken(nimParser.NOT_OPERATOR, 0)

        def XOR_OPERATOR(self):
            return self.getToken(nimParser.XOR_OPERATOR, 0)

        def getRuleIndex(self):
            return nimParser.RULE_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator" ):
                listener.enterOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator" ):
                listener.exitOperator(self)




    def operator(self):

        localctx = nimParser.OperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1261
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.EQUALS_OPERATOR) | (1 << nimParser.ADD_OPERATOR) | (1 << nimParser.MUL_OPERATOR) | (1 << nimParser.MINUS_OPERATOR) | (1 << nimParser.DIV_OPERATOR) | (1 << nimParser.BITWISE_NOT_OPERATOR) | (1 << nimParser.AND_OPERATOR) | (1 << nimParser.OR_OPERATOR) | (1 << nimParser.LESS_THAN) | (1 << nimParser.GREATER_THAN) | (1 << nimParser.NOT_OPERATOR) | (1 << nimParser.XOR_OPERATOR))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_LIT(self):
            return self.getToken(nimParser.INT_LIT, 0)

        def INT8_LIT(self):
            return self.getToken(nimParser.INT8_LIT, 0)

        def INT16_LIT(self):
            return self.getToken(nimParser.INT16_LIT, 0)

        def INT32_LIT(self):
            return self.getToken(nimParser.INT32_LIT, 0)

        def INT64_LIT(self):
            return self.getToken(nimParser.INT64_LIT, 0)

        def UINT_LIT(self):
            return self.getToken(nimParser.UINT_LIT, 0)

        def UINT8_LIT(self):
            return self.getToken(nimParser.UINT8_LIT, 0)

        def UINT16_LIT(self):
            return self.getToken(nimParser.UINT16_LIT, 0)

        def UINT32_LIT(self):
            return self.getToken(nimParser.UINT32_LIT, 0)

        def UINT64_LIT(self):
            return self.getToken(nimParser.UINT64_LIT, 0)

        def FLOAT_LIT(self):
            return self.getToken(nimParser.FLOAT_LIT, 0)

        def FLOAT32_LIT(self):
            return self.getToken(nimParser.FLOAT32_LIT, 0)

        def FLOAT64_LIT(self):
            return self.getToken(nimParser.FLOAT64_LIT, 0)

        def STR_LIT(self):
            return self.getToken(nimParser.STR_LIT, 0)

        def RSTR_LIT(self):
            return self.getToken(nimParser.RSTR_LIT, 0)

        def TRIPLESTR_LIT(self):
            return self.getToken(nimParser.TRIPLESTR_LIT, 0)

        def CHAR_LIT(self):
            return self.getToken(nimParser.CHAR_LIT, 0)

        def NIL(self):
            return self.getToken(nimParser.NIL, 0)

        def getRuleIndex(self):
            return nimParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = nimParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1263
            _la = self._input.LA(1)
            if not(((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & ((1 << (nimParser.NIL - 87)) | (1 << (nimParser.TRIPLESTR_LIT - 87)) | (1 << (nimParser.CHAR_LIT - 87)) | (1 << (nimParser.STR_LIT - 87)) | (1 << (nimParser.RSTR_LIT - 87)) | (1 << (nimParser.INT_LIT - 87)) | (1 << (nimParser.INT8_LIT - 87)) | (1 << (nimParser.INT16_LIT - 87)) | (1 << (nimParser.INT32_LIT - 87)) | (1 << (nimParser.INT64_LIT - 87)) | (1 << (nimParser.UINT_LIT - 87)) | (1 << (nimParser.UINT8_LIT - 87)) | (1 << (nimParser.UINT16_LIT - 87)) | (1 << (nimParser.UINT32_LIT - 87)) | (1 << (nimParser.UINT64_LIT - 87)) | (1 << (nimParser.FLOAT_LIT - 87)) | (1 << (nimParser.FLOAT32_LIT - 87)) | (1 << (nimParser.FLOAT64_LIT - 87)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx






# Generated from nim.g4 by ANTLR 4.7.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u009a")
        buf.write("\u04c9\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\3\2\3\2\7\2Q\n\2\f\2\16\2T\13\2\7\2V\n\2\f\2")
        buf.write("\16\2Y\13\2\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\3\3\5\3l\n\3\3\4\3\4\3\4\5\4q\n")
        buf.write("\4\3\4\3\4\3\4\7\4v\n\4\f\4\16\4y\13\4\3\4\3\4\3\4\5\4")
        buf.write("~\n\4\3\4\7\4\u0081\n\4\f\4\16\4\u0084\13\4\3\4\3\4\5")
        buf.write("\4\u0088\n\4\3\4\3\4\7\4\u008c\n\4\f\4\16\4\u008f\13\4")
        buf.write("\3\4\7\4\u0092\n\4\f\4\16\4\u0095\13\4\3\4\3\4\3\4\3\4")
        buf.write("\3\4\3\4\3\4\3\4\3\4\5\4\u00a0\n\4\3\4\6\4\u00a3\n\4\r")
        buf.write("\4\16\4\u00a4\3\4\5\4\u00a8\n\4\3\4\3\4\5\4\u00ac\n\4")
        buf.write("\3\4\6\4\u00af\n\4\r\4\16\4\u00b0\3\4\5\4\u00b4\n\4\7")
        buf.write("\4\u00b6\n\4\f\4\16\4\u00b9\13\4\3\4\6\4\u00bc\n\4\r\4")
        buf.write("\16\4\u00bd\3\5\3\5\3\5\5\5\u00c3\n\5\3\5\3\5\5\5\u00c7")
        buf.write("\n\5\3\5\3\5\5\5\u00cb\n\5\6\5\u00cd\n\5\r\5\16\5\u00ce")
        buf.write("\3\6\3\6\3\6\5\6\u00d4\n\6\3\6\3\6\5\6\u00d8\n\6\3\6\3")
        buf.write("\6\5\6\u00dc\n\6\6\6\u00de\n\6\r\6\16\6\u00df\3\7\3\7")
        buf.write("\3\7\5\7\u00e5\n\7\3\7\3\7\5\7\u00e9\n\7\3\7\7\7\u00ec")
        buf.write("\n\7\f\7\16\7\u00ef\13\7\3\7\5\7\u00f2\n\7\3\b\3\b\3\b")
        buf.write("\3\b\3\b\7\b\u00f9\n\b\f\b\16\b\u00fc\13\b\3\b\3\b\3\b")
        buf.write("\3\b\3\b\3\b\7\b\u0104\n\b\f\b\16\b\u0107\13\b\5\b\u0109")
        buf.write("\n\b\3\t\3\t\7\t\u010d\n\t\f\t\16\t\u0110\13\t\3\t\5\t")
        buf.write("\u0113\n\t\3\t\3\t\5\t\u0117\n\t\3\n\3\n\7\n\u011b\n\n")
        buf.write("\f\n\16\n\u011e\13\n\3\n\5\n\u0121\n\n\3\13\3\13\5\13")
        buf.write("\u0125\n\13\3\13\3\13\3\13\3\13\3\13\3\13\5\13\u012d\n")
        buf.write("\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13")
        buf.write("\3\13\3\13\5\13\u013b\n\13\6\13\u013d\n\13\r\13\16\13")
        buf.write("\u013e\3\13\3\13\5\13\u0143\n\13\3\13\3\13\3\13\3\13\3")
        buf.write("\13\3\13\3\13\3\13\6\13\u014d\n\13\r\13\16\13\u014e\3")
        buf.write("\13\6\13\u0152\n\13\r\13\16\13\u0153\6\13\u0156\n\13\r")
        buf.write("\13\16\13\u0157\3\13\3\13\5\13\u015c\n\13\3\13\3\13\3")
        buf.write("\13\3\13\3\13\3\13\5\13\u0164\n\13\3\13\3\13\3\13\3\13")
        buf.write("\3\13\3\13\3\13\3\13\3\13\7\13\u016f\n\13\f\13\16\13\u0172")
        buf.write("\13\13\6\13\u0174\n\13\r\13\16\13\u0175\3\13\3\13\5\13")
        buf.write("\u017a\n\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\5\13\u0183")
        buf.write("\n\13\3\f\3\f\5\f\u0187\n\f\3\f\3\f\3\f\3\f\5\f\u018d")
        buf.write("\n\f\3\r\3\r\5\r\u0191\n\r\3\r\3\r\3\r\3\r\5\r\u0197\n")
        buf.write("\r\3\16\5\16\u019a\n\16\3\16\3\16\3\16\3\16\5\16\u01a0")
        buf.write("\n\16\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\7\17")
        buf.write("\u01ab\n\17\f\17\16\17\u01ae\13\17\6\17\u01b0\n\17\r\17")
        buf.write("\16\17\u01b1\3\20\5\20\u01b5\n\20\3\20\3\20\3\20\3\20")
        buf.write("\3\20\3\20\3\20\6\20\u01be\n\20\r\20\16\20\u01bf\3\20")
        buf.write("\7\20\u01c3\n\20\f\20\16\20\u01c6\13\20\3\20\5\20\u01c9")
        buf.write("\n\20\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\5\21\u01d3")
        buf.write("\n\21\3\21\3\21\3\21\6\21\u01d8\n\21\r\21\16\21\u01d9")
        buf.write("\3\21\7\21\u01dd\n\21\f\21\16\21\u01e0\13\21\3\21\3\21")
        buf.write("\3\21\3\21\3\21\5\21\u01e7\n\21\3\21\3\21\5\21\u01eb\n")
        buf.write("\21\3\21\3\21\3\21\6\21\u01f0\n\21\r\21\16\21\u01f1\3")
        buf.write("\21\7\21\u01f5\n\21\f\21\16\21\u01f8\13\21\3\21\3\21\3")
        buf.write("\21\3\21\6\21\u01fe\n\21\r\21\16\21\u01ff\3\21\3\21\3")
        buf.write("\21\3\21\3\21\5\21\u0207\n\21\3\21\3\21\3\21\6\21\u020c")
        buf.write("\n\21\r\21\16\21\u020d\3\21\7\21\u0211\n\21\f\21\16\21")
        buf.write("\u0214\13\21\3\21\3\21\3\21\3\21\7\21\u021a\n\21\f\21")
        buf.write("\16\21\u021d\13\21\3\21\3\21\3\21\3\21\3\21\6\21\u0224")
        buf.write("\n\21\r\21\16\21\u0225\5\21\u0228\n\21\3\21\3\21\3\21")
        buf.write("\6\21\u022d\n\21\r\21\16\21\u022e\5\21\u0231\n\21\7\21")
        buf.write("\u0233\n\21\f\21\16\21\u0236\13\21\7\21\u0238\n\21\f\21")
        buf.write("\16\21\u023b\13\21\3\21\3\21\3\21\5\21\u0240\n\21\3\21")
        buf.write("\3\21\3\21\6\21\u0245\n\21\r\21\16\21\u0246\3\21\7\21")
        buf.write("\u024a\n\21\f\21\16\21\u024d\13\21\3\21\3\21\3\21\3\21")
        buf.write("\3\21\3\21\3\21\3\21\3\21\5\21\u0258\n\21\3\21\3\21\3")
        buf.write("\21\6\21\u025d\n\21\r\21\16\21\u025e\3\21\7\21\u0262\n")
        buf.write("\21\f\21\16\21\u0265\13\21\3\21\3\21\3\21\3\21\3\21\3")
        buf.write("\21\3\21\3\21\3\21\5\21\u0270\n\21\5\21\u0272\n\21\3\22")
        buf.write("\3\22\3\22\5\22\u0277\n\22\3\22\3\22\3\22\3\22\3\22\5")
        buf.write("\22\u027e\n\22\6\22\u0280\n\22\r\22\16\22\u0281\3\23\3")
        buf.write("\23\7\23\u0286\n\23\f\23\16\23\u0289\13\23\3\23\3\23\3")
        buf.write("\24\3\24\3\24\3\24\3\24\5\24\u0292\n\24\3\24\3\24\5\24")
        buf.write("\u0296\n\24\6\24\u0298\n\24\r\24\16\24\u0299\3\25\3\25")
        buf.write("\3\25\3\25\3\25\5\25\u02a1\n\25\3\25\3\25\3\25\3\25\3")
        buf.write("\25\3\25\3\25\5\25\u02aa\n\25\3\25\3\25\3\25\3\25\6\25")
        buf.write("\u02b0\n\25\r\25\16\25\u02b1\3\25\3\25\7\25\u02b6\n\25")
        buf.write("\f\25\16\25\u02b9\13\25\3\25\3\25\3\25\7\25\u02be\n\25")
        buf.write("\f\25\16\25\u02c1\13\25\3\25\3\25\7\25\u02c5\n\25\f\25")
        buf.write("\16\25\u02c8\13\25\3\25\3\25\3\25\7\25\u02cd\n\25\f\25")
        buf.write("\16\25\u02d0\13\25\5\25\u02d2\n\25\3\25\3\25\5\25\u02d6")
        buf.write("\n\25\3\25\5\25\u02d9\n\25\3\25\3\25\3\25\3\25\3\25\3")
        buf.write("\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\5\25\u02e9")
        buf.write("\n\25\3\25\3\25\3\25\3\25\6\25\u02ef\n\25\r\25\16\25\u02f0")
        buf.write("\3\25\3\25\7\25\u02f5\n\25\f\25\16\25\u02f8\13\25\3\25")
        buf.write("\3\25\3\25\7\25\u02fd\n\25\f\25\16\25\u0300\13\25\3\25")
        buf.write("\3\25\7\25\u0304\n\25\f\25\16\25\u0307\13\25\3\25\3\25")
        buf.write("\3\25\7\25\u030c\n\25\f\25\16\25\u030f\13\25\5\25\u0311")
        buf.write("\n\25\3\25\3\25\3\25\3\25\5\25\u0317\n\25\3\25\3\25\3")
        buf.write("\25\3\25\3\25\5\25\u031e\n\25\3\25\3\25\3\25\3\25\3\25")
        buf.write("\3\25\3\25\3\25\3\25\3\25\3\25\3\25\5\25\u032c\n\25\3")
        buf.write("\25\6\25\u032f\n\25\r\25\16\25\u0330\3\25\3\25\5\25\u0335")
        buf.write("\n\25\7\25\u0337\n\25\f\25\16\25\u033a\13\25\3\25\3\25")
        buf.write("\3\25\5\25\u033f\n\25\3\25\3\25\3\25\3\25\6\25\u0345\n")
        buf.write("\25\r\25\16\25\u0346\3\25\3\25\7\25\u034b\n\25\f\25\16")
        buf.write("\25\u034e\13\25\3\25\3\25\3\25\7\25\u0353\n\25\f\25\16")
        buf.write("\25\u0356\13\25\3\25\3\25\7\25\u035a\n\25\f\25\16\25\u035d")
        buf.write("\13\25\3\25\3\25\3\25\7\25\u0362\n\25\f\25\16\25\u0365")
        buf.write("\13\25\5\25\u0367\n\25\3\25\3\25\5\25\u036b\n\25\3\25")
        buf.write("\5\25\u036e\n\25\5\25\u0370\n\25\3\26\3\26\3\26\3\26\3")
        buf.write("\26\3\26\6\26\u0378\n\26\r\26\16\26\u0379\3\27\3\27\3")
        buf.write("\27\3\27\3\27\3\27\3\27\3\27\3\27\6\27\u0385\n\27\r\27")
        buf.write("\16\27\u0386\5\27\u0389\n\27\3\27\3\27\3\27\3\27\3\27")
        buf.write("\6\27\u0390\n\27\r\27\16\27\u0391\3\30\3\30\3\30\3\30")
        buf.write("\6\30\u0398\n\30\r\30\16\30\u0399\3\30\5\30\u039d\n\30")
        buf.write("\3\30\3\30\3\30\6\30\u03a2\n\30\r\30\16\30\u03a3\3\30")
        buf.write("\5\30\u03a7\n\30\7\30\u03a9\n\30\f\30\16\30\u03ac\13\30")
        buf.write("\3\30\3\30\3\30\3\30\6\30\u03b2\n\30\r\30\16\30\u03b3")
        buf.write("\3\30\5\30\u03b7\n\30\3\30\3\30\3\30\6\30\u03bc\n\30\r")
        buf.write("\30\16\30\u03bd\3\30\5\30\u03c1\n\30\7\30\u03c3\n\30\f")
        buf.write("\30\16\30\u03c6\13\30\3\30\3\30\3\30\3\30\3\30\3\30\3")
        buf.write("\30\3\30\3\30\3\30\3\30\3\30\7\30\u03d4\n\30\f\30\16\30")
        buf.write("\u03d7\13\30\5\30\u03d9\n\30\5\30\u03db\n\30\3\31\3\31")
        buf.write("\3\31\3\31\3\31\7\31\u03e2\n\31\f\31\16\31\u03e5\13\31")
        buf.write("\3\31\3\31\3\32\3\32\3\32\3\32\3\32\3\33\3\33\3\33\5\33")
        buf.write("\u03f1\n\33\3\33\3\33\3\33\3\33\5\33\u03f7\n\33\3\33\5")
        buf.write("\33\u03fa\n\33\3\33\3\33\3\33\3\33\3\33\5\33\u0401\n\33")
        buf.write("\3\34\6\34\u0404\n\34\r\34\16\34\u0405\3\35\6\35\u0409")
        buf.write("\n\35\r\35\16\35\u040a\3\36\3\36\3\36\3\36\6\36\u0411")
        buf.write("\n\36\r\36\16\36\u0412\3\36\3\36\5\36\u0417\n\36\3\36")
        buf.write("\3\36\6\36\u041b\n\36\r\36\16\36\u041c\3\36\3\36\5\36")
        buf.write("\u0421\n\36\7\36\u0423\n\36\f\36\16\36\u0426\13\36\3\36")
        buf.write("\3\36\3\36\3\36\5\36\u042c\n\36\3\36\6\36\u042f\n\36\r")
        buf.write("\36\16\36\u0430\5\36\u0433\n\36\3\36\3\36\5\36\u0437\n")
        buf.write("\36\3\36\3\36\5\36\u043b\n\36\3\36\6\36\u043e\n\36\r\36")
        buf.write("\16\36\u043f\3\36\5\36\u0443\n\36\7\36\u0445\n\36\f\36")
        buf.write("\16\36\u0448\13\36\3\36\3\36\3\36\3\36\7\36\u044e\n\36")
        buf.write("\f\36\16\36\u0451\13\36\3\36\3\36\3\36\5\36\u0456\n\36")
        buf.write("\3\36\3\36\6\36\u045a\n\36\r\36\16\36\u045b\5\36\u045e")
        buf.write("\n\36\3\36\3\36\5\36\u0462\n\36\3\36\3\36\6\36\u0466\n")
        buf.write("\36\r\36\16\36\u0467\5\36\u046a\n\36\7\36\u046c\n\36\f")
        buf.write("\36\16\36\u046f\13\36\7\36\u0471\n\36\f\36\16\36\u0474")
        buf.write("\13\36\3\36\5\36\u0477\n\36\3\37\3\37\3 \3 \7 \u047d\n")
        buf.write(" \f \16 \u0480\13 \3 \7 \u0483\n \f \16 \u0486\13 \3 ")
        buf.write("\3 \3!\5!\u048b\n!\3!\3!\3!\3!\7!\u0491\n!\f!\16!\u0494")
        buf.write("\13!\3!\3!\3!\5!\u0499\n!\3!\3!\3!\5!\u049e\n!\3!\5!\u04a1")
        buf.write("\n!\6!\u04a3\n!\r!\16!\u04a4\3\"\3\"\3\"\3\"\5\"\u04ab")
        buf.write("\n\"\3\"\3\"\5\"\u04af\n\"\3\"\6\"\u04b2\n\"\r\"\16\"")
        buf.write("\u04b3\3#\3#\3#\5#\u04b9\n#\3#\5#\u04bc\n#\3$\3$\3%\5")
        buf.write("%\u04c1\n%\3%\3%\3&\3&\3\'\3\'\3\'\2\2(\2\4\6\b\n\f\16")
        buf.write("\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDF")
        buf.write("HJL\2\f\3\2\3\4\3\2\3\5\5\2&&((\63\63\5\2&&((++\5\2\32")
        buf.write("\32&(\63\63\3\2&(\3\2\16\20\4\2tt~~\3\2%\60\7\2YYru\u0081")
        buf.write("\u0081\u0086\u0090\u0092\u0092\2\u059b\2W\3\2\2\2\4k\3")
        buf.write("\2\2\2\6m\3\2\2\2\b\u00bf\3\2\2\2\n\u00d0\3\2\2\2\f\u00e1")
        buf.write("\3\2\2\2\16\u0108\3\2\2\2\20\u010a\3\2\2\2\22\u0118\3")
        buf.write("\2\2\2\24\u0182\3\2\2\2\26\u0184\3\2\2\2\30\u018e\3\2")
        buf.write("\2\2\32\u0199\3\2\2\2\34\u01a1\3\2\2\2\36\u01b4\3\2\2")
        buf.write("\2 \u0271\3\2\2\2\"\u0273\3\2\2\2$\u0283\3\2\2\2&\u028c")
        buf.write("\3\2\2\2(\u036f\3\2\2\2*\u0371\3\2\2\2,\u037b\3\2\2\2")
        buf.write(".\u03da\3\2\2\2\60\u03dc\3\2\2\2\62\u03e8\3\2\2\2\64\u0400")
        buf.write("\3\2\2\2\66\u0403\3\2\2\28\u0408\3\2\2\2:\u0476\3\2\2")
        buf.write("\2<\u0478\3\2\2\2>\u047a\3\2\2\2@\u048a\3\2\2\2B\u04a6")
        buf.write("\3\2\2\2D\u04b5\3\2\2\2F\u04bd\3\2\2\2H\u04c0\3\2\2\2")
        buf.write("J\u04c4\3\2\2\2L\u04c6\3\2\2\2NR\5\4\3\2OQ\t\2\2\2PO\3")
        buf.write("\2\2\2QT\3\2\2\2RP\3\2\2\2RS\3\2\2\2SV\3\2\2\2TR\3\2\2")
        buf.write("\2UN\3\2\2\2VY\3\2\2\2WU\3\2\2\2WX\3\2\2\2X\3\3\2\2\2")
        buf.write("YW\3\2\2\2Zl\5\6\4\2[l\5\f\7\2\\l\5\16\b\2]l\5\b\5\2^")
        buf.write("l\5\n\6\2_l\5\20\t\2`l\5 \21\2al\5\"\22\2bl\5$\23\2cl")
        buf.write("\5(\25\2dl\5*\26\2el\5,\27\2fl\5.\30\2gl\5\60\31\2hl\5")
        buf.write("F$\2il\5\62\32\2jl\5> \2kZ\3\2\2\2k[\3\2\2\2k\\\3\2\2")
        buf.write("\2k]\3\2\2\2k^\3\2\2\2k_\3\2\2\2k`\3\2\2\2ka\3\2\2\2k")
        buf.write("b\3\2\2\2kc\3\2\2\2kd\3\2\2\2ke\3\2\2\2kf\3\2\2\2kg\3")
        buf.write("\2\2\2kh\3\2\2\2ki\3\2\2\2kj\3\2\2\2l\5\3\2\2\2m\u00bb")
        buf.write("\7\27\2\2no\7\3\2\2oq\7\22\2\2pn\3\2\2\2pq\3\2\2\2qr\3")
        buf.write("\2\2\2rw\7~\2\2st\7\63\2\2tv\7~\2\2us\3\2\2\2vy\3\2\2")
        buf.write("\2wu\3\2\2\2wx\3\2\2\2xz\3\2\2\2yw\3\2\2\2z}\7\62\2\2")
        buf.write("{~\5<\37\2|~\7~\2\2}{\3\2\2\2}|\3\2\2\2~\u0082\3\2\2\2")
        buf.write("\177\u0081\7\3\2\2\u0080\177\3\2\2\2\u0081\u0084\3\2\2")
        buf.write("\2\u0082\u0080\3\2\2\2\u0082\u0083\3\2\2\2\u0083\u00bc")
        buf.write("\3\2\2\2\u0084\u0082\3\2\2\2\u0085\u0086\7\3\2\2\u0086")
        buf.write("\u0088\7\22\2\2\u0087\u0085\3\2\2\2\u0087\u0088\3\2\2")
        buf.write("\2\u0088\u0089\3\2\2\2\u0089\u008d\7\5\2\2\u008a\u008c")
        buf.write("\n\3\2\2\u008b\u008a\3\2\2\2\u008c\u008f\3\2\2\2\u008d")
        buf.write("\u008b\3\2\2\2\u008d\u008e\3\2\2\2\u008e\u0093\3\2\2\2")
        buf.write("\u008f\u008d\3\2\2\2\u0090\u0092\7\3\2\2\u0091\u0090\3")
        buf.write("\2\2\2\u0092\u0095\3\2\2\2\u0093\u0091\3\2\2\2\u0093\u0094")
        buf.write("\3\2\2\2\u0094\u00bc\3\2\2\2\u0095\u0093\3\2\2\2\u0096")
        buf.write("\u00bc\5\f\7\2\u0097\u0098\7~\2\2\u0098\u0099\7%\2\2\u0099")
        buf.write("\u00bc\5\22\n\2\u009a\u009b\7~\2\2\u009b\u009c\7%\2\2")
        buf.write("\u009c\u009d\7y\2\2\u009d\u00a7\7o\2\2\u009e\u00a0\7(")
        buf.write("\2\2\u009f\u009e\3\2\2\2\u009f\u00a0\3\2\2\2\u00a0\u00a2")
        buf.write("\3\2\2\2\u00a1\u00a3\7\21\2\2\u00a2\u00a1\3\2\2\2\u00a3")
        buf.write("\u00a4\3\2\2\2\u00a4\u00a2\3\2\2\2\u00a4\u00a5\3\2\2\2")
        buf.write("\u00a5\u00a8\3\2\2\2\u00a6\u00a8\7~\2\2\u00a7\u009f\3")
        buf.write("\2\2\2\u00a7\u00a6\3\2\2\2\u00a8\u00b7\3\2\2\2\u00a9\u00b3")
        buf.write("\7\63\2\2\u00aa\u00ac\7(\2\2\u00ab\u00aa\3\2\2\2\u00ab")
        buf.write("\u00ac\3\2\2\2\u00ac\u00ae\3\2\2\2\u00ad\u00af\7\21\2")
        buf.write("\2\u00ae\u00ad\3\2\2\2\u00af\u00b0\3\2\2\2\u00b0\u00ae")
        buf.write("\3\2\2\2\u00b0\u00b1\3\2\2\2\u00b1\u00b4\3\2\2\2\u00b2")
        buf.write("\u00b4\7~\2\2\u00b3\u00ab\3\2\2\2\u00b3\u00b2\3\2\2\2")
        buf.write("\u00b4\u00b6\3\2\2\2\u00b5\u00a9\3\2\2\2\u00b6\u00b9\3")
        buf.write("\2\2\2\u00b7\u00b5\3\2\2\2\u00b7\u00b8\3\2\2\2\u00b8\u00ba")
        buf.write("\3\2\2\2\u00b9\u00b7\3\2\2\2\u00ba\u00bc\7p\2\2\u00bb")
        buf.write("p\3\2\2\2\u00bb\u0087\3\2\2\2\u00bb\u0096\3\2\2\2\u00bb")
        buf.write("\u0097\3\2\2\2\u00bb\u009a\3\2\2\2\u00bc\u00bd\3\2\2\2")
        buf.write("\u00bd\u00bb\3\2\2\2\u00bd\u00be\3\2\2\2\u00be\7\3\2\2")
        buf.write("\2\u00bf\u00cc\7>\2\2\u00c0\u00c1\7\3\2\2\u00c1\u00c3")
        buf.write("\7\22\2\2\u00c2\u00c0\3\2\2\2\u00c2\u00c3\3\2\2\2\u00c3")
        buf.write("\u00c4\3\2\2\2\u00c4\u00c6\5\f\7\2\u00c5\u00c7\7\3\2\2")
        buf.write("\u00c6\u00c5\3\2\2\2\u00c6\u00c7\3\2\2\2\u00c7\u00ca\3")
        buf.write("\2\2\2\u00c8\u00c9\7\22\2\2\u00c9\u00cb\7z\2\2\u00ca\u00c8")
        buf.write("\3\2\2\2\u00ca\u00cb\3\2\2\2\u00cb\u00cd\3\2\2\2\u00cc")
        buf.write("\u00c2\3\2\2\2\u00cd\u00ce\3\2\2\2\u00ce\u00cc\3\2\2\2")
        buf.write("\u00ce\u00cf\3\2\2\2\u00cf\t\3\2\2\2\u00d0\u00dd\7U\2")
        buf.write("\2\u00d1\u00d2\7\3\2\2\u00d2\u00d4\7\22\2\2\u00d3\u00d1")
        buf.write("\3\2\2\2\u00d3\u00d4\3\2\2\2\u00d4\u00d5\3\2\2\2\u00d5")
        buf.write("\u00d7\5\f\7\2\u00d6\u00d8\7\3\2\2\u00d7\u00d6\3\2\2\2")
        buf.write("\u00d7\u00d8\3\2\2\2\u00d8\u00db\3\2\2\2\u00d9\u00da\7")
        buf.write("\22\2\2\u00da\u00dc\7z\2\2\u00db\u00d9\3\2\2\2\u00db\u00dc")
        buf.write("\3\2\2\2\u00dc\u00de\3\2\2\2\u00dd\u00d3\3\2\2\2\u00de")
        buf.write("\u00df\3\2\2\2\u00df\u00dd\3\2\2\2\u00df\u00e0\3\2\2\2")
        buf.write("\u00e0\13\3\2\2\2\u00e1\u00e2\7~\2\2\u00e2\u00e4\7%\2")
        buf.write("\2\u00e3\u00e5\7y\2\2\u00e4\u00e3\3\2\2\2\u00e4\u00e5")
        buf.write("\3\2\2\2\u00e5\u00e6\3\2\2\2\u00e6\u00e8\5:\36\2\u00e7")
        buf.write("\u00e9\7\64\2\2\u00e8\u00e7\3\2\2\2\u00e8\u00e9\3\2\2")
        buf.write("\2\u00e9\u00ed\3\2\2\2\u00ea\u00ec\7\3\2\2\u00eb\u00ea")
        buf.write("\3\2\2\2\u00ec\u00ef\3\2\2\2\u00ed\u00eb\3\2\2\2\u00ed")
        buf.write("\u00ee\3\2\2\2\u00ee\u00f1\3\2\2\2\u00ef\u00ed\3\2\2\2")
        buf.write("\u00f0\u00f2\7\22\2\2\u00f1\u00f0\3\2\2\2\u00f1\u00f2")
        buf.write("\3\2\2\2\u00f2\r\3\2\2\2\u00f3\u00f4\7\37\2\2\u00f4\u00f5")
        buf.write("\7k\2\2\u00f5\u00fa\5:\36\2\u00f6\u00f7\7\63\2\2\u00f7")
        buf.write("\u00f9\5:\36\2\u00f8\u00f6\3\2\2\2\u00f9\u00fc\3\2\2\2")
        buf.write("\u00fa\u00f8\3\2\2\2\u00fa\u00fb\3\2\2\2\u00fb\u00fd\3")
        buf.write("\2\2\2\u00fc\u00fa\3\2\2\2\u00fd\u00fe\7l\2\2\u00fe\u0109")
        buf.write("\3\2\2\2\u00ff\u0100\7\37\2\2\u0100\u0105\5:\36\2\u0101")
        buf.write("\u0102\7\63\2\2\u0102\u0104\5:\36\2\u0103\u0101\3\2\2")
        buf.write("\2\u0104\u0107\3\2\2\2\u0105\u0103\3\2\2\2\u0105\u0106")
        buf.write("\3\2\2\2\u0106\u0109\3\2\2\2\u0107\u0105\3\2\2\2\u0108")
        buf.write("\u00f3\3\2\2\2\u0108\u00ff\3\2\2\2\u0109\17\3\2\2\2\u010a")
        buf.write("\u010e\5\24\13\2\u010b\u010d\5\34\17\2\u010c\u010b\3\2")
        buf.write("\2\2\u010d\u0110\3\2\2\2\u010e\u010c\3\2\2\2\u010e\u010f")
        buf.write("\3\2\2\2\u010f\u0112\3\2\2\2\u0110\u010e\3\2\2\2\u0111")
        buf.write("\u0113\5\36\20\2\u0112\u0111\3\2\2\2\u0112\u0113\3\2\2")
        buf.write("\2\u0113\u0116\3\2\2\2\u0114\u0115\7\3\2\2\u0115\u0117")
        buf.write("\7\22\2\2\u0116\u0114\3\2\2\2\u0116\u0117\3\2\2\2\u0117")
        buf.write("\21\3\2\2\2\u0118\u011c\5\26\f\2\u0119\u011b\5\30\r\2")
        buf.write("\u011a\u0119\3\2\2\2\u011b\u011e\3\2\2\2\u011c\u011a\3")
        buf.write("\2\2\2\u011c\u011d\3\2\2\2\u011d\u0120\3\2\2\2\u011e\u011c")
        buf.write("\3\2\2\2\u011f\u0121\5\32\16\2\u0120\u011f\3\2\2\2\u0120")
        buf.write("\u0121\3\2\2\2\u0121\23\3\2\2\2\u0122\u0124\7O\2\2\u0123")
        buf.write("\u0125\7\31\2\2\u0124\u0123\3\2\2\2\u0124\u0125\3\2\2")
        buf.write("\2\u0125\u0126\3\2\2\2\u0126\u0127\5\64\33\2\u0127\u0128")
        buf.write("\7\62\2\2\u0128\u0129\5\f\7\2\u0129\u0183\3\2\2\2\u012a")
        buf.write("\u012c\7O\2\2\u012b\u012d\7\31\2\2\u012c\u012b\3\2\2\2")
        buf.write("\u012c\u012d\3\2\2\2\u012d\u012e\3\2\2\2\u012e\u012f\5")
        buf.write("\64\33\2\u012f\u013c\7\62\2\2\u0130\u0131\7\3\2\2\u0131")
        buf.write("\u013a\7\22\2\2\u0132\u013b\5\4\3\2\u0133\u0134\7:\2\2")
        buf.write("\u0134\u013b\7~\2\2\u0135\u013b\7?\2\2\u0136\u0137\7\6")
        buf.write("\2\2\u0137\u013b\7~\2\2\u0138\u0139\7\7\2\2\u0139\u013b")
        buf.write("\7~\2\2\u013a\u0132\3\2\2\2\u013a\u0133\3\2\2\2\u013a")
        buf.write("\u0135\3\2\2\2\u013a\u0136\3\2\2\2\u013a\u0138\3\2\2\2")
        buf.write("\u013b\u013d\3\2\2\2\u013c\u0130\3\2\2\2\u013d\u013e\3")
        buf.write("\2\2\2\u013e\u013c\3\2\2\2\u013e\u013f\3\2\2\2\u013f\u0183")
        buf.write("\3\2\2\2\u0140\u0142\7O\2\2\u0141\u0143\7\31\2\2\u0142")
        buf.write("\u0141\3\2\2\2\u0142\u0143\3\2\2\2\u0143\u0144\3\2\2\2")
        buf.write("\u0144\u0145\5\64\33\2\u0145\u0155\7\62\2\2\u0146\u0147")
        buf.write("\7\3\2\2\u0147\u014c\7\22\2\2\u0148\u014d\5\4\3\2\u0149")
        buf.write("\u014a\7:\2\2\u014a\u014d\7~\2\2\u014b\u014d\7?\2\2\u014c")
        buf.write("\u0148\3\2\2\2\u014c\u0149\3\2\2\2\u014c\u014b\3\2\2\2")
        buf.write("\u014d\u014e\3\2\2\2\u014e\u014c\3\2\2\2\u014e\u014f\3")
        buf.write("\2\2\2\u014f\u0151\3\2\2\2\u0150\u0152\7\3\2\2\u0151\u0150")
        buf.write("\3\2\2\2\u0152\u0153\3\2\2\2\u0153\u0151\3\2\2\2\u0153")
        buf.write("\u0154\3\2\2\2\u0154\u0156\3\2\2\2\u0155\u0146\3\2\2\2")
        buf.write("\u0156\u0157\3\2\2\2\u0157\u0155\3\2\2\2\u0157\u0158\3")
        buf.write("\2\2\2\u0158\u0183\3\2\2\2\u0159\u015b\7O\2\2\u015a\u015c")
        buf.write("\7\31\2\2\u015b\u015a\3\2\2\2\u015b\u015c\3\2\2\2\u015c")
        buf.write("\u015d\3\2\2\2\u015d\u015e\5\64\33\2\u015e\u015f\7\62")
        buf.write("\2\2\u015f\u0160\7a\2\2\u0160\u0183\3\2\2\2\u0161\u0163")
        buf.write("\7O\2\2\u0162\u0164\7\31\2\2\u0163\u0162\3\2\2\2\u0163")
        buf.write("\u0164\3\2\2\2\u0164\u0165\3\2\2\2\u0165\u0166\7~\2\2")
        buf.write("\u0166\u0167\7k\2\2\u0167\u0168\5:\36\2\u0168\u0169\7")
        buf.write("l\2\2\u0169\u0173\7\62\2\2\u016a\u016b\7\3\2\2\u016b\u016c")
        buf.write("\7\22\2\2\u016c\u0170\5\4\3\2\u016d\u016f\7\3\2\2\u016e")
        buf.write("\u016d\3\2\2\2\u016f\u0172\3\2\2\2\u0170\u016e\3\2\2\2")
        buf.write("\u0170\u0171\3\2\2\2\u0171\u0174\3\2\2\2\u0172\u0170\3")
        buf.write("\2\2\2\u0173\u016a\3\2\2\2\u0174\u0175\3\2\2\2\u0175\u0173")
        buf.write("\3\2\2\2\u0175\u0176\3\2\2\2\u0176\u0183\3\2\2\2\u0177")
        buf.write("\u0179\7O\2\2\u0178\u017a\7\31\2\2\u0179\u0178\3\2\2\2")
        buf.write("\u0179\u017a\3\2\2\2\u017a\u017b\3\2\2\2\u017b\u017c\7")
        buf.write("~\2\2\u017c\u017d\7k\2\2\u017d\u017e\5:\36\2\u017e\u017f")
        buf.write("\7l\2\2\u017f\u0180\7\62\2\2\u0180\u0181\5\f\7\2\u0181")
        buf.write("\u0183\3\2\2\2\u0182\u0122\3\2\2\2\u0182\u012a\3\2\2\2")
        buf.write("\u0182\u0140\3\2\2\2\u0182\u0159\3\2\2\2\u0182\u0161\3")
        buf.write("\2\2\2\u0182\u0177\3\2\2\2\u0183\25\3\2\2\2\u0184\u0186")
        buf.write("\7O\2\2\u0185\u0187\7\31\2\2\u0186\u0185\3\2\2\2\u0186")
        buf.write("\u0187\3\2\2\2\u0187\u0188\3\2\2\2\u0188\u0189\5\64\33")
        buf.write("\2\u0189\u018c\7\62\2\2\u018a\u018d\5:\36\2\u018b\u018d")
        buf.write("\7\u0098\2\2\u018c\u018a\3\2\2\2\u018c\u018b\3\2\2\2\u018d")
        buf.write("\27\3\2\2\2\u018e\u0190\7E\2\2\u018f\u0191\7\31\2\2\u0190")
        buf.write("\u018f\3\2\2\2\u0190\u0191\3\2\2\2\u0191\u0192\3\2\2\2")
        buf.write("\u0192\u0193\5\64\33\2\u0193\u0196\7\62\2\2\u0194\u0197")
        buf.write("\5:\36\2\u0195\u0197\7\u0098\2\2\u0196\u0194\3\2\2\2\u0196")
        buf.write("\u0195\3\2\2\2\u0197\31\3\2\2\2\u0198\u019a\7\22\2\2\u0199")
        buf.write("\u0198\3\2\2\2\u0199\u019a\3\2\2\2\u019a\u019b\3\2\2\2")
        buf.write("\u019b\u019c\7F\2\2\u019c\u019f\7\62\2\2\u019d\u01a0\5")
        buf.write(":\36\2\u019e\u01a0\7\u0098\2\2\u019f\u019d\3\2\2\2\u019f")
        buf.write("\u019e\3\2\2\2\u01a0\33\3\2\2\2\u01a1\u01a2\7E\2\2\u01a2")
        buf.write("\u01a3\5:\36\2\u01a3\u01a4\7$\2\2\u01a4\u01a5\5:\36\2")
        buf.write("\u01a5\u01af\7\62\2\2\u01a6\u01a7\7\3\2\2\u01a7\u01a8")
        buf.write("\7\22\2\2\u01a8\u01ac\5\4\3\2\u01a9\u01ab\7\3\2\2\u01aa")
        buf.write("\u01a9\3\2\2\2\u01ab\u01ae\3\2\2\2\u01ac\u01aa\3\2\2\2")
        buf.write("\u01ac\u01ad\3\2\2\2\u01ad\u01b0\3\2\2\2\u01ae\u01ac\3")
        buf.write("\2\2\2\u01af\u01a6\3\2\2\2\u01b0\u01b1\3\2\2\2\u01b1\u01af")
        buf.write("\3\2\2\2\u01b1\u01b2\3\2\2\2\u01b2\35\3\2\2\2\u01b3\u01b5")
        buf.write("\7\22\2\2\u01b4\u01b3\3\2\2\2\u01b4\u01b5\3\2\2\2\u01b5")
        buf.write("\u01b6\3\2\2\2\u01b6\u01b7\7F\2\2\u01b7\u01bd\7\62\2\2")
        buf.write("\u01b8\u01b9\7\3\2\2\u01b9\u01ba\7\22\2\2\u01ba\u01be")
        buf.write("\5\4\3\2\u01bb\u01be\5\16\b\2\u01bc\u01be\5\f\7\2\u01bd")
        buf.write("\u01b8\3\2\2\2\u01bd\u01bb\3\2\2\2\u01bd\u01bc\3\2\2\2")
        buf.write("\u01be\u01bf\3\2\2\2\u01bf\u01bd\3\2\2\2\u01bf\u01c0\3")
        buf.write("\2\2\2\u01c0\u01c4\3\2\2\2\u01c1\u01c3\7\3\2\2\u01c2\u01c1")
        buf.write("\3\2\2\2\u01c3\u01c6\3\2\2\2\u01c4\u01c2\3\2\2\2\u01c4")
        buf.write("\u01c5\3\2\2\2\u01c5\u01c8\3\2\2\2\u01c6\u01c4\3\2\2\2")
        buf.write("\u01c7\u01c9\7\22\2\2\u01c8\u01c7\3\2\2\2\u01c8\u01c9")
        buf.write("\3\2\2\2\u01c9\37\3\2\2\2\u01ca\u01cb\7L\2\2\u01cb\u01cc")
        buf.write("\7~\2\2\u01cc\u01cd\7Q\2\2\u01cd\u01ce\7s\2\2\u01ce\u01cf")
        buf.write("\7#\2\2\u01cf\u01d0\7s\2\2\u01d0\u01d2\7\62\2\2\u01d1")
        buf.write("\u01d3\7z\2\2\u01d2\u01d1\3\2\2\2\u01d2\u01d3\3\2\2\2")
        buf.write("\u01d3\u01d7\3\2\2\2\u01d4\u01d5\7\3\2\2\u01d5\u01d6\7")
        buf.write("\22\2\2\u01d6\u01d8\5\4\3\2\u01d7\u01d4\3\2\2\2\u01d8")
        buf.write("\u01d9\3\2\2\2\u01d9\u01d7\3\2\2\2\u01d9\u01da\3\2\2\2")
        buf.write("\u01da\u01de\3\2\2\2\u01db\u01dd\7\22\2\2\u01dc\u01db")
        buf.write("\3\2\2\2\u01dd\u01e0\3\2\2\2\u01de\u01dc\3\2\2\2\u01de")
        buf.write("\u01df\3\2\2\2\u01df\u0272\3\2\2\2\u01e0\u01de\3\2\2\2")
        buf.write("\u01e1\u01e2\7L\2\2\u01e2\u01e3\7~\2\2\u01e3\u01e6\7Q")
        buf.write("\2\2\u01e4\u01e7\7\u009a\2\2\u01e5\u01e7\5.\30\2\u01e6")
        buf.write("\u01e4\3\2\2\2\u01e6\u01e5\3\2\2\2\u01e7\u01e8\3\2\2\2")
        buf.write("\u01e8\u01ea\7\62\2\2\u01e9\u01eb\7z\2\2\u01ea\u01e9\3")
        buf.write("\2\2\2\u01ea\u01eb\3\2\2\2\u01eb\u01ef\3\2\2\2\u01ec\u01ed")
        buf.write("\7\3\2\2\u01ed\u01ee\7\22\2\2\u01ee\u01f0\5\4\3\2\u01ef")
        buf.write("\u01ec\3\2\2\2\u01f0\u01f1\3\2\2\2\u01f1\u01ef\3\2\2\2")
        buf.write("\u01f1\u01f2\3\2\2\2\u01f2\u01f6\3\2\2\2\u01f3\u01f5\7")
        buf.write("\22\2\2\u01f4\u01f3\3\2\2\2\u01f5\u01f8\3\2\2\2\u01f6")
        buf.write("\u01f4\3\2\2\2\u01f6\u01f7\3\2\2\2\u01f7\u0272\3\2\2\2")
        buf.write("\u01f8\u01f6\3\2\2\2\u01f9\u01fa\7L\2\2\u01fa\u01fb\7")
        buf.write("~\2\2\u01fb\u01fd\7Q\2\2\u01fc\u01fe\7\21\2\2\u01fd\u01fc")
        buf.write("\3\2\2\2\u01fe\u01ff\3\2\2\2\u01ff\u01fd\3\2\2\2\u01ff")
        buf.write("\u0200\3\2\2\2\u0200\u0201\3\2\2\2\u0201\u0202\7#\2\2")
        buf.write("\u0202\u0203\7-\2\2\u0203\u0204\7\u0098\2\2\u0204\u0206")
        buf.write("\7\62\2\2\u0205\u0207\7z\2\2\u0206\u0205\3\2\2\2\u0206")
        buf.write("\u0207\3\2\2\2\u0207\u020b\3\2\2\2\u0208\u0209\7\3\2\2")
        buf.write("\u0209\u020a\7\22\2\2\u020a\u020c\5\4\3\2\u020b\u0208")
        buf.write("\3\2\2\2\u020c\u020d\3\2\2\2\u020d\u020b\3\2\2\2\u020d")
        buf.write("\u020e\3\2\2\2\u020e\u0212\3\2\2\2\u020f\u0211\7\22\2")
        buf.write("\2\u0210\u020f\3\2\2\2\u0211\u0214\3\2\2\2\u0212\u0210")
        buf.write("\3\2\2\2\u0212\u0213\3\2\2\2\u0213\u0272\3\2\2\2\u0214")
        buf.write("\u0212\3\2\2\2\u0215\u0216\7L\2\2\u0216\u021b\7~\2\2\u0217")
        buf.write("\u0218\7\63\2\2\u0218\u021a\7~\2\2\u0219\u0217\3\2\2\2")
        buf.write("\u021a\u021d\3\2\2\2\u021b\u0219\3\2\2\2\u021b\u021c\3")
        buf.write("\2\2\2\u021c\u021e\3\2\2\2\u021d\u021b\3\2\2\2\u021e\u021f")
        buf.write("\7Q\2\2\u021f\u0220\7y\2\2\u0220\u0239\7o\2\2\u0221\u0228")
        buf.write("\5L\'\2\u0222\u0224\7\21\2\2\u0223\u0222\3\2\2\2\u0224")
        buf.write("\u0225\3\2\2\2\u0225\u0223\3\2\2\2\u0225\u0226\3\2\2\2")
        buf.write("\u0226\u0228\3\2\2\2\u0227\u0221\3\2\2\2\u0227\u0223\3")
        buf.write("\2\2\2\u0228\u0234\3\2\2\2\u0229\u0230\7\63\2\2\u022a")
        buf.write("\u0231\5L\'\2\u022b\u022d\7\21\2\2\u022c\u022b\3\2\2\2")
        buf.write("\u022d\u022e\3\2\2\2\u022e\u022c\3\2\2\2\u022e\u022f\3")
        buf.write("\2\2\2\u022f\u0231\3\2\2\2\u0230\u022a\3\2\2\2\u0230\u022c")
        buf.write("\3\2\2\2\u0231\u0233\3\2\2\2\u0232\u0229\3\2\2\2\u0233")
        buf.write("\u0236\3\2\2\2\u0234\u0232\3\2\2\2\u0234\u0235\3\2\2\2")
        buf.write("\u0235\u0238\3\2\2\2\u0236\u0234\3\2\2\2\u0237\u0227\3")
        buf.write("\2\2\2\u0238\u023b\3\2\2\2\u0239\u0237\3\2\2\2\u0239\u023a")
        buf.write("\3\2\2\2\u023a\u023c\3\2\2\2\u023b\u0239\3\2\2\2\u023c")
        buf.write("\u023d\7p\2\2\u023d\u023f\7\62\2\2\u023e\u0240\7z\2\2")
        buf.write("\u023f\u023e\3\2\2\2\u023f\u0240\3\2\2\2\u0240\u0244\3")
        buf.write("\2\2\2\u0241\u0242\7\3\2\2\u0242\u0243\7\22\2\2\u0243")
        buf.write("\u0245\5\4\3\2\u0244\u0241\3\2\2\2\u0245\u0246\3\2\2\2")
        buf.write("\u0246\u0244\3\2\2\2\u0246\u0247\3\2\2\2\u0247\u024b\3")
        buf.write("\2\2\2\u0248\u024a\7\22\2\2\u0249\u0248\3\2\2\2\u024a")
        buf.write("\u024d\3\2\2\2\u024b\u0249\3\2\2\2\u024b\u024c\3\2\2\2")
        buf.write("\u024c\u0272\3\2\2\2\u024d\u024b\3\2\2\2\u024e\u024f\7")
        buf.write("L\2\2\u024f\u0250\7~\2\2\u0250\u0251\7Q\2\2\u0251\u0252")
        buf.write("\7~\2\2\u0252\u0253\7k\2\2\u0253\u0254\7~\2\2\u0254\u0255")
        buf.write("\7l\2\2\u0255\u0257\7\62\2\2\u0256\u0258\7z\2\2\u0257")
        buf.write("\u0256\3\2\2\2\u0257\u0258\3\2\2\2\u0258\u025c\3\2\2\2")
        buf.write("\u0259\u025a\7\3\2\2\u025a\u025b\7\22\2\2\u025b\u025d")
        buf.write("\5\4\3\2\u025c\u0259\3\2\2\2\u025d\u025e\3\2\2\2\u025e")
        buf.write("\u025c\3\2\2\2\u025e\u025f\3\2\2\2\u025f\u0263\3\2\2\2")
        buf.write("\u0260\u0262\7\22\2\2\u0261\u0260\3\2\2\2\u0262\u0265")
        buf.write("\3\2\2\2\u0263\u0261\3\2\2\2\u0263\u0264\3\2\2\2\u0264")
        buf.write("\u0272\3\2\2\2\u0265\u0263\3\2\2\2\u0266\u0267\7L\2\2")
        buf.write("\u0267\u0268\7~\2\2\u0268\u0269\7Q\2\2\u0269\u026a\5.")
        buf.write("\30\2\u026a\u026b\7\62\2\2\u026b\u026c\7\3\2\2\u026c\u026d")
        buf.write("\7\22\2\2\u026d\u026f\5.\30\2\u026e\u0270\7\3\2\2\u026f")
        buf.write("\u026e\3\2\2\2\u026f\u0270\3\2\2\2\u0270\u0272\3\2\2\2")
        buf.write("\u0271\u01ca\3\2\2\2\u0271\u01e1\3\2\2\2\u0271\u01f9\3")
        buf.write("\2\2\2\u0271\u0215\3\2\2\2\u0271\u024e\3\2\2\2\u0271\u0266")
        buf.write("\3\2\2\2\u0272!\3\2\2\2\u0273\u0276\7i\2\2\u0274\u0277")
        buf.write("\5\64\33\2\u0275\u0277\7\b\2\2\u0276\u0274\3\2\2\2\u0276")
        buf.write("\u0275\3\2\2\2\u0277\u0278\3\2\2\2\u0278\u027f\7\62\2")
        buf.write("\2\u0279\u027a\7\3\2\2\u027a\u027d\7\22\2\2\u027b\u027e")
        buf.write("\5\4\3\2\u027c\u027e\7:\2\2\u027d\u027b\3\2\2\2\u027d")
        buf.write("\u027c\3\2\2\2\u027e\u0280\3\2\2\2\u027f\u0279\3\2\2\2")
        buf.write("\u0280\u0281\3\2\2\2\u0281\u027f\3\2\2\2\u0281\u0282\3")
        buf.write("\2\2\2\u0282#\3\2\2\2\u0283\u0287\5&\24\2\u0284\u0286")
        buf.write("\5\34\17\2\u0285\u0284\3\2\2\2\u0286\u0289\3\2\2\2\u0287")
        buf.write("\u0285\3\2\2\2\u0287\u0288\3\2\2\2\u0288\u028a\3\2\2\2")
        buf.write("\u0289\u0287\3\2\2\2\u028a\u028b\5\36\20\2\u028b%\3\2")
        buf.write("\2\2\u028c\u028d\7h\2\2\u028d\u028e\5\64\33\2\u028e\u0297")
        buf.write("\7\62\2\2\u028f\u0290\7\3\2\2\u0290\u0292\7\22\2\2\u0291")
        buf.write("\u028f\3\2\2\2\u0291\u0292\3\2\2\2\u0292\u0295\3\2\2\2")
        buf.write("\u0293\u0296\5\4\3\2\u0294\u0296\7:\2\2\u0295\u0293\3")
        buf.write("\2\2\2\u0295\u0294\3\2\2\2\u0296\u0298\3\2\2\2\u0297\u0291")
        buf.write("\3\2\2\2\u0298\u0299\3\2\2\2\u0299\u0297\3\2\2\2\u0299")
        buf.write("\u029a\3\2\2\2\u029a\'\3\2\2\2\u029b\u029c\7]\2\2\u029c")
        buf.write("\u02a0\7~\2\2\u029d\u029e\7o\2\2\u029e\u029f\7~\2\2\u029f")
        buf.write("\u02a1\7p\2\2\u02a0\u029d\3\2\2\2\u02a0\u02a1\3\2\2\2")
        buf.write("\u02a1\u02a2\3\2\2\2\u02a2\u02a3\7k\2\2\u02a3\u02a4\7")
        buf.write("~\2\2\u02a4\u02a5\7\62\2\2\u02a5\u02a6\5<\37\2\u02a6\u02a9")
        buf.write("\7l\2\2\u02a7\u02a8\7\62\2\2\u02a8\u02aa\5<\37\2\u02a9")
        buf.write("\u02a7\3\2\2\2\u02a9\u02aa\3\2\2\2\u02aa\u02ab\3\2\2\2")
        buf.write("\u02ab\u02d1\7%\2\2\u02ac\u02ad\7\3\2\2\u02ad\u02ae\7")
        buf.write("\22\2\2\u02ae\u02b0\5\4\3\2\u02af\u02ac\3\2\2\2\u02b0")
        buf.write("\u02b1\3\2\2\2\u02b1\u02af\3\2\2\2\u02b1\u02b2\3\2\2\2")
        buf.write("\u02b2\u02d2\3\2\2\2\u02b3\u02b7\5\f\7\2\u02b4\u02b6\7")
        buf.write("\3\2\2\u02b5\u02b4\3\2\2\2\u02b6\u02b9\3\2\2\2\u02b7\u02b5")
        buf.write("\3\2\2\2\u02b7\u02b8\3\2\2\2\u02b8\u02bf\3\2\2\2\u02b9")
        buf.write("\u02b7\3\2\2\2\u02ba\u02bb\7\3\2\2\u02bb\u02bc\7\22\2")
        buf.write("\2\u02bc\u02be\5\4\3\2\u02bd\u02ba\3\2\2\2\u02be\u02c1")
        buf.write("\3\2\2\2\u02bf\u02bd\3\2\2\2\u02bf\u02c0\3\2\2\2\u02c0")
        buf.write("\u02d2\3\2\2\2\u02c1\u02bf\3\2\2\2\u02c2\u02c6\5\16\b")
        buf.write("\2\u02c3\u02c5\7\3\2\2\u02c4\u02c3\3\2\2\2\u02c5\u02c8")
        buf.write("\3\2\2\2\u02c6\u02c4\3\2\2\2\u02c6\u02c7\3\2\2\2\u02c7")
        buf.write("\u02ce\3\2\2\2\u02c8\u02c6\3\2\2\2\u02c9\u02ca\7\3\2\2")
        buf.write("\u02ca\u02cb\7\22\2\2\u02cb\u02cd\5\4\3\2\u02cc\u02c9")
        buf.write("\3\2\2\2\u02cd\u02d0\3\2\2\2\u02ce\u02cc\3\2\2\2\u02ce")
        buf.write("\u02cf\3\2\2\2\u02cf\u02d2\3\2\2\2\u02d0\u02ce\3\2\2\2")
        buf.write("\u02d1\u02af\3\2\2\2\u02d1\u02b3\3\2\2\2\u02d1\u02c2\3")
        buf.write("\2\2\2\u02d2\u02d5\3\2\2\2\u02d3\u02d4\7a\2\2\u02d4\u02d6")
        buf.write("\5:\36\2\u02d5\u02d3\3\2\2\2\u02d5\u02d6\3\2\2\2\u02d6")
        buf.write("\u02d8\3\2\2\2\u02d7\u02d9\7\3\2\2\u02d8\u02d7\3\2\2\2")
        buf.write("\u02d8\u02d9\3\2\2\2\u02d9\u0370\3\2\2\2\u02da\u02db\7")
        buf.write("]\2\2\u02db\u02dc\7\t\2\2\u02dc\u02dd\7k\2\2\u02dd\u02de")
        buf.write("\7~\2\2\u02de\u02df\7\62\2\2\u02df\u02e0\7]\2\2\u02e0")
        buf.write("\u02e1\7k\2\2\u02e1\u02e2\7~\2\2\u02e2\u02e3\7\62\2\2")
        buf.write("\u02e3\u02e4\5<\37\2\u02e4\u02e5\7l\2\2\u02e5\u02e8\7")
        buf.write("l\2\2\u02e6\u02e7\7\62\2\2\u02e7\u02e9\5<\37\2\u02e8\u02e6")
        buf.write("\3\2\2\2\u02e8\u02e9\3\2\2\2\u02e9\u02ea\3\2\2\2\u02ea")
        buf.write("\u0310\7%\2\2\u02eb\u02ec\7\3\2\2\u02ec\u02ed\7\22\2\2")
        buf.write("\u02ed\u02ef\5\4\3\2\u02ee\u02eb\3\2\2\2\u02ef\u02f0\3")
        buf.write("\2\2\2\u02f0\u02ee\3\2\2\2\u02f0\u02f1\3\2\2\2\u02f1\u0311")
        buf.write("\3\2\2\2\u02f2\u02f6\5\f\7\2\u02f3\u02f5\7\3\2\2\u02f4")
        buf.write("\u02f3\3\2\2\2\u02f5\u02f8\3\2\2\2\u02f6\u02f4\3\2\2\2")
        buf.write("\u02f6\u02f7\3\2\2\2\u02f7\u02fe\3\2\2\2\u02f8\u02f6\3")
        buf.write("\2\2\2\u02f9\u02fa\7\3\2\2\u02fa\u02fb\7\22\2\2\u02fb")
        buf.write("\u02fd\5\4\3\2\u02fc\u02f9\3\2\2\2\u02fd\u0300\3\2\2\2")
        buf.write("\u02fe\u02fc\3\2\2\2\u02fe\u02ff\3\2\2\2\u02ff\u0311\3")
        buf.write("\2\2\2\u0300\u02fe\3\2\2\2\u0301\u0305\5\16\b\2\u0302")
        buf.write("\u0304\7\3\2\2\u0303\u0302\3\2\2\2\u0304\u0307\3\2\2\2")
        buf.write("\u0305\u0303\3\2\2\2\u0305\u0306\3\2\2\2\u0306\u030d\3")
        buf.write("\2\2\2\u0307\u0305\3\2\2\2\u0308\u0309\7\3\2\2\u0309\u030a")
        buf.write("\7\22\2\2\u030a\u030c\5\4\3\2\u030b\u0308\3\2\2\2\u030c")
        buf.write("\u030f\3\2\2\2\u030d\u030b\3\2\2\2\u030d\u030e\3\2\2\2")
        buf.write("\u030e\u0311\3\2\2\2\u030f\u030d\3\2\2\2\u0310\u02ee\3")
        buf.write("\2\2\2\u0310\u02f2\3\2\2\2\u0310\u0301\3\2\2\2\u0311\u0312")
        buf.write("\3\2\2\2\u0312\u0313\7a\2\2\u0313\u0314\5:\36\2\u0314")
        buf.write("\u0316\3\2\2\2\u0315\u0317\7\3\2\2\u0316\u0315\3\2\2\2")
        buf.write("\u0316\u0317\3\2\2\2\u0317\u0370\3\2\2\2\u0318\u0319\7")
        buf.write("]\2\2\u0319\u031d\7~\2\2\u031a\u031b\7o\2\2\u031b\u031c")
        buf.write("\7~\2\2\u031c\u031e\7p\2\2\u031d\u031a\3\2\2\2\u031d\u031e")
        buf.write("\3\2\2\2\u031e\u031f\3\2\2\2\u031f\u0320\7k\2\2\u0320")
        buf.write("\u0321\7~\2\2\u0321\u0322\7\62\2\2\u0322\u0323\7\27\2")
        buf.write("\2\u0323\u0324\7~\2\2\u0324\u0325\7o\2\2\u0325\u0326\7")
        buf.write("~\2\2\u0326\u0338\7p\2\2\u0327\u0328\7\63\2\2\u0328\u0329")
        buf.write("\7~\2\2\u0329\u0334\7%\2\2\u032a\u032c\7(\2\2\u032b\u032a")
        buf.write("\3\2\2\2\u032b\u032c\3\2\2\2\u032c\u032e\3\2\2\2\u032d")
        buf.write("\u032f\7\21\2\2\u032e\u032d\3\2\2\2\u032f\u0330\3\2\2")
        buf.write("\2\u0330\u032e\3\2\2\2\u0330\u0331\3\2\2\2\u0331\u0335")
        buf.write("\3\2\2\2\u0332\u0335\7~\2\2\u0333\u0335\5L\'\2\u0334\u032b")
        buf.write("\3\2\2\2\u0334\u0332\3\2\2\2\u0334\u0333\3\2\2\2\u0335")
        buf.write("\u0337\3\2\2\2\u0336\u0327\3\2\2\2\u0337\u033a\3\2\2\2")
        buf.write("\u0338\u0336\3\2\2\2\u0338\u0339\3\2\2\2\u0339\u033b\3")
        buf.write("\2\2\2\u033a\u0338\3\2\2\2\u033b\u033e\7l\2\2\u033c\u033d")
        buf.write("\7\62\2\2\u033d\u033f\5<\37\2\u033e\u033c\3\2\2\2\u033e")
        buf.write("\u033f\3\2\2\2\u033f\u0340\3\2\2\2\u0340\u0366\7%\2\2")
        buf.write("\u0341\u0342\7\3\2\2\u0342\u0343\7\22\2\2\u0343\u0345")
        buf.write("\5\4\3\2\u0344\u0341\3\2\2\2\u0345\u0346\3\2\2\2\u0346")
        buf.write("\u0344\3\2\2\2\u0346\u0347\3\2\2\2\u0347\u0367\3\2\2\2")
        buf.write("\u0348\u034c\5\f\7\2\u0349\u034b\7\3\2\2\u034a\u0349\3")
        buf.write("\2\2\2\u034b\u034e\3\2\2\2\u034c\u034a\3\2\2\2\u034c\u034d")
        buf.write("\3\2\2\2\u034d\u0354\3\2\2\2\u034e\u034c\3\2\2\2\u034f")
        buf.write("\u0350\7\3\2\2\u0350\u0351\7\22\2\2\u0351\u0353\5\4\3")
        buf.write("\2\u0352\u034f\3\2\2\2\u0353\u0356\3\2\2\2\u0354\u0352")
        buf.write("\3\2\2\2\u0354\u0355\3\2\2\2\u0355\u0367\3\2\2\2\u0356")
        buf.write("\u0354\3\2\2\2\u0357\u035b\5\16\b\2\u0358\u035a\7\3\2")
        buf.write("\2\u0359\u0358\3\2\2\2\u035a\u035d\3\2\2\2\u035b\u0359")
        buf.write("\3\2\2\2\u035b\u035c\3\2\2\2\u035c\u0363\3\2\2\2\u035d")
        buf.write("\u035b\3\2\2\2\u035e\u035f\7\3\2\2\u035f\u0360\7\22\2")
        buf.write("\2\u0360\u0362\5\4\3\2\u0361\u035e\3\2\2\2\u0362\u0365")
        buf.write("\3\2\2\2\u0363\u0361\3\2\2\2\u0363\u0364\3\2\2\2\u0364")
        buf.write("\u0367\3\2\2\2\u0365\u0363\3\2\2\2\u0366\u0344\3\2\2\2")
        buf.write("\u0366\u0348\3\2\2\2\u0366\u0357\3\2\2\2\u0367\u036a\3")
        buf.write("\2\2\2\u0368\u0369\7a\2\2\u0369\u036b\5:\36\2\u036a\u0368")
        buf.write("\3\2\2\2\u036a\u036b\3\2\2\2\u036b\u036d\3\2\2\2\u036c")
        buf.write("\u036e\7\3\2\2\u036d\u036c\3\2\2\2\u036d\u036e\3\2\2\2")
        buf.write("\u036e\u0370\3\2\2\2\u036f\u029b\3\2\2\2\u036f\u02da\3")
        buf.write("\2\2\2\u036f\u0318\3\2\2\2\u0370)\3\2\2\2\u0371\u0372")
        buf.write("\79\2\2\u0372\u0373\7~\2\2\u0373\u0377\7\62\2\2\u0374")
        buf.write("\u0375\7\3\2\2\u0375\u0376\7\22\2\2\u0376\u0378\5\4\3")
        buf.write("\2\u0377\u0374\3\2\2\2\u0378\u0379\3\2\2\2\u0379\u0377")
        buf.write("\3\2\2\2\u0379\u037a\3\2\2\2\u037a+\3\2\2\2\u037b\u037c")
        buf.write("\7f\2\2\u037c\u038f\7\3\2\2\u037d\u037e\7\22\2\2\u037e")
        buf.write("\u037f\7~\2\2\u037f\u0380\7%\2\2\u0380\u0381\7\n\2\2\u0381")
        buf.write("\u0388\7o\2\2\u0382\u0389\7\u009a\2\2\u0383\u0385\7\21")
        buf.write("\2\2\u0384\u0383\3\2\2\2\u0385\u0386\3\2\2\2\u0386\u0384")
        buf.write("\3\2\2\2\u0386\u0387\3\2\2\2\u0387\u0389\3\2\2\2\u0388")
        buf.write("\u0382\3\2\2\2\u0388\u0384\3\2\2\2\u0389\u038a\3\2\2\2")
        buf.write("\u038a\u038b\7\63\2\2\u038b\u038c\5<\37\2\u038c\u038d")
        buf.write("\7p\2\2\u038d\u038e\7\3\2\2\u038e\u0390\3\2\2\2\u038f")
        buf.write("\u037d\3\2\2\2\u0390\u0391\3\2\2\2\u0391\u038f\3\2\2\2")
        buf.write("\u0391\u0392\3\2\2\2\u0392-\3\2\2\2\u0393\u0394\7~\2\2")
        buf.write("\u0394\u039c\7k\2\2\u0395\u039d\7~\2\2\u0396\u0398\7\21")
        buf.write("\2\2\u0397\u0396\3\2\2\2\u0398\u0399\3\2\2\2\u0399\u0397")
        buf.write("\3\2\2\2\u0399\u039a\3\2\2\2\u039a\u039d\3\2\2\2\u039b")
        buf.write("\u039d\5L\'\2\u039c\u0395\3\2\2\2\u039c\u0397\3\2\2\2")
        buf.write("\u039c\u039b\3\2\2\2\u039d\u03aa\3\2\2\2\u039e\u03a6\t")
        buf.write("\4\2\2\u039f\u03a7\7~\2\2\u03a0\u03a2\7\21\2\2\u03a1\u03a0")
        buf.write("\3\2\2\2\u03a2\u03a3\3\2\2\2\u03a3\u03a1\3\2\2\2\u03a3")
        buf.write("\u03a4\3\2\2\2\u03a4\u03a7\3\2\2\2\u03a5\u03a7\5L\'\2")
        buf.write("\u03a6\u039f\3\2\2\2\u03a6\u03a1\3\2\2\2\u03a6\u03a5\3")
        buf.write("\2\2\2\u03a7\u03a9\3\2\2\2\u03a8\u039e\3\2\2\2\u03a9\u03ac")
        buf.write("\3\2\2\2\u03aa\u03a8\3\2\2\2\u03aa\u03ab\3\2\2\2\u03ab")
        buf.write("\u03ad\3\2\2\2\u03ac\u03aa\3\2\2\2\u03ad\u03db\7l\2\2")
        buf.write("\u03ae\u03b6\7k\2\2\u03af\u03b7\7~\2\2\u03b0\u03b2\7\21")
        buf.write("\2\2\u03b1\u03b0\3\2\2\2\u03b2\u03b3\3\2\2\2\u03b3\u03b1")
        buf.write("\3\2\2\2\u03b3\u03b4\3\2\2\2\u03b4\u03b7\3\2\2\2\u03b5")
        buf.write("\u03b7\5L\'\2\u03b6\u03af\3\2\2\2\u03b6\u03b1\3\2\2\2")
        buf.write("\u03b6\u03b5\3\2\2\2\u03b7\u03c4\3\2\2\2\u03b8\u03c0\t")
        buf.write("\4\2\2\u03b9\u03c1\7~\2\2\u03ba\u03bc\7\21\2\2\u03bb\u03ba")
        buf.write("\3\2\2\2\u03bc\u03bd\3\2\2\2\u03bd\u03bb\3\2\2\2\u03bd")
        buf.write("\u03be\3\2\2\2\u03be\u03c1\3\2\2\2\u03bf\u03c1\5L\'\2")
        buf.write("\u03c0\u03b9\3\2\2\2\u03c0\u03bb\3\2\2\2\u03c0\u03bf\3")
        buf.write("\2\2\2\u03c1\u03c3\3\2\2\2\u03c2\u03b8\3\2\2\2\u03c3\u03c6")
        buf.write("\3\2\2\2\u03c4\u03c2\3\2\2\2\u03c4\u03c5\3\2\2\2\u03c5")
        buf.write("\u03c7\3\2\2\2\u03c6\u03c4\3\2\2\2\u03c7\u03c8\7l\2\2")
        buf.write("\u03c8\u03db\7\u0098\2\2\u03c9\u03ca\7~\2\2\u03ca\u03d8")
        buf.write("\7~\2\2\u03cb\u03cc\7o\2\2\u03cc\u03cd\7~\2\2\u03cd\u03d5")
        buf.write("\7p\2\2\u03ce\u03cf\7\63\2\2\u03cf\u03d0\7~\2\2\u03d0")
        buf.write("\u03d1\7o\2\2\u03d1\u03d2\7~\2\2\u03d2\u03d4\7p\2\2\u03d3")
        buf.write("\u03ce\3\2\2\2\u03d4\u03d7\3\2\2\2\u03d5\u03d3\3\2\2\2")
        buf.write("\u03d5\u03d6\3\2\2\2\u03d6\u03d9\3\2\2\2\u03d7\u03d5\3")
        buf.write("\2\2\2\u03d8\u03cb\3\2\2\2\u03d8\u03d9\3\2\2\2\u03d9\u03db")
        buf.write("\3\2\2\2\u03da\u0393\3\2\2\2\u03da\u03ae\3\2\2\2\u03da")
        buf.write("\u03c9\3\2\2\2\u03db/\3\2\2\2\u03dc\u03dd\7\u0098\2\2")
        buf.write("\u03dd\u03de\7k\2\2\u03de\u03e3\5:\36\2\u03df\u03e0\7")
        buf.write("\63\2\2\u03e0\u03e2\5:\36\2\u03e1\u03df\3\2\2\2\u03e2")
        buf.write("\u03e5\3\2\2\2\u03e3\u03e1\3\2\2\2\u03e3\u03e4\3\2\2\2")
        buf.write("\u03e4\u03e6\3\2\2\2\u03e5\u03e3\3\2\2\2\u03e6\u03e7\7")
        buf.write("l\2\2\u03e7\61\3\2\2\2\u03e8\u03e9\7\t\2\2\u03e9\u03ea")
        buf.write("\7k\2\2\u03ea\u03eb\7~\2\2\u03eb\u03ec\7l\2\2\u03ec\63")
        buf.write("\3\2\2\2\u03ed\u03f9\5:\36\2\u03ee\u03f0\7-\2\2\u03ef")
        buf.write("\u03f1\7%\2\2\u03f0\u03ef\3\2\2\2\u03f0\u03f1\3\2\2\2")
        buf.write("\u03f1\u03fa\3\2\2\2\u03f2\u03fa\7\13\2\2\u03f3\u03fa")
        buf.write("\7\f\2\2\u03f4\u03f6\7.\2\2\u03f5\u03f7\7%\2\2\u03f6\u03f5")
        buf.write("\3\2\2\2\u03f6\u03f7\3\2\2\2\u03f7\u03fa\3\2\2\2\u03f8")
        buf.write("\u03fa\7$\2\2\u03f9\u03ee\3\2\2\2\u03f9\u03f2\3\2\2\2")
        buf.write("\u03f9\u03f3\3\2\2\2\u03f9\u03f4\3\2\2\2\u03f9\u03f8\3")
        buf.write("\2\2\2\u03fa\u03fb\3\2\2\2\u03fb\u03fc\5:\36\2\u03fc\u0401")
        buf.write("\3\2\2\2\u03fd\u0401\7\b\2\2\u03fe\u0401\7\r\2\2\u03ff")
        buf.write("\u0401\7~\2\2\u0400\u03ed\3\2\2\2\u0400\u03fd\3\2\2\2")
        buf.write("\u0400\u03fe\3\2\2\2\u0400\u03ff\3\2\2\2\u0401\65\3\2")
        buf.write("\2\2\u0402\u0404\7s\2\2\u0403\u0402\3\2\2\2\u0404\u0405")
        buf.write("\3\2\2\2\u0405\u0403\3\2\2\2\u0405\u0406\3\2\2\2\u0406")
        buf.write("\67\3\2\2\2\u0407\u0409\7t\2\2\u0408\u0407\3\2\2\2\u0409")
        buf.write("\u040a\3\2\2\2\u040a\u0408\3\2\2\2\u040a\u040b\3\2\2\2")
        buf.write("\u040b9\3\2\2\2\u040c\u0477\7\b\2\2\u040d\u0477\7\r\2")
        buf.write("\2\u040e\u0477\7t\2\2\u040f\u0411\7\21\2\2\u0410\u040f")
        buf.write("\3\2\2\2\u0411\u0412\3\2\2\2\u0412\u0410\3\2\2\2\u0412")
        buf.write("\u0413\3\2\2\2\u0413\u0417\3\2\2\2\u0414\u0417\7~\2\2")
        buf.write("\u0415\u0417\5L\'\2\u0416\u0410\3\2\2\2\u0416\u0414\3")
        buf.write("\2\2\2\u0416\u0415\3\2\2\2\u0417\u0424\3\2\2\2\u0418\u0420")
        buf.write("\t\5\2\2\u0419\u041b\7\21\2\2\u041a\u0419\3\2\2\2\u041b")
        buf.write("\u041c\3\2\2\2\u041c\u041a\3\2\2\2\u041c\u041d\3\2\2\2")
        buf.write("\u041d\u0421\3\2\2\2\u041e\u0421\7~\2\2\u041f\u0421\5")
        buf.write("L\'\2\u0420\u041a\3\2\2\2\u0420\u041e\3\2\2\2\u0420\u041f")
        buf.write("\3\2\2\2\u0421\u0423\3\2\2\2\u0422\u0418\3\2\2\2\u0423")
        buf.write("\u0426\3\2\2\2\u0424\u0422\3\2\2\2\u0424\u0425\3\2\2\2")
        buf.write("\u0425\u0477\3\2\2\2\u0426\u0424\3\2\2\2\u0427\u0428\7")
        buf.write("~\2\2\u0428\u0432\7o\2\2\u0429\u0433\7~\2\2\u042a\u042c")
        buf.write("\7(\2\2\u042b\u042a\3\2\2\2\u042b\u042c\3\2\2\2\u042c")
        buf.write("\u042e\3\2\2\2\u042d\u042f\7\21\2\2\u042e\u042d\3\2\2")
        buf.write("\2\u042f\u0430\3\2\2\2\u0430\u042e\3\2\2\2\u0430\u0431")
        buf.write("\3\2\2\2\u0431\u0433\3\2\2\2\u0432\u0429\3\2\2\2\u0432")
        buf.write("\u042b\3\2\2\2\u0433\u0446\3\2\2\2\u0434\u0442\t\6\2\2")
        buf.write("\u0435\u0437\7(\2\2\u0436\u0435\3\2\2\2\u0436\u0437\3")
        buf.write("\2\2\2\u0437\u0438\3\2\2\2\u0438\u0443\5L\'\2\u0439\u043b")
        buf.write("\7(\2\2\u043a\u0439\3\2\2\2\u043a\u043b\3\2\2\2\u043b")
        buf.write("\u043d\3\2\2\2\u043c\u043e\7\21\2\2\u043d\u043c\3\2\2")
        buf.write("\2\u043e\u043f\3\2\2\2\u043f\u043d\3\2\2\2\u043f\u0440")
        buf.write("\3\2\2\2\u0440\u0443\3\2\2\2\u0441\u0443\7~\2\2\u0442")
        buf.write("\u0436\3\2\2\2\u0442\u043a\3\2\2\2\u0442\u0441\3\2\2\2")
        buf.write("\u0443\u0445\3\2\2\2\u0444\u0434\3\2\2\2\u0445\u0448\3")
        buf.write("\2\2\2\u0446\u0444\3\2\2\2\u0446\u0447\3\2\2\2\u0447\u0449")
        buf.write("\3\2\2\2\u0448\u0446\3\2\2\2\u0449\u0477\7p\2\2\u044a")
        buf.write("\u044f\5.\30\2\u044b\u044c\t\7\2\2\u044c\u044e\5.\30\2")
        buf.write("\u044d\u044b\3\2\2\2\u044e\u0451\3\2\2\2\u044f\u044d\3")
        buf.write("\2\2\2\u044f\u0450\3\2\2\2\u0450\u0477\3\2\2\2\u0451\u044f")
        buf.write("\3\2\2\2\u0452\u0477\5L\'\2\u0453\u0472\7o\2\2\u0454\u0456")
        buf.write("\7(\2\2\u0455\u0454\3\2\2\2\u0455\u0456\3\2\2\2\u0456")
        buf.write("\u0457\3\2\2\2\u0457\u045e\5L\'\2\u0458\u045a\7\21\2\2")
        buf.write("\u0459\u0458\3\2\2\2\u045a\u045b\3\2\2\2\u045b\u0459\3")
        buf.write("\2\2\2\u045b\u045c\3\2\2\2\u045c\u045e\3\2\2\2\u045d\u0455")
        buf.write("\3\2\2\2\u045d\u0459\3\2\2\2\u045e\u046d\3\2\2\2\u045f")
        buf.write("\u0469\7\63\2\2\u0460\u0462\7(\2\2\u0461\u0460\3\2\2\2")
        buf.write("\u0461\u0462\3\2\2\2\u0462\u0463\3\2\2\2\u0463\u046a\5")
        buf.write("L\'\2\u0464\u0466\7\21\2\2\u0465\u0464\3\2\2\2\u0466\u0467")
        buf.write("\3\2\2\2\u0467\u0465\3\2\2\2\u0467\u0468\3\2\2\2\u0468")
        buf.write("\u046a\3\2\2\2\u0469\u0461\3\2\2\2\u0469\u0465\3\2\2\2")
        buf.write("\u046a\u046c\3\2\2\2\u046b\u045f\3\2\2\2\u046c\u046f\3")
        buf.write("\2\2\2\u046d\u046b\3\2\2\2\u046d\u046e\3\2\2\2\u046e\u0471")
        buf.write("\3\2\2\2\u046f\u046d\3\2\2\2\u0470\u045d\3\2\2\2\u0471")
        buf.write("\u0474\3\2\2\2\u0472\u0470\3\2\2\2\u0472\u0473\3\2\2\2")
        buf.write("\u0473\u0475\3\2\2\2\u0474\u0472\3\2\2\2\u0475\u0477\7")
        buf.write("p\2\2\u0476\u040c\3\2\2\2\u0476\u040d\3\2\2\2\u0476\u040e")
        buf.write("\3\2\2\2\u0476\u0416\3\2\2\2\u0476\u0427\3\2\2\2\u0476")
        buf.write("\u044a\3\2\2\2\u0476\u0452\3\2\2\2\u0476\u0453\3\2\2\2")
        buf.write("\u0477;\3\2\2\2\u0478\u0479\t\b\2\2\u0479=\3\2\2\2\u047a")
        buf.write("\u047e\5D#\2\u047b\u047d\5@!\2\u047c\u047b\3\2\2\2\u047d")
        buf.write("\u0480\3\2\2\2\u047e\u047c\3\2\2\2\u047e\u047f\3\2\2\2")
        buf.write("\u047f\u0484\3\2\2\2\u0480\u047e\3\2\2\2\u0481\u0483\5")
        buf.write("B\"\2\u0482\u0481\3\2\2\2\u0483\u0486\3\2\2\2\u0484\u0482")
        buf.write("\3\2\2\2\u0484\u0485\3\2\2\2\u0485\u0487\3\2\2\2\u0486")
        buf.write("\u0484\3\2\2\2\u0487\u0488\5\36\20\2\u0488?\3\2\2\2\u0489")
        buf.write("\u048b\7\22\2\2\u048a\u0489\3\2\2\2\u048a\u048b\3\2\2")
        buf.write("\2\u048b\u048c\3\2\2\2\u048c\u048d\7\"\2\2\u048d\u0492")
        buf.write("\t\t\2\2\u048e\u048f\7\63\2\2\u048f\u0491\t\t\2\2\u0490")
        buf.write("\u048e\3\2\2\2\u0491\u0494\3\2\2\2\u0492\u0490\3\2\2\2")
        buf.write("\u0492\u0493\3\2\2\2\u0493\u0495\3\2\2\2\u0494\u0492\3")
        buf.write("\2\2\2\u0495\u04a2\7\62\2\2\u0496\u0497\7\3\2\2\u0497")
        buf.write("\u0499\7\22\2\2\u0498\u0496\3\2\2\2\u0498\u0499\3\2\2")
        buf.write("\2\u0499\u049d\3\2\2\2\u049a\u049e\5\4\3\2\u049b\u049c")
        buf.write("\7a\2\2\u049c\u049e\5:\36\2\u049d\u049a\3\2\2\2\u049d")
        buf.write("\u049b\3\2\2\2\u049e\u04a0\3\2\2\2\u049f\u04a1\7\3\2\2")
        buf.write("\u04a0\u049f\3\2\2\2\u04a0\u04a1\3\2\2\2\u04a1\u04a3\3")
        buf.write("\2\2\2\u04a2\u0498\3\2\2\2\u04a3\u04a4\3\2\2\2\u04a4\u04a2")
        buf.write("\3\2\2\2\u04a4\u04a5\3\2\2\2\u04a5A\3\2\2\2\u04a6\u04a7")
        buf.write("\7E\2\2\u04a7\u04a8\5:\36\2\u04a8\u04aa\7\62\2\2\u04a9")
        buf.write("\u04ab\7z\2\2\u04aa\u04a9\3\2\2\2\u04aa\u04ab\3\2\2\2")
        buf.write("\u04ab\u04b1\3\2\2\2\u04ac\u04ae\7\3\2\2\u04ad\u04af\7")
        buf.write("\22\2\2\u04ae\u04ad\3\2\2\2\u04ae\u04af\3\2\2\2\u04af")
        buf.write("\u04b0\3\2\2\2\u04b0\u04b2\5\4\3\2\u04b1\u04ac\3\2\2\2")
        buf.write("\u04b2\u04b3\3\2\2\2\u04b3\u04b1\3\2\2\2\u04b3\u04b4\3")
        buf.write("\2\2\2\u04b4C\3\2\2\2\u04b5\u04b6\7;\2\2\u04b6\u04b8\7")
        buf.write("~\2\2\u04b7\u04b9\7z\2\2\u04b8\u04b7\3\2\2\2\u04b8\u04b9")
        buf.write("\3\2\2\2\u04b9\u04bb\3\2\2\2\u04ba\u04bc\7\3\2\2\u04bb")
        buf.write("\u04ba\3\2\2\2\u04bb\u04bc\3\2\2\2\u04bcE\3\2\2\2\u04bd")
        buf.write("\u04be\7\3\2\2\u04beG\3\2\2\2\u04bf\u04c1\7\22\2\2\u04c0")
        buf.write("\u04bf\3\2\2\2\u04c0\u04c1\3\2\2\2\u04c1\u04c2\3\2\2\2")
        buf.write("\u04c2\u04c3\7z\2\2\u04c3I\3\2\2\2\u04c4\u04c5\t\n\2\2")
        buf.write("\u04c5K\3\2\2\2\u04c6\u04c7\t\13\2\2\u04c7M\3\2\2\2\u00c4")
        buf.write("RWkpw}\u0082\u0087\u008d\u0093\u009f\u00a4\u00a7\u00ab")
        buf.write("\u00b0\u00b3\u00b7\u00bb\u00bd\u00c2\u00c6\u00ca\u00ce")
        buf.write("\u00d3\u00d7\u00db\u00df\u00e4\u00e8\u00ed\u00f1\u00fa")
        buf.write("\u0105\u0108\u010e\u0112\u0116\u011c\u0120\u0124\u012c")
        buf.write("\u013a\u013e\u0142\u014c\u014e\u0153\u0157\u015b\u0163")
        buf.write("\u0170\u0175\u0179\u0182\u0186\u018c\u0190\u0196\u0199")
        buf.write("\u019f\u01ac\u01b1\u01b4\u01bd\u01bf\u01c4\u01c8\u01d2")
        buf.write("\u01d9\u01de\u01e6\u01ea\u01f1\u01f6\u01ff\u0206\u020d")
        buf.write("\u0212\u021b\u0225\u0227\u022e\u0230\u0234\u0239\u023f")
        buf.write("\u0246\u024b\u0257\u025e\u0263\u026f\u0271\u0276\u027d")
        buf.write("\u0281\u0287\u0291\u0295\u0299\u02a0\u02a9\u02b1\u02b7")
        buf.write("\u02bf\u02c6\u02ce\u02d1\u02d5\u02d8\u02e8\u02f0\u02f6")
        buf.write("\u02fe\u0305\u030d\u0310\u0316\u031d\u032b\u0330\u0334")
        buf.write("\u0338\u033e\u0346\u034c\u0354\u035b\u0363\u0366\u036a")
        buf.write("\u036d\u036f\u0379\u0386\u0388\u0391\u0399\u039c\u03a3")
        buf.write("\u03a6\u03aa\u03b3\u03b6\u03bd\u03c0\u03c4\u03d5\u03d8")
        buf.write("\u03da\u03e3\u03f0\u03f6\u03f9\u0400\u0405\u040a\u0412")
        buf.write("\u0416\u041c\u0420\u0424\u042b\u0430\u0432\u0436\u043a")
        buf.write("\u043f\u0442\u0446\u044f\u0455\u045b\u045d\u0461\u0467")
        buf.write("\u0469\u046d\u0472\u0476\u047e\u0484\u048a\u0492\u0498")
        buf.write("\u049d\u04a0\u04a4\u04aa\u04ae\u04b3\u04b8\u04bb\u04c0")
        return buf.getvalue()


class nimParser ( Parser ):

    grammarFileName = "nim.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'\n'", "'\r'", "'#'", "'inc'", "'dec'", 
                     "'true'", "'forEach'", "'array'", "'<='", "'>='", "'false'", 
                     "'string'", "'int'", "'bool'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "' '", "<INVALID>", "'and'", "'var'", 
                     "'or'", "'not'", "'div'", "'shl'", "'shr'", "'xor'", 
                     "'mod'", "'echo'", "'is'", "'isnot'", "'of'", "'..'", 
                     "'=='", "'='", "'+'", "'*'", "'-'", "'/'", "'~'", "'&'", 
                     "'|'", "'<'", "'>'", "'!'", "'^'", "'.'", "':'", "','", 
                     "';'", "'addr'", "'as'", "'asm'", "'bind'", "'block'", 
                     "'break'", "'case'", "'cast'", "'concept'", "'const'", 
                     "'continue'", "'converter'", "'defer'", "'discard'", 
                     "'distinct'", "'do'", "'elif'", "'else'", "'end'", 
                     "'enum'", "'except'", "'export'", "'finally'", "'for'", 
                     "'from'", "'func'", "'if'", "'import'", "'in'", "'include'", 
                     "'interface'", "'iterator'", "'let'", "'macro'", "'method'", 
                     "'mixin'", "'nil'", "'notin'", "'object'", "'out'", 
                     "'proc'", "'ptr'", "'raise'", "'ref'", "'return'", 
                     "'static'", "'template'", "'try'", "'tuple'", "'type'", 
                     "'using'", "'when'", "'while'", "'yield'", "'('", "')'", 
                     "'{'", "'}'", "'['", "']'", "'%'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "DIGIT", "INDENT", 
                      "NOT_INDENT", "SPACE", "NEWLINE", "AND", "VARIABLE", 
                      "OR", "NOT", "DIV", "SHL", "SHR", "XOR", "MOD", "ECHO", 
                      "IS", "ISNOT", "OF", "OP6", "EQUALS_EQUALS", "EQUALS_OPERATOR", 
                      "ADD_OPERATOR", "MUL_OPERATOR", "MINUS_OPERATOR", 
                      "DIV_OPERATOR", "BITWISE_NOT_OPERATOR", "AND_OPERATOR", 
                      "OR_OPERATOR", "LESS_THAN", "GREATER_THAN", "NOT_OPERATOR", 
                      "XOR_OPERATOR", "DOT", "COLON", "COMMA", "SEMI_COLON", 
                      "ADDR", "AS", "ASM", "BIND", "BLOCK", "BREAK", "CASE", 
                      "CAST", "CONCEPT", "CONST", "CONTINUE", "CONVERTER", 
                      "DEFER", "DISCARD", "DISTINCT", "DO", "ELIF", "ELSE", 
                      "END", "ENUM", "EXCEPT", "EXPORT", "FINALLY", "FOR", 
                      "FROM", "FUNC", "IF", "IMPORT", "IN", "INCLUDE", "INTERFACE", 
                      "ITERATOR", "LET", "MACRO", "METHOD", "MIXIN", "NIL", 
                      "NOTIN", "OBJECT", "OUT", "PROC", "PTR", "RAISE", 
                      "REF", "RETURN", "STATIC", "TEMPLATE", "TRY", "TUPLE", 
                      "TYPE", "USING", "WHEN", "WHILE", "YIELD", "OPEN_PAREN", 
                      "CLOSE_PAREN", "OPEN_BRACE", "CLOSE_BRACE", "OPEN_BRACK", 
                      "CLOSE_BRACK", "MODULUS", "TRIPLESTR_LIT", "CHAR_LIT", 
                      "STR_LIT", "RSTR_LIT", "GENERALIZED_STR_LIT", "GENERALIZED_TRIPLESTR_LIT", 
                      "WS", "AT", "COMMENT", "MULTI_LINE_COMMENT", "MULTI_LINE_COMMENT2", 
                      "SINGLE_MULTI_LINE_COMMENT", "IDENTIFIER", "H", "LETTER", 
                      "INT_LIT", "HEX_LIT", "DEC_LIT", "OCT_LIT", "BIN_LIT", 
                      "INT8_LIT", "INT16_LIT", "INT32_LIT", "INT64_LIT", 
                      "UINT_LIT", "UINT8_LIT", "UINT16_LIT", "UINT32_LIT", 
                      "UINT64_LIT", "FLOAT_LIT", "FLOAT32_LIT", "FLOAT32_SUFFIX", 
                      "FLOAT64_LIT", "FLOAT64_SUFFIX", "EXP", "HEXDIGIT", 
                      "OCTDIGIT", "BINDIGIT", "NEW_IDENTIFIER", "ARRAY_LEN", 
                      "FORLOOP_RANGE" ]

    RULE_start = 0
    RULE_stmt = 1
    RULE_varDec = 2
    RULE_constDec = 3
    RULE_letDec = 4
    RULE_assignStmt = 5
    RULE_printStmt = 6
    RULE_complexIfStmt = 7
    RULE_varComplexIfStmt = 8
    RULE_simpleIfStmt = 9
    RULE_varSimpleIfStmt = 10
    RULE_varSimpleElifStmt = 11
    RULE_varSimpleElseStmt = 12
    RULE_simpleElifStmt = 13
    RULE_simpleElseStmt = 14
    RULE_forLoop = 15
    RULE_whileLoop = 16
    RULE_whenStmt = 17
    RULE_simpleWhenStmt = 18
    RULE_procBlock = 19
    RULE_block = 20
    RULE_typeBlock = 21
    RULE_methodInvoke = 22
    RULE_instanceMethodInvoke = 23
    RULE_forEachStmt = 24
    RULE_condition = 25
    RULE_character_literals = 26
    RULE_string_literals = 27
    RULE_rightHandSideStmt = 28
    RULE_dataType = 29
    RULE_caseStmt = 30
    RULE_simpleOfStmt = 31
    RULE_simpleElifOfStmt = 32
    RULE_simpleCaseStmt = 33
    RULE_emptyStmt = 34
    RULE_commentStmt = 35
    RULE_operator = 36
    RULE_literal = 37

    ruleNames =  [ "start", "stmt", "varDec", "constDec", "letDec", "assignStmt", 
                   "printStmt", "complexIfStmt", "varComplexIfStmt", "simpleIfStmt", 
                   "varSimpleIfStmt", "varSimpleElifStmt", "varSimpleElseStmt", 
                   "simpleElifStmt", "simpleElseStmt", "forLoop", "whileLoop", 
                   "whenStmt", "simpleWhenStmt", "procBlock", "block", "typeBlock", 
                   "methodInvoke", "instanceMethodInvoke", "forEachStmt", 
                   "condition", "character_literals", "string_literals", 
                   "rightHandSideStmt", "dataType", "caseStmt", "simpleOfStmt", 
                   "simpleElifOfStmt", "simpleCaseStmt", "emptyStmt", "commentStmt", 
                   "operator", "literal" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    DIGIT=15
    INDENT=16
    NOT_INDENT=17
    SPACE=18
    NEWLINE=19
    AND=20
    VARIABLE=21
    OR=22
    NOT=23
    DIV=24
    SHL=25
    SHR=26
    XOR=27
    MOD=28
    ECHO=29
    IS=30
    ISNOT=31
    OF=32
    OP6=33
    EQUALS_EQUALS=34
    EQUALS_OPERATOR=35
    ADD_OPERATOR=36
    MUL_OPERATOR=37
    MINUS_OPERATOR=38
    DIV_OPERATOR=39
    BITWISE_NOT_OPERATOR=40
    AND_OPERATOR=41
    OR_OPERATOR=42
    LESS_THAN=43
    GREATER_THAN=44
    NOT_OPERATOR=45
    XOR_OPERATOR=46
    DOT=47
    COLON=48
    COMMA=49
    SEMI_COLON=50
    ADDR=51
    AS=52
    ASM=53
    BIND=54
    BLOCK=55
    BREAK=56
    CASE=57
    CAST=58
    CONCEPT=59
    CONST=60
    CONTINUE=61
    CONVERTER=62
    DEFER=63
    DISCARD=64
    DISTINCT=65
    DO=66
    ELIF=67
    ELSE=68
    END=69
    ENUM=70
    EXCEPT=71
    EXPORT=72
    FINALLY=73
    FOR=74
    FROM=75
    FUNC=76
    IF=77
    IMPORT=78
    IN=79
    INCLUDE=80
    INTERFACE=81
    ITERATOR=82
    LET=83
    MACRO=84
    METHOD=85
    MIXIN=86
    NIL=87
    NOTIN=88
    OBJECT=89
    OUT=90
    PROC=91
    PTR=92
    RAISE=93
    REF=94
    RETURN=95
    STATIC=96
    TEMPLATE=97
    TRY=98
    TUPLE=99
    TYPE=100
    USING=101
    WHEN=102
    WHILE=103
    YIELD=104
    OPEN_PAREN=105
    CLOSE_PAREN=106
    OPEN_BRACE=107
    CLOSE_BRACE=108
    OPEN_BRACK=109
    CLOSE_BRACK=110
    MODULUS=111
    TRIPLESTR_LIT=112
    CHAR_LIT=113
    STR_LIT=114
    RSTR_LIT=115
    GENERALIZED_STR_LIT=116
    GENERALIZED_TRIPLESTR_LIT=117
    WS=118
    AT=119
    COMMENT=120
    MULTI_LINE_COMMENT=121
    MULTI_LINE_COMMENT2=122
    SINGLE_MULTI_LINE_COMMENT=123
    IDENTIFIER=124
    H=125
    LETTER=126
    INT_LIT=127
    HEX_LIT=128
    DEC_LIT=129
    OCT_LIT=130
    BIN_LIT=131
    INT8_LIT=132
    INT16_LIT=133
    INT32_LIT=134
    INT64_LIT=135
    UINT_LIT=136
    UINT8_LIT=137
    UINT16_LIT=138
    UINT32_LIT=139
    UINT64_LIT=140
    FLOAT_LIT=141
    FLOAT32_LIT=142
    FLOAT32_SUFFIX=143
    FLOAT64_LIT=144
    FLOAT64_SUFFIX=145
    EXP=146
    HEXDIGIT=147
    OCTDIGIT=148
    BINDIGIT=149
    NEW_IDENTIFIER=150
    ARRAY_LEN=151
    FORLOOP_RANGE=152

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class StartContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def getRuleIndex(self):
            return nimParser.RULE_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart" ):
                listener.enterStart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart" ):
                listener.exitStart(self)




    def start(self):

        localctx = nimParser.StartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_start)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 85
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.T__0) | (1 << nimParser.T__6) | (1 << nimParser.VARIABLE) | (1 << nimParser.ECHO) | (1 << nimParser.BLOCK) | (1 << nimParser.CASE) | (1 << nimParser.CONST))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (nimParser.FOR - 74)) | (1 << (nimParser.IF - 74)) | (1 << (nimParser.LET - 74)) | (1 << (nimParser.PROC - 74)) | (1 << (nimParser.TYPE - 74)) | (1 << (nimParser.WHEN - 74)) | (1 << (nimParser.WHILE - 74)) | (1 << (nimParser.OPEN_PAREN - 74)) | (1 << (nimParser.IDENTIFIER - 74)))) != 0) or _la==nimParser.NEW_IDENTIFIER:
                self.state = 76
                self.stmt()
                self.state = 80
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 77
                        _la = self._input.LA(1)
                        if not(_la==nimParser.T__0 or _la==nimParser.T__1):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 82
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

                self.state = 87
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varDec(self):
            return self.getTypedRuleContext(nimParser.VarDecContext,0)


        def assignStmt(self):
            return self.getTypedRuleContext(nimParser.AssignStmtContext,0)


        def printStmt(self):
            return self.getTypedRuleContext(nimParser.PrintStmtContext,0)


        def constDec(self):
            return self.getTypedRuleContext(nimParser.ConstDecContext,0)


        def letDec(self):
            return self.getTypedRuleContext(nimParser.LetDecContext,0)


        def complexIfStmt(self):
            return self.getTypedRuleContext(nimParser.ComplexIfStmtContext,0)


        def forLoop(self):
            return self.getTypedRuleContext(nimParser.ForLoopContext,0)


        def whileLoop(self):
            return self.getTypedRuleContext(nimParser.WhileLoopContext,0)


        def whenStmt(self):
            return self.getTypedRuleContext(nimParser.WhenStmtContext,0)


        def procBlock(self):
            return self.getTypedRuleContext(nimParser.ProcBlockContext,0)


        def block(self):
            return self.getTypedRuleContext(nimParser.BlockContext,0)


        def typeBlock(self):
            return self.getTypedRuleContext(nimParser.TypeBlockContext,0)


        def methodInvoke(self):
            return self.getTypedRuleContext(nimParser.MethodInvokeContext,0)


        def instanceMethodInvoke(self):
            return self.getTypedRuleContext(nimParser.InstanceMethodInvokeContext,0)


        def emptyStmt(self):
            return self.getTypedRuleContext(nimParser.EmptyStmtContext,0)


        def forEachStmt(self):
            return self.getTypedRuleContext(nimParser.ForEachStmtContext,0)


        def caseStmt(self):
            return self.getTypedRuleContext(nimParser.CaseStmtContext,0)


        def getRuleIndex(self):
            return nimParser.RULE_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt" ):
                listener.enterStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt" ):
                listener.exitStmt(self)




    def stmt(self):

        localctx = nimParser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_stmt)
        try:
            self.state = 105
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 88
                self.varDec()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 89
                self.assignStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 90
                self.printStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 91
                self.constDec()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 92
                self.letDec()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 93
                self.complexIfStmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 94
                self.forLoop()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 95
                self.whileLoop()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 96
                self.whenStmt()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 97
                self.procBlock()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 98
                self.block()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 99
                self.typeBlock()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 100
                self.methodInvoke()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 101
                self.instanceMethodInvoke()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 102
                self.emptyStmt()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 103
                self.forEachStmt()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 104
                self.caseStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarDecContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARIABLE(self):
            return self.getToken(nimParser.VARIABLE, 0)

        def assignStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.AssignStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.AssignStmtContext,i)


        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.IDENTIFIER)
            else:
                return self.getToken(nimParser.IDENTIFIER, i)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COLON)
            else:
                return self.getToken(nimParser.COLON, i)

        def EQUALS_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.EQUALS_OPERATOR)
            else:
                return self.getToken(nimParser.EQUALS_OPERATOR, i)

        def varComplexIfStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.VarComplexIfStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.VarComplexIfStmtContext,i)


        def AT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.AT)
            else:
                return self.getToken(nimParser.AT, i)

        def OPEN_BRACK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.OPEN_BRACK)
            else:
                return self.getToken(nimParser.OPEN_BRACK, i)

        def CLOSE_BRACK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.CLOSE_BRACK)
            else:
                return self.getToken(nimParser.CLOSE_BRACK, i)

        def dataType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.DataTypeContext)
            else:
                return self.getTypedRuleContext(nimParser.DataTypeContext,i)


        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMA)
            else:
                return self.getToken(nimParser.COMMA, i)

        def MINUS_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.MINUS_OPERATOR)
            else:
                return self.getToken(nimParser.MINUS_OPERATOR, i)

        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.DIGIT)
            else:
                return self.getToken(nimParser.DIGIT, i)

        def getRuleIndex(self):
            return nimParser.RULE_varDec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarDec" ):
                listener.enterVarDec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarDec" ):
                listener.exitVarDec(self)




    def varDec(self):

        localctx = nimParser.VarDecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_varDec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 107
            self.match(nimParser.VARIABLE)
            self.state = 185 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 185
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
                    if la_ == 1:
                        self.state = 110
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==nimParser.T__0:
                            self.state = 108
                            self.match(nimParser.T__0)
                            self.state = 109
                            self.match(nimParser.INDENT)


                        self.state = 112
                        self.match(nimParser.IDENTIFIER)
                        self.state = 117
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==nimParser.COMMA:
                            self.state = 113
                            self.match(nimParser.COMMA)
                            self.state = 114
                            self.match(nimParser.IDENTIFIER)
                            self.state = 119
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 120
                        self.match(nimParser.COLON)
                        self.state = 123
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [nimParser.T__11, nimParser.T__12, nimParser.T__13]:
                            self.state = 121
                            self.dataType()
                            pass
                        elif token in [nimParser.IDENTIFIER]:
                            self.state = 122
                            self.match(nimParser.IDENTIFIER)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 128
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,6,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 125
                                self.match(nimParser.T__0) 
                            self.state = 130
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,6,self._ctx)

                        pass

                    elif la_ == 2:
                        self.state = 133
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==nimParser.T__0:
                            self.state = 131
                            self.match(nimParser.T__0)
                            self.state = 132
                            self.match(nimParser.INDENT)


                        self.state = 135
                        self.match(nimParser.T__2)
                        self.state = 139
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 136
                                _la = self._input.LA(1)
                                if _la <= 0 or (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.T__0) | (1 << nimParser.T__1) | (1 << nimParser.T__2))) != 0):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume() 
                            self.state = 141
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

                        self.state = 145
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 142
                                self.match(nimParser.T__0) 
                            self.state = 147
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

                        pass

                    elif la_ == 3:
                        self.state = 148
                        self.assignStmt()
                        pass

                    elif la_ == 4:
                        self.state = 149
                        self.match(nimParser.IDENTIFIER)
                        self.state = 150
                        self.match(nimParser.EQUALS_OPERATOR)
                        self.state = 151
                        self.varComplexIfStmt()
                        pass

                    elif la_ == 5:
                        self.state = 152
                        self.match(nimParser.IDENTIFIER)
                        self.state = 153
                        self.match(nimParser.EQUALS_OPERATOR)
                        self.state = 154
                        self.match(nimParser.AT)
                        self.state = 155
                        self.match(nimParser.OPEN_BRACK)
                        self.state = 165
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [nimParser.DIGIT, nimParser.MINUS_OPERATOR]:
                            self.state = 157
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==nimParser.MINUS_OPERATOR:
                                self.state = 156
                                self.match(nimParser.MINUS_OPERATOR)


                            self.state = 160 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 159
                                self.match(nimParser.DIGIT)
                                self.state = 162 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==nimParser.DIGIT):
                                    break

                            pass
                        elif token in [nimParser.IDENTIFIER]:
                            self.state = 164
                            self.match(nimParser.IDENTIFIER)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 181
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==nimParser.COMMA:
                            self.state = 167
                            self.match(nimParser.COMMA)
                            self.state = 177
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [nimParser.DIGIT, nimParser.MINUS_OPERATOR]:
                                self.state = 169
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==nimParser.MINUS_OPERATOR:
                                    self.state = 168
                                    self.match(nimParser.MINUS_OPERATOR)


                                self.state = 172 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 171
                                    self.match(nimParser.DIGIT)
                                    self.state = 174 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==nimParser.DIGIT):
                                        break

                                pass
                            elif token in [nimParser.IDENTIFIER]:
                                self.state = 176
                                self.match(nimParser.IDENTIFIER)
                                pass
                            else:
                                raise NoViableAltException(self)

                            self.state = 183
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 184
                        self.match(nimParser.CLOSE_BRACK)
                        pass



                else:
                    raise NoViableAltException(self)
                self.state = 187 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,18,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstDecContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(nimParser.CONST, 0)

        def assignStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.AssignStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.AssignStmtContext,i)


        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def COMMENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMENT)
            else:
                return self.getToken(nimParser.COMMENT, i)

        def getRuleIndex(self):
            return nimParser.RULE_constDec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstDec" ):
                listener.enterConstDec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstDec" ):
                listener.exitConstDec(self)




    def constDec(self):

        localctx = nimParser.ConstDecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_constDec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 189
            self.match(nimParser.CONST)
            self.state = 202 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 192
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==nimParser.T__0:
                        self.state = 190
                        self.match(nimParser.T__0)
                        self.state = 191
                        self.match(nimParser.INDENT)


                    self.state = 194
                    self.assignStmt()
                    self.state = 196
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
                    if la_ == 1:
                        self.state = 195
                        self.match(nimParser.T__0)


                    self.state = 200
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
                    if la_ == 1:
                        self.state = 198
                        self.match(nimParser.INDENT)
                        self.state = 199
                        self.match(nimParser.COMMENT)



                else:
                    raise NoViableAltException(self)
                self.state = 204 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,22,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetDecContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LET(self):
            return self.getToken(nimParser.LET, 0)

        def assignStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.AssignStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.AssignStmtContext,i)


        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def COMMENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMENT)
            else:
                return self.getToken(nimParser.COMMENT, i)

        def getRuleIndex(self):
            return nimParser.RULE_letDec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetDec" ):
                listener.enterLetDec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetDec" ):
                listener.exitLetDec(self)




    def letDec(self):

        localctx = nimParser.LetDecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_letDec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 206
            self.match(nimParser.LET)
            self.state = 219 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 209
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==nimParser.T__0:
                        self.state = 207
                        self.match(nimParser.T__0)
                        self.state = 208
                        self.match(nimParser.INDENT)


                    self.state = 211
                    self.assignStmt()
                    self.state = 213
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
                    if la_ == 1:
                        self.state = 212
                        self.match(nimParser.T__0)


                    self.state = 217
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
                    if la_ == 1:
                        self.state = 215
                        self.match(nimParser.INDENT)
                        self.state = 216
                        self.match(nimParser.COMMENT)



                else:
                    raise NoViableAltException(self)
                self.state = 221 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(nimParser.IDENTIFIER, 0)

        def EQUALS_OPERATOR(self):
            return self.getToken(nimParser.EQUALS_OPERATOR, 0)

        def rightHandSideStmt(self):
            return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,0)


        def AT(self):
            return self.getToken(nimParser.AT, 0)

        def SEMI_COLON(self):
            return self.getToken(nimParser.SEMI_COLON, 0)

        def INDENT(self):
            return self.getToken(nimParser.INDENT, 0)

        def getRuleIndex(self):
            return nimParser.RULE_assignStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignStmt" ):
                listener.enterAssignStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignStmt" ):
                listener.exitAssignStmt(self)




    def assignStmt(self):

        localctx = nimParser.AssignStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_assignStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 223
            self.match(nimParser.IDENTIFIER)
            self.state = 224
            self.match(nimParser.EQUALS_OPERATOR)
            self.state = 226
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.AT:
                self.state = 225
                self.match(nimParser.AT)


            self.state = 228
            self.rightHandSideStmt()
            self.state = 230
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.SEMI_COLON:
                self.state = 229
                self.match(nimParser.SEMI_COLON)


            self.state = 235
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,29,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 232
                    self.match(nimParser.T__0) 
                self.state = 237
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

            self.state = 239
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.state = 238
                self.match(nimParser.INDENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrintStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ECHO(self):
            return self.getToken(nimParser.ECHO, 0)

        def OPEN_PAREN(self):
            return self.getToken(nimParser.OPEN_PAREN, 0)

        def rightHandSideStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.RightHandSideStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,i)


        def CLOSE_PAREN(self):
            return self.getToken(nimParser.CLOSE_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMA)
            else:
                return self.getToken(nimParser.COMMA, i)

        def getRuleIndex(self):
            return nimParser.RULE_printStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrintStmt" ):
                listener.enterPrintStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrintStmt" ):
                listener.exitPrintStmt(self)




    def printStmt(self):

        localctx = nimParser.PrintStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_printStmt)
        self._la = 0 # Token type
        try:
            self.state = 262
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 241
                self.match(nimParser.ECHO)
                self.state = 242
                self.match(nimParser.OPEN_PAREN)
                self.state = 243
                self.rightHandSideStmt()
                self.state = 248
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nimParser.COMMA:
                    self.state = 244
                    self.match(nimParser.COMMA)
                    self.state = 245
                    self.rightHandSideStmt()
                    self.state = 250
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 251
                self.match(nimParser.CLOSE_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 253
                self.match(nimParser.ECHO)
                self.state = 254
                self.rightHandSideStmt()
                self.state = 259
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nimParser.COMMA:
                    self.state = 255
                    self.match(nimParser.COMMA)
                    self.state = 256
                    self.rightHandSideStmt()
                    self.state = 261
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexIfStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIfStmt(self):
            return self.getTypedRuleContext(nimParser.SimpleIfStmtContext,0)


        def simpleElifStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.SimpleElifStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.SimpleElifStmtContext,i)


        def simpleElseStmt(self):
            return self.getTypedRuleContext(nimParser.SimpleElseStmtContext,0)


        def INDENT(self):
            return self.getToken(nimParser.INDENT, 0)

        def getRuleIndex(self):
            return nimParser.RULE_complexIfStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplexIfStmt" ):
                listener.enterComplexIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplexIfStmt" ):
                listener.exitComplexIfStmt(self)




    def complexIfStmt(self):

        localctx = nimParser.ComplexIfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_complexIfStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 264
            self.simpleIfStmt()
            self.state = 268
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,34,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 265
                    self.simpleElifStmt() 
                self.state = 270
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,34,self._ctx)

            self.state = 272
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.state = 271
                self.simpleElseStmt()


            self.state = 276
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.state = 274
                self.match(nimParser.T__0)
                self.state = 275
                self.match(nimParser.INDENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarComplexIfStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varSimpleIfStmt(self):
            return self.getTypedRuleContext(nimParser.VarSimpleIfStmtContext,0)


        def varSimpleElifStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.VarSimpleElifStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.VarSimpleElifStmtContext,i)


        def varSimpleElseStmt(self):
            return self.getTypedRuleContext(nimParser.VarSimpleElseStmtContext,0)


        def getRuleIndex(self):
            return nimParser.RULE_varComplexIfStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarComplexIfStmt" ):
                listener.enterVarComplexIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarComplexIfStmt" ):
                listener.exitVarComplexIfStmt(self)




    def varComplexIfStmt(self):

        localctx = nimParser.VarComplexIfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_varComplexIfStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 278
            self.varSimpleIfStmt()
            self.state = 282
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,37,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 279
                    self.varSimpleElifStmt() 
                self.state = 284
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,37,self._ctx)

            self.state = 286
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.state = 285
                self.varSimpleElseStmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleIfStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(nimParser.IF, 0)

        def condition(self):
            return self.getTypedRuleContext(nimParser.ConditionContext,0)


        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def assignStmt(self):
            return self.getTypedRuleContext(nimParser.AssignStmtContext,0)


        def NOT(self):
            return self.getToken(nimParser.NOT, 0)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def BREAK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.BREAK)
            else:
                return self.getToken(nimParser.BREAK, i)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.IDENTIFIER)
            else:
                return self.getToken(nimParser.IDENTIFIER, i)

        def CONTINUE(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.CONTINUE)
            else:
                return self.getToken(nimParser.CONTINUE, i)

        def RETURN(self):
            return self.getToken(nimParser.RETURN, 0)

        def OPEN_PAREN(self):
            return self.getToken(nimParser.OPEN_PAREN, 0)

        def rightHandSideStmt(self):
            return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(nimParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return nimParser.RULE_simpleIfStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleIfStmt" ):
                listener.enterSimpleIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleIfStmt" ):
                listener.exitSimpleIfStmt(self)




    def simpleIfStmt(self):

        localctx = nimParser.SimpleIfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_simpleIfStmt)
        self._la = 0 # Token type
        try:
            self.state = 384
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 288
                self.match(nimParser.IF)
                self.state = 290
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.NOT:
                    self.state = 289
                    self.match(nimParser.NOT)


                self.state = 292
                self.condition()
                self.state = 293
                self.match(nimParser.COLON)
                self.state = 294
                self.assignStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 296
                self.match(nimParser.IF)
                self.state = 298
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.NOT:
                    self.state = 297
                    self.match(nimParser.NOT)


                self.state = 300
                self.condition()
                self.state = 301
                self.match(nimParser.COLON)
                self.state = 314 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 302
                        self.match(nimParser.T__0)
                        self.state = 303
                        self.match(nimParser.INDENT)
                        self.state = 312
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [nimParser.T__0, nimParser.T__6, nimParser.VARIABLE, nimParser.ECHO, nimParser.BLOCK, nimParser.CASE, nimParser.CONST, nimParser.FOR, nimParser.IF, nimParser.LET, nimParser.PROC, nimParser.TYPE, nimParser.WHEN, nimParser.WHILE, nimParser.OPEN_PAREN, nimParser.IDENTIFIER, nimParser.NEW_IDENTIFIER]:
                            self.state = 304
                            self.stmt()
                            pass
                        elif token in [nimParser.BREAK]:
                            self.state = 305
                            self.match(nimParser.BREAK)
                            self.state = 306
                            self.match(nimParser.IDENTIFIER)
                            pass
                        elif token in [nimParser.CONTINUE]:
                            self.state = 307
                            self.match(nimParser.CONTINUE)
                            pass
                        elif token in [nimParser.T__3]:
                            self.state = 308
                            self.match(nimParser.T__3)
                            self.state = 309
                            self.match(nimParser.IDENTIFIER)
                            pass
                        elif token in [nimParser.T__4]:
                            self.state = 310
                            self.match(nimParser.T__4)
                            self.state = 311
                            self.match(nimParser.IDENTIFIER)
                            pass
                        else:
                            raise NoViableAltException(self)


                    else:
                        raise NoViableAltException(self)
                    self.state = 316 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,42,self._ctx)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 318
                self.match(nimParser.IF)
                self.state = 320
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.NOT:
                    self.state = 319
                    self.match(nimParser.NOT)


                self.state = 322
                self.condition()
                self.state = 323
                self.match(nimParser.COLON)
                self.state = 339 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 324
                        self.match(nimParser.T__0)
                        self.state = 325
                        self.match(nimParser.INDENT)
                        self.state = 330 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 330
                                self._errHandler.sync(self)
                                token = self._input.LA(1)
                                if token in [nimParser.T__0, nimParser.T__6, nimParser.VARIABLE, nimParser.ECHO, nimParser.BLOCK, nimParser.CASE, nimParser.CONST, nimParser.FOR, nimParser.IF, nimParser.LET, nimParser.PROC, nimParser.TYPE, nimParser.WHEN, nimParser.WHILE, nimParser.OPEN_PAREN, nimParser.IDENTIFIER, nimParser.NEW_IDENTIFIER]:
                                    self.state = 326
                                    self.stmt()
                                    pass
                                elif token in [nimParser.BREAK]:
                                    self.state = 327
                                    self.match(nimParser.BREAK)
                                    self.state = 328
                                    self.match(nimParser.IDENTIFIER)
                                    pass
                                elif token in [nimParser.CONTINUE]:
                                    self.state = 329
                                    self.match(nimParser.CONTINUE)
                                    pass
                                else:
                                    raise NoViableAltException(self)


                            else:
                                raise NoViableAltException(self)
                            self.state = 332 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,45,self._ctx)

                        self.state = 335 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 334
                                self.match(nimParser.T__0)

                            else:
                                raise NoViableAltException(self)
                            self.state = 337 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,46,self._ctx)


                    else:
                        raise NoViableAltException(self)
                    self.state = 341 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 343
                self.match(nimParser.IF)
                self.state = 345
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.NOT:
                    self.state = 344
                    self.match(nimParser.NOT)


                self.state = 347
                self.condition()
                self.state = 348
                self.match(nimParser.COLON)
                self.state = 349
                self.match(nimParser.RETURN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 351
                self.match(nimParser.IF)
                self.state = 353
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.NOT:
                    self.state = 352
                    self.match(nimParser.NOT)


                self.state = 355
                self.match(nimParser.IDENTIFIER)
                self.state = 356
                self.match(nimParser.OPEN_PAREN)
                self.state = 357
                self.rightHandSideStmt()
                self.state = 358
                self.match(nimParser.CLOSE_PAREN)
                self.state = 359
                self.match(nimParser.COLON)
                self.state = 369 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 360
                        self.match(nimParser.T__0)
                        self.state = 361
                        self.match(nimParser.INDENT)
                        self.state = 362
                        self.stmt()
                        self.state = 366
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,50,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 363
                                self.match(nimParser.T__0) 
                            self.state = 368
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,50,self._ctx)


                    else:
                        raise NoViableAltException(self)
                    self.state = 371 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,51,self._ctx)

                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 373
                self.match(nimParser.IF)
                self.state = 375
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.NOT:
                    self.state = 374
                    self.match(nimParser.NOT)


                self.state = 377
                self.match(nimParser.IDENTIFIER)
                self.state = 378
                self.match(nimParser.OPEN_PAREN)
                self.state = 379
                self.rightHandSideStmt()
                self.state = 380
                self.match(nimParser.CLOSE_PAREN)
                self.state = 381
                self.match(nimParser.COLON)
                self.state = 382
                self.assignStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarSimpleIfStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(nimParser.IF, 0)

        def condition(self):
            return self.getTypedRuleContext(nimParser.ConditionContext,0)


        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def rightHandSideStmt(self):
            return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,0)


        def NEW_IDENTIFIER(self):
            return self.getToken(nimParser.NEW_IDENTIFIER, 0)

        def NOT(self):
            return self.getToken(nimParser.NOT, 0)

        def getRuleIndex(self):
            return nimParser.RULE_varSimpleIfStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarSimpleIfStmt" ):
                listener.enterVarSimpleIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarSimpleIfStmt" ):
                listener.exitVarSimpleIfStmt(self)




    def varSimpleIfStmt(self):

        localctx = nimParser.VarSimpleIfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_varSimpleIfStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 386
            self.match(nimParser.IF)
            self.state = 388
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.NOT:
                self.state = 387
                self.match(nimParser.NOT)


            self.state = 390
            self.condition()
            self.state = 391
            self.match(nimParser.COLON)
            self.state = 394
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nimParser.T__5, nimParser.T__10, nimParser.DIGIT, nimParser.NIL, nimParser.OPEN_PAREN, nimParser.OPEN_BRACK, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.IDENTIFIER, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                self.state = 392
                self.rightHandSideStmt()
                pass
            elif token in [nimParser.NEW_IDENTIFIER]:
                self.state = 393
                self.match(nimParser.NEW_IDENTIFIER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarSimpleElifStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELIF(self):
            return self.getToken(nimParser.ELIF, 0)

        def condition(self):
            return self.getTypedRuleContext(nimParser.ConditionContext,0)


        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def rightHandSideStmt(self):
            return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,0)


        def NEW_IDENTIFIER(self):
            return self.getToken(nimParser.NEW_IDENTIFIER, 0)

        def NOT(self):
            return self.getToken(nimParser.NOT, 0)

        def getRuleIndex(self):
            return nimParser.RULE_varSimpleElifStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarSimpleElifStmt" ):
                listener.enterVarSimpleElifStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarSimpleElifStmt" ):
                listener.exitVarSimpleElifStmt(self)




    def varSimpleElifStmt(self):

        localctx = nimParser.VarSimpleElifStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_varSimpleElifStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 396
            self.match(nimParser.ELIF)
            self.state = 398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.NOT:
                self.state = 397
                self.match(nimParser.NOT)


            self.state = 400
            self.condition()
            self.state = 401
            self.match(nimParser.COLON)
            self.state = 404
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nimParser.T__5, nimParser.T__10, nimParser.DIGIT, nimParser.NIL, nimParser.OPEN_PAREN, nimParser.OPEN_BRACK, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.IDENTIFIER, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                self.state = 402
                self.rightHandSideStmt()
                pass
            elif token in [nimParser.NEW_IDENTIFIER]:
                self.state = 403
                self.match(nimParser.NEW_IDENTIFIER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarSimpleElseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(nimParser.ELSE, 0)

        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def rightHandSideStmt(self):
            return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,0)


        def NEW_IDENTIFIER(self):
            return self.getToken(nimParser.NEW_IDENTIFIER, 0)

        def INDENT(self):
            return self.getToken(nimParser.INDENT, 0)

        def getRuleIndex(self):
            return nimParser.RULE_varSimpleElseStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarSimpleElseStmt" ):
                listener.enterVarSimpleElseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarSimpleElseStmt" ):
                listener.exitVarSimpleElseStmt(self)




    def varSimpleElseStmt(self):

        localctx = nimParser.VarSimpleElseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_varSimpleElseStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 407
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.INDENT:
                self.state = 406
                self.match(nimParser.INDENT)


            self.state = 409
            self.match(nimParser.ELSE)
            self.state = 410
            self.match(nimParser.COLON)
            self.state = 413
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nimParser.T__5, nimParser.T__10, nimParser.DIGIT, nimParser.NIL, nimParser.OPEN_PAREN, nimParser.OPEN_BRACK, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.IDENTIFIER, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                self.state = 411
                self.rightHandSideStmt()
                pass
            elif token in [nimParser.NEW_IDENTIFIER]:
                self.state = 412
                self.match(nimParser.NEW_IDENTIFIER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleElifStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELIF(self):
            return self.getToken(nimParser.ELIF, 0)

        def rightHandSideStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.RightHandSideStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,i)


        def EQUALS_EQUALS(self):
            return self.getToken(nimParser.EQUALS_EQUALS, 0)

        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def getRuleIndex(self):
            return nimParser.RULE_simpleElifStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleElifStmt" ):
                listener.enterSimpleElifStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleElifStmt" ):
                listener.exitSimpleElifStmt(self)




    def simpleElifStmt(self):

        localctx = nimParser.SimpleElifStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_simpleElifStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 415
            self.match(nimParser.ELIF)
            self.state = 416
            self.rightHandSideStmt()
            self.state = 417
            self.match(nimParser.EQUALS_EQUALS)
            self.state = 418
            self.rightHandSideStmt()
            self.state = 419
            self.match(nimParser.COLON)
            self.state = 429 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 420
                    self.match(nimParser.T__0)
                    self.state = 421
                    self.match(nimParser.INDENT)
                    self.state = 422
                    self.stmt()
                    self.state = 426
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,60,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 423
                            self.match(nimParser.T__0) 
                        self.state = 428
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,60,self._ctx)


                else:
                    raise NoViableAltException(self)
                self.state = 431 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,61,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleElseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(nimParser.ELSE, 0)

        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def printStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.PrintStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.PrintStmtContext,i)


        def assignStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.AssignStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.AssignStmtContext,i)


        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def getRuleIndex(self):
            return nimParser.RULE_simpleElseStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleElseStmt" ):
                listener.enterSimpleElseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleElseStmt" ):
                listener.exitSimpleElseStmt(self)




    def simpleElseStmt(self):

        localctx = nimParser.SimpleElseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_simpleElseStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 434
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.INDENT:
                self.state = 433
                self.match(nimParser.INDENT)


            self.state = 436
            self.match(nimParser.ELSE)
            self.state = 437
            self.match(nimParser.COLON)
            self.state = 443 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 443
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [nimParser.T__0]:
                        self.state = 438
                        self.match(nimParser.T__0)
                        self.state = 439
                        self.match(nimParser.INDENT)
                        self.state = 440
                        self.stmt()
                        pass
                    elif token in [nimParser.ECHO]:
                        self.state = 441
                        self.printStmt()
                        pass
                    elif token in [nimParser.IDENTIFIER]:
                        self.state = 442
                        self.assignStmt()
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 445 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,64,self._ctx)

            self.state = 450
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,65,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 447
                    self.match(nimParser.T__0) 
                self.state = 452
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,65,self._ctx)

            self.state = 454
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.state = 453
                self.match(nimParser.INDENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForLoopContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(nimParser.FOR, 0)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.IDENTIFIER)
            else:
                return self.getToken(nimParser.IDENTIFIER, i)

        def IN(self):
            return self.getToken(nimParser.IN, 0)

        def CHAR_LIT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.CHAR_LIT)
            else:
                return self.getToken(nimParser.CHAR_LIT, i)

        def OP6(self):
            return self.getToken(nimParser.OP6, 0)

        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def COMMENT(self):
            return self.getToken(nimParser.COMMENT, 0)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def FORLOOP_RANGE(self):
            return self.getToken(nimParser.FORLOOP_RANGE, 0)

        def methodInvoke(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.MethodInvokeContext)
            else:
                return self.getTypedRuleContext(nimParser.MethodInvokeContext,i)


        def LESS_THAN(self):
            return self.getToken(nimParser.LESS_THAN, 0)

        def NEW_IDENTIFIER(self):
            return self.getToken(nimParser.NEW_IDENTIFIER, 0)

        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.DIGIT)
            else:
                return self.getToken(nimParser.DIGIT, i)

        def AT(self):
            return self.getToken(nimParser.AT, 0)

        def OPEN_BRACK(self):
            return self.getToken(nimParser.OPEN_BRACK, 0)

        def CLOSE_BRACK(self):
            return self.getToken(nimParser.CLOSE_BRACK, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMA)
            else:
                return self.getToken(nimParser.COMMA, i)

        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.LiteralContext)
            else:
                return self.getTypedRuleContext(nimParser.LiteralContext,i)


        def OPEN_PAREN(self):
            return self.getToken(nimParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(nimParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return nimParser.RULE_forLoop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForLoop" ):
                listener.enterForLoop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForLoop" ):
                listener.exitForLoop(self)




    def forLoop(self):

        localctx = nimParser.ForLoopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_forLoop)
        self._la = 0 # Token type
        try:
            self.state = 623
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 456
                self.match(nimParser.FOR)
                self.state = 457
                self.match(nimParser.IDENTIFIER)
                self.state = 458
                self.match(nimParser.IN)
                self.state = 459
                self.match(nimParser.CHAR_LIT)
                self.state = 460
                self.match(nimParser.OP6)
                self.state = 461
                self.match(nimParser.CHAR_LIT)
                self.state = 462
                self.match(nimParser.COLON)
                self.state = 464
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.COMMENT:
                    self.state = 463
                    self.match(nimParser.COMMENT)


                self.state = 469 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 466
                        self.match(nimParser.T__0)
                        self.state = 467
                        self.match(nimParser.INDENT)
                        self.state = 468
                        self.stmt()

                    else:
                        raise NoViableAltException(self)
                    self.state = 471 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,68,self._ctx)

                self.state = 476
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,69,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 473
                        self.match(nimParser.INDENT) 
                    self.state = 478
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,69,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 479
                self.match(nimParser.FOR)
                self.state = 480
                self.match(nimParser.IDENTIFIER)
                self.state = 481
                self.match(nimParser.IN)
                self.state = 484
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.FORLOOP_RANGE]:
                    self.state = 482
                    self.match(nimParser.FORLOOP_RANGE)
                    pass
                elif token in [nimParser.OPEN_PAREN, nimParser.IDENTIFIER]:
                    self.state = 483
                    self.methodInvoke()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 486
                self.match(nimParser.COLON)
                self.state = 488
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.COMMENT:
                    self.state = 487
                    self.match(nimParser.COMMENT)


                self.state = 493 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 490
                        self.match(nimParser.T__0)
                        self.state = 491
                        self.match(nimParser.INDENT)
                        self.state = 492
                        self.stmt()

                    else:
                        raise NoViableAltException(self)
                    self.state = 495 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,72,self._ctx)

                self.state = 500
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,73,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 497
                        self.match(nimParser.INDENT) 
                    self.state = 502
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,73,self._ctx)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 503
                self.match(nimParser.FOR)
                self.state = 504
                self.match(nimParser.IDENTIFIER)
                self.state = 505
                self.match(nimParser.IN)
                self.state = 507 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 506
                    self.match(nimParser.DIGIT)
                    self.state = 509 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==nimParser.DIGIT):
                        break

                self.state = 511
                self.match(nimParser.OP6)
                self.state = 512
                self.match(nimParser.LESS_THAN)
                self.state = 513
                self.match(nimParser.NEW_IDENTIFIER)
                self.state = 514
                self.match(nimParser.COLON)
                self.state = 516
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.COMMENT:
                    self.state = 515
                    self.match(nimParser.COMMENT)


                self.state = 521 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 518
                        self.match(nimParser.T__0)
                        self.state = 519
                        self.match(nimParser.INDENT)
                        self.state = 520
                        self.stmt()

                    else:
                        raise NoViableAltException(self)
                    self.state = 523 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,76,self._ctx)

                self.state = 528
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,77,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 525
                        self.match(nimParser.INDENT) 
                    self.state = 530
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,77,self._ctx)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 531
                self.match(nimParser.FOR)
                self.state = 532
                self.match(nimParser.IDENTIFIER)
                self.state = 537
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nimParser.COMMA:
                    self.state = 533
                    self.match(nimParser.COMMA)
                    self.state = 534
                    self.match(nimParser.IDENTIFIER)
                    self.state = 539
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 540
                self.match(nimParser.IN)
                self.state = 541
                self.match(nimParser.AT)
                self.state = 542
                self.match(nimParser.OPEN_BRACK)
                self.state = 567
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nimParser.DIGIT or ((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & ((1 << (nimParser.NIL - 87)) | (1 << (nimParser.TRIPLESTR_LIT - 87)) | (1 << (nimParser.CHAR_LIT - 87)) | (1 << (nimParser.STR_LIT - 87)) | (1 << (nimParser.RSTR_LIT - 87)) | (1 << (nimParser.INT_LIT - 87)) | (1 << (nimParser.INT8_LIT - 87)) | (1 << (nimParser.INT16_LIT - 87)) | (1 << (nimParser.INT32_LIT - 87)) | (1 << (nimParser.INT64_LIT - 87)) | (1 << (nimParser.UINT_LIT - 87)) | (1 << (nimParser.UINT8_LIT - 87)) | (1 << (nimParser.UINT16_LIT - 87)) | (1 << (nimParser.UINT32_LIT - 87)) | (1 << (nimParser.UINT64_LIT - 87)) | (1 << (nimParser.FLOAT_LIT - 87)) | (1 << (nimParser.FLOAT32_LIT - 87)) | (1 << (nimParser.FLOAT64_LIT - 87)))) != 0):
                    self.state = 549
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                        self.state = 543
                        self.literal()
                        pass
                    elif token in [nimParser.DIGIT]:
                        self.state = 545 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 544
                                self.match(nimParser.DIGIT)

                            else:
                                raise NoViableAltException(self)
                            self.state = 547 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,79,self._ctx)

                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 562
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==nimParser.COMMA:
                        self.state = 551
                        self.match(nimParser.COMMA)
                        self.state = 558
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                            self.state = 552
                            self.literal()
                            pass
                        elif token in [nimParser.DIGIT]:
                            self.state = 554 
                            self._errHandler.sync(self)
                            _alt = 1
                            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                if _alt == 1:
                                    self.state = 553
                                    self.match(nimParser.DIGIT)

                                else:
                                    raise NoViableAltException(self)
                                self.state = 556 
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 564
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 569
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 570
                self.match(nimParser.CLOSE_BRACK)
                self.state = 571
                self.match(nimParser.COLON)
                self.state = 573
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.COMMENT:
                    self.state = 572
                    self.match(nimParser.COMMENT)


                self.state = 578 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 575
                        self.match(nimParser.T__0)
                        self.state = 576
                        self.match(nimParser.INDENT)
                        self.state = 577
                        self.stmt()

                    else:
                        raise NoViableAltException(self)
                    self.state = 580 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,86,self._ctx)

                self.state = 585
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,87,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 582
                        self.match(nimParser.INDENT) 
                    self.state = 587
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,87,self._ctx)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 588
                self.match(nimParser.FOR)
                self.state = 589
                self.match(nimParser.IDENTIFIER)
                self.state = 590
                self.match(nimParser.IN)
                self.state = 591
                self.match(nimParser.IDENTIFIER)
                self.state = 592
                self.match(nimParser.OPEN_PAREN)
                self.state = 593
                self.match(nimParser.IDENTIFIER)
                self.state = 594
                self.match(nimParser.CLOSE_PAREN)
                self.state = 595
                self.match(nimParser.COLON)
                self.state = 597
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.COMMENT:
                    self.state = 596
                    self.match(nimParser.COMMENT)


                self.state = 602 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 599
                        self.match(nimParser.T__0)
                        self.state = 600
                        self.match(nimParser.INDENT)
                        self.state = 601
                        self.stmt()

                    else:
                        raise NoViableAltException(self)
                    self.state = 604 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,89,self._ctx)

                self.state = 609
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,90,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 606
                        self.match(nimParser.INDENT) 
                    self.state = 611
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,90,self._ctx)

                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 612
                self.match(nimParser.FOR)
                self.state = 613
                self.match(nimParser.IDENTIFIER)
                self.state = 614
                self.match(nimParser.IN)
                self.state = 615
                self.methodInvoke()
                self.state = 616
                self.match(nimParser.COLON)
                self.state = 617
                self.match(nimParser.T__0)
                self.state = 618
                self.match(nimParser.INDENT)
                self.state = 619
                self.methodInvoke()
                self.state = 621
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
                if la_ == 1:
                    self.state = 620
                    self.match(nimParser.T__0)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileLoopContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(nimParser.WHILE, 0)

        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def condition(self):
            return self.getTypedRuleContext(nimParser.ConditionContext,0)


        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def BREAK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.BREAK)
            else:
                return self.getToken(nimParser.BREAK, i)

        def getRuleIndex(self):
            return nimParser.RULE_whileLoop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileLoop" ):
                listener.enterWhileLoop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileLoop" ):
                listener.exitWhileLoop(self)




    def whileLoop(self):

        localctx = nimParser.WhileLoopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_whileLoop)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 625
            self.match(nimParser.WHILE)
            self.state = 628
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.state = 626
                self.condition()
                pass

            elif la_ == 2:
                self.state = 627
                self.match(nimParser.T__5)
                pass


            self.state = 630
            self.match(nimParser.COLON)
            self.state = 637 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 631
                    self.match(nimParser.T__0)
                    self.state = 632
                    self.match(nimParser.INDENT)
                    self.state = 635
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [nimParser.T__0, nimParser.T__6, nimParser.VARIABLE, nimParser.ECHO, nimParser.BLOCK, nimParser.CASE, nimParser.CONST, nimParser.FOR, nimParser.IF, nimParser.LET, nimParser.PROC, nimParser.TYPE, nimParser.WHEN, nimParser.WHILE, nimParser.OPEN_PAREN, nimParser.IDENTIFIER, nimParser.NEW_IDENTIFIER]:
                        self.state = 633
                        self.stmt()
                        pass
                    elif token in [nimParser.BREAK]:
                        self.state = 634
                        self.match(nimParser.BREAK)
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 639 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,95,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleWhenStmt(self):
            return self.getTypedRuleContext(nimParser.SimpleWhenStmtContext,0)


        def simpleElseStmt(self):
            return self.getTypedRuleContext(nimParser.SimpleElseStmtContext,0)


        def simpleElifStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.SimpleElifStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.SimpleElifStmtContext,i)


        def getRuleIndex(self):
            return nimParser.RULE_whenStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenStmt" ):
                listener.enterWhenStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenStmt" ):
                listener.exitWhenStmt(self)




    def whenStmt(self):

        localctx = nimParser.WhenStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_whenStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 641
            self.simpleWhenStmt()
            self.state = 645
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==nimParser.ELIF:
                self.state = 642
                self.simpleElifStmt()
                self.state = 647
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 648
            self.simpleElseStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleWhenStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(nimParser.WHEN, 0)

        def condition(self):
            return self.getTypedRuleContext(nimParser.ConditionContext,0)


        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def BREAK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.BREAK)
            else:
                return self.getToken(nimParser.BREAK, i)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def getRuleIndex(self):
            return nimParser.RULE_simpleWhenStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleWhenStmt" ):
                listener.enterSimpleWhenStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleWhenStmt" ):
                listener.exitSimpleWhenStmt(self)




    def simpleWhenStmt(self):

        localctx = nimParser.SimpleWhenStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_simpleWhenStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 650
            self.match(nimParser.WHEN)
            self.state = 651
            self.condition()
            self.state = 652
            self.match(nimParser.COLON)
            self.state = 661 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 655
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
                if la_ == 1:
                    self.state = 653
                    self.match(nimParser.T__0)
                    self.state = 654
                    self.match(nimParser.INDENT)


                self.state = 659
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.T__0, nimParser.T__6, nimParser.VARIABLE, nimParser.ECHO, nimParser.BLOCK, nimParser.CASE, nimParser.CONST, nimParser.FOR, nimParser.IF, nimParser.LET, nimParser.PROC, nimParser.TYPE, nimParser.WHEN, nimParser.WHILE, nimParser.OPEN_PAREN, nimParser.IDENTIFIER, nimParser.NEW_IDENTIFIER]:
                    self.state = 657
                    self.stmt()
                    pass
                elif token in [nimParser.BREAK]:
                    self.state = 658
                    self.match(nimParser.BREAK)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 663 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.T__0) | (1 << nimParser.T__6) | (1 << nimParser.VARIABLE) | (1 << nimParser.ECHO) | (1 << nimParser.BLOCK) | (1 << nimParser.BREAK) | (1 << nimParser.CASE) | (1 << nimParser.CONST))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (nimParser.FOR - 74)) | (1 << (nimParser.IF - 74)) | (1 << (nimParser.LET - 74)) | (1 << (nimParser.PROC - 74)) | (1 << (nimParser.TYPE - 74)) | (1 << (nimParser.WHEN - 74)) | (1 << (nimParser.WHILE - 74)) | (1 << (nimParser.OPEN_PAREN - 74)) | (1 << (nimParser.IDENTIFIER - 74)))) != 0) or _la==nimParser.NEW_IDENTIFIER):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROC(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.PROC)
            else:
                return self.getToken(nimParser.PROC, i)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.IDENTIFIER)
            else:
                return self.getToken(nimParser.IDENTIFIER, i)

        def OPEN_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.OPEN_PAREN)
            else:
                return self.getToken(nimParser.OPEN_PAREN, i)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COLON)
            else:
                return self.getToken(nimParser.COLON, i)

        def dataType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.DataTypeContext)
            else:
                return self.getTypedRuleContext(nimParser.DataTypeContext,i)


        def CLOSE_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.CLOSE_PAREN)
            else:
                return self.getToken(nimParser.CLOSE_PAREN, i)

        def EQUALS_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.EQUALS_OPERATOR)
            else:
                return self.getToken(nimParser.EQUALS_OPERATOR, i)

        def OPEN_BRACK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.OPEN_BRACK)
            else:
                return self.getToken(nimParser.OPEN_BRACK, i)

        def CLOSE_BRACK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.CLOSE_BRACK)
            else:
                return self.getToken(nimParser.CLOSE_BRACK, i)

        def RETURN(self):
            return self.getToken(nimParser.RETURN, 0)

        def rightHandSideStmt(self):
            return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,0)


        def assignStmt(self):
            return self.getTypedRuleContext(nimParser.AssignStmtContext,0)


        def printStmt(self):
            return self.getTypedRuleContext(nimParser.PrintStmtContext,0)


        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def VARIABLE(self):
            return self.getToken(nimParser.VARIABLE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMA)
            else:
                return self.getToken(nimParser.COMMA, i)

        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.LiteralContext)
            else:
                return self.getTypedRuleContext(nimParser.LiteralContext,i)


        def MINUS_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.MINUS_OPERATOR)
            else:
                return self.getToken(nimParser.MINUS_OPERATOR, i)

        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.DIGIT)
            else:
                return self.getToken(nimParser.DIGIT, i)

        def getRuleIndex(self):
            return nimParser.RULE_procBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcBlock" ):
                listener.enterProcBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcBlock" ):
                listener.exitProcBlock(self)




    def procBlock(self):

        localctx = nimParser.ProcBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_procBlock)
        self._la = 0 # Token type
        try:
            self.state = 877
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 665
                self.match(nimParser.PROC)
                self.state = 666
                self.match(nimParser.IDENTIFIER)
                self.state = 670
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.OPEN_BRACK:
                    self.state = 667
                    self.match(nimParser.OPEN_BRACK)
                    self.state = 668
                    self.match(nimParser.IDENTIFIER)
                    self.state = 669
                    self.match(nimParser.CLOSE_BRACK)


                self.state = 672
                self.match(nimParser.OPEN_PAREN)
                self.state = 673
                self.match(nimParser.IDENTIFIER)
                self.state = 674
                self.match(nimParser.COLON)
                self.state = 675
                self.dataType()
                self.state = 676
                self.match(nimParser.CLOSE_PAREN)
                self.state = 679
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.COLON:
                    self.state = 677
                    self.match(nimParser.COLON)
                    self.state = 678
                    self.dataType()


                self.state = 681
                self.match(nimParser.EQUALS_OPERATOR)
                self.state = 719
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.T__0]:
                    self.state = 685 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 682
                            self.match(nimParser.T__0)
                            self.state = 683
                            self.match(nimParser.INDENT)
                            self.state = 684
                            self.stmt()

                        else:
                            raise NoViableAltException(self)
                        self.state = 687 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,102,self._ctx)

                    pass
                elif token in [nimParser.IDENTIFIER]:
                    self.state = 689
                    self.assignStmt()
                    self.state = 693
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,103,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 690
                            self.match(nimParser.T__0) 
                        self.state = 695
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,103,self._ctx)

                    self.state = 701
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,104,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 696
                            self.match(nimParser.T__0)
                            self.state = 697
                            self.match(nimParser.INDENT)
                            self.state = 698
                            self.stmt() 
                        self.state = 703
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,104,self._ctx)

                    pass
                elif token in [nimParser.ECHO]:
                    self.state = 704
                    self.printStmt()
                    self.state = 708
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,105,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 705
                            self.match(nimParser.T__0) 
                        self.state = 710
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,105,self._ctx)

                    self.state = 716
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,106,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 711
                            self.match(nimParser.T__0)
                            self.state = 712
                            self.match(nimParser.INDENT)
                            self.state = 713
                            self.stmt() 
                        self.state = 718
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,106,self._ctx)

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 723
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
                if la_ == 1:
                    self.state = 721
                    self.match(nimParser.RETURN)
                    self.state = 722
                    self.rightHandSideStmt()


                self.state = 726
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
                if la_ == 1:
                    self.state = 725
                    self.match(nimParser.T__0)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 728
                self.match(nimParser.PROC)
                self.state = 729
                self.match(nimParser.T__6)
                self.state = 730
                self.match(nimParser.OPEN_PAREN)
                self.state = 731
                self.match(nimParser.IDENTIFIER)
                self.state = 732
                self.match(nimParser.COLON)
                self.state = 733
                self.match(nimParser.PROC)
                self.state = 734
                self.match(nimParser.OPEN_PAREN)
                self.state = 735
                self.match(nimParser.IDENTIFIER)
                self.state = 736
                self.match(nimParser.COLON)
                self.state = 737
                self.dataType()
                self.state = 738
                self.match(nimParser.CLOSE_PAREN)
                self.state = 739
                self.match(nimParser.CLOSE_PAREN)
                self.state = 742
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.COLON:
                    self.state = 740
                    self.match(nimParser.COLON)
                    self.state = 741
                    self.dataType()


                self.state = 744
                self.match(nimParser.EQUALS_OPERATOR)
                self.state = 782
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.T__0]:
                    self.state = 748 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 745
                        self.match(nimParser.T__0)
                        self.state = 746
                        self.match(nimParser.INDENT)
                        self.state = 747
                        self.stmt()
                        self.state = 750 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==nimParser.T__0):
                            break

                    pass
                elif token in [nimParser.IDENTIFIER]:
                    self.state = 752
                    self.assignStmt()
                    self.state = 756
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,112,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 753
                            self.match(nimParser.T__0) 
                        self.state = 758
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,112,self._ctx)

                    self.state = 764
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==nimParser.T__0:
                        self.state = 759
                        self.match(nimParser.T__0)
                        self.state = 760
                        self.match(nimParser.INDENT)
                        self.state = 761
                        self.stmt()
                        self.state = 766
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [nimParser.ECHO]:
                    self.state = 767
                    self.printStmt()
                    self.state = 771
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,114,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 768
                            self.match(nimParser.T__0) 
                        self.state = 773
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,114,self._ctx)

                    self.state = 779
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==nimParser.T__0:
                        self.state = 774
                        self.match(nimParser.T__0)
                        self.state = 775
                        self.match(nimParser.INDENT)
                        self.state = 776
                        self.stmt()
                        self.state = 781
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 784
                self.match(nimParser.RETURN)
                self.state = 785
                self.rightHandSideStmt()
                self.state = 788
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
                if la_ == 1:
                    self.state = 787
                    self.match(nimParser.T__0)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 790
                self.match(nimParser.PROC)
                self.state = 791
                self.match(nimParser.IDENTIFIER)
                self.state = 795
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.OPEN_BRACK:
                    self.state = 792
                    self.match(nimParser.OPEN_BRACK)
                    self.state = 793
                    self.match(nimParser.IDENTIFIER)
                    self.state = 794
                    self.match(nimParser.CLOSE_BRACK)


                self.state = 797
                self.match(nimParser.OPEN_PAREN)
                self.state = 798
                self.match(nimParser.IDENTIFIER)
                self.state = 799
                self.match(nimParser.COLON)
                self.state = 800
                self.match(nimParser.VARIABLE)
                self.state = 801
                self.match(nimParser.IDENTIFIER)
                self.state = 802
                self.match(nimParser.OPEN_BRACK)
                self.state = 803
                self.match(nimParser.IDENTIFIER)
                self.state = 804
                self.match(nimParser.CLOSE_BRACK)
                self.state = 822
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nimParser.COMMA:
                    self.state = 805
                    self.match(nimParser.COMMA)
                    self.state = 806
                    self.match(nimParser.IDENTIFIER)
                    self.state = 807
                    self.match(nimParser.EQUALS_OPERATOR)
                    self.state = 818
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [nimParser.DIGIT, nimParser.MINUS_OPERATOR]:
                        self.state = 809
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==nimParser.MINUS_OPERATOR:
                            self.state = 808
                            self.match(nimParser.MINUS_OPERATOR)


                        self.state = 812 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 811
                            self.match(nimParser.DIGIT)
                            self.state = 814 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==nimParser.DIGIT):
                                break

                        pass
                    elif token in [nimParser.IDENTIFIER]:
                        self.state = 816
                        self.match(nimParser.IDENTIFIER)
                        pass
                    elif token in [nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                        self.state = 817
                        self.literal()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 824
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 825
                self.match(nimParser.CLOSE_PAREN)
                self.state = 828
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.COLON:
                    self.state = 826
                    self.match(nimParser.COLON)
                    self.state = 827
                    self.dataType()


                self.state = 830
                self.match(nimParser.EQUALS_OPERATOR)
                self.state = 868
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.T__0]:
                    self.state = 834 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 831
                            self.match(nimParser.T__0)
                            self.state = 832
                            self.match(nimParser.INDENT)
                            self.state = 833
                            self.stmt()

                        else:
                            raise NoViableAltException(self)
                        self.state = 836 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,124,self._ctx)

                    pass
                elif token in [nimParser.IDENTIFIER]:
                    self.state = 838
                    self.assignStmt()
                    self.state = 842
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,125,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 839
                            self.match(nimParser.T__0) 
                        self.state = 844
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,125,self._ctx)

                    self.state = 850
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,126,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 845
                            self.match(nimParser.T__0)
                            self.state = 846
                            self.match(nimParser.INDENT)
                            self.state = 847
                            self.stmt() 
                        self.state = 852
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,126,self._ctx)

                    pass
                elif token in [nimParser.ECHO]:
                    self.state = 853
                    self.printStmt()
                    self.state = 857
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,127,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 854
                            self.match(nimParser.T__0) 
                        self.state = 859
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,127,self._ctx)

                    self.state = 865
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,128,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 860
                            self.match(nimParser.T__0)
                            self.state = 861
                            self.match(nimParser.INDENT)
                            self.state = 862
                            self.stmt() 
                        self.state = 867
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,128,self._ctx)

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 872
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
                if la_ == 1:
                    self.state = 870
                    self.match(nimParser.RETURN)
                    self.state = 871
                    self.rightHandSideStmt()


                self.state = 875
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
                if la_ == 1:
                    self.state = 874
                    self.match(nimParser.T__0)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BLOCK(self):
            return self.getToken(nimParser.BLOCK, 0)

        def IDENTIFIER(self):
            return self.getToken(nimParser.IDENTIFIER, 0)

        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def getRuleIndex(self):
            return nimParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = nimParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 879
            self.match(nimParser.BLOCK)
            self.state = 880
            self.match(nimParser.IDENTIFIER)
            self.state = 881
            self.match(nimParser.COLON)
            self.state = 885 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 882
                    self.match(nimParser.T__0)
                    self.state = 883
                    self.match(nimParser.INDENT)
                    self.state = 884
                    self.stmt()

                else:
                    raise NoViableAltException(self)
                self.state = 887 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,133,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(nimParser.TYPE, 0)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.IDENTIFIER)
            else:
                return self.getToken(nimParser.IDENTIFIER, i)

        def EQUALS_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.EQUALS_OPERATOR)
            else:
                return self.getToken(nimParser.EQUALS_OPERATOR, i)

        def OPEN_BRACK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.OPEN_BRACK)
            else:
                return self.getToken(nimParser.OPEN_BRACK, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMA)
            else:
                return self.getToken(nimParser.COMMA, i)

        def dataType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.DataTypeContext)
            else:
                return self.getTypedRuleContext(nimParser.DataTypeContext,i)


        def CLOSE_BRACK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.CLOSE_BRACK)
            else:
                return self.getToken(nimParser.CLOSE_BRACK, i)

        def FORLOOP_RANGE(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.FORLOOP_RANGE)
            else:
                return self.getToken(nimParser.FORLOOP_RANGE, i)

        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.DIGIT)
            else:
                return self.getToken(nimParser.DIGIT, i)

        def getRuleIndex(self):
            return nimParser.RULE_typeBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeBlock" ):
                listener.enterTypeBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeBlock" ):
                listener.exitTypeBlock(self)




    def typeBlock(self):

        localctx = nimParser.TypeBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_typeBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 889
            self.match(nimParser.TYPE)
            self.state = 890
            self.match(nimParser.T__0)
            self.state = 909 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 891
                    self.match(nimParser.INDENT)
                    self.state = 892
                    self.match(nimParser.IDENTIFIER)
                    self.state = 893
                    self.match(nimParser.EQUALS_OPERATOR)
                    self.state = 894
                    self.match(nimParser.T__7)
                    self.state = 895
                    self.match(nimParser.OPEN_BRACK)
                    self.state = 902
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [nimParser.FORLOOP_RANGE]:
                        self.state = 896
                        self.match(nimParser.FORLOOP_RANGE)
                        pass
                    elif token in [nimParser.DIGIT]:
                        self.state = 898 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 897
                            self.match(nimParser.DIGIT)
                            self.state = 900 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==nimParser.DIGIT):
                                break

                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 904
                    self.match(nimParser.COMMA)
                    self.state = 905
                    self.dataType()
                    self.state = 906
                    self.match(nimParser.CLOSE_BRACK)
                    self.state = 907
                    self.match(nimParser.T__0)

                else:
                    raise NoViableAltException(self)
                self.state = 911 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,136,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodInvokeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.IDENTIFIER)
            else:
                return self.getToken(nimParser.IDENTIFIER, i)

        def OPEN_PAREN(self):
            return self.getToken(nimParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(nimParser.CLOSE_PAREN, 0)

        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.LiteralContext)
            else:
                return self.getTypedRuleContext(nimParser.LiteralContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMA)
            else:
                return self.getToken(nimParser.COMMA, i)

        def ADD_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.ADD_OPERATOR)
            else:
                return self.getToken(nimParser.ADD_OPERATOR, i)

        def MINUS_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.MINUS_OPERATOR)
            else:
                return self.getToken(nimParser.MINUS_OPERATOR, i)

        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.DIGIT)
            else:
                return self.getToken(nimParser.DIGIT, i)

        def NEW_IDENTIFIER(self):
            return self.getToken(nimParser.NEW_IDENTIFIER, 0)

        def OPEN_BRACK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.OPEN_BRACK)
            else:
                return self.getToken(nimParser.OPEN_BRACK, i)

        def CLOSE_BRACK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.CLOSE_BRACK)
            else:
                return self.getToken(nimParser.CLOSE_BRACK, i)

        def getRuleIndex(self):
            return nimParser.RULE_methodInvoke

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodInvoke" ):
                listener.enterMethodInvoke(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodInvoke" ):
                listener.exitMethodInvoke(self)




    def methodInvoke(self):

        localctx = nimParser.MethodInvokeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_methodInvoke)
        self._la = 0 # Token type
        try:
            self.state = 984
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 913
                self.match(nimParser.IDENTIFIER)
                self.state = 914
                self.match(nimParser.OPEN_PAREN)
                self.state = 922
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.IDENTIFIER]:
                    self.state = 915
                    self.match(nimParser.IDENTIFIER)
                    pass
                elif token in [nimParser.DIGIT]:
                    self.state = 917 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 916
                        self.match(nimParser.DIGIT)
                        self.state = 919 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==nimParser.DIGIT):
                            break

                    pass
                elif token in [nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                    self.state = 921
                    self.literal()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 936
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.ADD_OPERATOR) | (1 << nimParser.MINUS_OPERATOR) | (1 << nimParser.COMMA))) != 0):
                    self.state = 924
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.ADD_OPERATOR) | (1 << nimParser.MINUS_OPERATOR) | (1 << nimParser.COMMA))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 932
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [nimParser.IDENTIFIER]:
                        self.state = 925
                        self.match(nimParser.IDENTIFIER)
                        pass
                    elif token in [nimParser.DIGIT]:
                        self.state = 927 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 926
                            self.match(nimParser.DIGIT)
                            self.state = 929 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==nimParser.DIGIT):
                                break

                        pass
                    elif token in [nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                        self.state = 931
                        self.literal()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 938
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 939
                self.match(nimParser.CLOSE_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 940
                self.match(nimParser.OPEN_PAREN)
                self.state = 948
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.IDENTIFIER]:
                    self.state = 941
                    self.match(nimParser.IDENTIFIER)
                    pass
                elif token in [nimParser.DIGIT]:
                    self.state = 943 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 942
                        self.match(nimParser.DIGIT)
                        self.state = 945 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==nimParser.DIGIT):
                            break

                    pass
                elif token in [nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                    self.state = 947
                    self.literal()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 962
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.ADD_OPERATOR) | (1 << nimParser.MINUS_OPERATOR) | (1 << nimParser.COMMA))) != 0):
                    self.state = 950
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.ADD_OPERATOR) | (1 << nimParser.MINUS_OPERATOR) | (1 << nimParser.COMMA))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 958
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [nimParser.IDENTIFIER]:
                        self.state = 951
                        self.match(nimParser.IDENTIFIER)
                        pass
                    elif token in [nimParser.DIGIT]:
                        self.state = 953 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 952
                            self.match(nimParser.DIGIT)
                            self.state = 955 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==nimParser.DIGIT):
                                break

                        pass
                    elif token in [nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                        self.state = 957
                        self.literal()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 964
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 965
                self.match(nimParser.CLOSE_PAREN)
                self.state = 966
                self.match(nimParser.NEW_IDENTIFIER)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 967
                self.match(nimParser.IDENTIFIER)
                self.state = 968
                self.match(nimParser.IDENTIFIER)
                self.state = 982
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.OPEN_BRACK:
                    self.state = 969
                    self.match(nimParser.OPEN_BRACK)
                    self.state = 970
                    self.match(nimParser.IDENTIFIER)
                    self.state = 971
                    self.match(nimParser.CLOSE_BRACK)
                    self.state = 979
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,147,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 972
                            self.match(nimParser.COMMA)
                            self.state = 973
                            self.match(nimParser.IDENTIFIER)
                            self.state = 974
                            self.match(nimParser.OPEN_BRACK)
                            self.state = 975
                            self.match(nimParser.IDENTIFIER)
                            self.state = 976
                            self.match(nimParser.CLOSE_BRACK) 
                        self.state = 981
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,147,self._ctx)



                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstanceMethodInvokeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW_IDENTIFIER(self):
            return self.getToken(nimParser.NEW_IDENTIFIER, 0)

        def OPEN_PAREN(self):
            return self.getToken(nimParser.OPEN_PAREN, 0)

        def rightHandSideStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.RightHandSideStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,i)


        def CLOSE_PAREN(self):
            return self.getToken(nimParser.CLOSE_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMA)
            else:
                return self.getToken(nimParser.COMMA, i)

        def getRuleIndex(self):
            return nimParser.RULE_instanceMethodInvoke

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstanceMethodInvoke" ):
                listener.enterInstanceMethodInvoke(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstanceMethodInvoke" ):
                listener.exitInstanceMethodInvoke(self)




    def instanceMethodInvoke(self):

        localctx = nimParser.InstanceMethodInvokeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_instanceMethodInvoke)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 986
            self.match(nimParser.NEW_IDENTIFIER)
            self.state = 987
            self.match(nimParser.OPEN_PAREN)
            self.state = 988
            self.rightHandSideStmt()
            self.state = 993
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==nimParser.COMMA:
                self.state = 989
                self.match(nimParser.COMMA)
                self.state = 990
                self.rightHandSideStmt()
                self.state = 995
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 996
            self.match(nimParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForEachStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(nimParser.OPEN_PAREN, 0)

        def IDENTIFIER(self):
            return self.getToken(nimParser.IDENTIFIER, 0)

        def CLOSE_PAREN(self):
            return self.getToken(nimParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return nimParser.RULE_forEachStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForEachStmt" ):
                listener.enterForEachStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForEachStmt" ):
                listener.exitForEachStmt(self)




    def forEachStmt(self):

        localctx = nimParser.ForEachStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_forEachStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 998
            self.match(nimParser.T__6)
            self.state = 999
            self.match(nimParser.OPEN_PAREN)
            self.state = 1000
            self.match(nimParser.IDENTIFIER)
            self.state = 1001
            self.match(nimParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rightHandSideStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.RightHandSideStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,i)


        def LESS_THAN(self):
            return self.getToken(nimParser.LESS_THAN, 0)

        def GREATER_THAN(self):
            return self.getToken(nimParser.GREATER_THAN, 0)

        def EQUALS_EQUALS(self):
            return self.getToken(nimParser.EQUALS_EQUALS, 0)

        def EQUALS_OPERATOR(self):
            return self.getToken(nimParser.EQUALS_OPERATOR, 0)

        def IDENTIFIER(self):
            return self.getToken(nimParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return nimParser.RULE_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition" ):
                listener.enterCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition" ):
                listener.exitCondition(self)




    def condition(self):

        localctx = nimParser.ConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_condition)
        self._la = 0 # Token type
        try:
            self.state = 1022
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1003
                self.rightHandSideStmt()
                self.state = 1015
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.LESS_THAN]:
                    self.state = 1004
                    self.match(nimParser.LESS_THAN)
                    self.state = 1006
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==nimParser.EQUALS_OPERATOR:
                        self.state = 1005
                        self.match(nimParser.EQUALS_OPERATOR)


                    pass
                elif token in [nimParser.T__8]:
                    self.state = 1008
                    self.match(nimParser.T__8)
                    pass
                elif token in [nimParser.T__9]:
                    self.state = 1009
                    self.match(nimParser.T__9)
                    pass
                elif token in [nimParser.GREATER_THAN]:
                    self.state = 1010
                    self.match(nimParser.GREATER_THAN)
                    self.state = 1012
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==nimParser.EQUALS_OPERATOR:
                        self.state = 1011
                        self.match(nimParser.EQUALS_OPERATOR)


                    pass
                elif token in [nimParser.EQUALS_EQUALS]:
                    self.state = 1014
                    self.match(nimParser.EQUALS_EQUALS)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1017
                self.rightHandSideStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1019
                self.match(nimParser.T__5)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1020
                self.match(nimParser.T__10)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1021
                self.match(nimParser.IDENTIFIER)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Character_literalsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_LIT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.CHAR_LIT)
            else:
                return self.getToken(nimParser.CHAR_LIT, i)

        def getRuleIndex(self):
            return nimParser.RULE_character_literals

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharacter_literals" ):
                listener.enterCharacter_literals(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharacter_literals" ):
                listener.exitCharacter_literals(self)




    def character_literals(self):

        localctx = nimParser.Character_literalsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_character_literals)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1025 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1024
                self.match(nimParser.CHAR_LIT)
                self.state = 1027 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==nimParser.CHAR_LIT):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class String_literalsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STR_LIT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.STR_LIT)
            else:
                return self.getToken(nimParser.STR_LIT, i)

        def getRuleIndex(self):
            return nimParser.RULE_string_literals

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_literals" ):
                listener.enterString_literals(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_literals" ):
                listener.exitString_literals(self)




    def string_literals(self):

        localctx = nimParser.String_literalsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_string_literals)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1030 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1029
                self.match(nimParser.STR_LIT)
                self.state = 1032 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==nimParser.STR_LIT):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RightHandSideStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STR_LIT(self):
            return self.getToken(nimParser.STR_LIT, 0)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.IDENTIFIER)
            else:
                return self.getToken(nimParser.IDENTIFIER, i)

        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.LiteralContext)
            else:
                return self.getTypedRuleContext(nimParser.LiteralContext,i)


        def ADD_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.ADD_OPERATOR)
            else:
                return self.getToken(nimParser.ADD_OPERATOR, i)

        def AND_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.AND_OPERATOR)
            else:
                return self.getToken(nimParser.AND_OPERATOR, i)

        def MINUS_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.MINUS_OPERATOR)
            else:
                return self.getToken(nimParser.MINUS_OPERATOR, i)

        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.DIGIT)
            else:
                return self.getToken(nimParser.DIGIT, i)

        def OPEN_BRACK(self):
            return self.getToken(nimParser.OPEN_BRACK, 0)

        def CLOSE_BRACK(self):
            return self.getToken(nimParser.CLOSE_BRACK, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMA)
            else:
                return self.getToken(nimParser.COMMA, i)

        def MUL_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.MUL_OPERATOR)
            else:
                return self.getToken(nimParser.MUL_OPERATOR, i)

        def DIV(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.DIV)
            else:
                return self.getToken(nimParser.DIV, i)

        def methodInvoke(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.MethodInvokeContext)
            else:
                return self.getTypedRuleContext(nimParser.MethodInvokeContext,i)


        def getRuleIndex(self):
            return nimParser.RULE_rightHandSideStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRightHandSideStmt" ):
                listener.enterRightHandSideStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRightHandSideStmt" ):
                listener.exitRightHandSideStmt(self)




    def rightHandSideStmt(self):

        localctx = nimParser.RightHandSideStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_rightHandSideStmt)
        self._la = 0 # Token type
        try:
            self.state = 1140
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,179,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1034
                self.match(nimParser.T__5)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1035
                self.match(nimParser.T__10)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1036
                self.match(nimParser.STR_LIT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1044
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.DIGIT]:
                    self.state = 1038 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 1037
                        self.match(nimParser.DIGIT)
                        self.state = 1040 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==nimParser.DIGIT):
                            break

                    pass
                elif token in [nimParser.IDENTIFIER]:
                    self.state = 1042
                    self.match(nimParser.IDENTIFIER)
                    pass
                elif token in [nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                    self.state = 1043
                    self.literal()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1058
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.ADD_OPERATOR) | (1 << nimParser.MINUS_OPERATOR) | (1 << nimParser.AND_OPERATOR))) != 0):
                    self.state = 1046
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.ADD_OPERATOR) | (1 << nimParser.MINUS_OPERATOR) | (1 << nimParser.AND_OPERATOR))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1054
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [nimParser.DIGIT]:
                        self.state = 1048 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 1047
                            self.match(nimParser.DIGIT)
                            self.state = 1050 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==nimParser.DIGIT):
                                break

                        pass
                    elif token in [nimParser.IDENTIFIER]:
                        self.state = 1052
                        self.match(nimParser.IDENTIFIER)
                        pass
                    elif token in [nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                        self.state = 1053
                        self.literal()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1060
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1061
                self.match(nimParser.IDENTIFIER)
                self.state = 1062
                self.match(nimParser.OPEN_BRACK)
                self.state = 1072
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.IDENTIFIER]:
                    self.state = 1063
                    self.match(nimParser.IDENTIFIER)
                    pass
                elif token in [nimParser.DIGIT, nimParser.MINUS_OPERATOR]:
                    self.state = 1065
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==nimParser.MINUS_OPERATOR:
                        self.state = 1064
                        self.match(nimParser.MINUS_OPERATOR)


                    self.state = 1068 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 1067
                        self.match(nimParser.DIGIT)
                        self.state = 1070 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==nimParser.DIGIT):
                            break

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1092
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.DIV) | (1 << nimParser.ADD_OPERATOR) | (1 << nimParser.MUL_OPERATOR) | (1 << nimParser.MINUS_OPERATOR) | (1 << nimParser.COMMA))) != 0):
                    self.state = 1074
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.DIV) | (1 << nimParser.ADD_OPERATOR) | (1 << nimParser.MUL_OPERATOR) | (1 << nimParser.MINUS_OPERATOR) | (1 << nimParser.COMMA))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1088
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
                    if la_ == 1:
                        self.state = 1076
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==nimParser.MINUS_OPERATOR:
                            self.state = 1075
                            self.match(nimParser.MINUS_OPERATOR)


                        self.state = 1078
                        self.literal()
                        pass

                    elif la_ == 2:
                        self.state = 1080
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==nimParser.MINUS_OPERATOR:
                            self.state = 1079
                            self.match(nimParser.MINUS_OPERATOR)


                        self.state = 1083 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 1082
                            self.match(nimParser.DIGIT)
                            self.state = 1085 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==nimParser.DIGIT):
                                break

                        pass

                    elif la_ == 3:
                        self.state = 1087
                        self.match(nimParser.IDENTIFIER)
                        pass


                    self.state = 1094
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1095
                self.match(nimParser.CLOSE_BRACK)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1096
                self.methodInvoke()
                self.state = 1101
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.ADD_OPERATOR) | (1 << nimParser.MUL_OPERATOR) | (1 << nimParser.MINUS_OPERATOR))) != 0):
                    self.state = 1097
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.ADD_OPERATOR) | (1 << nimParser.MUL_OPERATOR) | (1 << nimParser.MINUS_OPERATOR))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1098
                    self.methodInvoke()
                    self.state = 1103
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1104
                self.literal()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1105
                self.match(nimParser.OPEN_BRACK)
                self.state = 1136
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nimParser.DIGIT or _la==nimParser.MINUS_OPERATOR or ((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & ((1 << (nimParser.NIL - 87)) | (1 << (nimParser.TRIPLESTR_LIT - 87)) | (1 << (nimParser.CHAR_LIT - 87)) | (1 << (nimParser.STR_LIT - 87)) | (1 << (nimParser.RSTR_LIT - 87)) | (1 << (nimParser.INT_LIT - 87)) | (1 << (nimParser.INT8_LIT - 87)) | (1 << (nimParser.INT16_LIT - 87)) | (1 << (nimParser.INT32_LIT - 87)) | (1 << (nimParser.INT64_LIT - 87)) | (1 << (nimParser.UINT_LIT - 87)) | (1 << (nimParser.UINT8_LIT - 87)) | (1 << (nimParser.UINT16_LIT - 87)) | (1 << (nimParser.UINT32_LIT - 87)) | (1 << (nimParser.UINT64_LIT - 87)) | (1 << (nimParser.FLOAT_LIT - 87)) | (1 << (nimParser.FLOAT32_LIT - 87)) | (1 << (nimParser.FLOAT64_LIT - 87)))) != 0):
                    self.state = 1115
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [nimParser.MINUS_OPERATOR, nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                        self.state = 1107
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==nimParser.MINUS_OPERATOR:
                            self.state = 1106
                            self.match(nimParser.MINUS_OPERATOR)


                        self.state = 1109
                        self.literal()
                        pass
                    elif token in [nimParser.DIGIT]:
                        self.state = 1111 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 1110
                                self.match(nimParser.DIGIT)

                            else:
                                raise NoViableAltException(self)
                            self.state = 1113 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,172,self._ctx)

                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1131
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==nimParser.COMMA:
                        self.state = 1117
                        self.match(nimParser.COMMA)
                        self.state = 1127
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [nimParser.MINUS_OPERATOR, nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                            self.state = 1119
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==nimParser.MINUS_OPERATOR:
                                self.state = 1118
                                self.match(nimParser.MINUS_OPERATOR)


                            self.state = 1121
                            self.literal()
                            pass
                        elif token in [nimParser.DIGIT]:
                            self.state = 1123 
                            self._errHandler.sync(self)
                            _alt = 1
                            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                if _alt == 1:
                                    self.state = 1122
                                    self.match(nimParser.DIGIT)

                                else:
                                    raise NoViableAltException(self)
                                self.state = 1125 
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,175,self._ctx)

                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 1133
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1138
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1139
                self.match(nimParser.CLOSE_BRACK)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return nimParser.RULE_dataType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataType" ):
                listener.enterDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataType" ):
                listener.exitDataType(self)




    def dataType(self):

        localctx = nimParser.DataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_dataType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1142
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.T__11) | (1 << nimParser.T__12) | (1 << nimParser.T__13))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleCaseStmt(self):
            return self.getTypedRuleContext(nimParser.SimpleCaseStmtContext,0)


        def simpleElseStmt(self):
            return self.getTypedRuleContext(nimParser.SimpleElseStmtContext,0)


        def simpleOfStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.SimpleOfStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.SimpleOfStmtContext,i)


        def simpleElifOfStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.SimpleElifOfStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.SimpleElifOfStmtContext,i)


        def getRuleIndex(self):
            return nimParser.RULE_caseStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseStmt" ):
                listener.enterCaseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseStmt" ):
                listener.exitCaseStmt(self)




    def caseStmt(self):

        localctx = nimParser.CaseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_caseStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1144
            self.simpleCaseStmt()
            self.state = 1148
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,180,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1145
                    self.simpleOfStmt() 
                self.state = 1150
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,180,self._ctx)

            self.state = 1154
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==nimParser.ELIF:
                self.state = 1151
                self.simpleElifOfStmt()
                self.state = 1156
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1157
            self.simpleElseStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleOfStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OF(self):
            return self.getToken(nimParser.OF, 0)

        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.IDENTIFIER)
            else:
                return self.getToken(nimParser.IDENTIFIER, i)

        def STR_LIT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.STR_LIT)
            else:
                return self.getToken(nimParser.STR_LIT, i)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMA)
            else:
                return self.getToken(nimParser.COMMA, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def RETURN(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.RETURN)
            else:
                return self.getToken(nimParser.RETURN, i)

        def rightHandSideStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.RightHandSideStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,i)


        def getRuleIndex(self):
            return nimParser.RULE_simpleOfStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleOfStmt" ):
                listener.enterSimpleOfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleOfStmt" ):
                listener.exitSimpleOfStmt(self)




    def simpleOfStmt(self):

        localctx = nimParser.SimpleOfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_simpleOfStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1160
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.INDENT:
                self.state = 1159
                self.match(nimParser.INDENT)


            self.state = 1162
            self.match(nimParser.OF)
            self.state = 1163
            _la = self._input.LA(1)
            if not(_la==nimParser.STR_LIT or _la==nimParser.IDENTIFIER):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1168
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==nimParser.COMMA:
                self.state = 1164
                self.match(nimParser.COMMA)
                self.state = 1165
                _la = self._input.LA(1)
                if not(_la==nimParser.STR_LIT or _la==nimParser.IDENTIFIER):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1170
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1171
            self.match(nimParser.COLON)
            self.state = 1184 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1174
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,184,self._ctx)
                if la_ == 1:
                    self.state = 1172
                    self.match(nimParser.T__0)
                    self.state = 1173
                    self.match(nimParser.INDENT)


                self.state = 1179
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.T__0, nimParser.T__6, nimParser.VARIABLE, nimParser.ECHO, nimParser.BLOCK, nimParser.CASE, nimParser.CONST, nimParser.FOR, nimParser.IF, nimParser.LET, nimParser.PROC, nimParser.TYPE, nimParser.WHEN, nimParser.WHILE, nimParser.OPEN_PAREN, nimParser.IDENTIFIER, nimParser.NEW_IDENTIFIER]:
                    self.state = 1176
                    self.stmt()
                    pass
                elif token in [nimParser.RETURN]:
                    self.state = 1177
                    self.match(nimParser.RETURN)
                    self.state = 1178
                    self.rightHandSideStmt()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1182
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
                if la_ == 1:
                    self.state = 1181
                    self.match(nimParser.T__0)


                self.state = 1186 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.T__0) | (1 << nimParser.T__6) | (1 << nimParser.VARIABLE) | (1 << nimParser.ECHO) | (1 << nimParser.BLOCK) | (1 << nimParser.CASE) | (1 << nimParser.CONST))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (nimParser.FOR - 74)) | (1 << (nimParser.IF - 74)) | (1 << (nimParser.LET - 74)) | (1 << (nimParser.PROC - 74)) | (1 << (nimParser.RETURN - 74)) | (1 << (nimParser.TYPE - 74)) | (1 << (nimParser.WHEN - 74)) | (1 << (nimParser.WHILE - 74)) | (1 << (nimParser.OPEN_PAREN - 74)) | (1 << (nimParser.IDENTIFIER - 74)))) != 0) or _la==nimParser.NEW_IDENTIFIER):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleElifOfStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELIF(self):
            return self.getToken(nimParser.ELIF, 0)

        def rightHandSideStmt(self):
            return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,0)


        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def COMMENT(self):
            return self.getToken(nimParser.COMMENT, 0)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def getRuleIndex(self):
            return nimParser.RULE_simpleElifOfStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleElifOfStmt" ):
                listener.enterSimpleElifOfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleElifOfStmt" ):
                listener.exitSimpleElifOfStmt(self)




    def simpleElifOfStmt(self):

        localctx = nimParser.SimpleElifOfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_simpleElifOfStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1188
            self.match(nimParser.ELIF)
            self.state = 1189
            self.rightHandSideStmt()
            self.state = 1190
            self.match(nimParser.COLON)
            self.state = 1192
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.COMMENT:
                self.state = 1191
                self.match(nimParser.COMMENT)


            self.state = 1199 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1194
                self.match(nimParser.T__0)
                self.state = 1196
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.INDENT:
                    self.state = 1195
                    self.match(nimParser.INDENT)


                self.state = 1198
                self.stmt()
                self.state = 1201 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==nimParser.T__0):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleCaseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(nimParser.CASE, 0)

        def IDENTIFIER(self):
            return self.getToken(nimParser.IDENTIFIER, 0)

        def COMMENT(self):
            return self.getToken(nimParser.COMMENT, 0)

        def getRuleIndex(self):
            return nimParser.RULE_simpleCaseStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleCaseStmt" ):
                listener.enterSimpleCaseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleCaseStmt" ):
                listener.exitSimpleCaseStmt(self)




    def simpleCaseStmt(self):

        localctx = nimParser.SimpleCaseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_simpleCaseStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1203
            self.match(nimParser.CASE)
            self.state = 1204
            self.match(nimParser.IDENTIFIER)
            self.state = 1206
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.COMMENT:
                self.state = 1205
                self.match(nimParser.COMMENT)


            self.state = 1209
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.T__0:
                self.state = 1208
                self.match(nimParser.T__0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmptyStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return nimParser.RULE_emptyStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptyStmt" ):
                listener.enterEmptyStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptyStmt" ):
                listener.exitEmptyStmt(self)




    def emptyStmt(self):

        localctx = nimParser.EmptyStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_emptyStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1211
            self.match(nimParser.T__0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommentStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(nimParser.COMMENT, 0)

        def INDENT(self):
            return self.getToken(nimParser.INDENT, 0)

        def getRuleIndex(self):
            return nimParser.RULE_commentStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommentStmt" ):
                listener.enterCommentStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommentStmt" ):
                listener.exitCommentStmt(self)




    def commentStmt(self):

        localctx = nimParser.CommentStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_commentStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1214
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.INDENT:
                self.state = 1213
                self.match(nimParser.INDENT)


            self.state = 1216
            self.match(nimParser.COMMENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUALS_OPERATOR(self):
            return self.getToken(nimParser.EQUALS_OPERATOR, 0)

        def ADD_OPERATOR(self):
            return self.getToken(nimParser.ADD_OPERATOR, 0)

        def MUL_OPERATOR(self):
            return self.getToken(nimParser.MUL_OPERATOR, 0)

        def MINUS_OPERATOR(self):
            return self.getToken(nimParser.MINUS_OPERATOR, 0)

        def DIV_OPERATOR(self):
            return self.getToken(nimParser.DIV_OPERATOR, 0)

        def BITWISE_NOT_OPERATOR(self):
            return self.getToken(nimParser.BITWISE_NOT_OPERATOR, 0)

        def AND_OPERATOR(self):
            return self.getToken(nimParser.AND_OPERATOR, 0)

        def OR_OPERATOR(self):
            return self.getToken(nimParser.OR_OPERATOR, 0)

        def LESS_THAN(self):
            return self.getToken(nimParser.LESS_THAN, 0)

        def GREATER_THAN(self):
            return self.getToken(nimParser.GREATER_THAN, 0)

        def NOT_OPERATOR(self):
            return self.getToken(nimParser.NOT_OPERATOR, 0)

        def XOR_OPERATOR(self):
            return self.getToken(nimParser.XOR_OPERATOR, 0)

        def getRuleIndex(self):
            return nimParser.RULE_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator" ):
                listener.enterOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator" ):
                listener.exitOperator(self)




    def operator(self):

        localctx = nimParser.OperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1218
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.EQUALS_OPERATOR) | (1 << nimParser.ADD_OPERATOR) | (1 << nimParser.MUL_OPERATOR) | (1 << nimParser.MINUS_OPERATOR) | (1 << nimParser.DIV_OPERATOR) | (1 << nimParser.BITWISE_NOT_OPERATOR) | (1 << nimParser.AND_OPERATOR) | (1 << nimParser.OR_OPERATOR) | (1 << nimParser.LESS_THAN) | (1 << nimParser.GREATER_THAN) | (1 << nimParser.NOT_OPERATOR) | (1 << nimParser.XOR_OPERATOR))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_LIT(self):
            return self.getToken(nimParser.INT_LIT, 0)

        def INT8_LIT(self):
            return self.getToken(nimParser.INT8_LIT, 0)

        def INT16_LIT(self):
            return self.getToken(nimParser.INT16_LIT, 0)

        def INT32_LIT(self):
            return self.getToken(nimParser.INT32_LIT, 0)

        def INT64_LIT(self):
            return self.getToken(nimParser.INT64_LIT, 0)

        def UINT_LIT(self):
            return self.getToken(nimParser.UINT_LIT, 0)

        def UINT8_LIT(self):
            return self.getToken(nimParser.UINT8_LIT, 0)

        def UINT16_LIT(self):
            return self.getToken(nimParser.UINT16_LIT, 0)

        def UINT32_LIT(self):
            return self.getToken(nimParser.UINT32_LIT, 0)

        def UINT64_LIT(self):
            return self.getToken(nimParser.UINT64_LIT, 0)

        def FLOAT_LIT(self):
            return self.getToken(nimParser.FLOAT_LIT, 0)

        def FLOAT32_LIT(self):
            return self.getToken(nimParser.FLOAT32_LIT, 0)

        def FLOAT64_LIT(self):
            return self.getToken(nimParser.FLOAT64_LIT, 0)

        def STR_LIT(self):
            return self.getToken(nimParser.STR_LIT, 0)

        def RSTR_LIT(self):
            return self.getToken(nimParser.RSTR_LIT, 0)

        def TRIPLESTR_LIT(self):
            return self.getToken(nimParser.TRIPLESTR_LIT, 0)

        def CHAR_LIT(self):
            return self.getToken(nimParser.CHAR_LIT, 0)

        def NIL(self):
            return self.getToken(nimParser.NIL, 0)

        def getRuleIndex(self):
            return nimParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = nimParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1220
            _la = self._input.LA(1)
            if not(((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & ((1 << (nimParser.NIL - 87)) | (1 << (nimParser.TRIPLESTR_LIT - 87)) | (1 << (nimParser.CHAR_LIT - 87)) | (1 << (nimParser.STR_LIT - 87)) | (1 << (nimParser.RSTR_LIT - 87)) | (1 << (nimParser.INT_LIT - 87)) | (1 << (nimParser.INT8_LIT - 87)) | (1 << (nimParser.INT16_LIT - 87)) | (1 << (nimParser.INT32_LIT - 87)) | (1 << (nimParser.INT64_LIT - 87)) | (1 << (nimParser.UINT_LIT - 87)) | (1 << (nimParser.UINT8_LIT - 87)) | (1 << (nimParser.UINT16_LIT - 87)) | (1 << (nimParser.UINT32_LIT - 87)) | (1 << (nimParser.UINT64_LIT - 87)) | (1 << (nimParser.FLOAT_LIT - 87)) | (1 << (nimParser.FLOAT32_LIT - 87)) | (1 << (nimParser.FLOAT64_LIT - 87)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx






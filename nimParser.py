# Generated from nim.g4 by ANTLR 4.7.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0098")
        buf.write("\u0470\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\3\2\3\2\7\2Q\n\2\f\2\16\2T\13\2\7\2V\n\2\f\2")
        buf.write("\16\2Y\13\2\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\3\3\5\3l\n\3\3\4\3\4\3\4\5\4q\n")
        buf.write("\4\3\4\3\4\3\4\7\4v\n\4\f\4\16\4y\13\4\3\4\3\4\3\4\5\4")
        buf.write("~\n\4\3\4\7\4\u0081\n\4\f\4\16\4\u0084\13\4\3\4\3\4\5")
        buf.write("\4\u0088\n\4\3\4\3\4\7\4\u008c\n\4\f\4\16\4\u008f\13\4")
        buf.write("\3\4\7\4\u0092\n\4\f\4\16\4\u0095\13\4\3\4\3\4\3\4\3\4")
        buf.write("\6\4\u009b\n\4\r\4\16\4\u009c\3\5\3\5\3\5\5\5\u00a2\n")
        buf.write("\5\3\5\3\5\5\5\u00a6\n\5\3\5\3\5\5\5\u00aa\n\5\6\5\u00ac")
        buf.write("\n\5\r\5\16\5\u00ad\3\6\3\6\3\6\5\6\u00b3\n\6\3\6\3\6")
        buf.write("\5\6\u00b7\n\6\3\6\3\6\5\6\u00bb\n\6\6\6\u00bd\n\6\r\6")
        buf.write("\16\6\u00be\3\7\3\7\3\7\3\7\5\7\u00c5\n\7\3\7\7\7\u00c8")
        buf.write("\n\7\f\7\16\7\u00cb\13\7\3\7\5\7\u00ce\n\7\3\b\3\b\3\b")
        buf.write("\3\b\3\b\7\b\u00d5\n\b\f\b\16\b\u00d8\13\b\3\b\3\b\3\b")
        buf.write("\3\b\3\b\3\b\7\b\u00e0\n\b\f\b\16\b\u00e3\13\b\5\b\u00e5")
        buf.write("\n\b\3\t\3\t\7\t\u00e9\n\t\f\t\16\t\u00ec\13\t\3\t\5\t")
        buf.write("\u00ef\n\t\3\t\3\t\5\t\u00f3\n\t\3\n\3\n\7\n\u00f7\n\n")
        buf.write("\f\n\16\n\u00fa\13\n\3\n\5\n\u00fd\n\n\3\13\3\13\5\13")
        buf.write("\u0101\n\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3")
        buf.write("\13\3\13\3\13\3\13\5\13\u010f\n\13\3\13\7\13\u0112\n\13")
        buf.write("\f\13\16\13\u0115\13\13\6\13\u0117\n\13\r\13\16\13\u0118")
        buf.write("\3\13\3\13\5\13\u011d\n\13\3\13\3\13\3\13\3\13\3\13\3")
        buf.write("\13\5\13\u0125\n\13\3\13\3\13\3\13\3\13\3\13\3\13\5\13")
        buf.write("\u012d\n\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3")
        buf.write("\13\7\13\u0138\n\13\f\13\16\13\u013b\13\13\6\13\u013d")
        buf.write("\n\13\r\13\16\13\u013e\3\13\3\13\5\13\u0143\n\13\3\13")
        buf.write("\3\13\3\13\3\13\3\13\3\13\3\13\5\13\u014c\n\13\3\f\3\f")
        buf.write("\5\f\u0150\n\f\3\f\3\f\3\f\3\f\5\f\u0156\n\f\3\r\3\r\5")
        buf.write("\r\u015a\n\r\3\r\3\r\3\r\3\r\5\r\u0160\n\r\3\16\5\16\u0163")
        buf.write("\n\16\3\16\3\16\3\16\3\16\5\16\u0169\n\16\3\17\3\17\3")
        buf.write("\17\3\17\3\17\3\17\3\17\3\17\3\17\7\17\u0174\n\17\f\17")
        buf.write("\16\17\u0177\13\17\6\17\u0179\n\17\r\17\16\17\u017a\3")
        buf.write("\20\5\20\u017e\n\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20")
        buf.write("\6\20\u0187\n\20\r\20\16\20\u0188\3\20\7\20\u018c\n\20")
        buf.write("\f\20\16\20\u018f\13\20\3\20\5\20\u0192\n\20\3\21\3\21")
        buf.write("\3\21\3\21\3\21\3\21\3\21\3\21\5\21\u019c\n\21\3\21\3")
        buf.write("\21\3\21\6\21\u01a1\n\21\r\21\16\21\u01a2\3\21\7\21\u01a6")
        buf.write("\n\21\f\21\16\21\u01a9\13\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\5\21\u01b0\n\21\3\21\3\21\5\21\u01b4\n\21\3\21\3\21\3")
        buf.write("\21\6\21\u01b9\n\21\r\21\16\21\u01ba\3\21\7\21\u01be\n")
        buf.write("\21\f\21\16\21\u01c1\13\21\3\21\3\21\3\21\3\21\6\21\u01c7")
        buf.write("\n\21\r\21\16\21\u01c8\3\21\3\21\3\21\3\21\3\21\5\21\u01d0")
        buf.write("\n\21\3\21\3\21\3\21\6\21\u01d5\n\21\r\21\16\21\u01d6")
        buf.write("\3\21\7\21\u01da\n\21\f\21\16\21\u01dd\13\21\3\21\3\21")
        buf.write("\3\21\3\21\7\21\u01e3\n\21\f\21\16\21\u01e6\13\21\3\21")
        buf.write("\3\21\3\21\3\21\3\21\6\21\u01ed\n\21\r\21\16\21\u01ee")
        buf.write("\5\21\u01f1\n\21\3\21\3\21\3\21\6\21\u01f6\n\21\r\21\16")
        buf.write("\21\u01f7\5\21\u01fa\n\21\7\21\u01fc\n\21\f\21\16\21\u01ff")
        buf.write("\13\21\7\21\u0201\n\21\f\21\16\21\u0204\13\21\3\21\3\21")
        buf.write("\3\21\5\21\u0209\n\21\3\21\3\21\3\21\6\21\u020e\n\21\r")
        buf.write("\21\16\21\u020f\3\21\7\21\u0213\n\21\f\21\16\21\u0216")
        buf.write("\13\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\5")
        buf.write("\21\u0221\n\21\3\21\3\21\3\21\6\21\u0226\n\21\r\21\16")
        buf.write("\21\u0227\3\21\7\21\u022b\n\21\f\21\16\21\u022e\13\21")
        buf.write("\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\5\21\u0239")
        buf.write("\n\21\5\21\u023b\n\21\3\22\3\22\3\22\5\22\u0240\n\22\3")
        buf.write("\22\3\22\3\22\3\22\3\22\5\22\u0247\n\22\6\22\u0249\n\22")
        buf.write("\r\22\16\22\u024a\3\23\3\23\7\23\u024f\n\23\f\23\16\23")
        buf.write("\u0252\13\23\3\23\3\23\3\24\3\24\3\24\3\24\3\24\5\24\u025b")
        buf.write("\n\24\3\24\3\24\5\24\u025f\n\24\6\24\u0261\n\24\r\24\16")
        buf.write("\24\u0262\3\25\3\25\3\25\3\25\3\25\5\25\u026a\n\25\3\25")
        buf.write("\3\25\3\25\3\25\3\25\3\25\3\25\5\25\u0273\n\25\3\25\3")
        buf.write("\25\3\25\3\25\6\25\u0279\n\25\r\25\16\25\u027a\3\25\3")
        buf.write("\25\7\25\u027f\n\25\f\25\16\25\u0282\13\25\3\25\3\25\3")
        buf.write("\25\7\25\u0287\n\25\f\25\16\25\u028a\13\25\3\25\3\25\7")
        buf.write("\25\u028e\n\25\f\25\16\25\u0291\13\25\3\25\3\25\3\25\7")
        buf.write("\25\u0296\n\25\f\25\16\25\u0299\13\25\5\25\u029b\n\25")
        buf.write("\3\25\3\25\5\25\u029f\n\25\3\25\5\25\u02a2\n\25\3\25\3")
        buf.write("\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25")
        buf.write("\3\25\3\25\5\25\u02b2\n\25\3\25\3\25\3\25\3\25\6\25\u02b8")
        buf.write("\n\25\r\25\16\25\u02b9\3\25\3\25\7\25\u02be\n\25\f\25")
        buf.write("\16\25\u02c1\13\25\3\25\3\25\3\25\7\25\u02c6\n\25\f\25")
        buf.write("\16\25\u02c9\13\25\3\25\3\25\7\25\u02cd\n\25\f\25\16\25")
        buf.write("\u02d0\13\25\3\25\3\25\3\25\7\25\u02d5\n\25\f\25\16\25")
        buf.write("\u02d8\13\25\5\25\u02da\n\25\3\25\3\25\3\25\3\25\5\25")
        buf.write("\u02e0\n\25\3\25\3\25\3\25\3\25\3\25\5\25\u02e7\n\25\3")
        buf.write("\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25")
        buf.write("\3\25\5\25\u02f5\n\25\3\25\6\25\u02f8\n\25\r\25\16\25")
        buf.write("\u02f9\3\25\3\25\5\25\u02fe\n\25\7\25\u0300\n\25\f\25")
        buf.write("\16\25\u0303\13\25\3\25\3\25\3\25\5\25\u0308\n\25\3\25")
        buf.write("\3\25\3\25\3\25\6\25\u030e\n\25\r\25\16\25\u030f\3\25")
        buf.write("\3\25\7\25\u0314\n\25\f\25\16\25\u0317\13\25\3\25\3\25")
        buf.write("\3\25\7\25\u031c\n\25\f\25\16\25\u031f\13\25\3\25\3\25")
        buf.write("\7\25\u0323\n\25\f\25\16\25\u0326\13\25\3\25\3\25\3\25")
        buf.write("\7\25\u032b\n\25\f\25\16\25\u032e\13\25\5\25\u0330\n\25")
        buf.write("\3\25\3\25\5\25\u0334\n\25\3\25\5\25\u0337\n\25\5\25\u0339")
        buf.write("\n\25\3\26\3\26\3\26\3\26\3\26\3\26\6\26\u0341\n\26\r")
        buf.write("\26\16\26\u0342\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27")
        buf.write("\3\27\6\27\u034e\n\27\r\27\16\27\u034f\5\27\u0352\n\27")
        buf.write("\3\27\3\27\3\27\3\27\3\27\6\27\u0359\n\27\r\27\16\27\u035a")
        buf.write("\3\30\3\30\3\30\3\30\6\30\u0361\n\30\r\30\16\30\u0362")
        buf.write("\3\30\5\30\u0366\n\30\3\30\3\30\3\30\6\30\u036b\n\30\r")
        buf.write("\30\16\30\u036c\3\30\5\30\u0370\n\30\7\30\u0372\n\30\f")
        buf.write("\30\16\30\u0375\13\30\3\30\3\30\3\30\3\30\6\30\u037b\n")
        buf.write("\30\r\30\16\30\u037c\3\30\5\30\u0380\n\30\3\30\3\30\3")
        buf.write("\30\6\30\u0385\n\30\r\30\16\30\u0386\3\30\5\30\u038a\n")
        buf.write("\30\7\30\u038c\n\30\f\30\16\30\u038f\13\30\3\30\3\30\5")
        buf.write("\30\u0393\n\30\3\31\3\31\3\31\3\31\3\31\7\31\u039a\n\31")
        buf.write("\f\31\16\31\u039d\13\31\3\31\3\31\3\32\3\32\3\32\3\32")
        buf.write("\3\32\3\33\3\33\3\33\5\33\u03a9\n\33\3\33\3\33\5\33\u03ad")
        buf.write("\n\33\3\33\5\33\u03b0\n\33\3\33\3\33\3\33\3\33\3\33\5")
        buf.write("\33\u03b7\n\33\3\34\6\34\u03ba\n\34\r\34\16\34\u03bb\3")
        buf.write("\35\6\35\u03bf\n\35\r\35\16\35\u03c0\3\36\3\36\3\36\3")
        buf.write("\36\6\36\u03c7\n\36\r\36\16\36\u03c8\3\36\3\36\5\36\u03cd")
        buf.write("\n\36\3\36\3\36\6\36\u03d1\n\36\r\36\16\36\u03d2\3\36")
        buf.write("\3\36\5\36\u03d7\n\36\7\36\u03d9\n\36\f\36\16\36\u03dc")
        buf.write("\13\36\3\36\3\36\3\36\3\36\6\36\u03e2\n\36\r\36\16\36")
        buf.write("\u03e3\5\36\u03e6\n\36\3\36\3\36\3\36\6\36\u03eb\n\36")
        buf.write("\r\36\16\36\u03ec\3\36\5\36\u03f0\n\36\7\36\u03f2\n\36")
        buf.write("\f\36\16\36\u03f5\13\36\3\36\3\36\3\36\3\36\7\36\u03fb")
        buf.write("\n\36\f\36\16\36\u03fe\13\36\3\36\3\36\3\36\3\36\6\36")
        buf.write("\u0404\n\36\r\36\16\36\u0405\5\36\u0408\n\36\3\36\3\36")
        buf.write("\3\36\6\36\u040d\n\36\r\36\16\36\u040e\5\36\u0411\n\36")
        buf.write("\7\36\u0413\n\36\f\36\16\36\u0416\13\36\7\36\u0418\n\36")
        buf.write("\f\36\16\36\u041b\13\36\3\36\5\36\u041e\n\36\3\37\3\37")
        buf.write("\3 \3 \7 \u0424\n \f \16 \u0427\13 \3 \7 \u042a\n \f ")
        buf.write("\16 \u042d\13 \3 \3 \3!\5!\u0432\n!\3!\3!\3!\3!\7!\u0438")
        buf.write("\n!\f!\16!\u043b\13!\3!\3!\3!\5!\u0440\n!\3!\3!\3!\5!")
        buf.write("\u0445\n!\3!\5!\u0448\n!\6!\u044a\n!\r!\16!\u044b\3\"")
        buf.write("\3\"\3\"\3\"\5\"\u0452\n\"\3\"\3\"\5\"\u0456\n\"\3\"\6")
        buf.write("\"\u0459\n\"\r\"\16\"\u045a\3#\3#\3#\5#\u0460\n#\3#\5")
        buf.write("#\u0463\n#\3$\3$\3%\5%\u0468\n%\3%\3%\3&\3&\3\'\3\'\3")
        buf.write("\'\2\2(\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*")
        buf.write(",.\60\62\64\668:<>@BDFHJL\2\f\3\2\3\4\3\2\3\5\5\2$$&&")
        buf.write("\61\61\5\2$$&&))\5\2\30\30$&\61\61\3\2$&\3\2\f\16\4\2")
        buf.write("rr||\3\2#.\7\2WWps\177\177\u0084\u008e\u0090\u0090\2\u0529")
        buf.write("\2W\3\2\2\2\4k\3\2\2\2\6m\3\2\2\2\b\u009e\3\2\2\2\n\u00af")
        buf.write("\3\2\2\2\f\u00c0\3\2\2\2\16\u00e4\3\2\2\2\20\u00e6\3\2")
        buf.write("\2\2\22\u00f4\3\2\2\2\24\u014b\3\2\2\2\26\u014d\3\2\2")
        buf.write("\2\30\u0157\3\2\2\2\32\u0162\3\2\2\2\34\u016a\3\2\2\2")
        buf.write("\36\u017d\3\2\2\2 \u023a\3\2\2\2\"\u023c\3\2\2\2$\u024c")
        buf.write("\3\2\2\2&\u0255\3\2\2\2(\u0338\3\2\2\2*\u033a\3\2\2\2")
        buf.write(",\u0344\3\2\2\2.\u0392\3\2\2\2\60\u0394\3\2\2\2\62\u03a0")
        buf.write("\3\2\2\2\64\u03b6\3\2\2\2\66\u03b9\3\2\2\28\u03be\3\2")
        buf.write("\2\2:\u041d\3\2\2\2<\u041f\3\2\2\2>\u0421\3\2\2\2@\u0431")
        buf.write("\3\2\2\2B\u044d\3\2\2\2D\u045c\3\2\2\2F\u0464\3\2\2\2")
        buf.write("H\u0467\3\2\2\2J\u046b\3\2\2\2L\u046d\3\2\2\2NR\5\4\3")
        buf.write("\2OQ\t\2\2\2PO\3\2\2\2QT\3\2\2\2RP\3\2\2\2RS\3\2\2\2S")
        buf.write("V\3\2\2\2TR\3\2\2\2UN\3\2\2\2VY\3\2\2\2WU\3\2\2\2WX\3")
        buf.write("\2\2\2X\3\3\2\2\2YW\3\2\2\2Zl\5\6\4\2[l\5\f\7\2\\l\5\16")
        buf.write("\b\2]l\5\b\5\2^l\5\n\6\2_l\5\20\t\2`l\5 \21\2al\5\"\22")
        buf.write("\2bl\5$\23\2cl\5(\25\2dl\5*\26\2el\5,\27\2fl\5.\30\2g")
        buf.write("l\5\60\31\2hl\5F$\2il\5\62\32\2jl\5> \2kZ\3\2\2\2k[\3")
        buf.write("\2\2\2k\\\3\2\2\2k]\3\2\2\2k^\3\2\2\2k_\3\2\2\2k`\3\2")
        buf.write("\2\2ka\3\2\2\2kb\3\2\2\2kc\3\2\2\2kd\3\2\2\2ke\3\2\2\2")
        buf.write("kf\3\2\2\2kg\3\2\2\2kh\3\2\2\2ki\3\2\2\2kj\3\2\2\2l\5")
        buf.write("\3\2\2\2m\u009a\7\25\2\2no\7\3\2\2oq\7\20\2\2pn\3\2\2")
        buf.write("\2pq\3\2\2\2qr\3\2\2\2rw\7|\2\2st\7\61\2\2tv\7|\2\2us")
        buf.write("\3\2\2\2vy\3\2\2\2wu\3\2\2\2wx\3\2\2\2xz\3\2\2\2yw\3\2")
        buf.write("\2\2z}\7\60\2\2{~\5<\37\2|~\7|\2\2}{\3\2\2\2}|\3\2\2\2")
        buf.write("~\u0082\3\2\2\2\177\u0081\7\3\2\2\u0080\177\3\2\2\2\u0081")
        buf.write("\u0084\3\2\2\2\u0082\u0080\3\2\2\2\u0082\u0083\3\2\2\2")
        buf.write("\u0083\u009b\3\2\2\2\u0084\u0082\3\2\2\2\u0085\u0086\7")
        buf.write("\3\2\2\u0086\u0088\7\20\2\2\u0087\u0085\3\2\2\2\u0087")
        buf.write("\u0088\3\2\2\2\u0088\u0089\3\2\2\2\u0089\u008d\7\5\2\2")
        buf.write("\u008a\u008c\n\3\2\2\u008b\u008a\3\2\2\2\u008c\u008f\3")
        buf.write("\2\2\2\u008d\u008b\3\2\2\2\u008d\u008e\3\2\2\2\u008e\u0093")
        buf.write("\3\2\2\2\u008f\u008d\3\2\2\2\u0090\u0092\7\3\2\2\u0091")
        buf.write("\u0090\3\2\2\2\u0092\u0095\3\2\2\2\u0093\u0091\3\2\2\2")
        buf.write("\u0093\u0094\3\2\2\2\u0094\u009b\3\2\2\2\u0095\u0093\3")
        buf.write("\2\2\2\u0096\u009b\5\f\7\2\u0097\u0098\7|\2\2\u0098\u0099")
        buf.write("\7#\2\2\u0099\u009b\5\22\n\2\u009ap\3\2\2\2\u009a\u0087")
        buf.write("\3\2\2\2\u009a\u0096\3\2\2\2\u009a\u0097\3\2\2\2\u009b")
        buf.write("\u009c\3\2\2\2\u009c\u009a\3\2\2\2\u009c\u009d\3\2\2\2")
        buf.write("\u009d\7\3\2\2\2\u009e\u00ab\7<\2\2\u009f\u00a0\7\3\2")
        buf.write("\2\u00a0\u00a2\7\20\2\2\u00a1\u009f\3\2\2\2\u00a1\u00a2")
        buf.write("\3\2\2\2\u00a2\u00a3\3\2\2\2\u00a3\u00a5\5\f\7\2\u00a4")
        buf.write("\u00a6\7\3\2\2\u00a5\u00a4\3\2\2\2\u00a5\u00a6\3\2\2\2")
        buf.write("\u00a6\u00a9\3\2\2\2\u00a7\u00a8\7\20\2\2\u00a8\u00aa")
        buf.write("\7x\2\2\u00a9\u00a7\3\2\2\2\u00a9\u00aa\3\2\2\2\u00aa")
        buf.write("\u00ac\3\2\2\2\u00ab\u00a1\3\2\2\2\u00ac\u00ad\3\2\2\2")
        buf.write("\u00ad\u00ab\3\2\2\2\u00ad\u00ae\3\2\2\2\u00ae\t\3\2\2")
        buf.write("\2\u00af\u00bc\7S\2\2\u00b0\u00b1\7\3\2\2\u00b1\u00b3")
        buf.write("\7\20\2\2\u00b2\u00b0\3\2\2\2\u00b2\u00b3\3\2\2\2\u00b3")
        buf.write("\u00b4\3\2\2\2\u00b4\u00b6\5\f\7\2\u00b5\u00b7\7\3\2\2")
        buf.write("\u00b6\u00b5\3\2\2\2\u00b6\u00b7\3\2\2\2\u00b7\u00ba\3")
        buf.write("\2\2\2\u00b8\u00b9\7\20\2\2\u00b9\u00bb\7x\2\2\u00ba\u00b8")
        buf.write("\3\2\2\2\u00ba\u00bb\3\2\2\2\u00bb\u00bd\3\2\2\2\u00bc")
        buf.write("\u00b2\3\2\2\2\u00bd\u00be\3\2\2\2\u00be\u00bc\3\2\2\2")
        buf.write("\u00be\u00bf\3\2\2\2\u00bf\13\3\2\2\2\u00c0\u00c1\7|\2")
        buf.write("\2\u00c1\u00c2\7#\2\2\u00c2\u00c4\5:\36\2\u00c3\u00c5")
        buf.write("\7\62\2\2\u00c4\u00c3\3\2\2\2\u00c4\u00c5\3\2\2\2\u00c5")
        buf.write("\u00c9\3\2\2\2\u00c6\u00c8\7\3\2\2\u00c7\u00c6\3\2\2\2")
        buf.write("\u00c8\u00cb\3\2\2\2\u00c9\u00c7\3\2\2\2\u00c9\u00ca\3")
        buf.write("\2\2\2\u00ca\u00cd\3\2\2\2\u00cb\u00c9\3\2\2\2\u00cc\u00ce")
        buf.write("\7\20\2\2\u00cd\u00cc\3\2\2\2\u00cd\u00ce\3\2\2\2\u00ce")
        buf.write("\r\3\2\2\2\u00cf\u00d0\7\35\2\2\u00d0\u00d1\7i\2\2\u00d1")
        buf.write("\u00d6\5:\36\2\u00d2\u00d3\7\61\2\2\u00d3\u00d5\5:\36")
        buf.write("\2\u00d4\u00d2\3\2\2\2\u00d5\u00d8\3\2\2\2\u00d6\u00d4")
        buf.write("\3\2\2\2\u00d6\u00d7\3\2\2\2\u00d7\u00d9\3\2\2\2\u00d8")
        buf.write("\u00d6\3\2\2\2\u00d9\u00da\7j\2\2\u00da\u00e5\3\2\2\2")
        buf.write("\u00db\u00dc\7\35\2\2\u00dc\u00e1\5:\36\2\u00dd\u00de")
        buf.write("\7\61\2\2\u00de\u00e0\5:\36\2\u00df\u00dd\3\2\2\2\u00e0")
        buf.write("\u00e3\3\2\2\2\u00e1\u00df\3\2\2\2\u00e1\u00e2\3\2\2\2")
        buf.write("\u00e2\u00e5\3\2\2\2\u00e3\u00e1\3\2\2\2\u00e4\u00cf\3")
        buf.write("\2\2\2\u00e4\u00db\3\2\2\2\u00e5\17\3\2\2\2\u00e6\u00ea")
        buf.write("\5\24\13\2\u00e7\u00e9\5\34\17\2\u00e8\u00e7\3\2\2\2\u00e9")
        buf.write("\u00ec\3\2\2\2\u00ea\u00e8\3\2\2\2\u00ea\u00eb\3\2\2\2")
        buf.write("\u00eb\u00ee\3\2\2\2\u00ec\u00ea\3\2\2\2\u00ed\u00ef\5")
        buf.write("\36\20\2\u00ee\u00ed\3\2\2\2\u00ee\u00ef\3\2\2\2\u00ef")
        buf.write("\u00f2\3\2\2\2\u00f0\u00f1\7\3\2\2\u00f1\u00f3\7\20\2")
        buf.write("\2\u00f2\u00f0\3\2\2\2\u00f2\u00f3\3\2\2\2\u00f3\21\3")
        buf.write("\2\2\2\u00f4\u00f8\5\26\f\2\u00f5\u00f7\5\30\r\2\u00f6")
        buf.write("\u00f5\3\2\2\2\u00f7\u00fa\3\2\2\2\u00f8\u00f6\3\2\2\2")
        buf.write("\u00f8\u00f9\3\2\2\2\u00f9\u00fc\3\2\2\2\u00fa\u00f8\3")
        buf.write("\2\2\2\u00fb\u00fd\5\32\16\2\u00fc\u00fb\3\2\2\2\u00fc")
        buf.write("\u00fd\3\2\2\2\u00fd\23\3\2\2\2\u00fe\u0100\7M\2\2\u00ff")
        buf.write("\u0101\7\27\2\2\u0100\u00ff\3\2\2\2\u0100\u0101\3\2\2")
        buf.write("\2\u0101\u0102\3\2\2\2\u0102\u0103\5\64\33\2\u0103\u0116")
        buf.write("\7\60\2\2\u0104\u0105\7\3\2\2\u0105\u010e\7\20\2\2\u0106")
        buf.write("\u010f\5\4\3\2\u0107\u0108\78\2\2\u0108\u010f\7|\2\2\u0109")
        buf.write("\u010f\7=\2\2\u010a\u010b\7\6\2\2\u010b\u010f\7|\2\2\u010c")
        buf.write("\u010d\7\7\2\2\u010d\u010f\7|\2\2\u010e\u0106\3\2\2\2")
        buf.write("\u010e\u0107\3\2\2\2\u010e\u0109\3\2\2\2\u010e\u010a\3")
        buf.write("\2\2\2\u010e\u010c\3\2\2\2\u010f\u0113\3\2\2\2\u0110\u0112")
        buf.write("\7\3\2\2\u0111\u0110\3\2\2\2\u0112\u0115\3\2\2\2\u0113")
        buf.write("\u0111\3\2\2\2\u0113\u0114\3\2\2\2\u0114\u0117\3\2\2\2")
        buf.write("\u0115\u0113\3\2\2\2\u0116\u0104\3\2\2\2\u0117\u0118\3")
        buf.write("\2\2\2\u0118\u0116\3\2\2\2\u0118\u0119\3\2\2\2\u0119\u014c")
        buf.write("\3\2\2\2\u011a\u011c\7M\2\2\u011b\u011d\7\27\2\2\u011c")
        buf.write("\u011b\3\2\2\2\u011c\u011d\3\2\2\2\u011d\u011e\3\2\2\2")
        buf.write("\u011e\u011f\5\64\33\2\u011f\u0120\7\60\2\2\u0120\u0121")
        buf.write("\5\f\7\2\u0121\u014c\3\2\2\2\u0122\u0124\7M\2\2\u0123")
        buf.write("\u0125\7\27\2\2\u0124\u0123\3\2\2\2\u0124\u0125\3\2\2")
        buf.write("\2\u0125\u0126\3\2\2\2\u0126\u0127\5\64\33\2\u0127\u0128")
        buf.write("\7\60\2\2\u0128\u0129\7_\2\2\u0129\u014c\3\2\2\2\u012a")
        buf.write("\u012c\7M\2\2\u012b\u012d\7\27\2\2\u012c\u012b\3\2\2\2")
        buf.write("\u012c\u012d\3\2\2\2\u012d\u012e\3\2\2\2\u012e\u012f\7")
        buf.write("|\2\2\u012f\u0130\7i\2\2\u0130\u0131\5:\36\2\u0131\u0132")
        buf.write("\7j\2\2\u0132\u013c\7\60\2\2\u0133\u0134\7\3\2\2\u0134")
        buf.write("\u0135\7\20\2\2\u0135\u0139\5\4\3\2\u0136\u0138\7\3\2")
        buf.write("\2\u0137\u0136\3\2\2\2\u0138\u013b\3\2\2\2\u0139\u0137")
        buf.write("\3\2\2\2\u0139\u013a\3\2\2\2\u013a\u013d\3\2\2\2\u013b")
        buf.write("\u0139\3\2\2\2\u013c\u0133\3\2\2\2\u013d\u013e\3\2\2\2")
        buf.write("\u013e\u013c\3\2\2\2\u013e\u013f\3\2\2\2\u013f\u014c\3")
        buf.write("\2\2\2\u0140\u0142\7M\2\2\u0141\u0143\7\27\2\2\u0142\u0141")
        buf.write("\3\2\2\2\u0142\u0143\3\2\2\2\u0143\u0144\3\2\2\2\u0144")
        buf.write("\u0145\7|\2\2\u0145\u0146\7i\2\2\u0146\u0147\5:\36\2\u0147")
        buf.write("\u0148\7j\2\2\u0148\u0149\7\60\2\2\u0149\u014a\5\f\7\2")
        buf.write("\u014a\u014c\3\2\2\2\u014b\u00fe\3\2\2\2\u014b\u011a\3")
        buf.write("\2\2\2\u014b\u0122\3\2\2\2\u014b\u012a\3\2\2\2\u014b\u0140")
        buf.write("\3\2\2\2\u014c\25\3\2\2\2\u014d\u014f\7M\2\2\u014e\u0150")
        buf.write("\7\27\2\2\u014f\u014e\3\2\2\2\u014f\u0150\3\2\2\2\u0150")
        buf.write("\u0151\3\2\2\2\u0151\u0152\5\64\33\2\u0152\u0155\7\60")
        buf.write("\2\2\u0153\u0156\5:\36\2\u0154\u0156\7\u0096\2\2\u0155")
        buf.write("\u0153\3\2\2\2\u0155\u0154\3\2\2\2\u0156\27\3\2\2\2\u0157")
        buf.write("\u0159\7C\2\2\u0158\u015a\7\27\2\2\u0159\u0158\3\2\2\2")
        buf.write("\u0159\u015a\3\2\2\2\u015a\u015b\3\2\2\2\u015b\u015c\5")
        buf.write("\64\33\2\u015c\u015f\7\60\2\2\u015d\u0160\5:\36\2\u015e")
        buf.write("\u0160\7\u0096\2\2\u015f\u015d\3\2\2\2\u015f\u015e\3\2")
        buf.write("\2\2\u0160\31\3\2\2\2\u0161\u0163\7\20\2\2\u0162\u0161")
        buf.write("\3\2\2\2\u0162\u0163\3\2\2\2\u0163\u0164\3\2\2\2\u0164")
        buf.write("\u0165\7D\2\2\u0165\u0168\7\60\2\2\u0166\u0169\5:\36\2")
        buf.write("\u0167\u0169\7\u0096\2\2\u0168\u0166\3\2\2\2\u0168\u0167")
        buf.write("\3\2\2\2\u0169\33\3\2\2\2\u016a\u016b\7C\2\2\u016b\u016c")
        buf.write("\5:\36\2\u016c\u016d\7\"\2\2\u016d\u016e\5:\36\2\u016e")
        buf.write("\u0178\7\60\2\2\u016f\u0170\7\3\2\2\u0170\u0171\7\20\2")
        buf.write("\2\u0171\u0175\5\4\3\2\u0172\u0174\7\3\2\2\u0173\u0172")
        buf.write("\3\2\2\2\u0174\u0177\3\2\2\2\u0175\u0173\3\2\2\2\u0175")
        buf.write("\u0176\3\2\2\2\u0176\u0179\3\2\2\2\u0177\u0175\3\2\2\2")
        buf.write("\u0178\u016f\3\2\2\2\u0179\u017a\3\2\2\2\u017a\u0178\3")
        buf.write("\2\2\2\u017a\u017b\3\2\2\2\u017b\35\3\2\2\2\u017c\u017e")
        buf.write("\7\20\2\2\u017d\u017c\3\2\2\2\u017d\u017e\3\2\2\2\u017e")
        buf.write("\u017f\3\2\2\2\u017f\u0180\7D\2\2\u0180\u0186\7\60\2\2")
        buf.write("\u0181\u0182\7\3\2\2\u0182\u0183\7\20\2\2\u0183\u0187")
        buf.write("\5\4\3\2\u0184\u0187\5\16\b\2\u0185\u0187\5\f\7\2\u0186")
        buf.write("\u0181\3\2\2\2\u0186\u0184\3\2\2\2\u0186\u0185\3\2\2\2")
        buf.write("\u0187\u0188\3\2\2\2\u0188\u0186\3\2\2\2\u0188\u0189\3")
        buf.write("\2\2\2\u0189\u018d\3\2\2\2\u018a\u018c\7\3\2\2\u018b\u018a")
        buf.write("\3\2\2\2\u018c\u018f\3\2\2\2\u018d\u018b\3\2\2\2\u018d")
        buf.write("\u018e\3\2\2\2\u018e\u0191\3\2\2\2\u018f\u018d\3\2\2\2")
        buf.write("\u0190\u0192\7\20\2\2\u0191\u0190\3\2\2\2\u0191\u0192")
        buf.write("\3\2\2\2\u0192\37\3\2\2\2\u0193\u0194\7J\2\2\u0194\u0195")
        buf.write("\7|\2\2\u0195\u0196\7O\2\2\u0196\u0197\7q\2\2\u0197\u0198")
        buf.write("\7!\2\2\u0198\u0199\7q\2\2\u0199\u019b\7\60\2\2\u019a")
        buf.write("\u019c\7x\2\2\u019b\u019a\3\2\2\2\u019b\u019c\3\2\2\2")
        buf.write("\u019c\u01a0\3\2\2\2\u019d\u019e\7\3\2\2\u019e\u019f\7")
        buf.write("\20\2\2\u019f\u01a1\5\4\3\2\u01a0\u019d\3\2\2\2\u01a1")
        buf.write("\u01a2\3\2\2\2\u01a2\u01a0\3\2\2\2\u01a2\u01a3\3\2\2\2")
        buf.write("\u01a3\u01a7\3\2\2\2\u01a4\u01a6\7\20\2\2\u01a5\u01a4")
        buf.write("\3\2\2\2\u01a6\u01a9\3\2\2\2\u01a7\u01a5\3\2\2\2\u01a7")
        buf.write("\u01a8\3\2\2\2\u01a8\u023b\3\2\2\2\u01a9\u01a7\3\2\2\2")
        buf.write("\u01aa\u01ab\7J\2\2\u01ab\u01ac\7|\2\2\u01ac\u01af\7O")
        buf.write("\2\2\u01ad\u01b0\7\u0098\2\2\u01ae\u01b0\5.\30\2\u01af")
        buf.write("\u01ad\3\2\2\2\u01af\u01ae\3\2\2\2\u01b0\u01b1\3\2\2\2")
        buf.write("\u01b1\u01b3\7\60\2\2\u01b2\u01b4\7x\2\2\u01b3\u01b2\3")
        buf.write("\2\2\2\u01b3\u01b4\3\2\2\2\u01b4\u01b8\3\2\2\2\u01b5\u01b6")
        buf.write("\7\3\2\2\u01b6\u01b7\7\20\2\2\u01b7\u01b9\5\4\3\2\u01b8")
        buf.write("\u01b5\3\2\2\2\u01b9\u01ba\3\2\2\2\u01ba\u01b8\3\2\2\2")
        buf.write("\u01ba\u01bb\3\2\2\2\u01bb\u01bf\3\2\2\2\u01bc\u01be\7")
        buf.write("\20\2\2\u01bd\u01bc\3\2\2\2\u01be\u01c1\3\2\2\2\u01bf")
        buf.write("\u01bd\3\2\2\2\u01bf\u01c0\3\2\2\2\u01c0\u023b\3\2\2\2")
        buf.write("\u01c1\u01bf\3\2\2\2\u01c2\u01c3\7J\2\2\u01c3\u01c4\7")
        buf.write("|\2\2\u01c4\u01c6\7O\2\2\u01c5\u01c7\7\17\2\2\u01c6\u01c5")
        buf.write("\3\2\2\2\u01c7\u01c8\3\2\2\2\u01c8\u01c6\3\2\2\2\u01c8")
        buf.write("\u01c9\3\2\2\2\u01c9\u01ca\3\2\2\2\u01ca\u01cb\7!\2\2")
        buf.write("\u01cb\u01cc\7+\2\2\u01cc\u01cd\7\u0096\2\2\u01cd\u01cf")
        buf.write("\7\60\2\2\u01ce\u01d0\7x\2\2\u01cf\u01ce\3\2\2\2\u01cf")
        buf.write("\u01d0\3\2\2\2\u01d0\u01d4\3\2\2\2\u01d1\u01d2\7\3\2\2")
        buf.write("\u01d2\u01d3\7\20\2\2\u01d3\u01d5\5\4\3\2\u01d4\u01d1")
        buf.write("\3\2\2\2\u01d5\u01d6\3\2\2\2\u01d6\u01d4\3\2\2\2\u01d6")
        buf.write("\u01d7\3\2\2\2\u01d7\u01db\3\2\2\2\u01d8\u01da\7\20\2")
        buf.write("\2\u01d9\u01d8\3\2\2\2\u01da\u01dd\3\2\2\2\u01db\u01d9")
        buf.write("\3\2\2\2\u01db\u01dc\3\2\2\2\u01dc\u023b\3\2\2\2\u01dd")
        buf.write("\u01db\3\2\2\2\u01de\u01df\7J\2\2\u01df\u01e4\7|\2\2\u01e0")
        buf.write("\u01e1\7\61\2\2\u01e1\u01e3\7|\2\2\u01e2\u01e0\3\2\2\2")
        buf.write("\u01e3\u01e6\3\2\2\2\u01e4\u01e2\3\2\2\2\u01e4\u01e5\3")
        buf.write("\2\2\2\u01e5\u01e7\3\2\2\2\u01e6\u01e4\3\2\2\2\u01e7\u01e8")
        buf.write("\7O\2\2\u01e8\u01e9\7w\2\2\u01e9\u0202\7m\2\2\u01ea\u01f1")
        buf.write("\5L\'\2\u01eb\u01ed\7\17\2\2\u01ec\u01eb\3\2\2\2\u01ed")
        buf.write("\u01ee\3\2\2\2\u01ee\u01ec\3\2\2\2\u01ee\u01ef\3\2\2\2")
        buf.write("\u01ef\u01f1\3\2\2\2\u01f0\u01ea\3\2\2\2\u01f0\u01ec\3")
        buf.write("\2\2\2\u01f1\u01fd\3\2\2\2\u01f2\u01f9\7\61\2\2\u01f3")
        buf.write("\u01fa\5L\'\2\u01f4\u01f6\7\17\2\2\u01f5\u01f4\3\2\2\2")
        buf.write("\u01f6\u01f7\3\2\2\2\u01f7\u01f5\3\2\2\2\u01f7\u01f8\3")
        buf.write("\2\2\2\u01f8\u01fa\3\2\2\2\u01f9\u01f3\3\2\2\2\u01f9\u01f5")
        buf.write("\3\2\2\2\u01fa\u01fc\3\2\2\2\u01fb\u01f2\3\2\2\2\u01fc")
        buf.write("\u01ff\3\2\2\2\u01fd\u01fb\3\2\2\2\u01fd\u01fe\3\2\2\2")
        buf.write("\u01fe\u0201\3\2\2\2\u01ff\u01fd\3\2\2\2\u0200\u01f0\3")
        buf.write("\2\2\2\u0201\u0204\3\2\2\2\u0202\u0200\3\2\2\2\u0202\u0203")
        buf.write("\3\2\2\2\u0203\u0205\3\2\2\2\u0204\u0202\3\2\2\2\u0205")
        buf.write("\u0206\7n\2\2\u0206\u0208\7\60\2\2\u0207\u0209\7x\2\2")
        buf.write("\u0208\u0207\3\2\2\2\u0208\u0209\3\2\2\2\u0209\u020d\3")
        buf.write("\2\2\2\u020a\u020b\7\3\2\2\u020b\u020c\7\20\2\2\u020c")
        buf.write("\u020e\5\4\3\2\u020d\u020a\3\2\2\2\u020e\u020f\3\2\2\2")
        buf.write("\u020f\u020d\3\2\2\2\u020f\u0210\3\2\2\2\u0210\u0214\3")
        buf.write("\2\2\2\u0211\u0213\7\20\2\2\u0212\u0211\3\2\2\2\u0213")
        buf.write("\u0216\3\2\2\2\u0214\u0212\3\2\2\2\u0214\u0215\3\2\2\2")
        buf.write("\u0215\u023b\3\2\2\2\u0216\u0214\3\2\2\2\u0217\u0218\7")
        buf.write("J\2\2\u0218\u0219\7|\2\2\u0219\u021a\7O\2\2\u021a\u021b")
        buf.write("\7|\2\2\u021b\u021c\7i\2\2\u021c\u021d\7|\2\2\u021d\u021e")
        buf.write("\7j\2\2\u021e\u0220\7\60\2\2\u021f\u0221\7x\2\2\u0220")
        buf.write("\u021f\3\2\2\2\u0220\u0221\3\2\2\2\u0221\u0225\3\2\2\2")
        buf.write("\u0222\u0223\7\3\2\2\u0223\u0224\7\20\2\2\u0224\u0226")
        buf.write("\5\4\3\2\u0225\u0222\3\2\2\2\u0226\u0227\3\2\2\2\u0227")
        buf.write("\u0225\3\2\2\2\u0227\u0228\3\2\2\2\u0228\u022c\3\2\2\2")
        buf.write("\u0229\u022b\7\20\2\2\u022a\u0229\3\2\2\2\u022b\u022e")
        buf.write("\3\2\2\2\u022c\u022a\3\2\2\2\u022c\u022d\3\2\2\2\u022d")
        buf.write("\u023b\3\2\2\2\u022e\u022c\3\2\2\2\u022f\u0230\7J\2\2")
        buf.write("\u0230\u0231\7|\2\2\u0231\u0232\7O\2\2\u0232\u0233\5.")
        buf.write("\30\2\u0233\u0234\7\60\2\2\u0234\u0235\7\3\2\2\u0235\u0236")
        buf.write("\7\20\2\2\u0236\u0238\5.\30\2\u0237\u0239\7\3\2\2\u0238")
        buf.write("\u0237\3\2\2\2\u0238\u0239\3\2\2\2\u0239\u023b\3\2\2\2")
        buf.write("\u023a\u0193\3\2\2\2\u023a\u01aa\3\2\2\2\u023a\u01c2\3")
        buf.write("\2\2\2\u023a\u01de\3\2\2\2\u023a\u0217\3\2\2\2\u023a\u022f")
        buf.write("\3\2\2\2\u023b!\3\2\2\2\u023c\u023f\7g\2\2\u023d\u0240")
        buf.write("\5\64\33\2\u023e\u0240\7\b\2\2\u023f\u023d\3\2\2\2\u023f")
        buf.write("\u023e\3\2\2\2\u0240\u0241\3\2\2\2\u0241\u0248\7\60\2")
        buf.write("\2\u0242\u0243\7\3\2\2\u0243\u0246\7\20\2\2\u0244\u0247")
        buf.write("\5\4\3\2\u0245\u0247\78\2\2\u0246\u0244\3\2\2\2\u0246")
        buf.write("\u0245\3\2\2\2\u0247\u0249\3\2\2\2\u0248\u0242\3\2\2\2")
        buf.write("\u0249\u024a\3\2\2\2\u024a\u0248\3\2\2\2\u024a\u024b\3")
        buf.write("\2\2\2\u024b#\3\2\2\2\u024c\u0250\5&\24\2\u024d\u024f")
        buf.write("\5\34\17\2\u024e\u024d\3\2\2\2\u024f\u0252\3\2\2\2\u0250")
        buf.write("\u024e\3\2\2\2\u0250\u0251\3\2\2\2\u0251\u0253\3\2\2\2")
        buf.write("\u0252\u0250\3\2\2\2\u0253\u0254\5\36\20\2\u0254%\3\2")
        buf.write("\2\2\u0255\u0256\7f\2\2\u0256\u0257\5\64\33\2\u0257\u0260")
        buf.write("\7\60\2\2\u0258\u0259\7\3\2\2\u0259\u025b\7\20\2\2\u025a")
        buf.write("\u0258\3\2\2\2\u025a\u025b\3\2\2\2\u025b\u025e\3\2\2\2")
        buf.write("\u025c\u025f\5\4\3\2\u025d\u025f\78\2\2\u025e\u025c\3")
        buf.write("\2\2\2\u025e\u025d\3\2\2\2\u025f\u0261\3\2\2\2\u0260\u025a")
        buf.write("\3\2\2\2\u0261\u0262\3\2\2\2\u0262\u0260\3\2\2\2\u0262")
        buf.write("\u0263\3\2\2\2\u0263\'\3\2\2\2\u0264\u0265\7[\2\2\u0265")
        buf.write("\u0269\7|\2\2\u0266\u0267\7m\2\2\u0267\u0268\7|\2\2\u0268")
        buf.write("\u026a\7n\2\2\u0269\u0266\3\2\2\2\u0269\u026a\3\2\2\2")
        buf.write("\u026a\u026b\3\2\2\2\u026b\u026c\7i\2\2\u026c\u026d\7")
        buf.write("|\2\2\u026d\u026e\7\60\2\2\u026e\u026f\5<\37\2\u026f\u0272")
        buf.write("\7j\2\2\u0270\u0271\7\60\2\2\u0271\u0273\5<\37\2\u0272")
        buf.write("\u0270\3\2\2\2\u0272\u0273\3\2\2\2\u0273\u0274\3\2\2\2")
        buf.write("\u0274\u029a\7#\2\2\u0275\u0276\7\3\2\2\u0276\u0277\7")
        buf.write("\20\2\2\u0277\u0279\5\4\3\2\u0278\u0275\3\2\2\2\u0279")
        buf.write("\u027a\3\2\2\2\u027a\u0278\3\2\2\2\u027a\u027b\3\2\2\2")
        buf.write("\u027b\u029b\3\2\2\2\u027c\u0280\5\f\7\2\u027d\u027f\7")
        buf.write("\3\2\2\u027e\u027d\3\2\2\2\u027f\u0282\3\2\2\2\u0280\u027e")
        buf.write("\3\2\2\2\u0280\u0281\3\2\2\2\u0281\u0288\3\2\2\2\u0282")
        buf.write("\u0280\3\2\2\2\u0283\u0284\7\3\2\2\u0284\u0285\7\20\2")
        buf.write("\2\u0285\u0287\5\4\3\2\u0286\u0283\3\2\2\2\u0287\u028a")
        buf.write("\3\2\2\2\u0288\u0286\3\2\2\2\u0288\u0289\3\2\2\2\u0289")
        buf.write("\u029b\3\2\2\2\u028a\u0288\3\2\2\2\u028b\u028f\5\16\b")
        buf.write("\2\u028c\u028e\7\3\2\2\u028d\u028c\3\2\2\2\u028e\u0291")
        buf.write("\3\2\2\2\u028f\u028d\3\2\2\2\u028f\u0290\3\2\2\2\u0290")
        buf.write("\u0297\3\2\2\2\u0291\u028f\3\2\2\2\u0292\u0293\7\3\2\2")
        buf.write("\u0293\u0294\7\20\2\2\u0294\u0296\5\4\3\2\u0295\u0292")
        buf.write("\3\2\2\2\u0296\u0299\3\2\2\2\u0297\u0295\3\2\2\2\u0297")
        buf.write("\u0298\3\2\2\2\u0298\u029b\3\2\2\2\u0299\u0297\3\2\2\2")
        buf.write("\u029a\u0278\3\2\2\2\u029a\u027c\3\2\2\2\u029a\u028b\3")
        buf.write("\2\2\2\u029b\u029e\3\2\2\2\u029c\u029d\7_\2\2\u029d\u029f")
        buf.write("\5:\36\2\u029e\u029c\3\2\2\2\u029e\u029f\3\2\2\2\u029f")
        buf.write("\u02a1\3\2\2\2\u02a0\u02a2\7\3\2\2\u02a1\u02a0\3\2\2\2")
        buf.write("\u02a1\u02a2\3\2\2\2\u02a2\u0339\3\2\2\2\u02a3\u02a4\7")
        buf.write("[\2\2\u02a4\u02a5\7\t\2\2\u02a5\u02a6\7i\2\2\u02a6\u02a7")
        buf.write("\7|\2\2\u02a7\u02a8\7\60\2\2\u02a8\u02a9\7[\2\2\u02a9")
        buf.write("\u02aa\7i\2\2\u02aa\u02ab\7|\2\2\u02ab\u02ac\7\60\2\2")
        buf.write("\u02ac\u02ad\5<\37\2\u02ad\u02ae\7j\2\2\u02ae\u02b1\7")
        buf.write("j\2\2\u02af\u02b0\7\60\2\2\u02b0\u02b2\5<\37\2\u02b1\u02af")
        buf.write("\3\2\2\2\u02b1\u02b2\3\2\2\2\u02b2\u02b3\3\2\2\2\u02b3")
        buf.write("\u02d9\7#\2\2\u02b4\u02b5\7\3\2\2\u02b5\u02b6\7\20\2\2")
        buf.write("\u02b6\u02b8\5\4\3\2\u02b7\u02b4\3\2\2\2\u02b8\u02b9\3")
        buf.write("\2\2\2\u02b9\u02b7\3\2\2\2\u02b9\u02ba\3\2\2\2\u02ba\u02da")
        buf.write("\3\2\2\2\u02bb\u02bf\5\f\7\2\u02bc\u02be\7\3\2\2\u02bd")
        buf.write("\u02bc\3\2\2\2\u02be\u02c1\3\2\2\2\u02bf\u02bd\3\2\2\2")
        buf.write("\u02bf\u02c0\3\2\2\2\u02c0\u02c7\3\2\2\2\u02c1\u02bf\3")
        buf.write("\2\2\2\u02c2\u02c3\7\3\2\2\u02c3\u02c4\7\20\2\2\u02c4")
        buf.write("\u02c6\5\4\3\2\u02c5\u02c2\3\2\2\2\u02c6\u02c9\3\2\2\2")
        buf.write("\u02c7\u02c5\3\2\2\2\u02c7\u02c8\3\2\2\2\u02c8\u02da\3")
        buf.write("\2\2\2\u02c9\u02c7\3\2\2\2\u02ca\u02ce\5\16\b\2\u02cb")
        buf.write("\u02cd\7\3\2\2\u02cc\u02cb\3\2\2\2\u02cd\u02d0\3\2\2\2")
        buf.write("\u02ce\u02cc\3\2\2\2\u02ce\u02cf\3\2\2\2\u02cf\u02d6\3")
        buf.write("\2\2\2\u02d0\u02ce\3\2\2\2\u02d1\u02d2\7\3\2\2\u02d2\u02d3")
        buf.write("\7\20\2\2\u02d3\u02d5\5\4\3\2\u02d4\u02d1\3\2\2\2\u02d5")
        buf.write("\u02d8\3\2\2\2\u02d6\u02d4\3\2\2\2\u02d6\u02d7\3\2\2\2")
        buf.write("\u02d7\u02da\3\2\2\2\u02d8\u02d6\3\2\2\2\u02d9\u02b7\3")
        buf.write("\2\2\2\u02d9\u02bb\3\2\2\2\u02d9\u02ca\3\2\2\2\u02da\u02db")
        buf.write("\3\2\2\2\u02db\u02dc\7_\2\2\u02dc\u02dd\5:\36\2\u02dd")
        buf.write("\u02df\3\2\2\2\u02de\u02e0\7\3\2\2\u02df\u02de\3\2\2\2")
        buf.write("\u02df\u02e0\3\2\2\2\u02e0\u0339\3\2\2\2\u02e1\u02e2\7")
        buf.write("[\2\2\u02e2\u02e6\7|\2\2\u02e3\u02e4\7m\2\2\u02e4\u02e5")
        buf.write("\7|\2\2\u02e5\u02e7\7n\2\2\u02e6\u02e3\3\2\2\2\u02e6\u02e7")
        buf.write("\3\2\2\2\u02e7\u02e8\3\2\2\2\u02e8\u02e9\7i\2\2\u02e9")
        buf.write("\u02ea\7|\2\2\u02ea\u02eb\7\60\2\2\u02eb\u02ec\7\25\2")
        buf.write("\2\u02ec\u02ed\7|\2\2\u02ed\u02ee\7m\2\2\u02ee\u02ef\7")
        buf.write("|\2\2\u02ef\u0301\7n\2\2\u02f0\u02f1\7\61\2\2\u02f1\u02f2")
        buf.write("\7|\2\2\u02f2\u02fd\7#\2\2\u02f3\u02f5\7&\2\2\u02f4\u02f3")
        buf.write("\3\2\2\2\u02f4\u02f5\3\2\2\2\u02f5\u02f7\3\2\2\2\u02f6")
        buf.write("\u02f8\7\17\2\2\u02f7\u02f6\3\2\2\2\u02f8\u02f9\3\2\2")
        buf.write("\2\u02f9\u02f7\3\2\2\2\u02f9\u02fa\3\2\2\2\u02fa\u02fe")
        buf.write("\3\2\2\2\u02fb\u02fe\7|\2\2\u02fc\u02fe\5L\'\2\u02fd\u02f4")
        buf.write("\3\2\2\2\u02fd\u02fb\3\2\2\2\u02fd\u02fc\3\2\2\2\u02fe")
        buf.write("\u0300\3\2\2\2\u02ff\u02f0\3\2\2\2\u0300\u0303\3\2\2\2")
        buf.write("\u0301\u02ff\3\2\2\2\u0301\u0302\3\2\2\2\u0302\u0304\3")
        buf.write("\2\2\2\u0303\u0301\3\2\2\2\u0304\u0307\7j\2\2\u0305\u0306")
        buf.write("\7\60\2\2\u0306\u0308\5<\37\2\u0307\u0305\3\2\2\2\u0307")
        buf.write("\u0308\3\2\2\2\u0308\u0309\3\2\2\2\u0309\u032f\7#\2\2")
        buf.write("\u030a\u030b\7\3\2\2\u030b\u030c\7\20\2\2\u030c\u030e")
        buf.write("\5\4\3\2\u030d\u030a\3\2\2\2\u030e\u030f\3\2\2\2\u030f")
        buf.write("\u030d\3\2\2\2\u030f\u0310\3\2\2\2\u0310\u0330\3\2\2\2")
        buf.write("\u0311\u0315\5\f\7\2\u0312\u0314\7\3\2\2\u0313\u0312\3")
        buf.write("\2\2\2\u0314\u0317\3\2\2\2\u0315\u0313\3\2\2\2\u0315\u0316")
        buf.write("\3\2\2\2\u0316\u031d\3\2\2\2\u0317\u0315\3\2\2\2\u0318")
        buf.write("\u0319\7\3\2\2\u0319\u031a\7\20\2\2\u031a\u031c\5\4\3")
        buf.write("\2\u031b\u0318\3\2\2\2\u031c\u031f\3\2\2\2\u031d\u031b")
        buf.write("\3\2\2\2\u031d\u031e\3\2\2\2\u031e\u0330\3\2\2\2\u031f")
        buf.write("\u031d\3\2\2\2\u0320\u0324\5\16\b\2\u0321\u0323\7\3\2")
        buf.write("\2\u0322\u0321\3\2\2\2\u0323\u0326\3\2\2\2\u0324\u0322")
        buf.write("\3\2\2\2\u0324\u0325\3\2\2\2\u0325\u032c\3\2\2\2\u0326")
        buf.write("\u0324\3\2\2\2\u0327\u0328\7\3\2\2\u0328\u0329\7\20\2")
        buf.write("\2\u0329\u032b\5\4\3\2\u032a\u0327\3\2\2\2\u032b\u032e")
        buf.write("\3\2\2\2\u032c\u032a\3\2\2\2\u032c\u032d\3\2\2\2\u032d")
        buf.write("\u0330\3\2\2\2\u032e\u032c\3\2\2\2\u032f\u030d\3\2\2\2")
        buf.write("\u032f\u0311\3\2\2\2\u032f\u0320\3\2\2\2\u0330\u0333\3")
        buf.write("\2\2\2\u0331\u0332\7_\2\2\u0332\u0334\5:\36\2\u0333\u0331")
        buf.write("\3\2\2\2\u0333\u0334\3\2\2\2\u0334\u0336\3\2\2\2\u0335")
        buf.write("\u0337\7\3\2\2\u0336\u0335\3\2\2\2\u0336\u0337\3\2\2\2")
        buf.write("\u0337\u0339\3\2\2\2\u0338\u0264\3\2\2\2\u0338\u02a3\3")
        buf.write("\2\2\2\u0338\u02e1\3\2\2\2\u0339)\3\2\2\2\u033a\u033b")
        buf.write("\7\67\2\2\u033b\u033c\7|\2\2\u033c\u0340\7\60\2\2\u033d")
        buf.write("\u033e\7\3\2\2\u033e\u033f\7\20\2\2\u033f\u0341\5\4\3")
        buf.write("\2\u0340\u033d\3\2\2\2\u0341\u0342\3\2\2\2\u0342\u0340")
        buf.write("\3\2\2\2\u0342\u0343\3\2\2\2\u0343+\3\2\2\2\u0344\u0345")
        buf.write("\7d\2\2\u0345\u0358\7\3\2\2\u0346\u0347\7\20\2\2\u0347")
        buf.write("\u0348\7|\2\2\u0348\u0349\7#\2\2\u0349\u034a\7\n\2\2\u034a")
        buf.write("\u0351\7m\2\2\u034b\u0352\7\u0098\2\2\u034c\u034e\7\17")
        buf.write("\2\2\u034d\u034c\3\2\2\2\u034e\u034f\3\2\2\2\u034f\u034d")
        buf.write("\3\2\2\2\u034f\u0350\3\2\2\2\u0350\u0352\3\2\2\2\u0351")
        buf.write("\u034b\3\2\2\2\u0351\u034d\3\2\2\2\u0352\u0353\3\2\2\2")
        buf.write("\u0353\u0354\7\61\2\2\u0354\u0355\5<\37\2\u0355\u0356")
        buf.write("\7n\2\2\u0356\u0357\7\3\2\2\u0357\u0359\3\2\2\2\u0358")
        buf.write("\u0346\3\2\2\2\u0359\u035a\3\2\2\2\u035a\u0358\3\2\2\2")
        buf.write("\u035a\u035b\3\2\2\2\u035b-\3\2\2\2\u035c\u035d\7|\2\2")
        buf.write("\u035d\u0365\7i\2\2\u035e\u0366\7|\2\2\u035f\u0361\7\17")
        buf.write("\2\2\u0360\u035f\3\2\2\2\u0361\u0362\3\2\2\2\u0362\u0360")
        buf.write("\3\2\2\2\u0362\u0363\3\2\2\2\u0363\u0366\3\2\2\2\u0364")
        buf.write("\u0366\5L\'\2\u0365\u035e\3\2\2\2\u0365\u0360\3\2\2\2")
        buf.write("\u0365\u0364\3\2\2\2\u0366\u0373\3\2\2\2\u0367\u036f\t")
        buf.write("\4\2\2\u0368\u0370\7|\2\2\u0369\u036b\7\17\2\2\u036a\u0369")
        buf.write("\3\2\2\2\u036b\u036c\3\2\2\2\u036c\u036a\3\2\2\2\u036c")
        buf.write("\u036d\3\2\2\2\u036d\u0370\3\2\2\2\u036e\u0370\5L\'\2")
        buf.write("\u036f\u0368\3\2\2\2\u036f\u036a\3\2\2\2\u036f\u036e\3")
        buf.write("\2\2\2\u0370\u0372\3\2\2\2\u0371\u0367\3\2\2\2\u0372\u0375")
        buf.write("\3\2\2\2\u0373\u0371\3\2\2\2\u0373\u0374\3\2\2\2\u0374")
        buf.write("\u0376\3\2\2\2\u0375\u0373\3\2\2\2\u0376\u0393\7j\2\2")
        buf.write("\u0377\u037f\7i\2\2\u0378\u0380\7|\2\2\u0379\u037b\7\17")
        buf.write("\2\2\u037a\u0379\3\2\2\2\u037b\u037c\3\2\2\2\u037c\u037a")
        buf.write("\3\2\2\2\u037c\u037d\3\2\2\2\u037d\u0380\3\2\2\2\u037e")
        buf.write("\u0380\5L\'\2\u037f\u0378\3\2\2\2\u037f\u037a\3\2\2\2")
        buf.write("\u037f\u037e\3\2\2\2\u0380\u038d\3\2\2\2\u0381\u0389\t")
        buf.write("\4\2\2\u0382\u038a\7|\2\2\u0383\u0385\7\17\2\2\u0384\u0383")
        buf.write("\3\2\2\2\u0385\u0386\3\2\2\2\u0386\u0384\3\2\2\2\u0386")
        buf.write("\u0387\3\2\2\2\u0387\u038a\3\2\2\2\u0388\u038a\5L\'\2")
        buf.write("\u0389\u0382\3\2\2\2\u0389\u0384\3\2\2\2\u0389\u0388\3")
        buf.write("\2\2\2\u038a\u038c\3\2\2\2\u038b\u0381\3\2\2\2\u038c\u038f")
        buf.write("\3\2\2\2\u038d\u038b\3\2\2\2\u038d\u038e\3\2\2\2\u038e")
        buf.write("\u0390\3\2\2\2\u038f\u038d\3\2\2\2\u0390\u0391\7j\2\2")
        buf.write("\u0391\u0393\7\u0096\2\2\u0392\u035c\3\2\2\2\u0392\u0377")
        buf.write("\3\2\2\2\u0393/\3\2\2\2\u0394\u0395\7\u0096\2\2\u0395")
        buf.write("\u0396\7i\2\2\u0396\u039b\5:\36\2\u0397\u0398\7\61\2\2")
        buf.write("\u0398\u039a\5:\36\2\u0399\u0397\3\2\2\2\u039a\u039d\3")
        buf.write("\2\2\2\u039b\u0399\3\2\2\2\u039b\u039c\3\2\2\2\u039c\u039e")
        buf.write("\3\2\2\2\u039d\u039b\3\2\2\2\u039e\u039f\7j\2\2\u039f")
        buf.write("\61\3\2\2\2\u03a0\u03a1\7\t\2\2\u03a1\u03a2\7i\2\2\u03a2")
        buf.write("\u03a3\7|\2\2\u03a3\u03a4\7j\2\2\u03a4\63\3\2\2\2\u03a5")
        buf.write("\u03af\5:\36\2\u03a6\u03a8\7+\2\2\u03a7\u03a9\7#\2\2\u03a8")
        buf.write("\u03a7\3\2\2\2\u03a8\u03a9\3\2\2\2\u03a9\u03b0\3\2\2\2")
        buf.write("\u03aa\u03ac\7,\2\2\u03ab\u03ad\7#\2\2\u03ac\u03ab\3\2")
        buf.write("\2\2\u03ac\u03ad\3\2\2\2\u03ad\u03b0\3\2\2\2\u03ae\u03b0")
        buf.write("\7\"\2\2\u03af\u03a6\3\2\2\2\u03af\u03aa\3\2\2\2\u03af")
        buf.write("\u03ae\3\2\2\2\u03b0\u03b1\3\2\2\2\u03b1\u03b2\5:\36\2")
        buf.write("\u03b2\u03b7\3\2\2\2\u03b3\u03b7\7\b\2\2\u03b4\u03b7\7")
        buf.write("\13\2\2\u03b5\u03b7\7|\2\2\u03b6\u03a5\3\2\2\2\u03b6\u03b3")
        buf.write("\3\2\2\2\u03b6\u03b4\3\2\2\2\u03b6\u03b5\3\2\2\2\u03b7")
        buf.write("\65\3\2\2\2\u03b8\u03ba\7q\2\2\u03b9\u03b8\3\2\2\2\u03ba")
        buf.write("\u03bb\3\2\2\2\u03bb\u03b9\3\2\2\2\u03bb\u03bc\3\2\2\2")
        buf.write("\u03bc\67\3\2\2\2\u03bd\u03bf\7r\2\2\u03be\u03bd\3\2\2")
        buf.write("\2\u03bf\u03c0\3\2\2\2\u03c0\u03be\3\2\2\2\u03c0\u03c1")
        buf.write("\3\2\2\2\u03c19\3\2\2\2\u03c2\u041e\7\b\2\2\u03c3\u041e")
        buf.write("\7\13\2\2\u03c4\u041e\7r\2\2\u03c5\u03c7\7\17\2\2\u03c6")
        buf.write("\u03c5\3\2\2\2\u03c7\u03c8\3\2\2\2\u03c8\u03c6\3\2\2\2")
        buf.write("\u03c8\u03c9\3\2\2\2\u03c9\u03cd\3\2\2\2\u03ca\u03cd\7")
        buf.write("|\2\2\u03cb\u03cd\5L\'\2\u03cc\u03c6\3\2\2\2\u03cc\u03ca")
        buf.write("\3\2\2\2\u03cc\u03cb\3\2\2\2\u03cd\u03da\3\2\2\2\u03ce")
        buf.write("\u03d6\t\5\2\2\u03cf\u03d1\7\17\2\2\u03d0\u03cf\3\2\2")
        buf.write("\2\u03d1\u03d2\3\2\2\2\u03d2\u03d0\3\2\2\2\u03d2\u03d3")
        buf.write("\3\2\2\2\u03d3\u03d7\3\2\2\2\u03d4\u03d7\7|\2\2\u03d5")
        buf.write("\u03d7\5L\'\2\u03d6\u03d0\3\2\2\2\u03d6\u03d4\3\2\2\2")
        buf.write("\u03d6\u03d5\3\2\2\2\u03d7\u03d9\3\2\2\2\u03d8\u03ce\3")
        buf.write("\2\2\2\u03d9\u03dc\3\2\2\2\u03da\u03d8\3\2\2\2\u03da\u03db")
        buf.write("\3\2\2\2\u03db\u041e\3\2\2\2\u03dc\u03da\3\2\2\2\u03dd")
        buf.write("\u03de\7|\2\2\u03de\u03e5\7m\2\2\u03df\u03e6\7|\2\2\u03e0")
        buf.write("\u03e2\7\17\2\2\u03e1\u03e0\3\2\2\2\u03e2\u03e3\3\2\2")
        buf.write("\2\u03e3\u03e1\3\2\2\2\u03e3\u03e4\3\2\2\2\u03e4\u03e6")
        buf.write("\3\2\2\2\u03e5\u03df\3\2\2\2\u03e5\u03e1\3\2\2\2\u03e6")
        buf.write("\u03f3\3\2\2\2\u03e7\u03ef\t\6\2\2\u03e8\u03f0\5L\'\2")
        buf.write("\u03e9\u03eb\7\17\2\2\u03ea\u03e9\3\2\2\2\u03eb\u03ec")
        buf.write("\3\2\2\2\u03ec\u03ea\3\2\2\2\u03ec\u03ed\3\2\2\2\u03ed")
        buf.write("\u03f0\3\2\2\2\u03ee\u03f0\7|\2\2\u03ef\u03e8\3\2\2\2")
        buf.write("\u03ef\u03ea\3\2\2\2\u03ef\u03ee\3\2\2\2\u03f0\u03f2\3")
        buf.write("\2\2\2\u03f1\u03e7\3\2\2\2\u03f2\u03f5\3\2\2\2\u03f3\u03f1")
        buf.write("\3\2\2\2\u03f3\u03f4\3\2\2\2\u03f4\u03f6\3\2\2\2\u03f5")
        buf.write("\u03f3\3\2\2\2\u03f6\u041e\7n\2\2\u03f7\u03fc\5.\30\2")
        buf.write("\u03f8\u03f9\t\7\2\2\u03f9\u03fb\5.\30\2\u03fa\u03f8\3")
        buf.write("\2\2\2\u03fb\u03fe\3\2\2\2\u03fc\u03fa\3\2\2\2\u03fc\u03fd")
        buf.write("\3\2\2\2\u03fd\u041e\3\2\2\2\u03fe\u03fc\3\2\2\2\u03ff")
        buf.write("\u041e\5L\'\2\u0400\u0419\7m\2\2\u0401\u0408\5L\'\2\u0402")
        buf.write("\u0404\7\17\2\2\u0403\u0402\3\2\2\2\u0404\u0405\3\2\2")
        buf.write("\2\u0405\u0403\3\2\2\2\u0405\u0406\3\2\2\2\u0406\u0408")
        buf.write("\3\2\2\2\u0407\u0401\3\2\2\2\u0407\u0403\3\2\2\2\u0408")
        buf.write("\u0414\3\2\2\2\u0409\u0410\7\61\2\2\u040a\u0411\5L\'\2")
        buf.write("\u040b\u040d\7\17\2\2\u040c\u040b\3\2\2\2\u040d\u040e")
        buf.write("\3\2\2\2\u040e\u040c\3\2\2\2\u040e\u040f\3\2\2\2\u040f")
        buf.write("\u0411\3\2\2\2\u0410\u040a\3\2\2\2\u0410\u040c\3\2\2\2")
        buf.write("\u0411\u0413\3\2\2\2\u0412\u0409\3\2\2\2\u0413\u0416\3")
        buf.write("\2\2\2\u0414\u0412\3\2\2\2\u0414\u0415\3\2\2\2\u0415\u0418")
        buf.write("\3\2\2\2\u0416\u0414\3\2\2\2\u0417\u0407\3\2\2\2\u0418")
        buf.write("\u041b\3\2\2\2\u0419\u0417\3\2\2\2\u0419\u041a\3\2\2\2")
        buf.write("\u041a\u041c\3\2\2\2\u041b\u0419\3\2\2\2\u041c\u041e\7")
        buf.write("n\2\2\u041d\u03c2\3\2\2\2\u041d\u03c3\3\2\2\2\u041d\u03c4")
        buf.write("\3\2\2\2\u041d\u03cc\3\2\2\2\u041d\u03dd\3\2\2\2\u041d")
        buf.write("\u03f7\3\2\2\2\u041d\u03ff\3\2\2\2\u041d\u0400\3\2\2\2")
        buf.write("\u041e;\3\2\2\2\u041f\u0420\t\b\2\2\u0420=\3\2\2\2\u0421")
        buf.write("\u0425\5D#\2\u0422\u0424\5@!\2\u0423\u0422\3\2\2\2\u0424")
        buf.write("\u0427\3\2\2\2\u0425\u0423\3\2\2\2\u0425\u0426\3\2\2\2")
        buf.write("\u0426\u042b\3\2\2\2\u0427\u0425\3\2\2\2\u0428\u042a\5")
        buf.write("B\"\2\u0429\u0428\3\2\2\2\u042a\u042d\3\2\2\2\u042b\u0429")
        buf.write("\3\2\2\2\u042b\u042c\3\2\2\2\u042c\u042e\3\2\2\2\u042d")
        buf.write("\u042b\3\2\2\2\u042e\u042f\5\36\20\2\u042f?\3\2\2\2\u0430")
        buf.write("\u0432\7\20\2\2\u0431\u0430\3\2\2\2\u0431\u0432\3\2\2")
        buf.write("\2\u0432\u0433\3\2\2\2\u0433\u0434\7 \2\2\u0434\u0439")
        buf.write("\t\t\2\2\u0435\u0436\7\61\2\2\u0436\u0438\t\t\2\2\u0437")
        buf.write("\u0435\3\2\2\2\u0438\u043b\3\2\2\2\u0439\u0437\3\2\2\2")
        buf.write("\u0439\u043a\3\2\2\2\u043a\u043c\3\2\2\2\u043b\u0439\3")
        buf.write("\2\2\2\u043c\u0449\7\60\2\2\u043d\u043e\7\3\2\2\u043e")
        buf.write("\u0440\7\20\2\2\u043f\u043d\3\2\2\2\u043f\u0440\3\2\2")
        buf.write("\2\u0440\u0444\3\2\2\2\u0441\u0445\5\4\3\2\u0442\u0443")
        buf.write("\7_\2\2\u0443\u0445\5:\36\2\u0444\u0441\3\2\2\2\u0444")
        buf.write("\u0442\3\2\2\2\u0445\u0447\3\2\2\2\u0446\u0448\7\3\2\2")
        buf.write("\u0447\u0446\3\2\2\2\u0447\u0448\3\2\2\2\u0448\u044a\3")
        buf.write("\2\2\2\u0449\u043f\3\2\2\2\u044a\u044b\3\2\2\2\u044b\u0449")
        buf.write("\3\2\2\2\u044b\u044c\3\2\2\2\u044cA\3\2\2\2\u044d\u044e")
        buf.write("\7C\2\2\u044e\u044f\5:\36\2\u044f\u0451\7\60\2\2\u0450")
        buf.write("\u0452\7x\2\2\u0451\u0450\3\2\2\2\u0451\u0452\3\2\2\2")
        buf.write("\u0452\u0458\3\2\2\2\u0453\u0455\7\3\2\2\u0454\u0456\7")
        buf.write("\20\2\2\u0455\u0454\3\2\2\2\u0455\u0456\3\2\2\2\u0456")
        buf.write("\u0457\3\2\2\2\u0457\u0459\5\4\3\2\u0458\u0453\3\2\2\2")
        buf.write("\u0459\u045a\3\2\2\2\u045a\u0458\3\2\2\2\u045a\u045b\3")
        buf.write("\2\2\2\u045bC\3\2\2\2\u045c\u045d\79\2\2\u045d\u045f\7")
        buf.write("|\2\2\u045e\u0460\7x\2\2\u045f\u045e\3\2\2\2\u045f\u0460")
        buf.write("\3\2\2\2\u0460\u0462\3\2\2\2\u0461\u0463\7\3\2\2\u0462")
        buf.write("\u0461\3\2\2\2\u0462\u0463\3\2\2\2\u0463E\3\2\2\2\u0464")
        buf.write("\u0465\7\3\2\2\u0465G\3\2\2\2\u0466\u0468\7\20\2\2\u0467")
        buf.write("\u0466\3\2\2\2\u0467\u0468\3\2\2\2\u0468\u0469\3\2\2\2")
        buf.write("\u0469\u046a\7x\2\2\u046aI\3\2\2\2\u046b\u046c\t\n\2\2")
        buf.write("\u046cK\3\2\2\2\u046d\u046e\t\13\2\2\u046eM\3\2\2\2\u00b1")
        buf.write("RWkpw}\u0082\u0087\u008d\u0093\u009a\u009c\u00a1\u00a5")
        buf.write("\u00a9\u00ad\u00b2\u00b6\u00ba\u00be\u00c4\u00c9\u00cd")
        buf.write("\u00d6\u00e1\u00e4\u00ea\u00ee\u00f2\u00f8\u00fc\u0100")
        buf.write("\u010e\u0113\u0118\u011c\u0124\u012c\u0139\u013e\u0142")
        buf.write("\u014b\u014f\u0155\u0159\u015f\u0162\u0168\u0175\u017a")
        buf.write("\u017d\u0186\u0188\u018d\u0191\u019b\u01a2\u01a7\u01af")
        buf.write("\u01b3\u01ba\u01bf\u01c8\u01cf\u01d6\u01db\u01e4\u01ee")
        buf.write("\u01f0\u01f7\u01f9\u01fd\u0202\u0208\u020f\u0214\u0220")
        buf.write("\u0227\u022c\u0238\u023a\u023f\u0246\u024a\u0250\u025a")
        buf.write("\u025e\u0262\u0269\u0272\u027a\u0280\u0288\u028f\u0297")
        buf.write("\u029a\u029e\u02a1\u02b1\u02b9\u02bf\u02c7\u02ce\u02d6")
        buf.write("\u02d9\u02df\u02e6\u02f4\u02f9\u02fd\u0301\u0307\u030f")
        buf.write("\u0315\u031d\u0324\u032c\u032f\u0333\u0336\u0338\u0342")
        buf.write("\u034f\u0351\u035a\u0362\u0365\u036c\u036f\u0373\u037c")
        buf.write("\u037f\u0386\u0389\u038d\u0392\u039b\u03a8\u03ac\u03af")
        buf.write("\u03b6\u03bb\u03c0\u03c8\u03cc\u03d2\u03d6\u03da\u03e3")
        buf.write("\u03e5\u03ec\u03ef\u03f3\u03fc\u0405\u0407\u040e\u0410")
        buf.write("\u0414\u0419\u041d\u0425\u042b\u0431\u0439\u043f\u0444")
        buf.write("\u0447\u044b\u0451\u0455\u045a\u045f\u0462\u0467")
        return buf.getvalue()


class nimParser ( Parser ):

    grammarFileName = "nim.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'\n'", "'\r'", "'#'", "'inc'", "'dec'", 
                     "'true'", "'forEach'", "'array'", "'false'", "'string'", 
                     "'int'", "'bool'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "' '", "<INVALID>", "'and'", "'var'", "'or'", "'not'", 
                     "'div'", "'shl'", "'shr'", "'xor'", "'mod'", "'echo'", 
                     "'is'", "'isnot'", "'of'", "'..'", "'=='", "'='", "'+'", 
                     "'*'", "'-'", "'/'", "'~'", "'&'", "'|'", "'<'", "'>'", 
                     "'!'", "'^'", "'.'", "':'", "','", "';'", "'addr'", 
                     "'as'", "'asm'", "'bind'", "'block'", "'break'", "'case'", 
                     "'cast'", "'concept'", "'const'", "'continue'", "'converter'", 
                     "'defer'", "'discard'", "'distinct'", "'do'", "'elif'", 
                     "'else'", "'end'", "'enum'", "'except'", "'export'", 
                     "'finally'", "'for'", "'from'", "'func'", "'if'", "'import'", 
                     "'in'", "'include'", "'interface'", "'iterator'", "'let'", 
                     "'macro'", "'method'", "'mixin'", "'nil'", "'notin'", 
                     "'object'", "'out'", "'proc'", "'ptr'", "'raise'", 
                     "'ref'", "'return'", "'static'", "'template'", "'try'", 
                     "'tuple'", "'type'", "'using'", "'when'", "'while'", 
                     "'yield'", "'('", "')'", "'{'", "'}'", "'['", "']'", 
                     "'%'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "DIGIT", "INDENT", "NOT_INDENT", "SPACE", 
                      "NEWLINE", "AND", "VARIABLE", "OR", "NOT", "DIV", 
                      "SHL", "SHR", "XOR", "MOD", "ECHO", "IS", "ISNOT", 
                      "OF", "OP6", "EQUALS_EQUALS", "EQUALS_OPERATOR", "ADD_OPERATOR", 
                      "MUL_OPERATOR", "MINUS_OPERATOR", "DIV_OPERATOR", 
                      "BITWISE_NOT_OPERATOR", "AND_OPERATOR", "OR_OPERATOR", 
                      "LESS_THAN", "GREATER_THAN", "NOT_OPERATOR", "XOR_OPERATOR", 
                      "DOT", "COLON", "COMMA", "SEMI_COLON", "ADDR", "AS", 
                      "ASM", "BIND", "BLOCK", "BREAK", "CASE", "CAST", "CONCEPT", 
                      "CONST", "CONTINUE", "CONVERTER", "DEFER", "DISCARD", 
                      "DISTINCT", "DO", "ELIF", "ELSE", "END", "ENUM", "EXCEPT", 
                      "EXPORT", "FINALLY", "FOR", "FROM", "FUNC", "IF", 
                      "IMPORT", "IN", "INCLUDE", "INTERFACE", "ITERATOR", 
                      "LET", "MACRO", "METHOD", "MIXIN", "NIL", "NOTIN", 
                      "OBJECT", "OUT", "PROC", "PTR", "RAISE", "REF", "RETURN", 
                      "STATIC", "TEMPLATE", "TRY", "TUPLE", "TYPE", "USING", 
                      "WHEN", "WHILE", "YIELD", "OPEN_PAREN", "CLOSE_PAREN", 
                      "OPEN_BRACE", "CLOSE_BRACE", "OPEN_BRACK", "CLOSE_BRACK", 
                      "MODULUS", "TRIPLESTR_LIT", "CHAR_LIT", "STR_LIT", 
                      "RSTR_LIT", "GENERALIZED_STR_LIT", "GENERALIZED_TRIPLESTR_LIT", 
                      "WS", "AT", "COMMENT", "MULTI_LINE_COMMENT", "MULTI_LINE_COMMENT2", 
                      "SINGLE_MULTI_LINE_COMMENT", "IDENTIFIER", "H", "LETTER", 
                      "INT_LIT", "HEX_LIT", "DEC_LIT", "OCT_LIT", "BIN_LIT", 
                      "INT8_LIT", "INT16_LIT", "INT32_LIT", "INT64_LIT", 
                      "UINT_LIT", "UINT8_LIT", "UINT16_LIT", "UINT32_LIT", 
                      "UINT64_LIT", "FLOAT_LIT", "FLOAT32_LIT", "FLOAT32_SUFFIX", 
                      "FLOAT64_LIT", "FLOAT64_SUFFIX", "EXP", "HEXDIGIT", 
                      "OCTDIGIT", "BINDIGIT", "NEW_IDENTIFIER", "ARRAY_LEN", 
                      "FORLOOP_RANGE" ]

    RULE_start = 0
    RULE_stmt = 1
    RULE_varDec = 2
    RULE_constDec = 3
    RULE_letDec = 4
    RULE_assignStmt = 5
    RULE_printStmt = 6
    RULE_complexIfStmt = 7
    RULE_varComplexIfStmt = 8
    RULE_simpleIfStmt = 9
    RULE_varSimpleIfStmt = 10
    RULE_varSimpleElifStmt = 11
    RULE_varSimpleElseStmt = 12
    RULE_simpleElifStmt = 13
    RULE_simpleElseStmt = 14
    RULE_forLoop = 15
    RULE_whileLoop = 16
    RULE_whenStmt = 17
    RULE_simpleWhenStmt = 18
    RULE_procBlock = 19
    RULE_block = 20
    RULE_typeBlock = 21
    RULE_methodInvoke = 22
    RULE_instanceMethodInvoke = 23
    RULE_forEachStmt = 24
    RULE_condition = 25
    RULE_character_literals = 26
    RULE_string_literals = 27
    RULE_rightHandSideStmt = 28
    RULE_dataType = 29
    RULE_caseStmt = 30
    RULE_simpleOfStmt = 31
    RULE_simpleElifOfStmt = 32
    RULE_simpleCaseStmt = 33
    RULE_emptyStmt = 34
    RULE_commentStmt = 35
    RULE_operator = 36
    RULE_literal = 37

    ruleNames =  [ "start", "stmt", "varDec", "constDec", "letDec", "assignStmt", 
                   "printStmt", "complexIfStmt", "varComplexIfStmt", "simpleIfStmt", 
                   "varSimpleIfStmt", "varSimpleElifStmt", "varSimpleElseStmt", 
                   "simpleElifStmt", "simpleElseStmt", "forLoop", "whileLoop", 
                   "whenStmt", "simpleWhenStmt", "procBlock", "block", "typeBlock", 
                   "methodInvoke", "instanceMethodInvoke", "forEachStmt", 
                   "condition", "character_literals", "string_literals", 
                   "rightHandSideStmt", "dataType", "caseStmt", "simpleOfStmt", 
                   "simpleElifOfStmt", "simpleCaseStmt", "emptyStmt", "commentStmt", 
                   "operator", "literal" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    DIGIT=13
    INDENT=14
    NOT_INDENT=15
    SPACE=16
    NEWLINE=17
    AND=18
    VARIABLE=19
    OR=20
    NOT=21
    DIV=22
    SHL=23
    SHR=24
    XOR=25
    MOD=26
    ECHO=27
    IS=28
    ISNOT=29
    OF=30
    OP6=31
    EQUALS_EQUALS=32
    EQUALS_OPERATOR=33
    ADD_OPERATOR=34
    MUL_OPERATOR=35
    MINUS_OPERATOR=36
    DIV_OPERATOR=37
    BITWISE_NOT_OPERATOR=38
    AND_OPERATOR=39
    OR_OPERATOR=40
    LESS_THAN=41
    GREATER_THAN=42
    NOT_OPERATOR=43
    XOR_OPERATOR=44
    DOT=45
    COLON=46
    COMMA=47
    SEMI_COLON=48
    ADDR=49
    AS=50
    ASM=51
    BIND=52
    BLOCK=53
    BREAK=54
    CASE=55
    CAST=56
    CONCEPT=57
    CONST=58
    CONTINUE=59
    CONVERTER=60
    DEFER=61
    DISCARD=62
    DISTINCT=63
    DO=64
    ELIF=65
    ELSE=66
    END=67
    ENUM=68
    EXCEPT=69
    EXPORT=70
    FINALLY=71
    FOR=72
    FROM=73
    FUNC=74
    IF=75
    IMPORT=76
    IN=77
    INCLUDE=78
    INTERFACE=79
    ITERATOR=80
    LET=81
    MACRO=82
    METHOD=83
    MIXIN=84
    NIL=85
    NOTIN=86
    OBJECT=87
    OUT=88
    PROC=89
    PTR=90
    RAISE=91
    REF=92
    RETURN=93
    STATIC=94
    TEMPLATE=95
    TRY=96
    TUPLE=97
    TYPE=98
    USING=99
    WHEN=100
    WHILE=101
    YIELD=102
    OPEN_PAREN=103
    CLOSE_PAREN=104
    OPEN_BRACE=105
    CLOSE_BRACE=106
    OPEN_BRACK=107
    CLOSE_BRACK=108
    MODULUS=109
    TRIPLESTR_LIT=110
    CHAR_LIT=111
    STR_LIT=112
    RSTR_LIT=113
    GENERALIZED_STR_LIT=114
    GENERALIZED_TRIPLESTR_LIT=115
    WS=116
    AT=117
    COMMENT=118
    MULTI_LINE_COMMENT=119
    MULTI_LINE_COMMENT2=120
    SINGLE_MULTI_LINE_COMMENT=121
    IDENTIFIER=122
    H=123
    LETTER=124
    INT_LIT=125
    HEX_LIT=126
    DEC_LIT=127
    OCT_LIT=128
    BIN_LIT=129
    INT8_LIT=130
    INT16_LIT=131
    INT32_LIT=132
    INT64_LIT=133
    UINT_LIT=134
    UINT8_LIT=135
    UINT16_LIT=136
    UINT32_LIT=137
    UINT64_LIT=138
    FLOAT_LIT=139
    FLOAT32_LIT=140
    FLOAT32_SUFFIX=141
    FLOAT64_LIT=142
    FLOAT64_SUFFIX=143
    EXP=144
    HEXDIGIT=145
    OCTDIGIT=146
    BINDIGIT=147
    NEW_IDENTIFIER=148
    ARRAY_LEN=149
    FORLOOP_RANGE=150

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class StartContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def getRuleIndex(self):
            return nimParser.RULE_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart" ):
                listener.enterStart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart" ):
                listener.exitStart(self)




    def start(self):

        localctx = nimParser.StartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_start)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 85
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.T__0) | (1 << nimParser.T__6) | (1 << nimParser.VARIABLE) | (1 << nimParser.ECHO) | (1 << nimParser.BLOCK) | (1 << nimParser.CASE) | (1 << nimParser.CONST))) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (nimParser.FOR - 72)) | (1 << (nimParser.IF - 72)) | (1 << (nimParser.LET - 72)) | (1 << (nimParser.PROC - 72)) | (1 << (nimParser.TYPE - 72)) | (1 << (nimParser.WHEN - 72)) | (1 << (nimParser.WHILE - 72)) | (1 << (nimParser.OPEN_PAREN - 72)) | (1 << (nimParser.IDENTIFIER - 72)))) != 0) or _la==nimParser.NEW_IDENTIFIER:
                self.state = 76
                self.stmt()
                self.state = 80
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 77
                        _la = self._input.LA(1)
                        if not(_la==nimParser.T__0 or _la==nimParser.T__1):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 82
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

                self.state = 87
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varDec(self):
            return self.getTypedRuleContext(nimParser.VarDecContext,0)


        def assignStmt(self):
            return self.getTypedRuleContext(nimParser.AssignStmtContext,0)


        def printStmt(self):
            return self.getTypedRuleContext(nimParser.PrintStmtContext,0)


        def constDec(self):
            return self.getTypedRuleContext(nimParser.ConstDecContext,0)


        def letDec(self):
            return self.getTypedRuleContext(nimParser.LetDecContext,0)


        def complexIfStmt(self):
            return self.getTypedRuleContext(nimParser.ComplexIfStmtContext,0)


        def forLoop(self):
            return self.getTypedRuleContext(nimParser.ForLoopContext,0)


        def whileLoop(self):
            return self.getTypedRuleContext(nimParser.WhileLoopContext,0)


        def whenStmt(self):
            return self.getTypedRuleContext(nimParser.WhenStmtContext,0)


        def procBlock(self):
            return self.getTypedRuleContext(nimParser.ProcBlockContext,0)


        def block(self):
            return self.getTypedRuleContext(nimParser.BlockContext,0)


        def typeBlock(self):
            return self.getTypedRuleContext(nimParser.TypeBlockContext,0)


        def methodInvoke(self):
            return self.getTypedRuleContext(nimParser.MethodInvokeContext,0)


        def instanceMethodInvoke(self):
            return self.getTypedRuleContext(nimParser.InstanceMethodInvokeContext,0)


        def emptyStmt(self):
            return self.getTypedRuleContext(nimParser.EmptyStmtContext,0)


        def forEachStmt(self):
            return self.getTypedRuleContext(nimParser.ForEachStmtContext,0)


        def caseStmt(self):
            return self.getTypedRuleContext(nimParser.CaseStmtContext,0)


        def getRuleIndex(self):
            return nimParser.RULE_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt" ):
                listener.enterStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt" ):
                listener.exitStmt(self)




    def stmt(self):

        localctx = nimParser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_stmt)
        try:
            self.state = 105
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 88
                self.varDec()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 89
                self.assignStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 90
                self.printStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 91
                self.constDec()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 92
                self.letDec()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 93
                self.complexIfStmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 94
                self.forLoop()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 95
                self.whileLoop()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 96
                self.whenStmt()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 97
                self.procBlock()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 98
                self.block()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 99
                self.typeBlock()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 100
                self.methodInvoke()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 101
                self.instanceMethodInvoke()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 102
                self.emptyStmt()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 103
                self.forEachStmt()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 104
                self.caseStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarDecContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARIABLE(self):
            return self.getToken(nimParser.VARIABLE, 0)

        def assignStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.AssignStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.AssignStmtContext,i)


        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.IDENTIFIER)
            else:
                return self.getToken(nimParser.IDENTIFIER, i)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COLON)
            else:
                return self.getToken(nimParser.COLON, i)

        def EQUALS_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.EQUALS_OPERATOR)
            else:
                return self.getToken(nimParser.EQUALS_OPERATOR, i)

        def varComplexIfStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.VarComplexIfStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.VarComplexIfStmtContext,i)


        def dataType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.DataTypeContext)
            else:
                return self.getTypedRuleContext(nimParser.DataTypeContext,i)


        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMA)
            else:
                return self.getToken(nimParser.COMMA, i)

        def getRuleIndex(self):
            return nimParser.RULE_varDec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarDec" ):
                listener.enterVarDec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarDec" ):
                listener.exitVarDec(self)




    def varDec(self):

        localctx = nimParser.VarDecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_varDec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 107
            self.match(nimParser.VARIABLE)
            self.state = 152 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 152
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
                    if la_ == 1:
                        self.state = 110
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==nimParser.T__0:
                            self.state = 108
                            self.match(nimParser.T__0)
                            self.state = 109
                            self.match(nimParser.INDENT)


                        self.state = 112
                        self.match(nimParser.IDENTIFIER)
                        self.state = 117
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==nimParser.COMMA:
                            self.state = 113
                            self.match(nimParser.COMMA)
                            self.state = 114
                            self.match(nimParser.IDENTIFIER)
                            self.state = 119
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 120
                        self.match(nimParser.COLON)
                        self.state = 123
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [nimParser.T__9, nimParser.T__10, nimParser.T__11]:
                            self.state = 121
                            self.dataType()
                            pass
                        elif token in [nimParser.IDENTIFIER]:
                            self.state = 122
                            self.match(nimParser.IDENTIFIER)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 128
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,6,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 125
                                self.match(nimParser.T__0) 
                            self.state = 130
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,6,self._ctx)

                        pass

                    elif la_ == 2:
                        self.state = 133
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==nimParser.T__0:
                            self.state = 131
                            self.match(nimParser.T__0)
                            self.state = 132
                            self.match(nimParser.INDENT)


                        self.state = 135
                        self.match(nimParser.T__2)
                        self.state = 139
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 136
                                _la = self._input.LA(1)
                                if _la <= 0 or (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.T__0) | (1 << nimParser.T__1) | (1 << nimParser.T__2))) != 0):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume() 
                            self.state = 141
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

                        self.state = 145
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 142
                                self.match(nimParser.T__0) 
                            self.state = 147
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

                        pass

                    elif la_ == 3:
                        self.state = 148
                        self.assignStmt()
                        pass

                    elif la_ == 4:
                        self.state = 149
                        self.match(nimParser.IDENTIFIER)
                        self.state = 150
                        self.match(nimParser.EQUALS_OPERATOR)
                        self.state = 151
                        self.varComplexIfStmt()
                        pass



                else:
                    raise NoViableAltException(self)
                self.state = 154 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,11,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstDecContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(nimParser.CONST, 0)

        def assignStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.AssignStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.AssignStmtContext,i)


        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def COMMENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMENT)
            else:
                return self.getToken(nimParser.COMMENT, i)

        def getRuleIndex(self):
            return nimParser.RULE_constDec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstDec" ):
                listener.enterConstDec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstDec" ):
                listener.exitConstDec(self)




    def constDec(self):

        localctx = nimParser.ConstDecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_constDec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 156
            self.match(nimParser.CONST)
            self.state = 169 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 159
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==nimParser.T__0:
                        self.state = 157
                        self.match(nimParser.T__0)
                        self.state = 158
                        self.match(nimParser.INDENT)


                    self.state = 161
                    self.assignStmt()
                    self.state = 163
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
                    if la_ == 1:
                        self.state = 162
                        self.match(nimParser.T__0)


                    self.state = 167
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
                    if la_ == 1:
                        self.state = 165
                        self.match(nimParser.INDENT)
                        self.state = 166
                        self.match(nimParser.COMMENT)



                else:
                    raise NoViableAltException(self)
                self.state = 171 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,15,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetDecContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LET(self):
            return self.getToken(nimParser.LET, 0)

        def assignStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.AssignStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.AssignStmtContext,i)


        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def COMMENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMENT)
            else:
                return self.getToken(nimParser.COMMENT, i)

        def getRuleIndex(self):
            return nimParser.RULE_letDec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetDec" ):
                listener.enterLetDec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetDec" ):
                listener.exitLetDec(self)




    def letDec(self):

        localctx = nimParser.LetDecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_letDec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 173
            self.match(nimParser.LET)
            self.state = 186 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 176
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==nimParser.T__0:
                        self.state = 174
                        self.match(nimParser.T__0)
                        self.state = 175
                        self.match(nimParser.INDENT)


                    self.state = 178
                    self.assignStmt()
                    self.state = 180
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
                    if la_ == 1:
                        self.state = 179
                        self.match(nimParser.T__0)


                    self.state = 184
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
                    if la_ == 1:
                        self.state = 182
                        self.match(nimParser.INDENT)
                        self.state = 183
                        self.match(nimParser.COMMENT)



                else:
                    raise NoViableAltException(self)
                self.state = 188 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,19,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(nimParser.IDENTIFIER, 0)

        def EQUALS_OPERATOR(self):
            return self.getToken(nimParser.EQUALS_OPERATOR, 0)

        def rightHandSideStmt(self):
            return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,0)


        def SEMI_COLON(self):
            return self.getToken(nimParser.SEMI_COLON, 0)

        def INDENT(self):
            return self.getToken(nimParser.INDENT, 0)

        def getRuleIndex(self):
            return nimParser.RULE_assignStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignStmt" ):
                listener.enterAssignStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignStmt" ):
                listener.exitAssignStmt(self)




    def assignStmt(self):

        localctx = nimParser.AssignStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_assignStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 190
            self.match(nimParser.IDENTIFIER)
            self.state = 191
            self.match(nimParser.EQUALS_OPERATOR)
            self.state = 192
            self.rightHandSideStmt()
            self.state = 194
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.SEMI_COLON:
                self.state = 193
                self.match(nimParser.SEMI_COLON)


            self.state = 199
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,21,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 196
                    self.match(nimParser.T__0) 
                self.state = 201
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,21,self._ctx)

            self.state = 203
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.state = 202
                self.match(nimParser.INDENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrintStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ECHO(self):
            return self.getToken(nimParser.ECHO, 0)

        def OPEN_PAREN(self):
            return self.getToken(nimParser.OPEN_PAREN, 0)

        def rightHandSideStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.RightHandSideStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,i)


        def CLOSE_PAREN(self):
            return self.getToken(nimParser.CLOSE_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMA)
            else:
                return self.getToken(nimParser.COMMA, i)

        def getRuleIndex(self):
            return nimParser.RULE_printStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrintStmt" ):
                listener.enterPrintStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrintStmt" ):
                listener.exitPrintStmt(self)




    def printStmt(self):

        localctx = nimParser.PrintStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_printStmt)
        self._la = 0 # Token type
        try:
            self.state = 226
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 205
                self.match(nimParser.ECHO)
                self.state = 206
                self.match(nimParser.OPEN_PAREN)
                self.state = 207
                self.rightHandSideStmt()
                self.state = 212
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nimParser.COMMA:
                    self.state = 208
                    self.match(nimParser.COMMA)
                    self.state = 209
                    self.rightHandSideStmt()
                    self.state = 214
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 215
                self.match(nimParser.CLOSE_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 217
                self.match(nimParser.ECHO)
                self.state = 218
                self.rightHandSideStmt()
                self.state = 223
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nimParser.COMMA:
                    self.state = 219
                    self.match(nimParser.COMMA)
                    self.state = 220
                    self.rightHandSideStmt()
                    self.state = 225
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexIfStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIfStmt(self):
            return self.getTypedRuleContext(nimParser.SimpleIfStmtContext,0)


        def simpleElifStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.SimpleElifStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.SimpleElifStmtContext,i)


        def simpleElseStmt(self):
            return self.getTypedRuleContext(nimParser.SimpleElseStmtContext,0)


        def INDENT(self):
            return self.getToken(nimParser.INDENT, 0)

        def getRuleIndex(self):
            return nimParser.RULE_complexIfStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplexIfStmt" ):
                listener.enterComplexIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplexIfStmt" ):
                listener.exitComplexIfStmt(self)




    def complexIfStmt(self):

        localctx = nimParser.ComplexIfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_complexIfStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 228
            self.simpleIfStmt()
            self.state = 232
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,26,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 229
                    self.simpleElifStmt() 
                self.state = 234
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

            self.state = 236
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.state = 235
                self.simpleElseStmt()


            self.state = 240
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.state = 238
                self.match(nimParser.T__0)
                self.state = 239
                self.match(nimParser.INDENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarComplexIfStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varSimpleIfStmt(self):
            return self.getTypedRuleContext(nimParser.VarSimpleIfStmtContext,0)


        def varSimpleElifStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.VarSimpleElifStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.VarSimpleElifStmtContext,i)


        def varSimpleElseStmt(self):
            return self.getTypedRuleContext(nimParser.VarSimpleElseStmtContext,0)


        def getRuleIndex(self):
            return nimParser.RULE_varComplexIfStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarComplexIfStmt" ):
                listener.enterVarComplexIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarComplexIfStmt" ):
                listener.exitVarComplexIfStmt(self)




    def varComplexIfStmt(self):

        localctx = nimParser.VarComplexIfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_varComplexIfStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 242
            self.varSimpleIfStmt()
            self.state = 246
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,29,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 243
                    self.varSimpleElifStmt() 
                self.state = 248
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

            self.state = 250
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.state = 249
                self.varSimpleElseStmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleIfStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(nimParser.IF, 0)

        def condition(self):
            return self.getTypedRuleContext(nimParser.ConditionContext,0)


        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def NOT(self):
            return self.getToken(nimParser.NOT, 0)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def BREAK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.BREAK)
            else:
                return self.getToken(nimParser.BREAK, i)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.IDENTIFIER)
            else:
                return self.getToken(nimParser.IDENTIFIER, i)

        def CONTINUE(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.CONTINUE)
            else:
                return self.getToken(nimParser.CONTINUE, i)

        def assignStmt(self):
            return self.getTypedRuleContext(nimParser.AssignStmtContext,0)


        def RETURN(self):
            return self.getToken(nimParser.RETURN, 0)

        def OPEN_PAREN(self):
            return self.getToken(nimParser.OPEN_PAREN, 0)

        def rightHandSideStmt(self):
            return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(nimParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return nimParser.RULE_simpleIfStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleIfStmt" ):
                listener.enterSimpleIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleIfStmt" ):
                listener.exitSimpleIfStmt(self)




    def simpleIfStmt(self):

        localctx = nimParser.SimpleIfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_simpleIfStmt)
        self._la = 0 # Token type
        try:
            self.state = 329
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 252
                self.match(nimParser.IF)
                self.state = 254
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.NOT:
                    self.state = 253
                    self.match(nimParser.NOT)


                self.state = 256
                self.condition()
                self.state = 257
                self.match(nimParser.COLON)
                self.state = 276 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 258
                        self.match(nimParser.T__0)
                        self.state = 259
                        self.match(nimParser.INDENT)
                        self.state = 268
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [nimParser.T__0, nimParser.T__6, nimParser.VARIABLE, nimParser.ECHO, nimParser.BLOCK, nimParser.CASE, nimParser.CONST, nimParser.FOR, nimParser.IF, nimParser.LET, nimParser.PROC, nimParser.TYPE, nimParser.WHEN, nimParser.WHILE, nimParser.OPEN_PAREN, nimParser.IDENTIFIER, nimParser.NEW_IDENTIFIER]:
                            self.state = 260
                            self.stmt()
                            pass
                        elif token in [nimParser.BREAK]:
                            self.state = 261
                            self.match(nimParser.BREAK)
                            self.state = 262
                            self.match(nimParser.IDENTIFIER)
                            pass
                        elif token in [nimParser.CONTINUE]:
                            self.state = 263
                            self.match(nimParser.CONTINUE)
                            pass
                        elif token in [nimParser.T__3]:
                            self.state = 264
                            self.match(nimParser.T__3)
                            self.state = 265
                            self.match(nimParser.IDENTIFIER)
                            pass
                        elif token in [nimParser.T__4]:
                            self.state = 266
                            self.match(nimParser.T__4)
                            self.state = 267
                            self.match(nimParser.IDENTIFIER)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 273
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,33,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 270
                                self.match(nimParser.T__0) 
                            self.state = 275
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,33,self._ctx)


                    else:
                        raise NoViableAltException(self)
                    self.state = 278 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,34,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 280
                self.match(nimParser.IF)
                self.state = 282
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.NOT:
                    self.state = 281
                    self.match(nimParser.NOT)


                self.state = 284
                self.condition()
                self.state = 285
                self.match(nimParser.COLON)
                self.state = 286
                self.assignStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 288
                self.match(nimParser.IF)
                self.state = 290
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.NOT:
                    self.state = 289
                    self.match(nimParser.NOT)


                self.state = 292
                self.condition()
                self.state = 293
                self.match(nimParser.COLON)
                self.state = 294
                self.match(nimParser.RETURN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 296
                self.match(nimParser.IF)
                self.state = 298
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.NOT:
                    self.state = 297
                    self.match(nimParser.NOT)


                self.state = 300
                self.match(nimParser.IDENTIFIER)
                self.state = 301
                self.match(nimParser.OPEN_PAREN)
                self.state = 302
                self.rightHandSideStmt()
                self.state = 303
                self.match(nimParser.CLOSE_PAREN)
                self.state = 304
                self.match(nimParser.COLON)
                self.state = 314 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 305
                        self.match(nimParser.T__0)
                        self.state = 306
                        self.match(nimParser.INDENT)
                        self.state = 307
                        self.stmt()
                        self.state = 311
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,38,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 308
                                self.match(nimParser.T__0) 
                            self.state = 313
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,38,self._ctx)


                    else:
                        raise NoViableAltException(self)
                    self.state = 316 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,39,self._ctx)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 318
                self.match(nimParser.IF)
                self.state = 320
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.NOT:
                    self.state = 319
                    self.match(nimParser.NOT)


                self.state = 322
                self.match(nimParser.IDENTIFIER)
                self.state = 323
                self.match(nimParser.OPEN_PAREN)
                self.state = 324
                self.rightHandSideStmt()
                self.state = 325
                self.match(nimParser.CLOSE_PAREN)
                self.state = 326
                self.match(nimParser.COLON)
                self.state = 327
                self.assignStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarSimpleIfStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(nimParser.IF, 0)

        def condition(self):
            return self.getTypedRuleContext(nimParser.ConditionContext,0)


        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def rightHandSideStmt(self):
            return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,0)


        def NEW_IDENTIFIER(self):
            return self.getToken(nimParser.NEW_IDENTIFIER, 0)

        def NOT(self):
            return self.getToken(nimParser.NOT, 0)

        def getRuleIndex(self):
            return nimParser.RULE_varSimpleIfStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarSimpleIfStmt" ):
                listener.enterVarSimpleIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarSimpleIfStmt" ):
                listener.exitVarSimpleIfStmt(self)




    def varSimpleIfStmt(self):

        localctx = nimParser.VarSimpleIfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_varSimpleIfStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 331
            self.match(nimParser.IF)
            self.state = 333
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.NOT:
                self.state = 332
                self.match(nimParser.NOT)


            self.state = 335
            self.condition()
            self.state = 336
            self.match(nimParser.COLON)
            self.state = 339
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nimParser.T__5, nimParser.T__8, nimParser.DIGIT, nimParser.NIL, nimParser.OPEN_PAREN, nimParser.OPEN_BRACK, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.IDENTIFIER, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                self.state = 337
                self.rightHandSideStmt()
                pass
            elif token in [nimParser.NEW_IDENTIFIER]:
                self.state = 338
                self.match(nimParser.NEW_IDENTIFIER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarSimpleElifStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELIF(self):
            return self.getToken(nimParser.ELIF, 0)

        def condition(self):
            return self.getTypedRuleContext(nimParser.ConditionContext,0)


        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def rightHandSideStmt(self):
            return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,0)


        def NEW_IDENTIFIER(self):
            return self.getToken(nimParser.NEW_IDENTIFIER, 0)

        def NOT(self):
            return self.getToken(nimParser.NOT, 0)

        def getRuleIndex(self):
            return nimParser.RULE_varSimpleElifStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarSimpleElifStmt" ):
                listener.enterVarSimpleElifStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarSimpleElifStmt" ):
                listener.exitVarSimpleElifStmt(self)




    def varSimpleElifStmt(self):

        localctx = nimParser.VarSimpleElifStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_varSimpleElifStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 341
            self.match(nimParser.ELIF)
            self.state = 343
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.NOT:
                self.state = 342
                self.match(nimParser.NOT)


            self.state = 345
            self.condition()
            self.state = 346
            self.match(nimParser.COLON)
            self.state = 349
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nimParser.T__5, nimParser.T__8, nimParser.DIGIT, nimParser.NIL, nimParser.OPEN_PAREN, nimParser.OPEN_BRACK, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.IDENTIFIER, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                self.state = 347
                self.rightHandSideStmt()
                pass
            elif token in [nimParser.NEW_IDENTIFIER]:
                self.state = 348
                self.match(nimParser.NEW_IDENTIFIER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarSimpleElseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(nimParser.ELSE, 0)

        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def rightHandSideStmt(self):
            return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,0)


        def NEW_IDENTIFIER(self):
            return self.getToken(nimParser.NEW_IDENTIFIER, 0)

        def INDENT(self):
            return self.getToken(nimParser.INDENT, 0)

        def getRuleIndex(self):
            return nimParser.RULE_varSimpleElseStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarSimpleElseStmt" ):
                listener.enterVarSimpleElseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarSimpleElseStmt" ):
                listener.exitVarSimpleElseStmt(self)




    def varSimpleElseStmt(self):

        localctx = nimParser.VarSimpleElseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_varSimpleElseStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 352
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.INDENT:
                self.state = 351
                self.match(nimParser.INDENT)


            self.state = 354
            self.match(nimParser.ELSE)
            self.state = 355
            self.match(nimParser.COLON)
            self.state = 358
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nimParser.T__5, nimParser.T__8, nimParser.DIGIT, nimParser.NIL, nimParser.OPEN_PAREN, nimParser.OPEN_BRACK, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.IDENTIFIER, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                self.state = 356
                self.rightHandSideStmt()
                pass
            elif token in [nimParser.NEW_IDENTIFIER]:
                self.state = 357
                self.match(nimParser.NEW_IDENTIFIER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleElifStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELIF(self):
            return self.getToken(nimParser.ELIF, 0)

        def rightHandSideStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.RightHandSideStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,i)


        def EQUALS_EQUALS(self):
            return self.getToken(nimParser.EQUALS_EQUALS, 0)

        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def getRuleIndex(self):
            return nimParser.RULE_simpleElifStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleElifStmt" ):
                listener.enterSimpleElifStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleElifStmt" ):
                listener.exitSimpleElifStmt(self)




    def simpleElifStmt(self):

        localctx = nimParser.SimpleElifStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_simpleElifStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 360
            self.match(nimParser.ELIF)
            self.state = 361
            self.rightHandSideStmt()
            self.state = 362
            self.match(nimParser.EQUALS_EQUALS)
            self.state = 363
            self.rightHandSideStmt()
            self.state = 364
            self.match(nimParser.COLON)
            self.state = 374 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 365
                    self.match(nimParser.T__0)
                    self.state = 366
                    self.match(nimParser.INDENT)
                    self.state = 367
                    self.stmt()
                    self.state = 371
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,48,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 368
                            self.match(nimParser.T__0) 
                        self.state = 373
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,48,self._ctx)


                else:
                    raise NoViableAltException(self)
                self.state = 376 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleElseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(nimParser.ELSE, 0)

        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def printStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.PrintStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.PrintStmtContext,i)


        def assignStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.AssignStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.AssignStmtContext,i)


        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def getRuleIndex(self):
            return nimParser.RULE_simpleElseStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleElseStmt" ):
                listener.enterSimpleElseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleElseStmt" ):
                listener.exitSimpleElseStmt(self)




    def simpleElseStmt(self):

        localctx = nimParser.SimpleElseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_simpleElseStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 379
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.INDENT:
                self.state = 378
                self.match(nimParser.INDENT)


            self.state = 381
            self.match(nimParser.ELSE)
            self.state = 382
            self.match(nimParser.COLON)
            self.state = 388 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 388
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [nimParser.T__0]:
                        self.state = 383
                        self.match(nimParser.T__0)
                        self.state = 384
                        self.match(nimParser.INDENT)
                        self.state = 385
                        self.stmt()
                        pass
                    elif token in [nimParser.ECHO]:
                        self.state = 386
                        self.printStmt()
                        pass
                    elif token in [nimParser.IDENTIFIER]:
                        self.state = 387
                        self.assignStmt()
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 390 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,52,self._ctx)

            self.state = 395
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,53,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 392
                    self.match(nimParser.T__0) 
                self.state = 397
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,53,self._ctx)

            self.state = 399
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.state = 398
                self.match(nimParser.INDENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForLoopContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(nimParser.FOR, 0)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.IDENTIFIER)
            else:
                return self.getToken(nimParser.IDENTIFIER, i)

        def IN(self):
            return self.getToken(nimParser.IN, 0)

        def CHAR_LIT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.CHAR_LIT)
            else:
                return self.getToken(nimParser.CHAR_LIT, i)

        def OP6(self):
            return self.getToken(nimParser.OP6, 0)

        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def COMMENT(self):
            return self.getToken(nimParser.COMMENT, 0)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def FORLOOP_RANGE(self):
            return self.getToken(nimParser.FORLOOP_RANGE, 0)

        def methodInvoke(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.MethodInvokeContext)
            else:
                return self.getTypedRuleContext(nimParser.MethodInvokeContext,i)


        def LESS_THAN(self):
            return self.getToken(nimParser.LESS_THAN, 0)

        def NEW_IDENTIFIER(self):
            return self.getToken(nimParser.NEW_IDENTIFIER, 0)

        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.DIGIT)
            else:
                return self.getToken(nimParser.DIGIT, i)

        def AT(self):
            return self.getToken(nimParser.AT, 0)

        def OPEN_BRACK(self):
            return self.getToken(nimParser.OPEN_BRACK, 0)

        def CLOSE_BRACK(self):
            return self.getToken(nimParser.CLOSE_BRACK, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMA)
            else:
                return self.getToken(nimParser.COMMA, i)

        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.LiteralContext)
            else:
                return self.getTypedRuleContext(nimParser.LiteralContext,i)


        def OPEN_PAREN(self):
            return self.getToken(nimParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(nimParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return nimParser.RULE_forLoop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForLoop" ):
                listener.enterForLoop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForLoop" ):
                listener.exitForLoop(self)




    def forLoop(self):

        localctx = nimParser.ForLoopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_forLoop)
        self._la = 0 # Token type
        try:
            self.state = 568
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 401
                self.match(nimParser.FOR)
                self.state = 402
                self.match(nimParser.IDENTIFIER)
                self.state = 403
                self.match(nimParser.IN)
                self.state = 404
                self.match(nimParser.CHAR_LIT)
                self.state = 405
                self.match(nimParser.OP6)
                self.state = 406
                self.match(nimParser.CHAR_LIT)
                self.state = 407
                self.match(nimParser.COLON)
                self.state = 409
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.COMMENT:
                    self.state = 408
                    self.match(nimParser.COMMENT)


                self.state = 414 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 411
                        self.match(nimParser.T__0)
                        self.state = 412
                        self.match(nimParser.INDENT)
                        self.state = 413
                        self.stmt()

                    else:
                        raise NoViableAltException(self)
                    self.state = 416 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,56,self._ctx)

                self.state = 421
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,57,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 418
                        self.match(nimParser.INDENT) 
                    self.state = 423
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,57,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 424
                self.match(nimParser.FOR)
                self.state = 425
                self.match(nimParser.IDENTIFIER)
                self.state = 426
                self.match(nimParser.IN)
                self.state = 429
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.FORLOOP_RANGE]:
                    self.state = 427
                    self.match(nimParser.FORLOOP_RANGE)
                    pass
                elif token in [nimParser.OPEN_PAREN, nimParser.IDENTIFIER]:
                    self.state = 428
                    self.methodInvoke()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 431
                self.match(nimParser.COLON)
                self.state = 433
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.COMMENT:
                    self.state = 432
                    self.match(nimParser.COMMENT)


                self.state = 438 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 435
                        self.match(nimParser.T__0)
                        self.state = 436
                        self.match(nimParser.INDENT)
                        self.state = 437
                        self.stmt()

                    else:
                        raise NoViableAltException(self)
                    self.state = 440 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,60,self._ctx)

                self.state = 445
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,61,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 442
                        self.match(nimParser.INDENT) 
                    self.state = 447
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,61,self._ctx)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 448
                self.match(nimParser.FOR)
                self.state = 449
                self.match(nimParser.IDENTIFIER)
                self.state = 450
                self.match(nimParser.IN)
                self.state = 452 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 451
                    self.match(nimParser.DIGIT)
                    self.state = 454 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==nimParser.DIGIT):
                        break

                self.state = 456
                self.match(nimParser.OP6)
                self.state = 457
                self.match(nimParser.LESS_THAN)
                self.state = 458
                self.match(nimParser.NEW_IDENTIFIER)
                self.state = 459
                self.match(nimParser.COLON)
                self.state = 461
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.COMMENT:
                    self.state = 460
                    self.match(nimParser.COMMENT)


                self.state = 466 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 463
                        self.match(nimParser.T__0)
                        self.state = 464
                        self.match(nimParser.INDENT)
                        self.state = 465
                        self.stmt()

                    else:
                        raise NoViableAltException(self)
                    self.state = 468 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,64,self._ctx)

                self.state = 473
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,65,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 470
                        self.match(nimParser.INDENT) 
                    self.state = 475
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,65,self._ctx)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 476
                self.match(nimParser.FOR)
                self.state = 477
                self.match(nimParser.IDENTIFIER)
                self.state = 482
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nimParser.COMMA:
                    self.state = 478
                    self.match(nimParser.COMMA)
                    self.state = 479
                    self.match(nimParser.IDENTIFIER)
                    self.state = 484
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 485
                self.match(nimParser.IN)
                self.state = 486
                self.match(nimParser.AT)
                self.state = 487
                self.match(nimParser.OPEN_BRACK)
                self.state = 512
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nimParser.DIGIT or ((((_la - 85)) & ~0x3f) == 0 and ((1 << (_la - 85)) & ((1 << (nimParser.NIL - 85)) | (1 << (nimParser.TRIPLESTR_LIT - 85)) | (1 << (nimParser.CHAR_LIT - 85)) | (1 << (nimParser.STR_LIT - 85)) | (1 << (nimParser.RSTR_LIT - 85)) | (1 << (nimParser.INT_LIT - 85)) | (1 << (nimParser.INT8_LIT - 85)) | (1 << (nimParser.INT16_LIT - 85)) | (1 << (nimParser.INT32_LIT - 85)) | (1 << (nimParser.INT64_LIT - 85)) | (1 << (nimParser.UINT_LIT - 85)) | (1 << (nimParser.UINT8_LIT - 85)) | (1 << (nimParser.UINT16_LIT - 85)) | (1 << (nimParser.UINT32_LIT - 85)) | (1 << (nimParser.UINT64_LIT - 85)) | (1 << (nimParser.FLOAT_LIT - 85)) | (1 << (nimParser.FLOAT32_LIT - 85)) | (1 << (nimParser.FLOAT64_LIT - 85)))) != 0):
                    self.state = 494
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                        self.state = 488
                        self.literal()
                        pass
                    elif token in [nimParser.DIGIT]:
                        self.state = 490 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 489
                                self.match(nimParser.DIGIT)

                            else:
                                raise NoViableAltException(self)
                            self.state = 492 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,67,self._ctx)

                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 507
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==nimParser.COMMA:
                        self.state = 496
                        self.match(nimParser.COMMA)
                        self.state = 503
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                            self.state = 497
                            self.literal()
                            pass
                        elif token in [nimParser.DIGIT]:
                            self.state = 499 
                            self._errHandler.sync(self)
                            _alt = 1
                            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                if _alt == 1:
                                    self.state = 498
                                    self.match(nimParser.DIGIT)

                                else:
                                    raise NoViableAltException(self)
                                self.state = 501 
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,69,self._ctx)

                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 509
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 514
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 515
                self.match(nimParser.CLOSE_BRACK)
                self.state = 516
                self.match(nimParser.COLON)
                self.state = 518
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.COMMENT:
                    self.state = 517
                    self.match(nimParser.COMMENT)


                self.state = 523 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 520
                        self.match(nimParser.T__0)
                        self.state = 521
                        self.match(nimParser.INDENT)
                        self.state = 522
                        self.stmt()

                    else:
                        raise NoViableAltException(self)
                    self.state = 525 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,74,self._ctx)

                self.state = 530
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,75,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 527
                        self.match(nimParser.INDENT) 
                    self.state = 532
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 533
                self.match(nimParser.FOR)
                self.state = 534
                self.match(nimParser.IDENTIFIER)
                self.state = 535
                self.match(nimParser.IN)
                self.state = 536
                self.match(nimParser.IDENTIFIER)
                self.state = 537
                self.match(nimParser.OPEN_PAREN)
                self.state = 538
                self.match(nimParser.IDENTIFIER)
                self.state = 539
                self.match(nimParser.CLOSE_PAREN)
                self.state = 540
                self.match(nimParser.COLON)
                self.state = 542
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.COMMENT:
                    self.state = 541
                    self.match(nimParser.COMMENT)


                self.state = 547 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 544
                        self.match(nimParser.T__0)
                        self.state = 545
                        self.match(nimParser.INDENT)
                        self.state = 546
                        self.stmt()

                    else:
                        raise NoViableAltException(self)
                    self.state = 549 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,77,self._ctx)

                self.state = 554
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,78,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 551
                        self.match(nimParser.INDENT) 
                    self.state = 556
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,78,self._ctx)

                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 557
                self.match(nimParser.FOR)
                self.state = 558
                self.match(nimParser.IDENTIFIER)
                self.state = 559
                self.match(nimParser.IN)
                self.state = 560
                self.methodInvoke()
                self.state = 561
                self.match(nimParser.COLON)
                self.state = 562
                self.match(nimParser.T__0)
                self.state = 563
                self.match(nimParser.INDENT)
                self.state = 564
                self.methodInvoke()
                self.state = 566
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
                if la_ == 1:
                    self.state = 565
                    self.match(nimParser.T__0)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileLoopContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(nimParser.WHILE, 0)

        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def condition(self):
            return self.getTypedRuleContext(nimParser.ConditionContext,0)


        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def BREAK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.BREAK)
            else:
                return self.getToken(nimParser.BREAK, i)

        def getRuleIndex(self):
            return nimParser.RULE_whileLoop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileLoop" ):
                listener.enterWhileLoop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileLoop" ):
                listener.exitWhileLoop(self)




    def whileLoop(self):

        localctx = nimParser.WhileLoopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_whileLoop)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 570
            self.match(nimParser.WHILE)
            self.state = 573
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.state = 571
                self.condition()
                pass

            elif la_ == 2:
                self.state = 572
                self.match(nimParser.T__5)
                pass


            self.state = 575
            self.match(nimParser.COLON)
            self.state = 582 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 576
                    self.match(nimParser.T__0)
                    self.state = 577
                    self.match(nimParser.INDENT)
                    self.state = 580
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [nimParser.T__0, nimParser.T__6, nimParser.VARIABLE, nimParser.ECHO, nimParser.BLOCK, nimParser.CASE, nimParser.CONST, nimParser.FOR, nimParser.IF, nimParser.LET, nimParser.PROC, nimParser.TYPE, nimParser.WHEN, nimParser.WHILE, nimParser.OPEN_PAREN, nimParser.IDENTIFIER, nimParser.NEW_IDENTIFIER]:
                        self.state = 578
                        self.stmt()
                        pass
                    elif token in [nimParser.BREAK]:
                        self.state = 579
                        self.match(nimParser.BREAK)
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 584 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,83,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleWhenStmt(self):
            return self.getTypedRuleContext(nimParser.SimpleWhenStmtContext,0)


        def simpleElseStmt(self):
            return self.getTypedRuleContext(nimParser.SimpleElseStmtContext,0)


        def simpleElifStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.SimpleElifStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.SimpleElifStmtContext,i)


        def getRuleIndex(self):
            return nimParser.RULE_whenStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenStmt" ):
                listener.enterWhenStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenStmt" ):
                listener.exitWhenStmt(self)




    def whenStmt(self):

        localctx = nimParser.WhenStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_whenStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 586
            self.simpleWhenStmt()
            self.state = 590
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==nimParser.ELIF:
                self.state = 587
                self.simpleElifStmt()
                self.state = 592
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 593
            self.simpleElseStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleWhenStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(nimParser.WHEN, 0)

        def condition(self):
            return self.getTypedRuleContext(nimParser.ConditionContext,0)


        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def BREAK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.BREAK)
            else:
                return self.getToken(nimParser.BREAK, i)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def getRuleIndex(self):
            return nimParser.RULE_simpleWhenStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleWhenStmt" ):
                listener.enterSimpleWhenStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleWhenStmt" ):
                listener.exitSimpleWhenStmt(self)




    def simpleWhenStmt(self):

        localctx = nimParser.SimpleWhenStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_simpleWhenStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 595
            self.match(nimParser.WHEN)
            self.state = 596
            self.condition()
            self.state = 597
            self.match(nimParser.COLON)
            self.state = 606 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 600
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
                if la_ == 1:
                    self.state = 598
                    self.match(nimParser.T__0)
                    self.state = 599
                    self.match(nimParser.INDENT)


                self.state = 604
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.T__0, nimParser.T__6, nimParser.VARIABLE, nimParser.ECHO, nimParser.BLOCK, nimParser.CASE, nimParser.CONST, nimParser.FOR, nimParser.IF, nimParser.LET, nimParser.PROC, nimParser.TYPE, nimParser.WHEN, nimParser.WHILE, nimParser.OPEN_PAREN, nimParser.IDENTIFIER, nimParser.NEW_IDENTIFIER]:
                    self.state = 602
                    self.stmt()
                    pass
                elif token in [nimParser.BREAK]:
                    self.state = 603
                    self.match(nimParser.BREAK)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 608 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.T__0) | (1 << nimParser.T__6) | (1 << nimParser.VARIABLE) | (1 << nimParser.ECHO) | (1 << nimParser.BLOCK) | (1 << nimParser.BREAK) | (1 << nimParser.CASE) | (1 << nimParser.CONST))) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (nimParser.FOR - 72)) | (1 << (nimParser.IF - 72)) | (1 << (nimParser.LET - 72)) | (1 << (nimParser.PROC - 72)) | (1 << (nimParser.TYPE - 72)) | (1 << (nimParser.WHEN - 72)) | (1 << (nimParser.WHILE - 72)) | (1 << (nimParser.OPEN_PAREN - 72)) | (1 << (nimParser.IDENTIFIER - 72)))) != 0) or _la==nimParser.NEW_IDENTIFIER):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROC(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.PROC)
            else:
                return self.getToken(nimParser.PROC, i)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.IDENTIFIER)
            else:
                return self.getToken(nimParser.IDENTIFIER, i)

        def OPEN_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.OPEN_PAREN)
            else:
                return self.getToken(nimParser.OPEN_PAREN, i)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COLON)
            else:
                return self.getToken(nimParser.COLON, i)

        def dataType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.DataTypeContext)
            else:
                return self.getTypedRuleContext(nimParser.DataTypeContext,i)


        def CLOSE_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.CLOSE_PAREN)
            else:
                return self.getToken(nimParser.CLOSE_PAREN, i)

        def EQUALS_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.EQUALS_OPERATOR)
            else:
                return self.getToken(nimParser.EQUALS_OPERATOR, i)

        def OPEN_BRACK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.OPEN_BRACK)
            else:
                return self.getToken(nimParser.OPEN_BRACK, i)

        def CLOSE_BRACK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.CLOSE_BRACK)
            else:
                return self.getToken(nimParser.CLOSE_BRACK, i)

        def RETURN(self):
            return self.getToken(nimParser.RETURN, 0)

        def rightHandSideStmt(self):
            return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,0)


        def assignStmt(self):
            return self.getTypedRuleContext(nimParser.AssignStmtContext,0)


        def printStmt(self):
            return self.getTypedRuleContext(nimParser.PrintStmtContext,0)


        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def VARIABLE(self):
            return self.getToken(nimParser.VARIABLE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMA)
            else:
                return self.getToken(nimParser.COMMA, i)

        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.LiteralContext)
            else:
                return self.getTypedRuleContext(nimParser.LiteralContext,i)


        def MINUS_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.MINUS_OPERATOR)
            else:
                return self.getToken(nimParser.MINUS_OPERATOR, i)

        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.DIGIT)
            else:
                return self.getToken(nimParser.DIGIT, i)

        def getRuleIndex(self):
            return nimParser.RULE_procBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcBlock" ):
                listener.enterProcBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcBlock" ):
                listener.exitProcBlock(self)




    def procBlock(self):

        localctx = nimParser.ProcBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_procBlock)
        self._la = 0 # Token type
        try:
            self.state = 822
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 610
                self.match(nimParser.PROC)
                self.state = 611
                self.match(nimParser.IDENTIFIER)
                self.state = 615
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.OPEN_BRACK:
                    self.state = 612
                    self.match(nimParser.OPEN_BRACK)
                    self.state = 613
                    self.match(nimParser.IDENTIFIER)
                    self.state = 614
                    self.match(nimParser.CLOSE_BRACK)


                self.state = 617
                self.match(nimParser.OPEN_PAREN)
                self.state = 618
                self.match(nimParser.IDENTIFIER)
                self.state = 619
                self.match(nimParser.COLON)
                self.state = 620
                self.dataType()
                self.state = 621
                self.match(nimParser.CLOSE_PAREN)
                self.state = 624
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.COLON:
                    self.state = 622
                    self.match(nimParser.COLON)
                    self.state = 623
                    self.dataType()


                self.state = 626
                self.match(nimParser.EQUALS_OPERATOR)
                self.state = 664
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.T__0]:
                    self.state = 630 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 627
                            self.match(nimParser.T__0)
                            self.state = 628
                            self.match(nimParser.INDENT)
                            self.state = 629
                            self.stmt()

                        else:
                            raise NoViableAltException(self)
                        self.state = 632 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,90,self._ctx)

                    pass
                elif token in [nimParser.IDENTIFIER]:
                    self.state = 634
                    self.assignStmt()
                    self.state = 638
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,91,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 635
                            self.match(nimParser.T__0) 
                        self.state = 640
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,91,self._ctx)

                    self.state = 646
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,92,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 641
                            self.match(nimParser.T__0)
                            self.state = 642
                            self.match(nimParser.INDENT)
                            self.state = 643
                            self.stmt() 
                        self.state = 648
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,92,self._ctx)

                    pass
                elif token in [nimParser.ECHO]:
                    self.state = 649
                    self.printStmt()
                    self.state = 653
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,93,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 650
                            self.match(nimParser.T__0) 
                        self.state = 655
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,93,self._ctx)

                    self.state = 661
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,94,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 656
                            self.match(nimParser.T__0)
                            self.state = 657
                            self.match(nimParser.INDENT)
                            self.state = 658
                            self.stmt() 
                        self.state = 663
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,94,self._ctx)

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 668
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
                if la_ == 1:
                    self.state = 666
                    self.match(nimParser.RETURN)
                    self.state = 667
                    self.rightHandSideStmt()


                self.state = 671
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
                if la_ == 1:
                    self.state = 670
                    self.match(nimParser.T__0)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 673
                self.match(nimParser.PROC)
                self.state = 674
                self.match(nimParser.T__6)
                self.state = 675
                self.match(nimParser.OPEN_PAREN)
                self.state = 676
                self.match(nimParser.IDENTIFIER)
                self.state = 677
                self.match(nimParser.COLON)
                self.state = 678
                self.match(nimParser.PROC)
                self.state = 679
                self.match(nimParser.OPEN_PAREN)
                self.state = 680
                self.match(nimParser.IDENTIFIER)
                self.state = 681
                self.match(nimParser.COLON)
                self.state = 682
                self.dataType()
                self.state = 683
                self.match(nimParser.CLOSE_PAREN)
                self.state = 684
                self.match(nimParser.CLOSE_PAREN)
                self.state = 687
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.COLON:
                    self.state = 685
                    self.match(nimParser.COLON)
                    self.state = 686
                    self.dataType()


                self.state = 689
                self.match(nimParser.EQUALS_OPERATOR)
                self.state = 727
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.T__0]:
                    self.state = 693 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 690
                        self.match(nimParser.T__0)
                        self.state = 691
                        self.match(nimParser.INDENT)
                        self.state = 692
                        self.stmt()
                        self.state = 695 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==nimParser.T__0):
                            break

                    pass
                elif token in [nimParser.IDENTIFIER]:
                    self.state = 697
                    self.assignStmt()
                    self.state = 701
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,100,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 698
                            self.match(nimParser.T__0) 
                        self.state = 703
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,100,self._ctx)

                    self.state = 709
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==nimParser.T__0:
                        self.state = 704
                        self.match(nimParser.T__0)
                        self.state = 705
                        self.match(nimParser.INDENT)
                        self.state = 706
                        self.stmt()
                        self.state = 711
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [nimParser.ECHO]:
                    self.state = 712
                    self.printStmt()
                    self.state = 716
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,102,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 713
                            self.match(nimParser.T__0) 
                        self.state = 718
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,102,self._ctx)

                    self.state = 724
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==nimParser.T__0:
                        self.state = 719
                        self.match(nimParser.T__0)
                        self.state = 720
                        self.match(nimParser.INDENT)
                        self.state = 721
                        self.stmt()
                        self.state = 726
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 729
                self.match(nimParser.RETURN)
                self.state = 730
                self.rightHandSideStmt()
                self.state = 733
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
                if la_ == 1:
                    self.state = 732
                    self.match(nimParser.T__0)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 735
                self.match(nimParser.PROC)
                self.state = 736
                self.match(nimParser.IDENTIFIER)
                self.state = 740
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.OPEN_BRACK:
                    self.state = 737
                    self.match(nimParser.OPEN_BRACK)
                    self.state = 738
                    self.match(nimParser.IDENTIFIER)
                    self.state = 739
                    self.match(nimParser.CLOSE_BRACK)


                self.state = 742
                self.match(nimParser.OPEN_PAREN)
                self.state = 743
                self.match(nimParser.IDENTIFIER)
                self.state = 744
                self.match(nimParser.COLON)
                self.state = 745
                self.match(nimParser.VARIABLE)
                self.state = 746
                self.match(nimParser.IDENTIFIER)
                self.state = 747
                self.match(nimParser.OPEN_BRACK)
                self.state = 748
                self.match(nimParser.IDENTIFIER)
                self.state = 749
                self.match(nimParser.CLOSE_BRACK)
                self.state = 767
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nimParser.COMMA:
                    self.state = 750
                    self.match(nimParser.COMMA)
                    self.state = 751
                    self.match(nimParser.IDENTIFIER)
                    self.state = 752
                    self.match(nimParser.EQUALS_OPERATOR)
                    self.state = 763
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [nimParser.DIGIT, nimParser.MINUS_OPERATOR]:
                        self.state = 754
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==nimParser.MINUS_OPERATOR:
                            self.state = 753
                            self.match(nimParser.MINUS_OPERATOR)


                        self.state = 757 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 756
                            self.match(nimParser.DIGIT)
                            self.state = 759 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==nimParser.DIGIT):
                                break

                        pass
                    elif token in [nimParser.IDENTIFIER]:
                        self.state = 761
                        self.match(nimParser.IDENTIFIER)
                        pass
                    elif token in [nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                        self.state = 762
                        self.literal()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 769
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 770
                self.match(nimParser.CLOSE_PAREN)
                self.state = 773
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.COLON:
                    self.state = 771
                    self.match(nimParser.COLON)
                    self.state = 772
                    self.dataType()


                self.state = 775
                self.match(nimParser.EQUALS_OPERATOR)
                self.state = 813
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.T__0]:
                    self.state = 779 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 776
                            self.match(nimParser.T__0)
                            self.state = 777
                            self.match(nimParser.INDENT)
                            self.state = 778
                            self.stmt()

                        else:
                            raise NoViableAltException(self)
                        self.state = 781 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,112,self._ctx)

                    pass
                elif token in [nimParser.IDENTIFIER]:
                    self.state = 783
                    self.assignStmt()
                    self.state = 787
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,113,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 784
                            self.match(nimParser.T__0) 
                        self.state = 789
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,113,self._ctx)

                    self.state = 795
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,114,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 790
                            self.match(nimParser.T__0)
                            self.state = 791
                            self.match(nimParser.INDENT)
                            self.state = 792
                            self.stmt() 
                        self.state = 797
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,114,self._ctx)

                    pass
                elif token in [nimParser.ECHO]:
                    self.state = 798
                    self.printStmt()
                    self.state = 802
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,115,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 799
                            self.match(nimParser.T__0) 
                        self.state = 804
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,115,self._ctx)

                    self.state = 810
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,116,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 805
                            self.match(nimParser.T__0)
                            self.state = 806
                            self.match(nimParser.INDENT)
                            self.state = 807
                            self.stmt() 
                        self.state = 812
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,116,self._ctx)

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 817
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
                if la_ == 1:
                    self.state = 815
                    self.match(nimParser.RETURN)
                    self.state = 816
                    self.rightHandSideStmt()


                self.state = 820
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
                if la_ == 1:
                    self.state = 819
                    self.match(nimParser.T__0)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BLOCK(self):
            return self.getToken(nimParser.BLOCK, 0)

        def IDENTIFIER(self):
            return self.getToken(nimParser.IDENTIFIER, 0)

        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def getRuleIndex(self):
            return nimParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = nimParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 824
            self.match(nimParser.BLOCK)
            self.state = 825
            self.match(nimParser.IDENTIFIER)
            self.state = 826
            self.match(nimParser.COLON)
            self.state = 830 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 827
                    self.match(nimParser.T__0)
                    self.state = 828
                    self.match(nimParser.INDENT)
                    self.state = 829
                    self.stmt()

                else:
                    raise NoViableAltException(self)
                self.state = 832 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,121,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(nimParser.TYPE, 0)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.IDENTIFIER)
            else:
                return self.getToken(nimParser.IDENTIFIER, i)

        def EQUALS_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.EQUALS_OPERATOR)
            else:
                return self.getToken(nimParser.EQUALS_OPERATOR, i)

        def OPEN_BRACK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.OPEN_BRACK)
            else:
                return self.getToken(nimParser.OPEN_BRACK, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMA)
            else:
                return self.getToken(nimParser.COMMA, i)

        def dataType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.DataTypeContext)
            else:
                return self.getTypedRuleContext(nimParser.DataTypeContext,i)


        def CLOSE_BRACK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.CLOSE_BRACK)
            else:
                return self.getToken(nimParser.CLOSE_BRACK, i)

        def FORLOOP_RANGE(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.FORLOOP_RANGE)
            else:
                return self.getToken(nimParser.FORLOOP_RANGE, i)

        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.DIGIT)
            else:
                return self.getToken(nimParser.DIGIT, i)

        def getRuleIndex(self):
            return nimParser.RULE_typeBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeBlock" ):
                listener.enterTypeBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeBlock" ):
                listener.exitTypeBlock(self)




    def typeBlock(self):

        localctx = nimParser.TypeBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_typeBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 834
            self.match(nimParser.TYPE)
            self.state = 835
            self.match(nimParser.T__0)
            self.state = 854 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 836
                    self.match(nimParser.INDENT)
                    self.state = 837
                    self.match(nimParser.IDENTIFIER)
                    self.state = 838
                    self.match(nimParser.EQUALS_OPERATOR)
                    self.state = 839
                    self.match(nimParser.T__7)
                    self.state = 840
                    self.match(nimParser.OPEN_BRACK)
                    self.state = 847
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [nimParser.FORLOOP_RANGE]:
                        self.state = 841
                        self.match(nimParser.FORLOOP_RANGE)
                        pass
                    elif token in [nimParser.DIGIT]:
                        self.state = 843 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 842
                            self.match(nimParser.DIGIT)
                            self.state = 845 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==nimParser.DIGIT):
                                break

                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 849
                    self.match(nimParser.COMMA)
                    self.state = 850
                    self.dataType()
                    self.state = 851
                    self.match(nimParser.CLOSE_BRACK)
                    self.state = 852
                    self.match(nimParser.T__0)

                else:
                    raise NoViableAltException(self)
                self.state = 856 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,124,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodInvokeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.IDENTIFIER)
            else:
                return self.getToken(nimParser.IDENTIFIER, i)

        def OPEN_PAREN(self):
            return self.getToken(nimParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(nimParser.CLOSE_PAREN, 0)

        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.LiteralContext)
            else:
                return self.getTypedRuleContext(nimParser.LiteralContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMA)
            else:
                return self.getToken(nimParser.COMMA, i)

        def ADD_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.ADD_OPERATOR)
            else:
                return self.getToken(nimParser.ADD_OPERATOR, i)

        def MINUS_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.MINUS_OPERATOR)
            else:
                return self.getToken(nimParser.MINUS_OPERATOR, i)

        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.DIGIT)
            else:
                return self.getToken(nimParser.DIGIT, i)

        def NEW_IDENTIFIER(self):
            return self.getToken(nimParser.NEW_IDENTIFIER, 0)

        def getRuleIndex(self):
            return nimParser.RULE_methodInvoke

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodInvoke" ):
                listener.enterMethodInvoke(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodInvoke" ):
                listener.exitMethodInvoke(self)




    def methodInvoke(self):

        localctx = nimParser.MethodInvokeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_methodInvoke)
        self._la = 0 # Token type
        try:
            self.state = 912
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nimParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 858
                self.match(nimParser.IDENTIFIER)
                self.state = 859
                self.match(nimParser.OPEN_PAREN)
                self.state = 867
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.IDENTIFIER]:
                    self.state = 860
                    self.match(nimParser.IDENTIFIER)
                    pass
                elif token in [nimParser.DIGIT]:
                    self.state = 862 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 861
                        self.match(nimParser.DIGIT)
                        self.state = 864 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==nimParser.DIGIT):
                            break

                    pass
                elif token in [nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                    self.state = 866
                    self.literal()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 881
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.ADD_OPERATOR) | (1 << nimParser.MINUS_OPERATOR) | (1 << nimParser.COMMA))) != 0):
                    self.state = 869
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.ADD_OPERATOR) | (1 << nimParser.MINUS_OPERATOR) | (1 << nimParser.COMMA))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 877
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [nimParser.IDENTIFIER]:
                        self.state = 870
                        self.match(nimParser.IDENTIFIER)
                        pass
                    elif token in [nimParser.DIGIT]:
                        self.state = 872 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 871
                            self.match(nimParser.DIGIT)
                            self.state = 874 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==nimParser.DIGIT):
                                break

                        pass
                    elif token in [nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                        self.state = 876
                        self.literal()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 883
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 884
                self.match(nimParser.CLOSE_PAREN)
                pass
            elif token in [nimParser.OPEN_PAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 885
                self.match(nimParser.OPEN_PAREN)
                self.state = 893
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.IDENTIFIER]:
                    self.state = 886
                    self.match(nimParser.IDENTIFIER)
                    pass
                elif token in [nimParser.DIGIT]:
                    self.state = 888 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 887
                        self.match(nimParser.DIGIT)
                        self.state = 890 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==nimParser.DIGIT):
                            break

                    pass
                elif token in [nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                    self.state = 892
                    self.literal()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 907
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.ADD_OPERATOR) | (1 << nimParser.MINUS_OPERATOR) | (1 << nimParser.COMMA))) != 0):
                    self.state = 895
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.ADD_OPERATOR) | (1 << nimParser.MINUS_OPERATOR) | (1 << nimParser.COMMA))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 903
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [nimParser.IDENTIFIER]:
                        self.state = 896
                        self.match(nimParser.IDENTIFIER)
                        pass
                    elif token in [nimParser.DIGIT]:
                        self.state = 898 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 897
                            self.match(nimParser.DIGIT)
                            self.state = 900 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==nimParser.DIGIT):
                                break

                        pass
                    elif token in [nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                        self.state = 902
                        self.literal()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 909
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 910
                self.match(nimParser.CLOSE_PAREN)
                self.state = 911
                self.match(nimParser.NEW_IDENTIFIER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstanceMethodInvokeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW_IDENTIFIER(self):
            return self.getToken(nimParser.NEW_IDENTIFIER, 0)

        def OPEN_PAREN(self):
            return self.getToken(nimParser.OPEN_PAREN, 0)

        def rightHandSideStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.RightHandSideStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,i)


        def CLOSE_PAREN(self):
            return self.getToken(nimParser.CLOSE_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMA)
            else:
                return self.getToken(nimParser.COMMA, i)

        def getRuleIndex(self):
            return nimParser.RULE_instanceMethodInvoke

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstanceMethodInvoke" ):
                listener.enterInstanceMethodInvoke(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstanceMethodInvoke" ):
                listener.exitInstanceMethodInvoke(self)




    def instanceMethodInvoke(self):

        localctx = nimParser.InstanceMethodInvokeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_instanceMethodInvoke)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 914
            self.match(nimParser.NEW_IDENTIFIER)
            self.state = 915
            self.match(nimParser.OPEN_PAREN)
            self.state = 916
            self.rightHandSideStmt()
            self.state = 921
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==nimParser.COMMA:
                self.state = 917
                self.match(nimParser.COMMA)
                self.state = 918
                self.rightHandSideStmt()
                self.state = 923
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 924
            self.match(nimParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForEachStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(nimParser.OPEN_PAREN, 0)

        def IDENTIFIER(self):
            return self.getToken(nimParser.IDENTIFIER, 0)

        def CLOSE_PAREN(self):
            return self.getToken(nimParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return nimParser.RULE_forEachStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForEachStmt" ):
                listener.enterForEachStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForEachStmt" ):
                listener.exitForEachStmt(self)




    def forEachStmt(self):

        localctx = nimParser.ForEachStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_forEachStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 926
            self.match(nimParser.T__6)
            self.state = 927
            self.match(nimParser.OPEN_PAREN)
            self.state = 928
            self.match(nimParser.IDENTIFIER)
            self.state = 929
            self.match(nimParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rightHandSideStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.RightHandSideStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,i)


        def LESS_THAN(self):
            return self.getToken(nimParser.LESS_THAN, 0)

        def GREATER_THAN(self):
            return self.getToken(nimParser.GREATER_THAN, 0)

        def EQUALS_EQUALS(self):
            return self.getToken(nimParser.EQUALS_EQUALS, 0)

        def EQUALS_OPERATOR(self):
            return self.getToken(nimParser.EQUALS_OPERATOR, 0)

        def IDENTIFIER(self):
            return self.getToken(nimParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return nimParser.RULE_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition" ):
                listener.enterCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition" ):
                listener.exitCondition(self)




    def condition(self):

        localctx = nimParser.ConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_condition)
        self._la = 0 # Token type
        try:
            self.state = 948
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 931
                self.rightHandSideStmt()
                self.state = 941
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.LESS_THAN]:
                    self.state = 932
                    self.match(nimParser.LESS_THAN)
                    self.state = 934
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==nimParser.EQUALS_OPERATOR:
                        self.state = 933
                        self.match(nimParser.EQUALS_OPERATOR)


                    pass
                elif token in [nimParser.GREATER_THAN]:
                    self.state = 936
                    self.match(nimParser.GREATER_THAN)
                    self.state = 938
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==nimParser.EQUALS_OPERATOR:
                        self.state = 937
                        self.match(nimParser.EQUALS_OPERATOR)


                    pass
                elif token in [nimParser.EQUALS_EQUALS]:
                    self.state = 940
                    self.match(nimParser.EQUALS_EQUALS)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 943
                self.rightHandSideStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 945
                self.match(nimParser.T__5)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 946
                self.match(nimParser.T__8)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 947
                self.match(nimParser.IDENTIFIER)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Character_literalsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_LIT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.CHAR_LIT)
            else:
                return self.getToken(nimParser.CHAR_LIT, i)

        def getRuleIndex(self):
            return nimParser.RULE_character_literals

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharacter_literals" ):
                listener.enterCharacter_literals(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharacter_literals" ):
                listener.exitCharacter_literals(self)




    def character_literals(self):

        localctx = nimParser.Character_literalsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_character_literals)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 951 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 950
                self.match(nimParser.CHAR_LIT)
                self.state = 953 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==nimParser.CHAR_LIT):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class String_literalsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STR_LIT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.STR_LIT)
            else:
                return self.getToken(nimParser.STR_LIT, i)

        def getRuleIndex(self):
            return nimParser.RULE_string_literals

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_literals" ):
                listener.enterString_literals(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_literals" ):
                listener.exitString_literals(self)




    def string_literals(self):

        localctx = nimParser.String_literalsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_string_literals)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 956 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 955
                self.match(nimParser.STR_LIT)
                self.state = 958 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==nimParser.STR_LIT):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RightHandSideStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STR_LIT(self):
            return self.getToken(nimParser.STR_LIT, 0)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.IDENTIFIER)
            else:
                return self.getToken(nimParser.IDENTIFIER, i)

        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.LiteralContext)
            else:
                return self.getTypedRuleContext(nimParser.LiteralContext,i)


        def ADD_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.ADD_OPERATOR)
            else:
                return self.getToken(nimParser.ADD_OPERATOR, i)

        def AND_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.AND_OPERATOR)
            else:
                return self.getToken(nimParser.AND_OPERATOR, i)

        def MINUS_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.MINUS_OPERATOR)
            else:
                return self.getToken(nimParser.MINUS_OPERATOR, i)

        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.DIGIT)
            else:
                return self.getToken(nimParser.DIGIT, i)

        def OPEN_BRACK(self):
            return self.getToken(nimParser.OPEN_BRACK, 0)

        def CLOSE_BRACK(self):
            return self.getToken(nimParser.CLOSE_BRACK, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMA)
            else:
                return self.getToken(nimParser.COMMA, i)

        def MUL_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.MUL_OPERATOR)
            else:
                return self.getToken(nimParser.MUL_OPERATOR, i)

        def DIV(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.DIV)
            else:
                return self.getToken(nimParser.DIV, i)

        def methodInvoke(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.MethodInvokeContext)
            else:
                return self.getTypedRuleContext(nimParser.MethodInvokeContext,i)


        def getRuleIndex(self):
            return nimParser.RULE_rightHandSideStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRightHandSideStmt" ):
                listener.enterRightHandSideStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRightHandSideStmt" ):
                listener.exitRightHandSideStmt(self)




    def rightHandSideStmt(self):

        localctx = nimParser.RightHandSideStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_rightHandSideStmt)
        self._la = 0 # Token type
        try:
            self.state = 1051
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 960
                self.match(nimParser.T__5)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 961
                self.match(nimParser.T__8)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 962
                self.match(nimParser.STR_LIT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 970
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.DIGIT]:
                    self.state = 964 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 963
                        self.match(nimParser.DIGIT)
                        self.state = 966 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==nimParser.DIGIT):
                            break

                    pass
                elif token in [nimParser.IDENTIFIER]:
                    self.state = 968
                    self.match(nimParser.IDENTIFIER)
                    pass
                elif token in [nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                    self.state = 969
                    self.literal()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 984
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.ADD_OPERATOR) | (1 << nimParser.MINUS_OPERATOR) | (1 << nimParser.AND_OPERATOR))) != 0):
                    self.state = 972
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.ADD_OPERATOR) | (1 << nimParser.MINUS_OPERATOR) | (1 << nimParser.AND_OPERATOR))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 980
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [nimParser.DIGIT]:
                        self.state = 974 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 973
                            self.match(nimParser.DIGIT)
                            self.state = 976 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==nimParser.DIGIT):
                                break

                        pass
                    elif token in [nimParser.IDENTIFIER]:
                        self.state = 978
                        self.match(nimParser.IDENTIFIER)
                        pass
                    elif token in [nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                        self.state = 979
                        self.literal()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 986
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 987
                self.match(nimParser.IDENTIFIER)
                self.state = 988
                self.match(nimParser.OPEN_BRACK)
                self.state = 995
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.IDENTIFIER]:
                    self.state = 989
                    self.match(nimParser.IDENTIFIER)
                    pass
                elif token in [nimParser.DIGIT]:
                    self.state = 991 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 990
                        self.match(nimParser.DIGIT)
                        self.state = 993 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==nimParser.DIGIT):
                            break

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1009
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.DIV) | (1 << nimParser.ADD_OPERATOR) | (1 << nimParser.MUL_OPERATOR) | (1 << nimParser.MINUS_OPERATOR) | (1 << nimParser.COMMA))) != 0):
                    self.state = 997
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.DIV) | (1 << nimParser.ADD_OPERATOR) | (1 << nimParser.MUL_OPERATOR) | (1 << nimParser.MINUS_OPERATOR) | (1 << nimParser.COMMA))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1005
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                        self.state = 998
                        self.literal()
                        pass
                    elif token in [nimParser.DIGIT]:
                        self.state = 1000 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 999
                            self.match(nimParser.DIGIT)
                            self.state = 1002 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==nimParser.DIGIT):
                                break

                        pass
                    elif token in [nimParser.IDENTIFIER]:
                        self.state = 1004
                        self.match(nimParser.IDENTIFIER)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1011
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1012
                self.match(nimParser.CLOSE_BRACK)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1013
                self.methodInvoke()
                self.state = 1018
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.ADD_OPERATOR) | (1 << nimParser.MUL_OPERATOR) | (1 << nimParser.MINUS_OPERATOR))) != 0):
                    self.state = 1014
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.ADD_OPERATOR) | (1 << nimParser.MUL_OPERATOR) | (1 << nimParser.MINUS_OPERATOR))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1015
                    self.methodInvoke()
                    self.state = 1020
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1021
                self.literal()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1022
                self.match(nimParser.OPEN_BRACK)
                self.state = 1047
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nimParser.DIGIT or ((((_la - 85)) & ~0x3f) == 0 and ((1 << (_la - 85)) & ((1 << (nimParser.NIL - 85)) | (1 << (nimParser.TRIPLESTR_LIT - 85)) | (1 << (nimParser.CHAR_LIT - 85)) | (1 << (nimParser.STR_LIT - 85)) | (1 << (nimParser.RSTR_LIT - 85)) | (1 << (nimParser.INT_LIT - 85)) | (1 << (nimParser.INT8_LIT - 85)) | (1 << (nimParser.INT16_LIT - 85)) | (1 << (nimParser.INT32_LIT - 85)) | (1 << (nimParser.INT64_LIT - 85)) | (1 << (nimParser.UINT_LIT - 85)) | (1 << (nimParser.UINT8_LIT - 85)) | (1 << (nimParser.UINT16_LIT - 85)) | (1 << (nimParser.UINT32_LIT - 85)) | (1 << (nimParser.UINT64_LIT - 85)) | (1 << (nimParser.FLOAT_LIT - 85)) | (1 << (nimParser.FLOAT32_LIT - 85)) | (1 << (nimParser.FLOAT64_LIT - 85)))) != 0):
                    self.state = 1029
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                        self.state = 1023
                        self.literal()
                        pass
                    elif token in [nimParser.DIGIT]:
                        self.state = 1025 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 1024
                                self.match(nimParser.DIGIT)

                            else:
                                raise NoViableAltException(self)
                            self.state = 1027 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,154,self._ctx)

                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1042
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==nimParser.COMMA:
                        self.state = 1031
                        self.match(nimParser.COMMA)
                        self.state = 1038
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                            self.state = 1032
                            self.literal()
                            pass
                        elif token in [nimParser.DIGIT]:
                            self.state = 1034 
                            self._errHandler.sync(self)
                            _alt = 1
                            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                if _alt == 1:
                                    self.state = 1033
                                    self.match(nimParser.DIGIT)

                                else:
                                    raise NoViableAltException(self)
                                self.state = 1036 
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,156,self._ctx)

                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 1044
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1049
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1050
                self.match(nimParser.CLOSE_BRACK)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return nimParser.RULE_dataType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataType" ):
                listener.enterDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataType" ):
                listener.exitDataType(self)




    def dataType(self):

        localctx = nimParser.DataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_dataType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1053
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.T__9) | (1 << nimParser.T__10) | (1 << nimParser.T__11))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleCaseStmt(self):
            return self.getTypedRuleContext(nimParser.SimpleCaseStmtContext,0)


        def simpleElseStmt(self):
            return self.getTypedRuleContext(nimParser.SimpleElseStmtContext,0)


        def simpleOfStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.SimpleOfStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.SimpleOfStmtContext,i)


        def simpleElifOfStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.SimpleElifOfStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.SimpleElifOfStmtContext,i)


        def getRuleIndex(self):
            return nimParser.RULE_caseStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseStmt" ):
                listener.enterCaseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseStmt" ):
                listener.exitCaseStmt(self)




    def caseStmt(self):

        localctx = nimParser.CaseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_caseStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1055
            self.simpleCaseStmt()
            self.state = 1059
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,161,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1056
                    self.simpleOfStmt() 
                self.state = 1061
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,161,self._ctx)

            self.state = 1065
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==nimParser.ELIF:
                self.state = 1062
                self.simpleElifOfStmt()
                self.state = 1067
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1068
            self.simpleElseStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleOfStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OF(self):
            return self.getToken(nimParser.OF, 0)

        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.IDENTIFIER)
            else:
                return self.getToken(nimParser.IDENTIFIER, i)

        def STR_LIT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.STR_LIT)
            else:
                return self.getToken(nimParser.STR_LIT, i)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMA)
            else:
                return self.getToken(nimParser.COMMA, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def RETURN(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.RETURN)
            else:
                return self.getToken(nimParser.RETURN, i)

        def rightHandSideStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.RightHandSideStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,i)


        def getRuleIndex(self):
            return nimParser.RULE_simpleOfStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleOfStmt" ):
                listener.enterSimpleOfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleOfStmt" ):
                listener.exitSimpleOfStmt(self)




    def simpleOfStmt(self):

        localctx = nimParser.SimpleOfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_simpleOfStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1071
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.INDENT:
                self.state = 1070
                self.match(nimParser.INDENT)


            self.state = 1073
            self.match(nimParser.OF)
            self.state = 1074
            _la = self._input.LA(1)
            if not(_la==nimParser.STR_LIT or _la==nimParser.IDENTIFIER):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1079
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==nimParser.COMMA:
                self.state = 1075
                self.match(nimParser.COMMA)
                self.state = 1076
                _la = self._input.LA(1)
                if not(_la==nimParser.STR_LIT or _la==nimParser.IDENTIFIER):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1081
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1082
            self.match(nimParser.COLON)
            self.state = 1095 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1085
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
                if la_ == 1:
                    self.state = 1083
                    self.match(nimParser.T__0)
                    self.state = 1084
                    self.match(nimParser.INDENT)


                self.state = 1090
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.T__0, nimParser.T__6, nimParser.VARIABLE, nimParser.ECHO, nimParser.BLOCK, nimParser.CASE, nimParser.CONST, nimParser.FOR, nimParser.IF, nimParser.LET, nimParser.PROC, nimParser.TYPE, nimParser.WHEN, nimParser.WHILE, nimParser.OPEN_PAREN, nimParser.IDENTIFIER, nimParser.NEW_IDENTIFIER]:
                    self.state = 1087
                    self.stmt()
                    pass
                elif token in [nimParser.RETURN]:
                    self.state = 1088
                    self.match(nimParser.RETURN)
                    self.state = 1089
                    self.rightHandSideStmt()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1093
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
                if la_ == 1:
                    self.state = 1092
                    self.match(nimParser.T__0)


                self.state = 1097 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.T__0) | (1 << nimParser.T__6) | (1 << nimParser.VARIABLE) | (1 << nimParser.ECHO) | (1 << nimParser.BLOCK) | (1 << nimParser.CASE) | (1 << nimParser.CONST))) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (nimParser.FOR - 72)) | (1 << (nimParser.IF - 72)) | (1 << (nimParser.LET - 72)) | (1 << (nimParser.PROC - 72)) | (1 << (nimParser.RETURN - 72)) | (1 << (nimParser.TYPE - 72)) | (1 << (nimParser.WHEN - 72)) | (1 << (nimParser.WHILE - 72)) | (1 << (nimParser.OPEN_PAREN - 72)) | (1 << (nimParser.IDENTIFIER - 72)))) != 0) or _la==nimParser.NEW_IDENTIFIER):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleElifOfStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELIF(self):
            return self.getToken(nimParser.ELIF, 0)

        def rightHandSideStmt(self):
            return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,0)


        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def COMMENT(self):
            return self.getToken(nimParser.COMMENT, 0)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def getRuleIndex(self):
            return nimParser.RULE_simpleElifOfStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleElifOfStmt" ):
                listener.enterSimpleElifOfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleElifOfStmt" ):
                listener.exitSimpleElifOfStmt(self)




    def simpleElifOfStmt(self):

        localctx = nimParser.SimpleElifOfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_simpleElifOfStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1099
            self.match(nimParser.ELIF)
            self.state = 1100
            self.rightHandSideStmt()
            self.state = 1101
            self.match(nimParser.COLON)
            self.state = 1103
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.COMMENT:
                self.state = 1102
                self.match(nimParser.COMMENT)


            self.state = 1110 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1105
                self.match(nimParser.T__0)
                self.state = 1107
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.INDENT:
                    self.state = 1106
                    self.match(nimParser.INDENT)


                self.state = 1109
                self.stmt()
                self.state = 1112 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==nimParser.T__0):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleCaseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(nimParser.CASE, 0)

        def IDENTIFIER(self):
            return self.getToken(nimParser.IDENTIFIER, 0)

        def COMMENT(self):
            return self.getToken(nimParser.COMMENT, 0)

        def getRuleIndex(self):
            return nimParser.RULE_simpleCaseStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleCaseStmt" ):
                listener.enterSimpleCaseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleCaseStmt" ):
                listener.exitSimpleCaseStmt(self)




    def simpleCaseStmt(self):

        localctx = nimParser.SimpleCaseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_simpleCaseStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1114
            self.match(nimParser.CASE)
            self.state = 1115
            self.match(nimParser.IDENTIFIER)
            self.state = 1117
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.COMMENT:
                self.state = 1116
                self.match(nimParser.COMMENT)


            self.state = 1120
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.T__0:
                self.state = 1119
                self.match(nimParser.T__0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmptyStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return nimParser.RULE_emptyStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptyStmt" ):
                listener.enterEmptyStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptyStmt" ):
                listener.exitEmptyStmt(self)




    def emptyStmt(self):

        localctx = nimParser.EmptyStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_emptyStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1122
            self.match(nimParser.T__0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommentStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(nimParser.COMMENT, 0)

        def INDENT(self):
            return self.getToken(nimParser.INDENT, 0)

        def getRuleIndex(self):
            return nimParser.RULE_commentStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommentStmt" ):
                listener.enterCommentStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommentStmt" ):
                listener.exitCommentStmt(self)




    def commentStmt(self):

        localctx = nimParser.CommentStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_commentStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1125
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.INDENT:
                self.state = 1124
                self.match(nimParser.INDENT)


            self.state = 1127
            self.match(nimParser.COMMENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUALS_OPERATOR(self):
            return self.getToken(nimParser.EQUALS_OPERATOR, 0)

        def ADD_OPERATOR(self):
            return self.getToken(nimParser.ADD_OPERATOR, 0)

        def MUL_OPERATOR(self):
            return self.getToken(nimParser.MUL_OPERATOR, 0)

        def MINUS_OPERATOR(self):
            return self.getToken(nimParser.MINUS_OPERATOR, 0)

        def DIV_OPERATOR(self):
            return self.getToken(nimParser.DIV_OPERATOR, 0)

        def BITWISE_NOT_OPERATOR(self):
            return self.getToken(nimParser.BITWISE_NOT_OPERATOR, 0)

        def AND_OPERATOR(self):
            return self.getToken(nimParser.AND_OPERATOR, 0)

        def OR_OPERATOR(self):
            return self.getToken(nimParser.OR_OPERATOR, 0)

        def LESS_THAN(self):
            return self.getToken(nimParser.LESS_THAN, 0)

        def GREATER_THAN(self):
            return self.getToken(nimParser.GREATER_THAN, 0)

        def NOT_OPERATOR(self):
            return self.getToken(nimParser.NOT_OPERATOR, 0)

        def XOR_OPERATOR(self):
            return self.getToken(nimParser.XOR_OPERATOR, 0)

        def getRuleIndex(self):
            return nimParser.RULE_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator" ):
                listener.enterOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator" ):
                listener.exitOperator(self)




    def operator(self):

        localctx = nimParser.OperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1129
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.EQUALS_OPERATOR) | (1 << nimParser.ADD_OPERATOR) | (1 << nimParser.MUL_OPERATOR) | (1 << nimParser.MINUS_OPERATOR) | (1 << nimParser.DIV_OPERATOR) | (1 << nimParser.BITWISE_NOT_OPERATOR) | (1 << nimParser.AND_OPERATOR) | (1 << nimParser.OR_OPERATOR) | (1 << nimParser.LESS_THAN) | (1 << nimParser.GREATER_THAN) | (1 << nimParser.NOT_OPERATOR) | (1 << nimParser.XOR_OPERATOR))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_LIT(self):
            return self.getToken(nimParser.INT_LIT, 0)

        def INT8_LIT(self):
            return self.getToken(nimParser.INT8_LIT, 0)

        def INT16_LIT(self):
            return self.getToken(nimParser.INT16_LIT, 0)

        def INT32_LIT(self):
            return self.getToken(nimParser.INT32_LIT, 0)

        def INT64_LIT(self):
            return self.getToken(nimParser.INT64_LIT, 0)

        def UINT_LIT(self):
            return self.getToken(nimParser.UINT_LIT, 0)

        def UINT8_LIT(self):
            return self.getToken(nimParser.UINT8_LIT, 0)

        def UINT16_LIT(self):
            return self.getToken(nimParser.UINT16_LIT, 0)

        def UINT32_LIT(self):
            return self.getToken(nimParser.UINT32_LIT, 0)

        def UINT64_LIT(self):
            return self.getToken(nimParser.UINT64_LIT, 0)

        def FLOAT_LIT(self):
            return self.getToken(nimParser.FLOAT_LIT, 0)

        def FLOAT32_LIT(self):
            return self.getToken(nimParser.FLOAT32_LIT, 0)

        def FLOAT64_LIT(self):
            return self.getToken(nimParser.FLOAT64_LIT, 0)

        def STR_LIT(self):
            return self.getToken(nimParser.STR_LIT, 0)

        def RSTR_LIT(self):
            return self.getToken(nimParser.RSTR_LIT, 0)

        def TRIPLESTR_LIT(self):
            return self.getToken(nimParser.TRIPLESTR_LIT, 0)

        def CHAR_LIT(self):
            return self.getToken(nimParser.CHAR_LIT, 0)

        def NIL(self):
            return self.getToken(nimParser.NIL, 0)

        def getRuleIndex(self):
            return nimParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = nimParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1131
            _la = self._input.LA(1)
            if not(((((_la - 85)) & ~0x3f) == 0 and ((1 << (_la - 85)) & ((1 << (nimParser.NIL - 85)) | (1 << (nimParser.TRIPLESTR_LIT - 85)) | (1 << (nimParser.CHAR_LIT - 85)) | (1 << (nimParser.STR_LIT - 85)) | (1 << (nimParser.RSTR_LIT - 85)) | (1 << (nimParser.INT_LIT - 85)) | (1 << (nimParser.INT8_LIT - 85)) | (1 << (nimParser.INT16_LIT - 85)) | (1 << (nimParser.INT32_LIT - 85)) | (1 << (nimParser.INT64_LIT - 85)) | (1 << (nimParser.UINT_LIT - 85)) | (1 << (nimParser.UINT8_LIT - 85)) | (1 << (nimParser.UINT16_LIT - 85)) | (1 << (nimParser.UINT32_LIT - 85)) | (1 << (nimParser.UINT64_LIT - 85)) | (1 << (nimParser.FLOAT_LIT - 85)) | (1 << (nimParser.FLOAT32_LIT - 85)) | (1 << (nimParser.FLOAT64_LIT - 85)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx






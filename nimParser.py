# Generated from nim.g4 by ANTLR 4.7.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u009b")
        buf.write("\u059c\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\3\2\3\2\7\2W\n\2\f\2\16\2")
        buf.write("Z\13\2\7\2\\\n\2\f\2\16\2_\13\2\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\5\3t\n\3\3\4\3\4\3\4\5\4y\n\4\3\4\3\4\3\4\7\4~\n\4\f")
        buf.write("\4\16\4\u0081\13\4\3\4\3\4\3\4\5\4\u0086\n\4\3\4\7\4\u0089")
        buf.write("\n\4\f\4\16\4\u008c\13\4\3\4\3\4\5\4\u0090\n\4\3\4\3\4")
        buf.write("\7\4\u0094\n\4\f\4\16\4\u0097\13\4\3\4\7\4\u009a\n\4\f")
        buf.write("\4\16\4\u009d\13\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4")
        buf.write("\5\4\u00a8\n\4\3\4\6\4\u00ab\n\4\r\4\16\4\u00ac\3\4\5")
        buf.write("\4\u00b0\n\4\3\4\3\4\5\4\u00b4\n\4\3\4\6\4\u00b7\n\4\r")
        buf.write("\4\16\4\u00b8\3\4\5\4\u00bc\n\4\7\4\u00be\n\4\f\4\16\4")
        buf.write("\u00c1\13\4\3\4\6\4\u00c4\n\4\r\4\16\4\u00c5\3\5\3\5\3")
        buf.write("\5\5\5\u00cb\n\5\3\5\3\5\5\5\u00cf\n\5\3\5\3\5\5\5\u00d3")
        buf.write("\n\5\6\5\u00d5\n\5\r\5\16\5\u00d6\3\6\3\6\3\6\5\6\u00dc")
        buf.write("\n\6\3\6\3\6\5\6\u00e0\n\6\3\6\3\6\5\6\u00e4\n\6\6\6\u00e6")
        buf.write("\n\6\r\6\16\6\u00e7\3\7\3\7\3\7\5\7\u00ed\n\7\3\7\3\7")
        buf.write("\5\7\u00f1\n\7\3\7\5\7\u00f4\n\7\3\7\7\7\u00f7\n\7\f\7")
        buf.write("\16\7\u00fa\13\7\3\7\5\7\u00fd\n\7\3\7\3\7\3\7\3\7\3\7")
        buf.write("\3\7\5\7\u0105\n\7\3\b\3\b\3\b\3\b\3\b\7\b\u010c\n\b\f")
        buf.write("\b\16\b\u010f\13\b\3\b\3\b\3\b\3\b\3\b\3\b\7\b\u0117\n")
        buf.write("\b\f\b\16\b\u011a\13\b\3\b\3\b\5\b\u011e\n\b\3\t\3\t\3")
        buf.write("\t\3\t\3\t\3\n\3\n\5\n\u0127\n\n\3\n\7\n\u012a\n\n\f\n")
        buf.write("\16\n\u012d\13\n\3\n\5\n\u0130\n\n\3\n\3\n\5\n\u0134\n")
        buf.write("\n\3\13\3\13\7\13\u0138\n\13\f\13\16\13\u013b\13\13\3")
        buf.write("\13\5\13\u013e\n\13\3\f\3\f\5\f\u0142\n\f\3\f\3\f\3\f")
        buf.write("\3\f\3\f\3\f\5\f\u014a\n\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f")
        buf.write("\3\f\3\f\3\f\3\f\3\f\5\f\u0158\n\f\6\f\u015a\n\f\r\f\16")
        buf.write("\f\u015b\3\f\3\f\5\f\u0160\n\f\3\f\3\f\3\f\3\f\3\f\3\f")
        buf.write("\3\f\3\f\6\f\u016a\n\f\r\f\16\f\u016b\3\f\6\f\u016f\n")
        buf.write("\f\r\f\16\f\u0170\6\f\u0173\n\f\r\f\16\f\u0174\3\f\3\f")
        buf.write("\5\f\u0179\n\f\3\f\3\f\3\f\3\f\3\f\3\f\5\f\u0181\n\f\3")
        buf.write("\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\7\f\u018c\n\f\f\f\16")
        buf.write("\f\u018f\13\f\6\f\u0191\n\f\r\f\16\f\u0192\3\f\3\f\5\f")
        buf.write("\u0197\n\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\5\f\u01a0\n\f\3")
        buf.write("\r\3\r\5\r\u01a4\n\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u01ac")
        buf.write("\n\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\5")
        buf.write("\r\u01ba\n\r\6\r\u01bc\n\r\r\r\16\r\u01bd\3\r\3\r\5\r")
        buf.write("\u01c2\n\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\6\r\u01cc\n")
        buf.write("\r\r\r\16\r\u01cd\3\r\6\r\u01d1\n\r\r\r\16\r\u01d2\6\r")
        buf.write("\u01d5\n\r\r\r\16\r\u01d6\3\r\3\r\5\r\u01db\n\r\3\r\3")
        buf.write("\r\3\r\3\r\3\r\3\r\5\r\u01e3\n\r\3\r\3\r\3\r\3\r\3\r\3")
        buf.write("\r\3\r\3\r\3\r\7\r\u01ee\n\r\f\r\16\r\u01f1\13\r\6\r\u01f3")
        buf.write("\n\r\r\r\16\r\u01f4\3\r\3\r\5\r\u01f9\n\r\3\r\3\r\3\r")
        buf.write("\3\r\3\r\3\r\3\r\5\r\u0202\n\r\3\16\3\16\5\16\u0206\n")
        buf.write("\16\3\16\3\16\3\16\3\16\5\16\u020c\n\16\3\17\3\17\5\17")
        buf.write("\u0210\n\17\3\17\3\17\3\17\3\17\5\17\u0216\n\17\3\20\5")
        buf.write("\20\u0219\n\20\3\20\3\20\3\20\3\20\5\20\u021f\n\20\3\21")
        buf.write("\5\21\u0222\n\21\3\21\3\21\3\21\3\21\3\21\3\21\5\21\u022a")
        buf.write("\n\21\6\21\u022c\n\21\r\21\16\21\u022d\3\21\3\21\6\21")
        buf.write("\u0232\n\21\r\21\16\21\u0233\3\21\7\21\u0237\n\21\f\21")
        buf.write("\16\21\u023a\13\21\3\21\5\21\u023d\n\21\3\22\3\22\3\22")
        buf.write("\3\22\3\22\3\22\3\22\3\22\5\22\u0247\n\22\3\22\3\22\3")
        buf.write("\22\6\22\u024c\n\22\r\22\16\22\u024d\3\22\7\22\u0251\n")
        buf.write("\22\f\22\16\22\u0254\13\22\3\22\3\22\3\22\3\22\3\22\5")
        buf.write("\22\u025b\n\22\3\22\3\22\5\22\u025f\n\22\3\22\3\22\3\22")
        buf.write("\6\22\u0264\n\22\r\22\16\22\u0265\3\22\7\22\u0269\n\22")
        buf.write("\f\22\16\22\u026c\13\22\3\22\3\22\3\22\3\22\6\22\u0272")
        buf.write("\n\22\r\22\16\22\u0273\3\22\3\22\3\22\3\22\3\22\5\22\u027b")
        buf.write("\n\22\3\22\3\22\3\22\6\22\u0280\n\22\r\22\16\22\u0281")
        buf.write("\3\22\7\22\u0285\n\22\f\22\16\22\u0288\13\22\3\22\3\22")
        buf.write("\3\22\3\22\7\22\u028e\n\22\f\22\16\22\u0291\13\22\3\22")
        buf.write("\3\22\3\22\3\22\3\22\6\22\u0298\n\22\r\22\16\22\u0299")
        buf.write("\5\22\u029c\n\22\3\22\3\22\3\22\6\22\u02a1\n\22\r\22\16")
        buf.write("\22\u02a2\5\22\u02a5\n\22\7\22\u02a7\n\22\f\22\16\22\u02aa")
        buf.write("\13\22\7\22\u02ac\n\22\f\22\16\22\u02af\13\22\3\22\3\22")
        buf.write("\3\22\5\22\u02b4\n\22\3\22\3\22\3\22\6\22\u02b9\n\22\r")
        buf.write("\22\16\22\u02ba\3\22\7\22\u02be\n\22\f\22\16\22\u02c1")
        buf.write("\13\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\5")
        buf.write("\22\u02cc\n\22\3\22\3\22\3\22\6\22\u02d1\n\22\r\22\16")
        buf.write("\22\u02d2\3\22\7\22\u02d6\n\22\f\22\16\22\u02d9\13\22")
        buf.write("\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\5\22\u02e4")
        buf.write("\n\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\5\22")
        buf.write("\u02ef\n\22\5\22\u02f1\n\22\3\23\3\23\3\23\5\23\u02f6")
        buf.write("\n\23\3\23\3\23\3\23\3\23\3\23\3\23\5\23\u02fe\n\23\5")
        buf.write("\23\u0300\n\23\6\23\u0302\n\23\r\23\16\23\u0303\3\24\3")
        buf.write("\24\7\24\u0308\n\24\f\24\16\24\u030b\13\24\3\24\3\24\3")
        buf.write("\25\3\25\3\25\3\25\3\25\5\25\u0314\n\25\3\25\3\25\5\25")
        buf.write("\u0318\n\25\6\25\u031a\n\25\r\25\16\25\u031b\3\26\3\26")
        buf.write("\3\26\3\26\3\26\5\26\u0323\n\26\3\26\3\26\3\26\3\26\3")
        buf.write("\26\3\26\5\26\u032b\n\26\3\26\5\26\u032e\n\26\6\26\u0330")
        buf.write("\n\26\r\26\16\26\u0331\3\26\3\26\3\26\5\26\u0337\n\26")
        buf.write("\3\26\3\26\3\26\3\26\6\26\u033d\n\26\r\26\16\26\u033e")
        buf.write("\3\26\3\26\7\26\u0343\n\26\f\26\16\26\u0346\13\26\3\26")
        buf.write("\3\26\3\26\7\26\u034b\n\26\f\26\16\26\u034e\13\26\3\26")
        buf.write("\3\26\7\26\u0352\n\26\f\26\16\26\u0355\13\26\3\26\3\26")
        buf.write("\3\26\7\26\u035a\n\26\f\26\16\26\u035d\13\26\5\26\u035f")
        buf.write("\n\26\3\26\3\26\5\26\u0363\n\26\3\26\5\26\u0366\n\26\3")
        buf.write("\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26")
        buf.write("\3\26\3\26\3\26\5\26\u0376\n\26\3\26\3\26\3\26\3\26\6")
        buf.write("\26\u037c\n\26\r\26\16\26\u037d\3\26\3\26\7\26\u0382\n")
        buf.write("\26\f\26\16\26\u0385\13\26\3\26\3\26\3\26\7\26\u038a\n")
        buf.write("\26\f\26\16\26\u038d\13\26\3\26\3\26\7\26\u0391\n\26\f")
        buf.write("\26\16\26\u0394\13\26\3\26\3\26\3\26\7\26\u0399\n\26\f")
        buf.write("\26\16\26\u039c\13\26\5\26\u039e\n\26\3\26\3\26\3\26\3")
        buf.write("\26\5\26\u03a4\n\26\3\26\3\26\3\26\3\26\3\26\5\26\u03ab")
        buf.write("\n\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26")
        buf.write("\3\26\3\26\5\26\u03b9\n\26\3\26\6\26\u03bc\n\26\r\26\16")
        buf.write("\26\u03bd\3\26\3\26\5\26\u03c2\n\26\7\26\u03c4\n\26\f")
        buf.write("\26\16\26\u03c7\13\26\3\26\3\26\3\26\5\26\u03cc\n\26\3")
        buf.write("\26\3\26\3\26\3\26\6\26\u03d2\n\26\r\26\16\26\u03d3\3")
        buf.write("\26\3\26\7\26\u03d8\n\26\f\26\16\26\u03db\13\26\3\26\3")
        buf.write("\26\3\26\7\26\u03e0\n\26\f\26\16\26\u03e3\13\26\3\26\3")
        buf.write("\26\7\26\u03e7\n\26\f\26\16\26\u03ea\13\26\3\26\3\26\3")
        buf.write("\26\7\26\u03ef\n\26\f\26\16\26\u03f2\13\26\5\26\u03f4")
        buf.write("\n\26\3\26\3\26\5\26\u03f8\n\26\3\26\5\26\u03fb\n\26\5")
        buf.write("\26\u03fd\n\26\3\27\3\27\3\27\3\27\3\27\3\27\6\27\u0405")
        buf.write("\n\27\r\27\16\27\u0406\3\30\3\30\3\30\3\30\3\30\3\30\3")
        buf.write("\30\3\30\3\30\6\30\u0412\n\30\r\30\16\30\u0413\5\30\u0416")
        buf.write("\n\30\3\30\3\30\3\30\3\30\3\30\6\30\u041d\n\30\r\30\16")
        buf.write("\30\u041e\3\31\3\31\3\31\3\31\6\31\u0425\n\31\r\31\16")
        buf.write("\31\u0426\3\31\3\31\5\31\u042b\n\31\3\31\3\31\3\31\6\31")
        buf.write("\u0430\n\31\r\31\16\31\u0431\3\31\3\31\5\31\u0436\n\31")
        buf.write("\7\31\u0438\n\31\f\31\16\31\u043b\13\31\3\31\3\31\3\31")
        buf.write("\3\31\5\31\u0441\n\31\3\31\3\31\3\31\3\31\6\31\u0447\n")
        buf.write("\31\r\31\16\31\u0448\3\31\5\31\u044c\n\31\3\31\3\31\3")
        buf.write("\31\6\31\u0451\n\31\r\31\16\31\u0452\3\31\5\31\u0456\n")
        buf.write("\31\7\31\u0458\n\31\f\31\16\31\u045b\13\31\3\31\3\31\3")
        buf.write("\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\7\31")
        buf.write("\u0469\n\31\f\31\16\31\u046c\13\31\5\31\u046e\n\31\3\31")
        buf.write("\3\31\3\31\5\31\u0473\n\31\3\31\5\31\u0476\n\31\3\32\3")
        buf.write("\32\3\32\3\32\3\32\7\32\u047d\n\32\f\32\16\32\u0480\13")
        buf.write("\32\3\32\3\32\3\33\3\33\3\33\3\33\3\33\3\34\3\34\3\34")
        buf.write("\3\34\7\34\u048d\n\34\f\34\16\34\u0490\13\34\3\34\3\34")
        buf.write("\5\34\u0494\n\34\3\34\3\34\3\34\3\34\3\34\3\34\7\34\u049c")
        buf.write("\n\34\f\34\16\34\u049f\13\34\5\34\u04a1\n\34\3\35\3\35")
        buf.write("\3\35\7\35\u04a6\n\35\f\35\16\35\u04a9\13\35\3\36\3\36")
        buf.write("\3\36\5\36\u04ae\n\36\3\36\3\36\3\36\3\36\5\36\u04b4\n")
        buf.write("\36\3\36\5\36\u04b7\n\36\3\36\3\36\3\36\3\36\3\36\5\36")
        buf.write("\u04be\n\36\3\37\6\37\u04c1\n\37\r\37\16\37\u04c2\3 \6")
        buf.write(" \u04c6\n \r \16 \u04c7\3!\3!\3!\3!\6!\u04ce\n!\r!\16")
        buf.write("!\u04cf\3!\3!\5!\u04d4\n!\3!\3!\6!\u04d8\n!\r!\16!\u04d9")
        buf.write("\3!\3!\5!\u04de\n!\7!\u04e0\n!\f!\16!\u04e3\13!\3!\3!")
        buf.write("\3!\3!\5!\u04e9\n!\3!\6!\u04ec\n!\r!\16!\u04ed\5!\u04f0")
        buf.write("\n!\3!\3!\5!\u04f4\n!\3!\3!\5!\u04f8\n!\3!\6!\u04fb\n")
        buf.write("!\r!\16!\u04fc\3!\5!\u0500\n!\7!\u0502\n!\f!\16!\u0505")
        buf.write("\13!\3!\3!\3!\3!\3!\6!\u050c\n!\r!\16!\u050d\3!\5!\u0511")
        buf.write("\n!\7!\u0513\n!\f!\16!\u0516\13!\3!\3!\3!\5!\u051b\n!")
        buf.write("\3!\3!\6!\u051f\n!\r!\16!\u0520\5!\u0523\n!\3!\3!\5!\u0527")
        buf.write("\n!\3!\3!\6!\u052b\n!\r!\16!\u052c\5!\u052f\n!\7!\u0531")
        buf.write("\n!\f!\16!\u0534\13!\7!\u0536\n!\f!\16!\u0539\13!\3!\3")
        buf.write("!\3!\3!\3!\3!\5!\u0541\n!\7!\u0543\n!\f!\16!\u0546\13")
        buf.write("!\3!\3!\5!\u054a\n!\3\"\3\"\3#\3#\7#\u0550\n#\f#\16#\u0553")
        buf.write("\13#\3#\7#\u0556\n#\f#\16#\u0559\13#\3#\3#\3$\5$\u055e")
        buf.write("\n$\3$\3$\3$\3$\7$\u0564\n$\f$\16$\u0567\13$\3$\3$\3$")
        buf.write("\5$\u056c\n$\3$\3$\3$\5$\u0571\n$\3$\5$\u0574\n$\6$\u0576")
        buf.write("\n$\r$\16$\u0577\3%\3%\3%\3%\5%\u057e\n%\3%\3%\5%\u0582")
        buf.write("\n%\3%\6%\u0585\n%\r%\16%\u0586\3&\3&\3&\5&\u058c\n&\3")
        buf.write("&\5&\u058f\n&\3\'\3\'\3(\5(\u0594\n(\3(\3(\3)\3)\3*\3")
        buf.write("*\3*\2\2+\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&")
        buf.write("(*,.\60\62\64\668:<>@BDFHJLNPR\2\20\3\2\3\4\3\2\3\5\6")
        buf.write("\2\37\37\'\'))\64\64\5\2\'\'))\64\64\5\2\37\37\'\'\64")
        buf.write("\64\5\2\27\27\31\31,-\6\2\37\37\'\')),,\5\2\33\33\')\64")
        buf.write("\64\3\2\')\4\2\'\'))\3\2\17\21\4\2uu\177\177\3\2&\61\7")
        buf.write("\2ZZsv\u0082\u0082\u0087\u0091\u0093\u0093\2\u069e\2]")
        buf.write("\3\2\2\2\4s\3\2\2\2\6u\3\2\2\2\b\u00c7\3\2\2\2\n\u00d8")
        buf.write("\3\2\2\2\f\u0104\3\2\2\2\16\u011d\3\2\2\2\20\u011f\3\2")
        buf.write("\2\2\22\u0124\3\2\2\2\24\u0135\3\2\2\2\26\u019f\3\2\2")
        buf.write("\2\30\u0201\3\2\2\2\32\u0203\3\2\2\2\34\u020d\3\2\2\2")
        buf.write("\36\u0218\3\2\2\2 \u0221\3\2\2\2\"\u02f0\3\2\2\2$\u02f2")
        buf.write("\3\2\2\2&\u0305\3\2\2\2(\u030e\3\2\2\2*\u03fc\3\2\2\2")
        buf.write(",\u03fe\3\2\2\2.\u0408\3\2\2\2\60\u0475\3\2\2\2\62\u0477")
        buf.write("\3\2\2\2\64\u0483\3\2\2\2\66\u04a0\3\2\2\28\u04a2\3\2")
        buf.write("\2\2:\u04bd\3\2\2\2<\u04c0\3\2\2\2>\u04c5\3\2\2\2@\u0549")
        buf.write("\3\2\2\2B\u054b\3\2\2\2D\u054d\3\2\2\2F\u055d\3\2\2\2")
        buf.write("H\u0579\3\2\2\2J\u0588\3\2\2\2L\u0590\3\2\2\2N\u0593\3")
        buf.write("\2\2\2P\u0597\3\2\2\2R\u0599\3\2\2\2TX\5\4\3\2UW\t\2\2")
        buf.write("\2VU\3\2\2\2WZ\3\2\2\2XV\3\2\2\2XY\3\2\2\2Y\\\3\2\2\2")
        buf.write("ZX\3\2\2\2[T\3\2\2\2\\_\3\2\2\2][\3\2\2\2]^\3\2\2\2^\3")
        buf.write("\3\2\2\2_]\3\2\2\2`t\5\6\4\2at\5\f\7\2bt\5\16\b\2ct\5")
        buf.write("\b\5\2dt\5\n\6\2et\5\22\n\2ft\5\"\22\2gt\5$\23\2ht\5&")
        buf.write("\24\2it\5*\26\2jt\5,\27\2kt\5.\30\2lt\5\60\31\2mt\5\62")
        buf.write("\32\2nt\5L\'\2ot\5\64\33\2pt\5D#\2qt\5\66\34\2rt\5\20")
        buf.write("\t\2s`\3\2\2\2sa\3\2\2\2sb\3\2\2\2sc\3\2\2\2sd\3\2\2\2")
        buf.write("se\3\2\2\2sf\3\2\2\2sg\3\2\2\2sh\3\2\2\2si\3\2\2\2sj\3")
        buf.write("\2\2\2sk\3\2\2\2sl\3\2\2\2sm\3\2\2\2sn\3\2\2\2so\3\2\2")
        buf.write("\2sp\3\2\2\2sq\3\2\2\2sr\3\2\2\2t\5\3\2\2\2u\u00c3\7\30")
        buf.write("\2\2vw\7\3\2\2wy\7\23\2\2xv\3\2\2\2xy\3\2\2\2yz\3\2\2")
        buf.write("\2z\177\7\177\2\2{|\7\64\2\2|~\7\177\2\2}{\3\2\2\2~\u0081")
        buf.write("\3\2\2\2\177}\3\2\2\2\177\u0080\3\2\2\2\u0080\u0082\3")
        buf.write("\2\2\2\u0081\177\3\2\2\2\u0082\u0085\7\63\2\2\u0083\u0086")
        buf.write("\5B\"\2\u0084\u0086\7\177\2\2\u0085\u0083\3\2\2\2\u0085")
        buf.write("\u0084\3\2\2\2\u0086\u008a\3\2\2\2\u0087\u0089\7\3\2\2")
        buf.write("\u0088\u0087\3\2\2\2\u0089\u008c\3\2\2\2\u008a\u0088\3")
        buf.write("\2\2\2\u008a\u008b\3\2\2\2\u008b\u00c4\3\2\2\2\u008c\u008a")
        buf.write("\3\2\2\2\u008d\u008e\7\3\2\2\u008e\u0090\7\23\2\2\u008f")
        buf.write("\u008d\3\2\2\2\u008f\u0090\3\2\2\2\u0090\u0091\3\2\2\2")
        buf.write("\u0091\u0095\7\5\2\2\u0092\u0094\n\3\2\2\u0093\u0092\3")
        buf.write("\2\2\2\u0094\u0097\3\2\2\2\u0095\u0093\3\2\2\2\u0095\u0096")
        buf.write("\3\2\2\2\u0096\u009b\3\2\2\2\u0097\u0095\3\2\2\2\u0098")
        buf.write("\u009a\7\3\2\2\u0099\u0098\3\2\2\2\u009a\u009d\3\2\2\2")
        buf.write("\u009b\u0099\3\2\2\2\u009b\u009c\3\2\2\2\u009c\u00c4\3")
        buf.write("\2\2\2\u009d\u009b\3\2\2\2\u009e\u00c4\5\f\7\2\u009f\u00a0")
        buf.write("\7\177\2\2\u00a0\u00a1\7&\2\2\u00a1\u00c4\5\24\13\2\u00a2")
        buf.write("\u00a3\7\177\2\2\u00a3\u00a4\7&\2\2\u00a4\u00a5\7z\2\2")
        buf.write("\u00a5\u00af\7p\2\2\u00a6\u00a8\7)\2\2\u00a7\u00a6\3\2")
        buf.write("\2\2\u00a7\u00a8\3\2\2\2\u00a8\u00aa\3\2\2\2\u00a9\u00ab")
        buf.write("\7\22\2\2\u00aa\u00a9\3\2\2\2\u00ab\u00ac\3\2\2\2\u00ac")
        buf.write("\u00aa\3\2\2\2\u00ac\u00ad\3\2\2\2\u00ad\u00b0\3\2\2\2")
        buf.write("\u00ae\u00b0\7\177\2\2\u00af\u00a7\3\2\2\2\u00af\u00ae")
        buf.write("\3\2\2\2\u00b0\u00bf\3\2\2\2\u00b1\u00bb\7\64\2\2\u00b2")
        buf.write("\u00b4\7)\2\2\u00b3\u00b2\3\2\2\2\u00b3\u00b4\3\2\2\2")
        buf.write("\u00b4\u00b6\3\2\2\2\u00b5\u00b7\7\22\2\2\u00b6\u00b5")
        buf.write("\3\2\2\2\u00b7\u00b8\3\2\2\2\u00b8\u00b6\3\2\2\2\u00b8")
        buf.write("\u00b9\3\2\2\2\u00b9\u00bc\3\2\2\2\u00ba\u00bc\7\177\2")
        buf.write("\2\u00bb\u00b3\3\2\2\2\u00bb\u00ba\3\2\2\2\u00bc\u00be")
        buf.write("\3\2\2\2\u00bd\u00b1\3\2\2\2\u00be\u00c1\3\2\2\2\u00bf")
        buf.write("\u00bd\3\2\2\2\u00bf\u00c0\3\2\2\2\u00c0\u00c2\3\2\2\2")
        buf.write("\u00c1\u00bf\3\2\2\2\u00c2\u00c4\7q\2\2\u00c3x\3\2\2\2")
        buf.write("\u00c3\u008f\3\2\2\2\u00c3\u009e\3\2\2\2\u00c3\u009f\3")
        buf.write("\2\2\2\u00c3\u00a2\3\2\2\2\u00c4\u00c5\3\2\2\2\u00c5\u00c3")
        buf.write("\3\2\2\2\u00c5\u00c6\3\2\2\2\u00c6\7\3\2\2\2\u00c7\u00d4")
        buf.write("\7?\2\2\u00c8\u00c9\7\3\2\2\u00c9\u00cb\7\23\2\2\u00ca")
        buf.write("\u00c8\3\2\2\2\u00ca\u00cb\3\2\2\2\u00cb\u00cc\3\2\2\2")
        buf.write("\u00cc\u00ce\5\f\7\2\u00cd\u00cf\7\3\2\2\u00ce\u00cd\3")
        buf.write("\2\2\2\u00ce\u00cf\3\2\2\2\u00cf\u00d2\3\2\2\2\u00d0\u00d1")
        buf.write("\7\23\2\2\u00d1\u00d3\7{\2\2\u00d2\u00d0\3\2\2\2\u00d2")
        buf.write("\u00d3\3\2\2\2\u00d3\u00d5\3\2\2\2\u00d4\u00ca\3\2\2\2")
        buf.write("\u00d5\u00d6\3\2\2\2\u00d6\u00d4\3\2\2\2\u00d6\u00d7\3")
        buf.write("\2\2\2\u00d7\t\3\2\2\2\u00d8\u00e5\7V\2\2\u00d9\u00da")
        buf.write("\7\3\2\2\u00da\u00dc\7\23\2\2\u00db\u00d9\3\2\2\2\u00db")
        buf.write("\u00dc\3\2\2\2\u00dc\u00dd\3\2\2\2\u00dd\u00df\5\f\7\2")
        buf.write("\u00de\u00e0\7\3\2\2\u00df\u00de\3\2\2\2\u00df\u00e0\3")
        buf.write("\2\2\2\u00e0\u00e3\3\2\2\2\u00e1\u00e2\7\23\2\2\u00e2")
        buf.write("\u00e4\7{\2\2\u00e3\u00e1\3\2\2\2\u00e3\u00e4\3\2\2\2")
        buf.write("\u00e4\u00e6\3\2\2\2\u00e5\u00db\3\2\2\2\u00e6\u00e7\3")
        buf.write("\2\2\2\u00e7\u00e5\3\2\2\2\u00e7\u00e8\3\2\2\2\u00e8\13")
        buf.write("\3\2\2\2\u00e9\u00ea\7\177\2\2\u00ea\u00ec\7&\2\2\u00eb")
        buf.write("\u00ed\7z\2\2\u00ec\u00eb\3\2\2\2\u00ec\u00ed\3\2\2\2")
        buf.write("\u00ed\u00f0\3\2\2\2\u00ee\u00f1\5\62\32\2\u00ef\u00f1")
        buf.write("\5@!\2\u00f0\u00ee\3\2\2\2\u00f0\u00ef\3\2\2\2\u00f1\u00f3")
        buf.write("\3\2\2\2\u00f2\u00f4\7\65\2\2\u00f3\u00f2\3\2\2\2\u00f3")
        buf.write("\u00f4\3\2\2\2\u00f4\u00f8\3\2\2\2\u00f5\u00f7\7\3\2\2")
        buf.write("\u00f6\u00f5\3\2\2\2\u00f7\u00fa\3\2\2\2\u00f8\u00f6\3")
        buf.write("\2\2\2\u00f8\u00f9\3\2\2\2\u00f9\u00fc\3\2\2\2\u00fa\u00f8")
        buf.write("\3\2\2\2\u00fb\u00fd\7\23\2\2\u00fc\u00fb\3\2\2\2\u00fc")
        buf.write("\u00fd\3\2\2\2\u00fd\u0105\3\2\2\2\u00fe\u00ff\7\177\2")
        buf.write("\2\u00ff\u0100\7&\2\2\u0100\u0101\5\60\31\2\u0101\u0102")
        buf.write("\7\'\2\2\u0102\u0103\5R*\2\u0103\u0105\3\2\2\2\u0104\u00e9")
        buf.write("\3\2\2\2\u0104\u00fe\3\2\2\2\u0105\r\3\2\2\2\u0106\u0107")
        buf.write("\7 \2\2\u0107\u0108\7l\2\2\u0108\u010d\5@!\2\u0109\u010a")
        buf.write("\7\64\2\2\u010a\u010c\5@!\2\u010b\u0109\3\2\2\2\u010c")
        buf.write("\u010f\3\2\2\2\u010d\u010b\3\2\2\2\u010d\u010e\3\2\2\2")
        buf.write("\u010e\u0110\3\2\2\2\u010f\u010d\3\2\2\2\u0110\u0111\7")
        buf.write("m\2\2\u0111\u011e\3\2\2\2\u0112\u0113\7 \2\2\u0113\u0118")
        buf.write("\5@!\2\u0114\u0115\7\64\2\2\u0115\u0117\5@!\2\u0116\u0114")
        buf.write("\3\2\2\2\u0117\u011a\3\2\2\2\u0118\u0116\3\2\2\2\u0118")
        buf.write("\u0119\3\2\2\2\u0119\u011e\3\2\2\2\u011a\u0118\3\2\2\2")
        buf.write("\u011b\u011c\7 \2\2\u011c\u011e\5\60\31\2\u011d\u0106")
        buf.write("\3\2\2\2\u011d\u0112\3\2\2\2\u011d\u011b\3\2\2\2\u011e")
        buf.write("\17\3\2\2\2\u011f\u0120\7\6\2\2\u0120\u0121\5R*\2\u0121")
        buf.write("\u0122\7%\2\2\u0122\u0123\5R*\2\u0123\21\3\2\2\2\u0124")
        buf.write("\u0126\5\26\f\2\u0125\u0127\7\23\2\2\u0126\u0125\3\2\2")
        buf.write("\2\u0126\u0127\3\2\2\2\u0127\u012b\3\2\2\2\u0128\u012a")
        buf.write("\5\30\r\2\u0129\u0128\3\2\2\2\u012a\u012d\3\2\2\2\u012b")
        buf.write("\u0129\3\2\2\2\u012b\u012c\3\2\2\2\u012c\u012f\3\2\2\2")
        buf.write("\u012d\u012b\3\2\2\2\u012e\u0130\5 \21\2\u012f\u012e\3")
        buf.write("\2\2\2\u012f\u0130\3\2\2\2\u0130\u0133\3\2\2\2\u0131\u0132")
        buf.write("\7\3\2\2\u0132\u0134\7\23\2\2\u0133\u0131\3\2\2\2\u0133")
        buf.write("\u0134\3\2\2\2\u0134\23\3\2\2\2\u0135\u0139\5\32\16\2")
        buf.write("\u0136\u0138\5\34\17\2\u0137\u0136\3\2\2\2\u0138\u013b")
        buf.write("\3\2\2\2\u0139\u0137\3\2\2\2\u0139\u013a\3\2\2\2\u013a")
        buf.write("\u013d\3\2\2\2\u013b\u0139\3\2\2\2\u013c\u013e\5\36\20")
        buf.write("\2\u013d\u013c\3\2\2\2\u013d\u013e\3\2\2\2\u013e\25\3")
        buf.write("\2\2\2\u013f\u0141\7P\2\2\u0140\u0142\7\32\2\2\u0141\u0140")
        buf.write("\3\2\2\2\u0141\u0142\3\2\2\2\u0142\u0143\3\2\2\2\u0143")
        buf.write("\u0144\58\35\2\u0144\u0145\7\63\2\2\u0145\u0146\5\f\7")
        buf.write("\2\u0146\u01a0\3\2\2\2\u0147\u0149\7P\2\2\u0148\u014a")
        buf.write("\7\32\2\2\u0149\u0148\3\2\2\2\u0149\u014a\3\2\2\2\u014a")
        buf.write("\u014b\3\2\2\2\u014b\u014c\58\35\2\u014c\u0159\7\63\2")
        buf.write("\2\u014d\u014e\7\3\2\2\u014e\u0157\7\23\2\2\u014f\u0158")
        buf.write("\5\4\3\2\u0150\u0151\7;\2\2\u0151\u0158\7\177\2\2\u0152")
        buf.write("\u0158\7@\2\2\u0153\u0154\7\7\2\2\u0154\u0158\7\177\2")
        buf.write("\2\u0155\u0156\7\b\2\2\u0156\u0158\7\177\2\2\u0157\u014f")
        buf.write("\3\2\2\2\u0157\u0150\3\2\2\2\u0157\u0152\3\2\2\2\u0157")
        buf.write("\u0153\3\2\2\2\u0157\u0155\3\2\2\2\u0158\u015a\3\2\2\2")
        buf.write("\u0159\u014d\3\2\2\2\u015a\u015b\3\2\2\2\u015b\u0159\3")
        buf.write("\2\2\2\u015b\u015c\3\2\2\2\u015c\u01a0\3\2\2\2\u015d\u015f")
        buf.write("\7P\2\2\u015e\u0160\7\32\2\2\u015f\u015e\3\2\2\2\u015f")
        buf.write("\u0160\3\2\2\2\u0160\u0161\3\2\2\2\u0161\u0162\58\35\2")
        buf.write("\u0162\u0172\7\63\2\2\u0163\u0164\7\3\2\2\u0164\u0169")
        buf.write("\7\23\2\2\u0165\u016a\5\4\3\2\u0166\u0167\7;\2\2\u0167")
        buf.write("\u016a\7\177\2\2\u0168\u016a\7@\2\2\u0169\u0165\3\2\2")
        buf.write("\2\u0169\u0166\3\2\2\2\u0169\u0168\3\2\2\2\u016a\u016b")
        buf.write("\3\2\2\2\u016b\u0169\3\2\2\2\u016b\u016c\3\2\2\2\u016c")
        buf.write("\u016e\3\2\2\2\u016d\u016f\7\3\2\2\u016e\u016d\3\2\2\2")
        buf.write("\u016f\u0170\3\2\2\2\u0170\u016e\3\2\2\2\u0170\u0171\3")
        buf.write("\2\2\2\u0171\u0173\3\2\2\2\u0172\u0163\3\2\2\2\u0173\u0174")
        buf.write("\3\2\2\2\u0174\u0172\3\2\2\2\u0174\u0175\3\2\2\2\u0175")
        buf.write("\u01a0\3\2\2\2\u0176\u0178\7P\2\2\u0177\u0179\7\32\2\2")
        buf.write("\u0178\u0177\3\2\2\2\u0178\u0179\3\2\2\2\u0179\u017a\3")
        buf.write("\2\2\2\u017a\u017b\58\35\2\u017b\u017c\7\63\2\2\u017c")
        buf.write("\u017d\7b\2\2\u017d\u01a0\3\2\2\2\u017e\u0180\7P\2\2\u017f")
        buf.write("\u0181\7\32\2\2\u0180\u017f\3\2\2\2\u0180\u0181\3\2\2")
        buf.write("\2\u0181\u0182\3\2\2\2\u0182\u0183\7\177\2\2\u0183\u0184")
        buf.write("\7l\2\2\u0184\u0185\5@!\2\u0185\u0186\7m\2\2\u0186\u0190")
        buf.write("\7\63\2\2\u0187\u0188\7\3\2\2\u0188\u0189\7\23\2\2\u0189")
        buf.write("\u018d\5\4\3\2\u018a\u018c\7\3\2\2\u018b\u018a\3\2\2\2")
        buf.write("\u018c\u018f\3\2\2\2\u018d\u018b\3\2\2\2\u018d\u018e\3")
        buf.write("\2\2\2\u018e\u0191\3\2\2\2\u018f\u018d\3\2\2\2\u0190\u0187")
        buf.write("\3\2\2\2\u0191\u0192\3\2\2\2\u0192\u0190\3\2\2\2\u0192")
        buf.write("\u0193\3\2\2\2\u0193\u01a0\3\2\2\2\u0194\u0196\7P\2\2")
        buf.write("\u0195\u0197\7\32\2\2\u0196\u0195\3\2\2\2\u0196\u0197")
        buf.write("\3\2\2\2\u0197\u0198\3\2\2\2\u0198\u0199\7\177\2\2\u0199")
        buf.write("\u019a\7l\2\2\u019a\u019b\5@!\2\u019b\u019c\7m\2\2\u019c")
        buf.write("\u019d\7\63\2\2\u019d\u019e\5\f\7\2\u019e\u01a0\3\2\2")
        buf.write("\2\u019f\u013f\3\2\2\2\u019f\u0147\3\2\2\2\u019f\u015d")
        buf.write("\3\2\2\2\u019f\u0176\3\2\2\2\u019f\u017e\3\2\2\2\u019f")
        buf.write("\u0194\3\2\2\2\u01a0\27\3\2\2\2\u01a1\u01a3\7F\2\2\u01a2")
        buf.write("\u01a4\7\32\2\2\u01a3\u01a2\3\2\2\2\u01a3\u01a4\3\2\2")
        buf.write("\2\u01a4\u01a5\3\2\2\2\u01a5\u01a6\58\35\2\u01a6\u01a7")
        buf.write("\7\63\2\2\u01a7\u01a8\5\f\7\2\u01a8\u0202\3\2\2\2\u01a9")
        buf.write("\u01ab\7F\2\2\u01aa\u01ac\7\32\2\2\u01ab\u01aa\3\2\2\2")
        buf.write("\u01ab\u01ac\3\2\2\2\u01ac\u01ad\3\2\2\2\u01ad\u01ae\5")
        buf.write("8\35\2\u01ae\u01bb\7\63\2\2\u01af\u01b0\7\3\2\2\u01b0")
        buf.write("\u01b9\7\23\2\2\u01b1\u01ba\5\4\3\2\u01b2\u01b3\7;\2\2")
        buf.write("\u01b3\u01ba\7\177\2\2\u01b4\u01ba\7@\2\2\u01b5\u01b6")
        buf.write("\7\7\2\2\u01b6\u01ba\7\177\2\2\u01b7\u01b8\7\b\2\2\u01b8")
        buf.write("\u01ba\7\177\2\2\u01b9\u01b1\3\2\2\2\u01b9\u01b2\3\2\2")
        buf.write("\2\u01b9\u01b4\3\2\2\2\u01b9\u01b5\3\2\2\2\u01b9\u01b7")
        buf.write("\3\2\2\2\u01ba\u01bc\3\2\2\2\u01bb\u01af\3\2\2\2\u01bc")
        buf.write("\u01bd\3\2\2\2\u01bd\u01bb\3\2\2\2\u01bd\u01be\3\2\2\2")
        buf.write("\u01be\u0202\3\2\2\2\u01bf\u01c1\7F\2\2\u01c0\u01c2\7")
        buf.write("\32\2\2\u01c1\u01c0\3\2\2\2\u01c1\u01c2\3\2\2\2\u01c2")
        buf.write("\u01c3\3\2\2\2\u01c3\u01c4\58\35\2\u01c4\u01d4\7\63\2")
        buf.write("\2\u01c5\u01c6\7\3\2\2\u01c6\u01cb\7\23\2\2\u01c7\u01cc")
        buf.write("\5\4\3\2\u01c8\u01c9\7;\2\2\u01c9\u01cc\7\177\2\2\u01ca")
        buf.write("\u01cc\7@\2\2\u01cb\u01c7\3\2\2\2\u01cb\u01c8\3\2\2\2")
        buf.write("\u01cb\u01ca\3\2\2\2\u01cc\u01cd\3\2\2\2\u01cd\u01cb\3")
        buf.write("\2\2\2\u01cd\u01ce\3\2\2\2\u01ce\u01d0\3\2\2\2\u01cf\u01d1")
        buf.write("\7\3\2\2\u01d0\u01cf\3\2\2\2\u01d1\u01d2\3\2\2\2\u01d2")
        buf.write("\u01d0\3\2\2\2\u01d2\u01d3\3\2\2\2\u01d3\u01d5\3\2\2\2")
        buf.write("\u01d4\u01c5\3\2\2\2\u01d5\u01d6\3\2\2\2\u01d6\u01d4\3")
        buf.write("\2\2\2\u01d6\u01d7\3\2\2\2\u01d7\u0202\3\2\2\2\u01d8\u01da")
        buf.write("\7F\2\2\u01d9\u01db\7\32\2\2\u01da\u01d9\3\2\2\2\u01da")
        buf.write("\u01db\3\2\2\2\u01db\u01dc\3\2\2\2\u01dc\u01dd\58\35\2")
        buf.write("\u01dd\u01de\7\63\2\2\u01de\u01df\7b\2\2\u01df\u0202\3")
        buf.write("\2\2\2\u01e0\u01e2\7F\2\2\u01e1\u01e3\7\32\2\2\u01e2\u01e1")
        buf.write("\3\2\2\2\u01e2\u01e3\3\2\2\2\u01e3\u01e4\3\2\2\2\u01e4")
        buf.write("\u01e5\7\177\2\2\u01e5\u01e6\7l\2\2\u01e6\u01e7\5@!\2")
        buf.write("\u01e7\u01e8\7m\2\2\u01e8\u01f2\7\63\2\2\u01e9\u01ea\7")
        buf.write("\3\2\2\u01ea\u01eb\7\23\2\2\u01eb\u01ef\5\4\3\2\u01ec")
        buf.write("\u01ee\7\3\2\2\u01ed\u01ec\3\2\2\2\u01ee\u01f1\3\2\2\2")
        buf.write("\u01ef\u01ed\3\2\2\2\u01ef\u01f0\3\2\2\2\u01f0\u01f3\3")
        buf.write("\2\2\2\u01f1\u01ef\3\2\2\2\u01f2\u01e9\3\2\2\2\u01f3\u01f4")
        buf.write("\3\2\2\2\u01f4\u01f2\3\2\2\2\u01f4\u01f5\3\2\2\2\u01f5")
        buf.write("\u0202\3\2\2\2\u01f6\u01f8\7F\2\2\u01f7\u01f9\7\32\2\2")
        buf.write("\u01f8\u01f7\3\2\2\2\u01f8\u01f9\3\2\2\2\u01f9\u01fa\3")
        buf.write("\2\2\2\u01fa\u01fb\7\177\2\2\u01fb\u01fc\7l\2\2\u01fc")
        buf.write("\u01fd\5@!\2\u01fd\u01fe\7m\2\2\u01fe\u01ff\7\63\2\2\u01ff")
        buf.write("\u0200\5\f\7\2\u0200\u0202\3\2\2\2\u0201\u01a1\3\2\2\2")
        buf.write("\u0201\u01a9\3\2\2\2\u0201\u01bf\3\2\2\2\u0201\u01d8\3")
        buf.write("\2\2\2\u0201\u01e0\3\2\2\2\u0201\u01f6\3\2\2\2\u0202\31")
        buf.write("\3\2\2\2\u0203\u0205\7P\2\2\u0204\u0206\7\32\2\2\u0205")
        buf.write("\u0204\3\2\2\2\u0205\u0206\3\2\2\2\u0206\u0207\3\2\2\2")
        buf.write("\u0207\u0208\58\35\2\u0208\u020b\7\63\2\2\u0209\u020c")
        buf.write("\5@!\2\u020a\u020c\7\u0099\2\2\u020b\u0209\3\2\2\2\u020b")
        buf.write("\u020a\3\2\2\2\u020c\33\3\2\2\2\u020d\u020f\7F\2\2\u020e")
        buf.write("\u0210\7\32\2\2\u020f\u020e\3\2\2\2\u020f\u0210\3\2\2")
        buf.write("\2\u0210\u0211\3\2\2\2\u0211\u0212\58\35\2\u0212\u0215")
        buf.write("\7\63\2\2\u0213\u0216\5@!\2\u0214\u0216\7\u0099\2\2\u0215")
        buf.write("\u0213\3\2\2\2\u0215\u0214\3\2\2\2\u0216\35\3\2\2\2\u0217")
        buf.write("\u0219\7\23\2\2\u0218\u0217\3\2\2\2\u0218\u0219\3\2\2")
        buf.write("\2\u0219\u021a\3\2\2\2\u021a\u021b\7G\2\2\u021b\u021e")
        buf.write("\7\63\2\2\u021c\u021f\5@!\2\u021d\u021f\7\u0099\2\2\u021e")
        buf.write("\u021c\3\2\2\2\u021e\u021d\3\2\2\2\u021f\37\3\2\2\2\u0220")
        buf.write("\u0222\7\23\2\2\u0221\u0220\3\2\2\2\u0221\u0222\3\2\2")
        buf.write("\2\u0222\u0223\3\2\2\2\u0223\u0224\7G\2\2\u0224\u0231")
        buf.write("\7\63\2\2\u0225\u0226\7\3\2\2\u0226\u0229\7\23\2\2\u0227")
        buf.write("\u022a\5\4\3\2\u0228\u022a\7;\2\2\u0229\u0227\3\2\2\2")
        buf.write("\u0229\u0228\3\2\2\2\u022a\u022c\3\2\2\2\u022b\u0225\3")
        buf.write("\2\2\2\u022c\u022d\3\2\2\2\u022d\u022b\3\2\2\2\u022d\u022e")
        buf.write("\3\2\2\2\u022e\u0232\3\2\2\2\u022f\u0232\5\16\b\2\u0230")
        buf.write("\u0232\5\f\7\2\u0231\u022b\3\2\2\2\u0231\u022f\3\2\2\2")
        buf.write("\u0231\u0230\3\2\2\2\u0232\u0233\3\2\2\2\u0233\u0231\3")
        buf.write("\2\2\2\u0233\u0234\3\2\2\2\u0234\u0238\3\2\2\2\u0235\u0237")
        buf.write("\7\3\2\2\u0236\u0235\3\2\2\2\u0237\u023a\3\2\2\2\u0238")
        buf.write("\u0236\3\2\2\2\u0238\u0239\3\2\2\2\u0239\u023c\3\2\2\2")
        buf.write("\u023a\u0238\3\2\2\2\u023b\u023d\7\23\2\2\u023c\u023b")
        buf.write("\3\2\2\2\u023c\u023d\3\2\2\2\u023d!\3\2\2\2\u023e\u023f")
        buf.write("\7M\2\2\u023f\u0240\7\177\2\2\u0240\u0241\7R\2\2\u0241")
        buf.write("\u0242\7t\2\2\u0242\u0243\7$\2\2\u0243\u0244\7t\2\2\u0244")
        buf.write("\u0246\7\63\2\2\u0245\u0247\7{\2\2\u0246\u0245\3\2\2\2")
        buf.write("\u0246\u0247\3\2\2\2\u0247\u024b\3\2\2\2\u0248\u0249\7")
        buf.write("\3\2\2\u0249\u024a\7\23\2\2\u024a\u024c\5\4\3\2\u024b")
        buf.write("\u0248\3\2\2\2\u024c\u024d\3\2\2\2\u024d\u024b\3\2\2\2")
        buf.write("\u024d\u024e\3\2\2\2\u024e\u0252\3\2\2\2\u024f\u0251\7")
        buf.write("\23\2\2\u0250\u024f\3\2\2\2\u0251\u0254\3\2\2\2\u0252")
        buf.write("\u0250\3\2\2\2\u0252\u0253\3\2\2\2\u0253\u02f1\3\2\2\2")
        buf.write("\u0254\u0252\3\2\2\2\u0255\u0256\7M\2\2\u0256\u0257\7")
        buf.write("\177\2\2\u0257\u025a\7R\2\2\u0258\u025b\7\u009b\2\2\u0259")
        buf.write("\u025b\5\60\31\2\u025a\u0258\3\2\2\2\u025a\u0259\3\2\2")
        buf.write("\2\u025b\u025c\3\2\2\2\u025c\u025e\7\63\2\2\u025d\u025f")
        buf.write("\7{\2\2\u025e\u025d\3\2\2\2\u025e\u025f\3\2\2\2\u025f")
        buf.write("\u0263\3\2\2\2\u0260\u0261\7\3\2\2\u0261\u0262\7\23\2")
        buf.write("\2\u0262\u0264\5\4\3\2\u0263\u0260\3\2\2\2\u0264\u0265")
        buf.write("\3\2\2\2\u0265\u0263\3\2\2\2\u0265\u0266\3\2\2\2\u0266")
        buf.write("\u026a\3\2\2\2\u0267\u0269\7\23\2\2\u0268\u0267\3\2\2")
        buf.write("\2\u0269\u026c\3\2\2\2\u026a\u0268\3\2\2\2\u026a\u026b")
        buf.write("\3\2\2\2\u026b\u02f1\3\2\2\2\u026c\u026a\3\2\2\2\u026d")
        buf.write("\u026e\7M\2\2\u026e\u026f\7\177\2\2\u026f\u0271\7R\2\2")
        buf.write("\u0270\u0272\7\22\2\2\u0271\u0270\3\2\2\2\u0272\u0273")
        buf.write("\3\2\2\2\u0273\u0271\3\2\2\2\u0273\u0274\3\2\2\2\u0274")
        buf.write("\u0275\3\2\2\2\u0275\u0276\7$\2\2\u0276\u0277\7.\2\2\u0277")
        buf.write("\u0278\7\u0099\2\2\u0278\u027a\7\63\2\2\u0279\u027b\7")
        buf.write("{\2\2\u027a\u0279\3\2\2\2\u027a\u027b\3\2\2\2\u027b\u027f")
        buf.write("\3\2\2\2\u027c\u027d\7\3\2\2\u027d\u027e\7\23\2\2\u027e")
        buf.write("\u0280\5\4\3\2\u027f\u027c\3\2\2\2\u0280\u0281\3\2\2\2")
        buf.write("\u0281\u027f\3\2\2\2\u0281\u0282\3\2\2\2\u0282\u0286\3")
        buf.write("\2\2\2\u0283\u0285\7\23\2\2\u0284\u0283\3\2\2\2\u0285")
        buf.write("\u0288\3\2\2\2\u0286\u0284\3\2\2\2\u0286\u0287\3\2\2\2")
        buf.write("\u0287\u02f1\3\2\2\2\u0288\u0286\3\2\2\2\u0289\u028a\7")
        buf.write("M\2\2\u028a\u028f\7\177\2\2\u028b\u028c\7\64\2\2\u028c")
        buf.write("\u028e\7\177\2\2\u028d\u028b\3\2\2\2\u028e\u0291\3\2\2")
        buf.write("\2\u028f\u028d\3\2\2\2\u028f\u0290\3\2\2\2\u0290\u0292")
        buf.write("\3\2\2\2\u0291\u028f\3\2\2\2\u0292\u0293\7R\2\2\u0293")
        buf.write("\u0294\7z\2\2\u0294\u02ad\7p\2\2\u0295\u029c\5R*\2\u0296")
        buf.write("\u0298\7\22\2\2\u0297\u0296\3\2\2\2\u0298\u0299\3\2\2")
        buf.write("\2\u0299\u0297\3\2\2\2\u0299\u029a\3\2\2\2\u029a\u029c")
        buf.write("\3\2\2\2\u029b\u0295\3\2\2\2\u029b\u0297\3\2\2\2\u029c")
        buf.write("\u02a8\3\2\2\2\u029d\u02a4\7\64\2\2\u029e\u02a5\5R*\2")
        buf.write("\u029f\u02a1\7\22\2\2\u02a0\u029f\3\2\2\2\u02a1\u02a2")
        buf.write("\3\2\2\2\u02a2\u02a0\3\2\2\2\u02a2\u02a3\3\2\2\2\u02a3")
        buf.write("\u02a5\3\2\2\2\u02a4\u029e\3\2\2\2\u02a4\u02a0\3\2\2\2")
        buf.write("\u02a5\u02a7\3\2\2\2\u02a6\u029d\3\2\2\2\u02a7\u02aa\3")
        buf.write("\2\2\2\u02a8\u02a6\3\2\2\2\u02a8\u02a9\3\2\2\2\u02a9\u02ac")
        buf.write("\3\2\2\2\u02aa\u02a8\3\2\2\2\u02ab\u029b\3\2\2\2\u02ac")
        buf.write("\u02af\3\2\2\2\u02ad\u02ab\3\2\2\2\u02ad\u02ae\3\2\2\2")
        buf.write("\u02ae\u02b0\3\2\2\2\u02af\u02ad\3\2\2\2\u02b0\u02b1\7")
        buf.write("q\2\2\u02b1\u02b3\7\63\2\2\u02b2\u02b4\7{\2\2\u02b3\u02b2")
        buf.write("\3\2\2\2\u02b3\u02b4\3\2\2\2\u02b4\u02b8\3\2\2\2\u02b5")
        buf.write("\u02b6\7\3\2\2\u02b6\u02b7\7\23\2\2\u02b7\u02b9\5\4\3")
        buf.write("\2\u02b8\u02b5\3\2\2\2\u02b9\u02ba\3\2\2\2\u02ba\u02b8")
        buf.write("\3\2\2\2\u02ba\u02bb\3\2\2\2\u02bb\u02bf\3\2\2\2\u02bc")
        buf.write("\u02be\7\23\2\2\u02bd\u02bc\3\2\2\2\u02be\u02c1\3\2\2")
        buf.write("\2\u02bf\u02bd\3\2\2\2\u02bf\u02c0\3\2\2\2\u02c0\u02f1")
        buf.write("\3\2\2\2\u02c1\u02bf\3\2\2\2\u02c2\u02c3\7M\2\2\u02c3")
        buf.write("\u02c4\7\177\2\2\u02c4\u02c5\7R\2\2\u02c5\u02c6\7\177")
        buf.write("\2\2\u02c6\u02c7\7l\2\2\u02c7\u02c8\7\177\2\2\u02c8\u02c9")
        buf.write("\7m\2\2\u02c9\u02cb\7\63\2\2\u02ca\u02cc\7{\2\2\u02cb")
        buf.write("\u02ca\3\2\2\2\u02cb\u02cc\3\2\2\2\u02cc\u02d0\3\2\2\2")
        buf.write("\u02cd\u02ce\7\3\2\2\u02ce\u02cf\7\23\2\2\u02cf\u02d1")
        buf.write("\5\4\3\2\u02d0\u02cd\3\2\2\2\u02d1\u02d2\3\2\2\2\u02d2")
        buf.write("\u02d0\3\2\2\2\u02d2\u02d3\3\2\2\2\u02d3\u02d7\3\2\2\2")
        buf.write("\u02d4\u02d6\7\23\2\2\u02d5\u02d4\3\2\2\2\u02d6\u02d9")
        buf.write("\3\2\2\2\u02d7\u02d5\3\2\2\2\u02d7\u02d8\3\2\2\2\u02d8")
        buf.write("\u02f1\3\2\2\2\u02d9\u02d7\3\2\2\2\u02da\u02db\7M\2\2")
        buf.write("\u02db\u02dc\7\177\2\2\u02dc\u02dd\7R\2\2\u02dd\u02de")
        buf.write("\5\60\31\2\u02de\u02df\7\63\2\2\u02df\u02e0\7\3\2\2\u02e0")
        buf.write("\u02e1\7\23\2\2\u02e1\u02e3\5\60\31\2\u02e2\u02e4\7\3")
        buf.write("\2\2\u02e3\u02e2\3\2\2\2\u02e3\u02e4\3\2\2\2\u02e4\u02f1")
        buf.write("\3\2\2\2\u02e5\u02e6\7M\2\2\u02e6\u02e7\7\177\2\2\u02e7")
        buf.write("\u02e8\7R\2\2\u02e8\u02e9\7\177\2\2\u02e9\u02ea\7\63\2")
        buf.write("\2\u02ea\u02eb\7\3\2\2\u02eb\u02ec\7\23\2\2\u02ec\u02ee")
        buf.write("\5\60\31\2\u02ed\u02ef\7\3\2\2\u02ee\u02ed\3\2\2\2\u02ee")
        buf.write("\u02ef\3\2\2\2\u02ef\u02f1\3\2\2\2\u02f0\u023e\3\2\2\2")
        buf.write("\u02f0\u0255\3\2\2\2\u02f0\u026d\3\2\2\2\u02f0\u0289\3")
        buf.write("\2\2\2\u02f0\u02c2\3\2\2\2\u02f0\u02da\3\2\2\2\u02f0\u02e5")
        buf.write("\3\2\2\2\u02f1#\3\2\2\2\u02f2\u02f5\7j\2\2\u02f3\u02f6")
        buf.write("\58\35\2\u02f4\u02f6\7\t\2\2\u02f5\u02f3\3\2\2\2\u02f5")
        buf.write("\u02f4\3\2\2\2\u02f6\u02f7\3\2\2\2\u02f7\u0301\7\63\2")
        buf.write("\2\u02f8\u02f9\7\3\2\2\u02f9\u02ff\7\23\2\2\u02fa\u0300")
        buf.write("\5\4\3\2\u02fb\u02fd\7;\2\2\u02fc\u02fe\7\177\2\2\u02fd")
        buf.write("\u02fc\3\2\2\2\u02fd\u02fe\3\2\2\2\u02fe\u0300\3\2\2\2")
        buf.write("\u02ff\u02fa\3\2\2\2\u02ff\u02fb\3\2\2\2\u0300\u0302\3")
        buf.write("\2\2\2\u0301\u02f8\3\2\2\2\u0302\u0303\3\2\2\2\u0303\u0301")
        buf.write("\3\2\2\2\u0303\u0304\3\2\2\2\u0304%\3\2\2\2\u0305\u0309")
        buf.write("\5(\25\2\u0306\u0308\5\30\r\2\u0307\u0306\3\2\2\2\u0308")
        buf.write("\u030b\3\2\2\2\u0309\u0307\3\2\2\2\u0309\u030a\3\2\2\2")
        buf.write("\u030a\u030c\3\2\2\2\u030b\u0309\3\2\2\2\u030c\u030d\5")
        buf.write(" \21\2\u030d\'\3\2\2\2\u030e\u030f\7i\2\2\u030f\u0310")
        buf.write("\58\35\2\u0310\u0319\7\63\2\2\u0311\u0312\7\3\2\2\u0312")
        buf.write("\u0314\7\23\2\2\u0313\u0311\3\2\2\2\u0313\u0314\3\2\2")
        buf.write("\2\u0314\u0317\3\2\2\2\u0315\u0318\5\4\3\2\u0316\u0318")
        buf.write("\7;\2\2\u0317\u0315\3\2\2\2\u0317\u0316\3\2\2\2\u0318")
        buf.write("\u031a\3\2\2\2\u0319\u0313\3\2\2\2\u031a\u031b\3\2\2\2")
        buf.write("\u031b\u0319\3\2\2\2\u031b\u031c\3\2\2\2\u031c)\3\2\2")
        buf.write("\2\u031d\u031e\7^\2\2\u031e\u0322\7\177\2\2\u031f\u0320")
        buf.write("\7p\2\2\u0320\u0321\7\177\2\2\u0321\u0323\7q\2\2\u0322")
        buf.write("\u031f\3\2\2\2\u0322\u0323\3\2\2\2\u0323\u0324\3\2\2\2")
        buf.write("\u0324\u032f\7l\2\2\u0325\u032a\7\177\2\2\u0326\u0327")
        buf.write("\7\63\2\2\u0327\u032b\5B\"\2\u0328\u0329\7&\2\2\u0329")
        buf.write("\u032b\5@!\2\u032a\u0326\3\2\2\2\u032a\u0328\3\2\2\2\u032b")
        buf.write("\u032d\3\2\2\2\u032c\u032e\7\64\2\2\u032d\u032c\3\2\2")
        buf.write("\2\u032d\u032e\3\2\2\2\u032e\u0330\3\2\2\2\u032f\u0325")
        buf.write("\3\2\2\2\u0330\u0331\3\2\2\2\u0331\u032f\3\2\2\2\u0331")
        buf.write("\u0332\3\2\2\2\u0332\u0333\3\2\2\2\u0333\u0336\7m\2\2")
        buf.write("\u0334\u0335\7\63\2\2\u0335\u0337\5B\"\2\u0336\u0334\3")
        buf.write("\2\2\2\u0336\u0337\3\2\2\2\u0337\u0338\3\2\2\2\u0338\u035e")
        buf.write("\7&\2\2\u0339\u033a\7\3\2\2\u033a\u033b\7\23\2\2\u033b")
        buf.write("\u033d\5\4\3\2\u033c\u0339\3\2\2\2\u033d\u033e\3\2\2\2")
        buf.write("\u033e\u033c\3\2\2\2\u033e\u033f\3\2\2\2\u033f\u035f\3")
        buf.write("\2\2\2\u0340\u0344\5\f\7\2\u0341\u0343\7\3\2\2\u0342\u0341")
        buf.write("\3\2\2\2\u0343\u0346\3\2\2\2\u0344\u0342\3\2\2\2\u0344")
        buf.write("\u0345\3\2\2\2\u0345\u034c\3\2\2\2\u0346\u0344\3\2\2\2")
        buf.write("\u0347\u0348\7\3\2\2\u0348\u0349\7\23\2\2\u0349\u034b")
        buf.write("\5\4\3\2\u034a\u0347\3\2\2\2\u034b\u034e\3\2\2\2\u034c")
        buf.write("\u034a\3\2\2\2\u034c\u034d\3\2\2\2\u034d\u035f\3\2\2\2")
        buf.write("\u034e\u034c\3\2\2\2\u034f\u0353\5\16\b\2\u0350\u0352")
        buf.write("\7\3\2\2\u0351\u0350\3\2\2\2\u0352\u0355\3\2\2\2\u0353")
        buf.write("\u0351\3\2\2\2\u0353\u0354\3\2\2\2\u0354\u035b\3\2\2\2")
        buf.write("\u0355\u0353\3\2\2\2\u0356\u0357\7\3\2\2\u0357\u0358\7")
        buf.write("\23\2\2\u0358\u035a\5\4\3\2\u0359\u0356\3\2\2\2\u035a")
        buf.write("\u035d\3\2\2\2\u035b\u0359\3\2\2\2\u035b\u035c\3\2\2\2")
        buf.write("\u035c\u035f\3\2\2\2\u035d\u035b\3\2\2\2\u035e\u033c\3")
        buf.write("\2\2\2\u035e\u0340\3\2\2\2\u035e\u034f\3\2\2\2\u035f\u0362")
        buf.write("\3\2\2\2\u0360\u0361\7b\2\2\u0361\u0363\5@!\2\u0362\u0360")
        buf.write("\3\2\2\2\u0362\u0363\3\2\2\2\u0363\u0365\3\2\2\2\u0364")
        buf.write("\u0366\7\3\2\2\u0365\u0364\3\2\2\2\u0365\u0366\3\2\2\2")
        buf.write("\u0366\u03fd\3\2\2\2\u0367\u0368\7^\2\2\u0368\u0369\7")
        buf.write("\n\2\2\u0369\u036a\7l\2\2\u036a\u036b\7\177\2\2\u036b")
        buf.write("\u036c\7\63\2\2\u036c\u036d\7^\2\2\u036d\u036e\7l\2\2")
        buf.write("\u036e\u036f\7\177\2\2\u036f\u0370\7\63\2\2\u0370\u0371")
        buf.write("\5B\"\2\u0371\u0372\7m\2\2\u0372\u0375\7m\2\2\u0373\u0374")
        buf.write("\7\63\2\2\u0374\u0376\5B\"\2\u0375\u0373\3\2\2\2\u0375")
        buf.write("\u0376\3\2\2\2\u0376\u0377\3\2\2\2\u0377\u039d\7&\2\2")
        buf.write("\u0378\u0379\7\3\2\2\u0379\u037a\7\23\2\2\u037a\u037c")
        buf.write("\5\4\3\2\u037b\u0378\3\2\2\2\u037c\u037d\3\2\2\2\u037d")
        buf.write("\u037b\3\2\2\2\u037d\u037e\3\2\2\2\u037e\u039e\3\2\2\2")
        buf.write("\u037f\u0383\5\f\7\2\u0380\u0382\7\3\2\2\u0381\u0380\3")
        buf.write("\2\2\2\u0382\u0385\3\2\2\2\u0383\u0381\3\2\2\2\u0383\u0384")
        buf.write("\3\2\2\2\u0384\u038b\3\2\2\2\u0385\u0383\3\2\2\2\u0386")
        buf.write("\u0387\7\3\2\2\u0387\u0388\7\23\2\2\u0388\u038a\5\4\3")
        buf.write("\2\u0389\u0386\3\2\2\2\u038a\u038d\3\2\2\2\u038b\u0389")
        buf.write("\3\2\2\2\u038b\u038c\3\2\2\2\u038c\u039e\3\2\2\2\u038d")
        buf.write("\u038b\3\2\2\2\u038e\u0392\5\16\b\2\u038f\u0391\7\3\2")
        buf.write("\2\u0390\u038f\3\2\2\2\u0391\u0394\3\2\2\2\u0392\u0390")
        buf.write("\3\2\2\2\u0392\u0393\3\2\2\2\u0393\u039a\3\2\2\2\u0394")
        buf.write("\u0392\3\2\2\2\u0395\u0396\7\3\2\2\u0396\u0397\7\23\2")
        buf.write("\2\u0397\u0399\5\4\3\2\u0398\u0395\3\2\2\2\u0399\u039c")
        buf.write("\3\2\2\2\u039a\u0398\3\2\2\2\u039a\u039b\3\2\2\2\u039b")
        buf.write("\u039e\3\2\2\2\u039c\u039a\3\2\2\2\u039d\u037b\3\2\2\2")
        buf.write("\u039d\u037f\3\2\2\2\u039d\u038e\3\2\2\2\u039e\u039f\3")
        buf.write("\2\2\2\u039f\u03a0\7b\2\2\u03a0\u03a1\5@!\2\u03a1\u03a3")
        buf.write("\3\2\2\2\u03a2\u03a4\7\3\2\2\u03a3\u03a2\3\2\2\2\u03a3")
        buf.write("\u03a4\3\2\2\2\u03a4\u03fd\3\2\2\2\u03a5\u03a6\7^\2\2")
        buf.write("\u03a6\u03aa\7\177\2\2\u03a7\u03a8\7p\2\2\u03a8\u03a9")
        buf.write("\7\177\2\2\u03a9\u03ab\7q\2\2\u03aa\u03a7\3\2\2\2\u03aa")
        buf.write("\u03ab\3\2\2\2\u03ab\u03ac\3\2\2\2\u03ac\u03ad\7l\2\2")
        buf.write("\u03ad\u03ae\7\177\2\2\u03ae\u03af\7\63\2\2\u03af\u03b0")
        buf.write("\7\30\2\2\u03b0\u03b1\7\177\2\2\u03b1\u03b2\7p\2\2\u03b2")
        buf.write("\u03b3\7\177\2\2\u03b3\u03c5\7q\2\2\u03b4\u03b5\7\64\2")
        buf.write("\2\u03b5\u03b6\7\177\2\2\u03b6\u03c1\7&\2\2\u03b7\u03b9")
        buf.write("\7)\2\2\u03b8\u03b7\3\2\2\2\u03b8\u03b9\3\2\2\2\u03b9")
        buf.write("\u03bb\3\2\2\2\u03ba\u03bc\7\22\2\2\u03bb\u03ba\3\2\2")
        buf.write("\2\u03bc\u03bd\3\2\2\2\u03bd\u03bb\3\2\2\2\u03bd\u03be")
        buf.write("\3\2\2\2\u03be\u03c2\3\2\2\2\u03bf\u03c2\7\177\2\2\u03c0")
        buf.write("\u03c2\5R*\2\u03c1\u03b8\3\2\2\2\u03c1\u03bf\3\2\2\2\u03c1")
        buf.write("\u03c0\3\2\2\2\u03c2\u03c4\3\2\2\2\u03c3\u03b4\3\2\2\2")
        buf.write("\u03c4\u03c7\3\2\2\2\u03c5\u03c3\3\2\2\2\u03c5\u03c6\3")
        buf.write("\2\2\2\u03c6\u03c8\3\2\2\2\u03c7\u03c5\3\2\2\2\u03c8\u03cb")
        buf.write("\7m\2\2\u03c9\u03ca\7\63\2\2\u03ca\u03cc\5B\"\2\u03cb")
        buf.write("\u03c9\3\2\2\2\u03cb\u03cc\3\2\2\2\u03cc\u03cd\3\2\2\2")
        buf.write("\u03cd\u03f3\7&\2\2\u03ce\u03cf\7\3\2\2\u03cf\u03d0\7")
        buf.write("\23\2\2\u03d0\u03d2\5\4\3\2\u03d1\u03ce\3\2\2\2\u03d2")
        buf.write("\u03d3\3\2\2\2\u03d3\u03d1\3\2\2\2\u03d3\u03d4\3\2\2\2")
        buf.write("\u03d4\u03f4\3\2\2\2\u03d5\u03d9\5\f\7\2\u03d6\u03d8\7")
        buf.write("\3\2\2\u03d7\u03d6\3\2\2\2\u03d8\u03db\3\2\2\2\u03d9\u03d7")
        buf.write("\3\2\2\2\u03d9\u03da\3\2\2\2\u03da\u03e1\3\2\2\2\u03db")
        buf.write("\u03d9\3\2\2\2\u03dc\u03dd\7\3\2\2\u03dd\u03de\7\23\2")
        buf.write("\2\u03de\u03e0\5\4\3\2\u03df\u03dc\3\2\2\2\u03e0\u03e3")
        buf.write("\3\2\2\2\u03e1\u03df\3\2\2\2\u03e1\u03e2\3\2\2\2\u03e2")
        buf.write("\u03f4\3\2\2\2\u03e3\u03e1\3\2\2\2\u03e4\u03e8\5\16\b")
        buf.write("\2\u03e5\u03e7\7\3\2\2\u03e6\u03e5\3\2\2\2\u03e7\u03ea")
        buf.write("\3\2\2\2\u03e8\u03e6\3\2\2\2\u03e8\u03e9\3\2\2\2\u03e9")
        buf.write("\u03f0\3\2\2\2\u03ea\u03e8\3\2\2\2\u03eb\u03ec\7\3\2\2")
        buf.write("\u03ec\u03ed\7\23\2\2\u03ed\u03ef\5\4\3\2\u03ee\u03eb")
        buf.write("\3\2\2\2\u03ef\u03f2\3\2\2\2\u03f0\u03ee\3\2\2\2\u03f0")
        buf.write("\u03f1\3\2\2\2\u03f1\u03f4\3\2\2\2\u03f2\u03f0\3\2\2\2")
        buf.write("\u03f3\u03d1\3\2\2\2\u03f3\u03d5\3\2\2\2\u03f3\u03e4\3")
        buf.write("\2\2\2\u03f4\u03f7\3\2\2\2\u03f5\u03f6\7b\2\2\u03f6\u03f8")
        buf.write("\5@!\2\u03f7\u03f5\3\2\2\2\u03f7\u03f8\3\2\2\2\u03f8\u03fa")
        buf.write("\3\2\2\2\u03f9\u03fb\7\3\2\2\u03fa\u03f9\3\2\2\2\u03fa")
        buf.write("\u03fb\3\2\2\2\u03fb\u03fd\3\2\2\2\u03fc\u031d\3\2\2\2")
        buf.write("\u03fc\u0367\3\2\2\2\u03fc\u03a5\3\2\2\2\u03fd+\3\2\2")
        buf.write("\2\u03fe\u03ff\7:\2\2\u03ff\u0400\7\177\2\2\u0400\u0404")
        buf.write("\7\63\2\2\u0401\u0402\7\3\2\2\u0402\u0403\7\23\2\2\u0403")
        buf.write("\u0405\5\4\3\2\u0404\u0401\3\2\2\2\u0405\u0406\3\2\2\2")
        buf.write("\u0406\u0404\3\2\2\2\u0406\u0407\3\2\2\2\u0407-\3\2\2")
        buf.write("\2\u0408\u0409\7g\2\2\u0409\u041c\7\3\2\2\u040a\u040b")
        buf.write("\7\23\2\2\u040b\u040c\7\177\2\2\u040c\u040d\7&\2\2\u040d")
        buf.write("\u040e\7\13\2\2\u040e\u0415\7p\2\2\u040f\u0416\7\u009b")
        buf.write("\2\2\u0410\u0412\7\22\2\2\u0411\u0410\3\2\2\2\u0412\u0413")
        buf.write("\3\2\2\2\u0413\u0411\3\2\2\2\u0413\u0414\3\2\2\2\u0414")
        buf.write("\u0416\3\2\2\2\u0415\u040f\3\2\2\2\u0415\u0411\3\2\2\2")
        buf.write("\u0416\u0417\3\2\2\2\u0417\u0418\7\64\2\2\u0418\u0419")
        buf.write("\5B\"\2\u0419\u041a\7q\2\2\u041a\u041b\7\3\2\2\u041b\u041d")
        buf.write("\3\2\2\2\u041c\u040a\3\2\2\2\u041d\u041e\3\2\2\2\u041e")
        buf.write("\u041c\3\2\2\2\u041e\u041f\3\2\2\2\u041f/\3\2\2\2\u0420")
        buf.write("\u0421\7\177\2\2\u0421\u042a\7l\2\2\u0422\u042b\7\177")
        buf.write("\2\2\u0423\u0425\7\22\2\2\u0424\u0423\3\2\2\2\u0425\u0426")
        buf.write("\3\2\2\2\u0426\u0424\3\2\2\2\u0426\u0427\3\2\2\2\u0427")
        buf.write("\u042b\3\2\2\2\u0428\u042b\5R*\2\u0429\u042b\5@!\2\u042a")
        buf.write("\u0422\3\2\2\2\u042a\u0424\3\2\2\2\u042a\u0428\3\2\2\2")
        buf.write("\u042a\u0429\3\2\2\2\u042b\u0439\3\2\2\2\u042c\u0435\t")
        buf.write("\4\2\2\u042d\u0436\7\177\2\2\u042e\u0430\7\22\2\2\u042f")
        buf.write("\u042e\3\2\2\2\u0430\u0431\3\2\2\2\u0431\u042f\3\2\2\2")
        buf.write("\u0431\u0432\3\2\2\2\u0432\u0436\3\2\2\2\u0433\u0436\5")
        buf.write("R*\2\u0434\u0436\5@!\2\u0435\u042d\3\2\2\2\u0435\u042f")
        buf.write("\3\2\2\2\u0435\u0433\3\2\2\2\u0435\u0434\3\2\2\2\u0436")
        buf.write("\u0438\3\2\2\2\u0437\u042c\3\2\2\2\u0438\u043b\3\2\2\2")
        buf.write("\u0439\u0437\3\2\2\2\u0439\u043a\3\2\2\2\u043a\u0440\3")
        buf.write("\2\2\2\u043b\u0439\3\2\2\2\u043c\u043d\7\64\2\2\u043d")
        buf.write("\u043e\7\177\2\2\u043e\u043f\7&\2\2\u043f\u0441\7\t\2")
        buf.write("\2\u0440\u043c\3\2\2\2\u0440\u0441\3\2\2\2\u0441\u0442")
        buf.write("\3\2\2\2\u0442\u0476\7m\2\2\u0443\u044b\7l\2\2\u0444\u044c")
        buf.write("\7\177\2\2\u0445\u0447\7\22\2\2\u0446\u0445\3\2\2\2\u0447")
        buf.write("\u0448\3\2\2\2\u0448\u0446\3\2\2\2\u0448\u0449\3\2\2\2")
        buf.write("\u0449\u044c\3\2\2\2\u044a\u044c\5R*\2\u044b\u0444\3\2")
        buf.write("\2\2\u044b\u0446\3\2\2\2\u044b\u044a\3\2\2\2\u044c\u0459")
        buf.write("\3\2\2\2\u044d\u0455\t\5\2\2\u044e\u0456\7\177\2\2\u044f")
        buf.write("\u0451\7\22\2\2\u0450\u044f\3\2\2\2\u0451\u0452\3\2\2")
        buf.write("\2\u0452\u0450\3\2\2\2\u0452\u0453\3\2\2\2\u0453\u0456")
        buf.write("\3\2\2\2\u0454\u0456\5R*\2\u0455\u044e\3\2\2\2\u0455\u0450")
        buf.write("\3\2\2\2\u0455\u0454\3\2\2\2\u0456\u0458\3\2\2\2\u0457")
        buf.write("\u044d\3\2\2\2\u0458\u045b\3\2\2\2\u0459\u0457\3\2\2\2")
        buf.write("\u0459\u045a\3\2\2\2\u045a\u045c\3\2\2\2\u045b\u0459\3")
        buf.write("\2\2\2\u045c\u045d\7m\2\2\u045d\u0476\7\u0099\2\2\u045e")
        buf.write("\u045f\7\177\2\2\u045f\u046d\7\177\2\2\u0460\u0461\7p")
        buf.write("\2\2\u0461\u0462\7\177\2\2\u0462\u046a\7q\2\2\u0463\u0464")
        buf.write("\7\64\2\2\u0464\u0465\7\177\2\2\u0465\u0466\7p\2\2\u0466")
        buf.write("\u0467\7\177\2\2\u0467\u0469\7q\2\2\u0468\u0463\3\2\2")
        buf.write("\2\u0469\u046c\3\2\2\2\u046a\u0468\3\2\2\2\u046a\u046b")
        buf.write("\3\2\2\2\u046b\u046e\3\2\2\2\u046c\u046a\3\2\2\2\u046d")
        buf.write("\u0460\3\2\2\2\u046d\u046e\3\2\2\2\u046e\u0476\3\2\2\2")
        buf.write("\u046f\u0470\7\177\2\2\u0470\u0472\7l\2\2\u0471\u0473")
        buf.write("\7\u0099\2\2\u0472\u0471\3\2\2\2\u0472\u0473\3\2\2\2\u0473")
        buf.write("\u0474\3\2\2\2\u0474\u0476\7m\2\2\u0475\u0420\3\2\2\2")
        buf.write("\u0475\u0443\3\2\2\2\u0475\u045e\3\2\2\2\u0475\u046f\3")
        buf.write("\2\2\2\u0476\61\3\2\2\2\u0477\u0478\7\u0099\2\2\u0478")
        buf.write("\u0479\7l\2\2\u0479\u047e\5@!\2\u047a\u047b\t\6\2\2\u047b")
        buf.write("\u047d\5@!\2\u047c\u047a\3\2\2\2\u047d\u0480\3\2\2\2\u047e")
        buf.write("\u047c\3\2\2\2\u047e\u047f\3\2\2\2\u047f\u0481\3\2\2\2")
        buf.write("\u0480\u047e\3\2\2\2\u0481\u0482\7m\2\2\u0482\63\3\2\2")
        buf.write("\2\u0483\u0484\7\n\2\2\u0484\u0485\7l\2\2\u0485\u0486")
        buf.write("\7\177\2\2\u0486\u0487\7m\2\2\u0487\65\3\2\2\2\u0488\u0489")
        buf.write("\7Q\2\2\u0489\u048e\7\177\2\2\u048a\u048b\7\64\2\2\u048b")
        buf.write("\u048d\7\177\2\2\u048c\u048a\3\2\2\2\u048d\u0490\3\2\2")
        buf.write("\2\u048e\u048c\3\2\2\2\u048e\u048f\3\2\2\2\u048f\u0493")
        buf.write("\3\2\2\2\u0490\u048e\3\2\2\2\u0491\u0492\7N\2\2\u0492")
        buf.write("\u0494\7\177\2\2\u0493\u0491\3\2\2\2\u0493\u0494\3\2\2")
        buf.write("\2\u0494\u04a1\3\2\2\2\u0495\u0496\7N\2\2\u0496\u0497")
        buf.write("\7\177\2\2\u0497\u0498\7Q\2\2\u0498\u049d\7\177\2\2\u0499")
        buf.write("\u049a\7\64\2\2\u049a\u049c\7\177\2\2\u049b\u0499\3\2")
        buf.write("\2\2\u049c\u049f\3\2\2\2\u049d\u049b\3\2\2\2\u049d\u049e")
        buf.write("\3\2\2\2\u049e\u04a1\3\2\2\2\u049f\u049d\3\2\2\2\u04a0")
        buf.write("\u0488\3\2\2\2\u04a0\u0495\3\2\2\2\u04a1\67\3\2\2\2\u04a2")
        buf.write("\u04a7\5:\36\2\u04a3\u04a4\t\7\2\2\u04a4\u04a6\5:\36\2")
        buf.write("\u04a5\u04a3\3\2\2\2\u04a6\u04a9\3\2\2\2\u04a7\u04a5\3")
        buf.write("\2\2\2\u04a7\u04a8\3\2\2\2\u04a89\3\2\2\2\u04a9\u04a7")
        buf.write("\3\2\2\2\u04aa\u04b6\5@!\2\u04ab\u04ad\7.\2\2\u04ac\u04ae")
        buf.write("\7&\2\2\u04ad\u04ac\3\2\2\2\u04ad\u04ae\3\2\2\2\u04ae")
        buf.write("\u04b7\3\2\2\2\u04af\u04b7\7\f\2\2\u04b0\u04b7\7\r\2\2")
        buf.write("\u04b1\u04b3\7/\2\2\u04b2\u04b4\7&\2\2\u04b3\u04b2\3\2")
        buf.write("\2\2\u04b3\u04b4\3\2\2\2\u04b4\u04b7\3\2\2\2\u04b5\u04b7")
        buf.write("\7%\2\2\u04b6\u04ab\3\2\2\2\u04b6\u04af\3\2\2\2\u04b6")
        buf.write("\u04b0\3\2\2\2\u04b6\u04b1\3\2\2\2\u04b6\u04b5\3\2\2\2")
        buf.write("\u04b7\u04b8\3\2\2\2\u04b8\u04b9\5@!\2\u04b9\u04be\3\2")
        buf.write("\2\2\u04ba\u04be\7\t\2\2\u04bb\u04be\7\16\2\2\u04bc\u04be")
        buf.write("\7\177\2\2\u04bd\u04aa\3\2\2\2\u04bd\u04ba\3\2\2\2\u04bd")
        buf.write("\u04bb\3\2\2\2\u04bd\u04bc\3\2\2\2\u04be;\3\2\2\2\u04bf")
        buf.write("\u04c1\7t\2\2\u04c0\u04bf\3\2\2\2\u04c1\u04c2\3\2\2\2")
        buf.write("\u04c2\u04c0\3\2\2\2\u04c2\u04c3\3\2\2\2\u04c3=\3\2\2")
        buf.write("\2\u04c4\u04c6\7u\2\2\u04c5\u04c4\3\2\2\2\u04c6\u04c7")
        buf.write("\3\2\2\2\u04c7\u04c5\3\2\2\2\u04c7\u04c8\3\2\2\2\u04c8")
        buf.write("?\3\2\2\2\u04c9\u054a\7\t\2\2\u04ca\u054a\7\16\2\2\u04cb")
        buf.write("\u054a\7u\2\2\u04cc\u04ce\7\22\2\2\u04cd\u04cc\3\2\2\2")
        buf.write("\u04ce\u04cf\3\2\2\2\u04cf\u04cd\3\2\2\2\u04cf\u04d0\3")
        buf.write("\2\2\2\u04d0\u04d4\3\2\2\2\u04d1\u04d4\7\177\2\2\u04d2")
        buf.write("\u04d4\5R*\2\u04d3\u04cd\3\2\2\2\u04d3\u04d1\3\2\2\2\u04d3")
        buf.write("\u04d2\3\2\2\2\u04d4\u04e1\3\2\2\2\u04d5\u04dd\t\b\2\2")
        buf.write("\u04d6\u04d8\7\22\2\2\u04d7\u04d6\3\2\2\2\u04d8\u04d9")
        buf.write("\3\2\2\2\u04d9\u04d7\3\2\2\2\u04d9\u04da\3\2\2\2\u04da")
        buf.write("\u04de\3\2\2\2\u04db\u04de\7\177\2\2\u04dc\u04de\5R*\2")
        buf.write("\u04dd\u04d7\3\2\2\2\u04dd\u04db\3\2\2\2\u04dd\u04dc\3")
        buf.write("\2\2\2\u04de\u04e0\3\2\2\2\u04df\u04d5\3\2\2\2\u04e0\u04e3")
        buf.write("\3\2\2\2\u04e1\u04df\3\2\2\2\u04e1\u04e2\3\2\2\2\u04e2")
        buf.write("\u054a\3\2\2\2\u04e3\u04e1\3\2\2\2\u04e4\u04e5\7\177\2")
        buf.write("\2\u04e5\u04ef\7p\2\2\u04e6\u04f0\7\177\2\2\u04e7\u04e9")
        buf.write("\7)\2\2\u04e8\u04e7\3\2\2\2\u04e8\u04e9\3\2\2\2\u04e9")
        buf.write("\u04eb\3\2\2\2\u04ea\u04ec\7\22\2\2\u04eb\u04ea\3\2\2")
        buf.write("\2\u04ec\u04ed\3\2\2\2\u04ed\u04eb\3\2\2\2\u04ed\u04ee")
        buf.write("\3\2\2\2\u04ee\u04f0\3\2\2\2\u04ef\u04e6\3\2\2\2\u04ef")
        buf.write("\u04e8\3\2\2\2\u04f0\u0503\3\2\2\2\u04f1\u04ff\t\t\2\2")
        buf.write("\u04f2\u04f4\7)\2\2\u04f3\u04f2\3\2\2\2\u04f3\u04f4\3")
        buf.write("\2\2\2\u04f4\u04f5\3\2\2\2\u04f5\u0500\5R*\2\u04f6\u04f8")
        buf.write("\7)\2\2\u04f7\u04f6\3\2\2\2\u04f7\u04f8\3\2\2\2\u04f8")
        buf.write("\u04fa\3\2\2\2\u04f9\u04fb\7\22\2\2\u04fa\u04f9\3\2\2")
        buf.write("\2\u04fb\u04fc\3\2\2\2\u04fc\u04fa\3\2\2\2\u04fc\u04fd")
        buf.write("\3\2\2\2\u04fd\u0500\3\2\2\2\u04fe\u0500\7\177\2\2\u04ff")
        buf.write("\u04f3\3\2\2\2\u04ff\u04f7\3\2\2\2\u04ff\u04fe\3\2\2\2")
        buf.write("\u0500\u0502\3\2\2\2\u0501\u04f1\3\2\2\2\u0502\u0505\3")
        buf.write("\2\2\2\u0503\u0501\3\2\2\2\u0503\u0504\3\2\2\2\u0504\u0506")
        buf.write("\3\2\2\2\u0505\u0503\3\2\2\2\u0506\u054a\7q\2\2\u0507")
        buf.write("\u0514\5\60\31\2\u0508\u0510\t\n\2\2\u0509\u0511\5\60")
        buf.write("\31\2\u050a\u050c\7\22\2\2\u050b\u050a\3\2\2\2\u050c\u050d")
        buf.write("\3\2\2\2\u050d\u050b\3\2\2\2\u050d\u050e\3\2\2\2\u050e")
        buf.write("\u0511\3\2\2\2\u050f\u0511\5R*\2\u0510\u0509\3\2\2\2\u0510")
        buf.write("\u050b\3\2\2\2\u0510\u050f\3\2\2\2\u0511\u0513\3\2\2\2")
        buf.write("\u0512\u0508\3\2\2\2\u0513\u0516\3\2\2\2\u0514\u0512\3")
        buf.write("\2\2\2\u0514\u0515\3\2\2\2\u0515\u054a\3\2\2\2\u0516\u0514")
        buf.write("\3\2\2\2\u0517\u054a\5R*\2\u0518\u0537\7p\2\2\u0519\u051b")
        buf.write("\7)\2\2\u051a\u0519\3\2\2\2\u051a\u051b\3\2\2\2\u051b")
        buf.write("\u051c\3\2\2\2\u051c\u0523\5R*\2\u051d\u051f\7\22\2\2")
        buf.write("\u051e\u051d\3\2\2\2\u051f\u0520\3\2\2\2\u0520\u051e\3")
        buf.write("\2\2\2\u0520\u0521\3\2\2\2\u0521\u0523\3\2\2\2\u0522\u051a")
        buf.write("\3\2\2\2\u0522\u051e\3\2\2\2\u0523\u0532\3\2\2\2\u0524")
        buf.write("\u052e\7\64\2\2\u0525\u0527\7)\2\2\u0526\u0525\3\2\2\2")
        buf.write("\u0526\u0527\3\2\2\2\u0527\u0528\3\2\2\2\u0528\u052f\5")
        buf.write("R*\2\u0529\u052b\7\22\2\2\u052a\u0529\3\2\2\2\u052b\u052c")
        buf.write("\3\2\2\2\u052c\u052a\3\2\2\2\u052c\u052d\3\2\2\2\u052d")
        buf.write("\u052f\3\2\2\2\u052e\u0526\3\2\2\2\u052e\u052a\3\2\2\2")
        buf.write("\u052f\u0531\3\2\2\2\u0530\u0524\3\2\2\2\u0531\u0534\3")
        buf.write("\2\2\2\u0532\u0530\3\2\2\2\u0532\u0533\3\2\2\2\u0533\u0536")
        buf.write("\3\2\2\2\u0534\u0532\3\2\2\2\u0535\u0522\3\2\2\2\u0536")
        buf.write("\u0539\3\2\2\2\u0537\u0535\3\2\2\2\u0537\u0538\3\2\2\2")
        buf.write("\u0538\u053a\3\2\2\2\u0539\u0537\3\2\2\2\u053a\u054a\7")
        buf.write("q\2\2\u053b\u053c\7l\2\2\u053c\u0544\5@!\2\u053d\u0540")
        buf.write("\t\13\2\2\u053e\u0541\5R*\2\u053f\u0541\7\177\2\2\u0540")
        buf.write("\u053e\3\2\2\2\u0540\u053f\3\2\2\2\u0541\u0543\3\2\2\2")
        buf.write("\u0542\u053d\3\2\2\2\u0543\u0546\3\2\2\2\u0544\u0542\3")
        buf.write("\2\2\2\u0544\u0545\3\2\2\2\u0545\u0547\3\2\2\2\u0546\u0544")
        buf.write("\3\2\2\2\u0547\u0548\7m\2\2\u0548\u054a\3\2\2\2\u0549")
        buf.write("\u04c9\3\2\2\2\u0549\u04ca\3\2\2\2\u0549\u04cb\3\2\2\2")
        buf.write("\u0549\u04d3\3\2\2\2\u0549\u04e4\3\2\2\2\u0549\u0507\3")
        buf.write("\2\2\2\u0549\u0517\3\2\2\2\u0549\u0518\3\2\2\2\u0549\u053b")
        buf.write("\3\2\2\2\u054aA\3\2\2\2\u054b\u054c\t\f\2\2\u054cC\3\2")
        buf.write("\2\2\u054d\u0551\5J&\2\u054e\u0550\5F$\2\u054f\u054e\3")
        buf.write("\2\2\2\u0550\u0553\3\2\2\2\u0551\u054f\3\2\2\2\u0551\u0552")
        buf.write("\3\2\2\2\u0552\u0557\3\2\2\2\u0553\u0551\3\2\2\2\u0554")
        buf.write("\u0556\5H%\2\u0555\u0554\3\2\2\2\u0556\u0559\3\2\2\2\u0557")
        buf.write("\u0555\3\2\2\2\u0557\u0558\3\2\2\2\u0558\u055a\3\2\2\2")
        buf.write("\u0559\u0557\3\2\2\2\u055a\u055b\5 \21\2\u055bE\3\2\2")
        buf.write("\2\u055c\u055e\7\23\2\2\u055d\u055c\3\2\2\2\u055d\u055e")
        buf.write("\3\2\2\2\u055e\u055f\3\2\2\2\u055f\u0560\7#\2\2\u0560")
        buf.write("\u0565\t\r\2\2\u0561\u0562\7\64\2\2\u0562\u0564\t\r\2")
        buf.write("\2\u0563\u0561\3\2\2\2\u0564\u0567\3\2\2\2\u0565\u0563")
        buf.write("\3\2\2\2\u0565\u0566\3\2\2\2\u0566\u0568\3\2\2\2\u0567")
        buf.write("\u0565\3\2\2\2\u0568\u0575\7\63\2\2\u0569\u056a\7\3\2")
        buf.write("\2\u056a\u056c\7\23\2\2\u056b\u0569\3\2\2\2\u056b\u056c")
        buf.write("\3\2\2\2\u056c\u0570\3\2\2\2\u056d\u0571\5\4\3\2\u056e")
        buf.write("\u056f\7b\2\2\u056f\u0571\5@!\2\u0570\u056d\3\2\2\2\u0570")
        buf.write("\u056e\3\2\2\2\u0571\u0573\3\2\2\2\u0572\u0574\7\3\2\2")
        buf.write("\u0573\u0572\3\2\2\2\u0573\u0574\3\2\2\2\u0574\u0576\3")
        buf.write("\2\2\2\u0575\u056b\3\2\2\2\u0576\u0577\3\2\2\2\u0577\u0575")
        buf.write("\3\2\2\2\u0577\u0578\3\2\2\2\u0578G\3\2\2\2\u0579\u057a")
        buf.write("\7F\2\2\u057a\u057b\5@!\2\u057b\u057d\7\63\2\2\u057c\u057e")
        buf.write("\7{\2\2\u057d\u057c\3\2\2\2\u057d\u057e\3\2\2\2\u057e")
        buf.write("\u0584\3\2\2\2\u057f\u0581\7\3\2\2\u0580\u0582\7\23\2")
        buf.write("\2\u0581\u0580\3\2\2\2\u0581\u0582\3\2\2\2\u0582\u0583")
        buf.write("\3\2\2\2\u0583\u0585\5\4\3\2\u0584\u057f\3\2\2\2\u0585")
        buf.write("\u0586\3\2\2\2\u0586\u0584\3\2\2\2\u0586\u0587\3\2\2\2")
        buf.write("\u0587I\3\2\2\2\u0588\u0589\7<\2\2\u0589\u058b\7\177\2")
        buf.write("\2\u058a\u058c\7{\2\2\u058b\u058a\3\2\2\2\u058b\u058c")
        buf.write("\3\2\2\2\u058c\u058e\3\2\2\2\u058d\u058f\7\3\2\2\u058e")
        buf.write("\u058d\3\2\2\2\u058e\u058f\3\2\2\2\u058fK\3\2\2\2\u0590")
        buf.write("\u0591\7\3\2\2\u0591M\3\2\2\2\u0592\u0594\7\23\2\2\u0593")
        buf.write("\u0592\3\2\2\2\u0593\u0594\3\2\2\2\u0594\u0595\3\2\2\2")
        buf.write("\u0595\u0596\7{\2\2\u0596O\3\2\2\2\u0597\u0598\t\16\2")
        buf.write("\2\u0598Q\3\2\2\2\u0599\u059a\t\17\2\2\u059aS\3\2\2\2")
        buf.write("\u00e6X]sx\177\u0085\u008a\u008f\u0095\u009b\u00a7\u00ac")
        buf.write("\u00af\u00b3\u00b8\u00bb\u00bf\u00c3\u00c5\u00ca\u00ce")
        buf.write("\u00d2\u00d6\u00db\u00df\u00e3\u00e7\u00ec\u00f0\u00f3")
        buf.write("\u00f8\u00fc\u0104\u010d\u0118\u011d\u0126\u012b\u012f")
        buf.write("\u0133\u0139\u013d\u0141\u0149\u0157\u015b\u015f\u0169")
        buf.write("\u016b\u0170\u0174\u0178\u0180\u018d\u0192\u0196\u019f")
        buf.write("\u01a3\u01ab\u01b9\u01bd\u01c1\u01cb\u01cd\u01d2\u01d6")
        buf.write("\u01da\u01e2\u01ef\u01f4\u01f8\u0201\u0205\u020b\u020f")
        buf.write("\u0215\u0218\u021e\u0221\u0229\u022d\u0231\u0233\u0238")
        buf.write("\u023c\u0246\u024d\u0252\u025a\u025e\u0265\u026a\u0273")
        buf.write("\u027a\u0281\u0286\u028f\u0299\u029b\u02a2\u02a4\u02a8")
        buf.write("\u02ad\u02b3\u02ba\u02bf\u02cb\u02d2\u02d7\u02e3\u02ee")
        buf.write("\u02f0\u02f5\u02fd\u02ff\u0303\u0309\u0313\u0317\u031b")
        buf.write("\u0322\u032a\u032d\u0331\u0336\u033e\u0344\u034c\u0353")
        buf.write("\u035b\u035e\u0362\u0365\u0375\u037d\u0383\u038b\u0392")
        buf.write("\u039a\u039d\u03a3\u03aa\u03b8\u03bd\u03c1\u03c5\u03cb")
        buf.write("\u03d3\u03d9\u03e1\u03e8\u03f0\u03f3\u03f7\u03fa\u03fc")
        buf.write("\u0406\u0413\u0415\u041e\u0426\u042a\u0431\u0435\u0439")
        buf.write("\u0440\u0448\u044b\u0452\u0455\u0459\u046a\u046d\u0472")
        buf.write("\u0475\u047e\u048e\u0493\u049d\u04a0\u04a7\u04ad\u04b3")
        buf.write("\u04b6\u04bd\u04c2\u04c7\u04cf\u04d3\u04d9\u04dd\u04e1")
        buf.write("\u04e8\u04ed\u04ef\u04f3\u04f7\u04fc\u04ff\u0503\u050d")
        buf.write("\u0510\u0514\u051a\u0520\u0522\u0526\u052c\u052e\u0532")
        buf.write("\u0537\u0540\u0544\u0549\u0551\u0557\u055d\u0565\u056b")
        buf.write("\u0570\u0573\u0577\u057d\u0581\u0586\u058b\u058e\u0593")
        return buf.getvalue()


class nimParser ( Parser ):

    grammarFileName = "nim.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'\n'", "'\r'", "'#'", "'assert'", "'inc'", 
                     "'dec'", "'true'", "'forEach'", "'array'", "'<='", 
                     "'>='", "'false'", "'string'", "'int'", "'bool'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "' '", "<INVALID>", "'and'", 
                     "'var'", "'or'", "'not'", "'div'", "'shl'", "'shr'", 
                     "'xor'", "'mod'", "'echo'", "'is'", "'isnot'", "'of'", 
                     "'..'", "'=='", "'='", "'+'", "'*'", "'-'", "'/'", 
                     "'~'", "'&'", "'|'", "'<'", "'>'", "'!'", "'^'", "'.'", 
                     "':'", "','", "';'", "'addr'", "'as'", "'asm'", "'bind'", 
                     "'block'", "'break'", "'case'", "'cast'", "'concept'", 
                     "'const'", "'continue'", "'converter'", "'defer'", 
                     "'discard'", "'distinct'", "'do'", "'elif'", "'else'", 
                     "'end'", "'enum'", "'except'", "'export'", "'finally'", 
                     "'for'", "'from'", "'func'", "'if'", "'import'", "'in'", 
                     "'include'", "'interface'", "'iterator'", "'let'", 
                     "'macro'", "'method'", "'mixin'", "'nil'", "'notin'", 
                     "'object'", "'out'", "'proc'", "'ptr'", "'raise'", 
                     "'ref'", "'return'", "'static'", "'template'", "'try'", 
                     "'tuple'", "'type'", "'using'", "'when'", "'while'", 
                     "'yield'", "'('", "')'", "'{'", "'}'", "'['", "']'", 
                     "'%'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "DIGIT", "INDENT", "NOT_INDENT", "SPACE", "NEWLINE", 
                      "AND", "VARIABLE", "OR", "NOT", "DIV", "SHL", "SHR", 
                      "XOR", "MOD", "ECHO", "IS", "ISNOT", "OF", "OP6", 
                      "EQUALS_EQUALS", "EQUALS_OPERATOR", "ADD_OPERATOR", 
                      "MUL_OPERATOR", "MINUS_OPERATOR", "DIV_OPERATOR", 
                      "BITWISE_NOT_OPERATOR", "AND_OPERATOR", "OR_OPERATOR", 
                      "LESS_THAN", "GREATER_THAN", "NOT_OPERATOR", "XOR_OPERATOR", 
                      "DOT", "COLON", "COMMA", "SEMI_COLON", "ADDR", "AS", 
                      "ASM", "BIND", "BLOCK", "BREAK", "CASE", "CAST", "CONCEPT", 
                      "CONST", "CONTINUE", "CONVERTER", "DEFER", "DISCARD", 
                      "DISTINCT", "DO", "ELIF", "ELSE", "END", "ENUM", "EXCEPT", 
                      "EXPORT", "FINALLY", "FOR", "FROM", "FUNC", "IF", 
                      "IMPORT", "IN", "INCLUDE", "INTERFACE", "ITERATOR", 
                      "LET", "MACRO", "METHOD", "MIXIN", "NIL", "NOTIN", 
                      "OBJECT", "OUT", "PROC", "PTR", "RAISE", "REF", "RETURN", 
                      "STATIC", "TEMPLATE", "TRY", "TUPLE", "TYPE", "USING", 
                      "WHEN", "WHILE", "YIELD", "OPEN_PAREN", "CLOSE_PAREN", 
                      "OPEN_BRACE", "CLOSE_BRACE", "OPEN_BRACK", "CLOSE_BRACK", 
                      "MODULUS", "TRIPLESTR_LIT", "CHAR_LIT", "STR_LIT", 
                      "RSTR_LIT", "GENERALIZED_STR_LIT", "GENERALIZED_TRIPLESTR_LIT", 
                      "WS", "AT", "COMMENT", "MULTI_LINE_COMMENT", "MULTI_LINE_COMMENT2", 
                      "SINGLE_MULTI_LINE_COMMENT", "IDENTIFIER", "H", "LETTER", 
                      "INT_LIT", "HEX_LIT", "DEC_LIT", "OCT_LIT", "BIN_LIT", 
                      "INT8_LIT", "INT16_LIT", "INT32_LIT", "INT64_LIT", 
                      "UINT_LIT", "UINT8_LIT", "UINT16_LIT", "UINT32_LIT", 
                      "UINT64_LIT", "FLOAT_LIT", "FLOAT32_LIT", "FLOAT32_SUFFIX", 
                      "FLOAT64_LIT", "FLOAT64_SUFFIX", "EXP", "HEXDIGIT", 
                      "OCTDIGIT", "BINDIGIT", "NEW_IDENTIFIER", "ARRAY_LEN", 
                      "FORLOOP_RANGE" ]

    RULE_start = 0
    RULE_stmt = 1
    RULE_varDec = 2
    RULE_constDec = 3
    RULE_letDec = 4
    RULE_assignStmt = 5
    RULE_printStmt = 6
    RULE_assertStmt = 7
    RULE_complexIfStmt = 8
    RULE_varComplexIfStmt = 9
    RULE_simpleIfStmt = 10
    RULE_simpleElifStmt = 11
    RULE_varSimpleIfStmt = 12
    RULE_varSimpleElifStmt = 13
    RULE_varSimpleElseStmt = 14
    RULE_simpleElseStmt = 15
    RULE_forLoop = 16
    RULE_whileLoop = 17
    RULE_whenStmt = 18
    RULE_simpleWhenStmt = 19
    RULE_procBlock = 20
    RULE_block = 21
    RULE_typeBlock = 22
    RULE_methodInvoke = 23
    RULE_instanceMethodInvoke = 24
    RULE_forEachStmt = 25
    RULE_importStmt = 26
    RULE_condition = 27
    RULE_simpleCondition = 28
    RULE_character_literals = 29
    RULE_string_literals = 30
    RULE_rightHandSideStmt = 31
    RULE_dataType = 32
    RULE_caseStmt = 33
    RULE_simpleOfStmt = 34
    RULE_simpleElifOfStmt = 35
    RULE_simpleCaseStmt = 36
    RULE_emptyStmt = 37
    RULE_commentStmt = 38
    RULE_operator = 39
    RULE_literal = 40

    ruleNames =  [ "start", "stmt", "varDec", "constDec", "letDec", "assignStmt", 
                   "printStmt", "assertStmt", "complexIfStmt", "varComplexIfStmt", 
                   "simpleIfStmt", "simpleElifStmt", "varSimpleIfStmt", 
                   "varSimpleElifStmt", "varSimpleElseStmt", "simpleElseStmt", 
                   "forLoop", "whileLoop", "whenStmt", "simpleWhenStmt", 
                   "procBlock", "block", "typeBlock", "methodInvoke", "instanceMethodInvoke", 
                   "forEachStmt", "importStmt", "condition", "simpleCondition", 
                   "character_literals", "string_literals", "rightHandSideStmt", 
                   "dataType", "caseStmt", "simpleOfStmt", "simpleElifOfStmt", 
                   "simpleCaseStmt", "emptyStmt", "commentStmt", "operator", 
                   "literal" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    DIGIT=16
    INDENT=17
    NOT_INDENT=18
    SPACE=19
    NEWLINE=20
    AND=21
    VARIABLE=22
    OR=23
    NOT=24
    DIV=25
    SHL=26
    SHR=27
    XOR=28
    MOD=29
    ECHO=30
    IS=31
    ISNOT=32
    OF=33
    OP6=34
    EQUALS_EQUALS=35
    EQUALS_OPERATOR=36
    ADD_OPERATOR=37
    MUL_OPERATOR=38
    MINUS_OPERATOR=39
    DIV_OPERATOR=40
    BITWISE_NOT_OPERATOR=41
    AND_OPERATOR=42
    OR_OPERATOR=43
    LESS_THAN=44
    GREATER_THAN=45
    NOT_OPERATOR=46
    XOR_OPERATOR=47
    DOT=48
    COLON=49
    COMMA=50
    SEMI_COLON=51
    ADDR=52
    AS=53
    ASM=54
    BIND=55
    BLOCK=56
    BREAK=57
    CASE=58
    CAST=59
    CONCEPT=60
    CONST=61
    CONTINUE=62
    CONVERTER=63
    DEFER=64
    DISCARD=65
    DISTINCT=66
    DO=67
    ELIF=68
    ELSE=69
    END=70
    ENUM=71
    EXCEPT=72
    EXPORT=73
    FINALLY=74
    FOR=75
    FROM=76
    FUNC=77
    IF=78
    IMPORT=79
    IN=80
    INCLUDE=81
    INTERFACE=82
    ITERATOR=83
    LET=84
    MACRO=85
    METHOD=86
    MIXIN=87
    NIL=88
    NOTIN=89
    OBJECT=90
    OUT=91
    PROC=92
    PTR=93
    RAISE=94
    REF=95
    RETURN=96
    STATIC=97
    TEMPLATE=98
    TRY=99
    TUPLE=100
    TYPE=101
    USING=102
    WHEN=103
    WHILE=104
    YIELD=105
    OPEN_PAREN=106
    CLOSE_PAREN=107
    OPEN_BRACE=108
    CLOSE_BRACE=109
    OPEN_BRACK=110
    CLOSE_BRACK=111
    MODULUS=112
    TRIPLESTR_LIT=113
    CHAR_LIT=114
    STR_LIT=115
    RSTR_LIT=116
    GENERALIZED_STR_LIT=117
    GENERALIZED_TRIPLESTR_LIT=118
    WS=119
    AT=120
    COMMENT=121
    MULTI_LINE_COMMENT=122
    MULTI_LINE_COMMENT2=123
    SINGLE_MULTI_LINE_COMMENT=124
    IDENTIFIER=125
    H=126
    LETTER=127
    INT_LIT=128
    HEX_LIT=129
    DEC_LIT=130
    OCT_LIT=131
    BIN_LIT=132
    INT8_LIT=133
    INT16_LIT=134
    INT32_LIT=135
    INT64_LIT=136
    UINT_LIT=137
    UINT8_LIT=138
    UINT16_LIT=139
    UINT32_LIT=140
    UINT64_LIT=141
    FLOAT_LIT=142
    FLOAT32_LIT=143
    FLOAT32_SUFFIX=144
    FLOAT64_LIT=145
    FLOAT64_SUFFIX=146
    EXP=147
    HEXDIGIT=148
    OCTDIGIT=149
    BINDIGIT=150
    NEW_IDENTIFIER=151
    ARRAY_LEN=152
    FORLOOP_RANGE=153

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class StartContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def getRuleIndex(self):
            return nimParser.RULE_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart" ):
                listener.enterStart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart" ):
                listener.exitStart(self)




    def start(self):

        localctx = nimParser.StartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_start)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 91
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.T__0) | (1 << nimParser.T__3) | (1 << nimParser.T__7) | (1 << nimParser.VARIABLE) | (1 << nimParser.ECHO) | (1 << nimParser.BLOCK) | (1 << nimParser.CASE) | (1 << nimParser.CONST))) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (nimParser.FOR - 75)) | (1 << (nimParser.FROM - 75)) | (1 << (nimParser.IF - 75)) | (1 << (nimParser.IMPORT - 75)) | (1 << (nimParser.LET - 75)) | (1 << (nimParser.PROC - 75)) | (1 << (nimParser.TYPE - 75)) | (1 << (nimParser.WHEN - 75)) | (1 << (nimParser.WHILE - 75)) | (1 << (nimParser.OPEN_PAREN - 75)) | (1 << (nimParser.IDENTIFIER - 75)))) != 0) or _la==nimParser.NEW_IDENTIFIER:
                self.state = 82
                self.stmt()
                self.state = 86
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 83
                        _la = self._input.LA(1)
                        if not(_la==nimParser.T__0 or _la==nimParser.T__1):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 88
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

                self.state = 93
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varDec(self):
            return self.getTypedRuleContext(nimParser.VarDecContext,0)


        def assignStmt(self):
            return self.getTypedRuleContext(nimParser.AssignStmtContext,0)


        def printStmt(self):
            return self.getTypedRuleContext(nimParser.PrintStmtContext,0)


        def constDec(self):
            return self.getTypedRuleContext(nimParser.ConstDecContext,0)


        def letDec(self):
            return self.getTypedRuleContext(nimParser.LetDecContext,0)


        def complexIfStmt(self):
            return self.getTypedRuleContext(nimParser.ComplexIfStmtContext,0)


        def forLoop(self):
            return self.getTypedRuleContext(nimParser.ForLoopContext,0)


        def whileLoop(self):
            return self.getTypedRuleContext(nimParser.WhileLoopContext,0)


        def whenStmt(self):
            return self.getTypedRuleContext(nimParser.WhenStmtContext,0)


        def procBlock(self):
            return self.getTypedRuleContext(nimParser.ProcBlockContext,0)


        def block(self):
            return self.getTypedRuleContext(nimParser.BlockContext,0)


        def typeBlock(self):
            return self.getTypedRuleContext(nimParser.TypeBlockContext,0)


        def methodInvoke(self):
            return self.getTypedRuleContext(nimParser.MethodInvokeContext,0)


        def instanceMethodInvoke(self):
            return self.getTypedRuleContext(nimParser.InstanceMethodInvokeContext,0)


        def emptyStmt(self):
            return self.getTypedRuleContext(nimParser.EmptyStmtContext,0)


        def forEachStmt(self):
            return self.getTypedRuleContext(nimParser.ForEachStmtContext,0)


        def caseStmt(self):
            return self.getTypedRuleContext(nimParser.CaseStmtContext,0)


        def importStmt(self):
            return self.getTypedRuleContext(nimParser.ImportStmtContext,0)


        def assertStmt(self):
            return self.getTypedRuleContext(nimParser.AssertStmtContext,0)


        def getRuleIndex(self):
            return nimParser.RULE_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt" ):
                listener.enterStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt" ):
                listener.exitStmt(self)




    def stmt(self):

        localctx = nimParser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_stmt)
        try:
            self.state = 113
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 94
                self.varDec()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 95
                self.assignStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 96
                self.printStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 97
                self.constDec()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 98
                self.letDec()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 99
                self.complexIfStmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 100
                self.forLoop()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 101
                self.whileLoop()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 102
                self.whenStmt()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 103
                self.procBlock()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 104
                self.block()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 105
                self.typeBlock()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 106
                self.methodInvoke()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 107
                self.instanceMethodInvoke()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 108
                self.emptyStmt()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 109
                self.forEachStmt()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 110
                self.caseStmt()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 111
                self.importStmt()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 112
                self.assertStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarDecContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARIABLE(self):
            return self.getToken(nimParser.VARIABLE, 0)

        def assignStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.AssignStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.AssignStmtContext,i)


        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.IDENTIFIER)
            else:
                return self.getToken(nimParser.IDENTIFIER, i)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COLON)
            else:
                return self.getToken(nimParser.COLON, i)

        def EQUALS_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.EQUALS_OPERATOR)
            else:
                return self.getToken(nimParser.EQUALS_OPERATOR, i)

        def varComplexIfStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.VarComplexIfStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.VarComplexIfStmtContext,i)


        def AT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.AT)
            else:
                return self.getToken(nimParser.AT, i)

        def OPEN_BRACK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.OPEN_BRACK)
            else:
                return self.getToken(nimParser.OPEN_BRACK, i)

        def CLOSE_BRACK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.CLOSE_BRACK)
            else:
                return self.getToken(nimParser.CLOSE_BRACK, i)

        def dataType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.DataTypeContext)
            else:
                return self.getTypedRuleContext(nimParser.DataTypeContext,i)


        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMA)
            else:
                return self.getToken(nimParser.COMMA, i)

        def MINUS_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.MINUS_OPERATOR)
            else:
                return self.getToken(nimParser.MINUS_OPERATOR, i)

        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.DIGIT)
            else:
                return self.getToken(nimParser.DIGIT, i)

        def getRuleIndex(self):
            return nimParser.RULE_varDec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarDec" ):
                listener.enterVarDec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarDec" ):
                listener.exitVarDec(self)




    def varDec(self):

        localctx = nimParser.VarDecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_varDec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 115
            self.match(nimParser.VARIABLE)
            self.state = 193 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 193
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
                    if la_ == 1:
                        self.state = 118
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==nimParser.T__0:
                            self.state = 116
                            self.match(nimParser.T__0)
                            self.state = 117
                            self.match(nimParser.INDENT)


                        self.state = 120
                        self.match(nimParser.IDENTIFIER)
                        self.state = 125
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==nimParser.COMMA:
                            self.state = 121
                            self.match(nimParser.COMMA)
                            self.state = 122
                            self.match(nimParser.IDENTIFIER)
                            self.state = 127
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 128
                        self.match(nimParser.COLON)
                        self.state = 131
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [nimParser.T__12, nimParser.T__13, nimParser.T__14]:
                            self.state = 129
                            self.dataType()
                            pass
                        elif token in [nimParser.IDENTIFIER]:
                            self.state = 130
                            self.match(nimParser.IDENTIFIER)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 136
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,6,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 133
                                self.match(nimParser.T__0) 
                            self.state = 138
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,6,self._ctx)

                        pass

                    elif la_ == 2:
                        self.state = 141
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==nimParser.T__0:
                            self.state = 139
                            self.match(nimParser.T__0)
                            self.state = 140
                            self.match(nimParser.INDENT)


                        self.state = 143
                        self.match(nimParser.T__2)
                        self.state = 147
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 144
                                _la = self._input.LA(1)
                                if _la <= 0 or (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.T__0) | (1 << nimParser.T__1) | (1 << nimParser.T__2))) != 0):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume() 
                            self.state = 149
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

                        self.state = 153
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 150
                                self.match(nimParser.T__0) 
                            self.state = 155
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

                        pass

                    elif la_ == 3:
                        self.state = 156
                        self.assignStmt()
                        pass

                    elif la_ == 4:
                        self.state = 157
                        self.match(nimParser.IDENTIFIER)
                        self.state = 158
                        self.match(nimParser.EQUALS_OPERATOR)
                        self.state = 159
                        self.varComplexIfStmt()
                        pass

                    elif la_ == 5:
                        self.state = 160
                        self.match(nimParser.IDENTIFIER)
                        self.state = 161
                        self.match(nimParser.EQUALS_OPERATOR)
                        self.state = 162
                        self.match(nimParser.AT)
                        self.state = 163
                        self.match(nimParser.OPEN_BRACK)
                        self.state = 173
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [nimParser.DIGIT, nimParser.MINUS_OPERATOR]:
                            self.state = 165
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==nimParser.MINUS_OPERATOR:
                                self.state = 164
                                self.match(nimParser.MINUS_OPERATOR)


                            self.state = 168 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 167
                                self.match(nimParser.DIGIT)
                                self.state = 170 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==nimParser.DIGIT):
                                    break

                            pass
                        elif token in [nimParser.IDENTIFIER]:
                            self.state = 172
                            self.match(nimParser.IDENTIFIER)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 189
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==nimParser.COMMA:
                            self.state = 175
                            self.match(nimParser.COMMA)
                            self.state = 185
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [nimParser.DIGIT, nimParser.MINUS_OPERATOR]:
                                self.state = 177
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==nimParser.MINUS_OPERATOR:
                                    self.state = 176
                                    self.match(nimParser.MINUS_OPERATOR)


                                self.state = 180 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 179
                                    self.match(nimParser.DIGIT)
                                    self.state = 182 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==nimParser.DIGIT):
                                        break

                                pass
                            elif token in [nimParser.IDENTIFIER]:
                                self.state = 184
                                self.match(nimParser.IDENTIFIER)
                                pass
                            else:
                                raise NoViableAltException(self)

                            self.state = 191
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 192
                        self.match(nimParser.CLOSE_BRACK)
                        pass



                else:
                    raise NoViableAltException(self)
                self.state = 195 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,18,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstDecContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(nimParser.CONST, 0)

        def assignStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.AssignStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.AssignStmtContext,i)


        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def COMMENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMENT)
            else:
                return self.getToken(nimParser.COMMENT, i)

        def getRuleIndex(self):
            return nimParser.RULE_constDec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstDec" ):
                listener.enterConstDec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstDec" ):
                listener.exitConstDec(self)




    def constDec(self):

        localctx = nimParser.ConstDecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_constDec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 197
            self.match(nimParser.CONST)
            self.state = 210 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 200
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==nimParser.T__0:
                        self.state = 198
                        self.match(nimParser.T__0)
                        self.state = 199
                        self.match(nimParser.INDENT)


                    self.state = 202
                    self.assignStmt()
                    self.state = 204
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
                    if la_ == 1:
                        self.state = 203
                        self.match(nimParser.T__0)


                    self.state = 208
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
                    if la_ == 1:
                        self.state = 206
                        self.match(nimParser.INDENT)
                        self.state = 207
                        self.match(nimParser.COMMENT)



                else:
                    raise NoViableAltException(self)
                self.state = 212 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,22,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetDecContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LET(self):
            return self.getToken(nimParser.LET, 0)

        def assignStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.AssignStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.AssignStmtContext,i)


        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def COMMENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMENT)
            else:
                return self.getToken(nimParser.COMMENT, i)

        def getRuleIndex(self):
            return nimParser.RULE_letDec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetDec" ):
                listener.enterLetDec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetDec" ):
                listener.exitLetDec(self)




    def letDec(self):

        localctx = nimParser.LetDecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_letDec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 214
            self.match(nimParser.LET)
            self.state = 227 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 217
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==nimParser.T__0:
                        self.state = 215
                        self.match(nimParser.T__0)
                        self.state = 216
                        self.match(nimParser.INDENT)


                    self.state = 219
                    self.assignStmt()
                    self.state = 221
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
                    if la_ == 1:
                        self.state = 220
                        self.match(nimParser.T__0)


                    self.state = 225
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
                    if la_ == 1:
                        self.state = 223
                        self.match(nimParser.INDENT)
                        self.state = 224
                        self.match(nimParser.COMMENT)



                else:
                    raise NoViableAltException(self)
                self.state = 229 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(nimParser.IDENTIFIER, 0)

        def EQUALS_OPERATOR(self):
            return self.getToken(nimParser.EQUALS_OPERATOR, 0)

        def instanceMethodInvoke(self):
            return self.getTypedRuleContext(nimParser.InstanceMethodInvokeContext,0)


        def rightHandSideStmt(self):
            return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,0)


        def AT(self):
            return self.getToken(nimParser.AT, 0)

        def SEMI_COLON(self):
            return self.getToken(nimParser.SEMI_COLON, 0)

        def INDENT(self):
            return self.getToken(nimParser.INDENT, 0)

        def methodInvoke(self):
            return self.getTypedRuleContext(nimParser.MethodInvokeContext,0)


        def ADD_OPERATOR(self):
            return self.getToken(nimParser.ADD_OPERATOR, 0)

        def literal(self):
            return self.getTypedRuleContext(nimParser.LiteralContext,0)


        def getRuleIndex(self):
            return nimParser.RULE_assignStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignStmt" ):
                listener.enterAssignStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignStmt" ):
                listener.exitAssignStmt(self)




    def assignStmt(self):

        localctx = nimParser.AssignStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_assignStmt)
        self._la = 0 # Token type
        try:
            self.state = 258
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 231
                self.match(nimParser.IDENTIFIER)
                self.state = 232
                self.match(nimParser.EQUALS_OPERATOR)
                self.state = 234
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.AT:
                    self.state = 233
                    self.match(nimParser.AT)


                self.state = 238
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.NEW_IDENTIFIER]:
                    self.state = 236
                    self.instanceMethodInvoke()
                    pass
                elif token in [nimParser.T__6, nimParser.T__11, nimParser.DIGIT, nimParser.NIL, nimParser.OPEN_PAREN, nimParser.OPEN_BRACK, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.IDENTIFIER, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                    self.state = 237
                    self.rightHandSideStmt()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 241
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.SEMI_COLON:
                    self.state = 240
                    self.match(nimParser.SEMI_COLON)


                self.state = 246
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,30,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 243
                        self.match(nimParser.T__0) 
                    self.state = 248
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,30,self._ctx)

                self.state = 250
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
                if la_ == 1:
                    self.state = 249
                    self.match(nimParser.INDENT)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 252
                self.match(nimParser.IDENTIFIER)
                self.state = 253
                self.match(nimParser.EQUALS_OPERATOR)
                self.state = 254
                self.methodInvoke()
                self.state = 255
                self.match(nimParser.ADD_OPERATOR)
                self.state = 256
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrintStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ECHO(self):
            return self.getToken(nimParser.ECHO, 0)

        def OPEN_PAREN(self):
            return self.getToken(nimParser.OPEN_PAREN, 0)

        def rightHandSideStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.RightHandSideStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,i)


        def CLOSE_PAREN(self):
            return self.getToken(nimParser.CLOSE_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMA)
            else:
                return self.getToken(nimParser.COMMA, i)

        def methodInvoke(self):
            return self.getTypedRuleContext(nimParser.MethodInvokeContext,0)


        def getRuleIndex(self):
            return nimParser.RULE_printStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrintStmt" ):
                listener.enterPrintStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrintStmt" ):
                listener.exitPrintStmt(self)




    def printStmt(self):

        localctx = nimParser.PrintStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_printStmt)
        self._la = 0 # Token type
        try:
            self.state = 283
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 260
                self.match(nimParser.ECHO)
                self.state = 261
                self.match(nimParser.OPEN_PAREN)
                self.state = 262
                self.rightHandSideStmt()
                self.state = 267
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nimParser.COMMA:
                    self.state = 263
                    self.match(nimParser.COMMA)
                    self.state = 264
                    self.rightHandSideStmt()
                    self.state = 269
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 270
                self.match(nimParser.CLOSE_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 272
                self.match(nimParser.ECHO)
                self.state = 273
                self.rightHandSideStmt()
                self.state = 278
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nimParser.COMMA:
                    self.state = 274
                    self.match(nimParser.COMMA)
                    self.state = 275
                    self.rightHandSideStmt()
                    self.state = 280
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 281
                self.match(nimParser.ECHO)
                self.state = 282
                self.methodInvoke()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssertStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.LiteralContext)
            else:
                return self.getTypedRuleContext(nimParser.LiteralContext,i)


        def EQUALS_EQUALS(self):
            return self.getToken(nimParser.EQUALS_EQUALS, 0)

        def getRuleIndex(self):
            return nimParser.RULE_assertStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssertStmt" ):
                listener.enterAssertStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssertStmt" ):
                listener.exitAssertStmt(self)




    def assertStmt(self):

        localctx = nimParser.AssertStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_assertStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 285
            self.match(nimParser.T__3)
            self.state = 286
            self.literal()
            self.state = 287
            self.match(nimParser.EQUALS_EQUALS)
            self.state = 288
            self.literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexIfStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIfStmt(self):
            return self.getTypedRuleContext(nimParser.SimpleIfStmtContext,0)


        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def simpleElifStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.SimpleElifStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.SimpleElifStmtContext,i)


        def simpleElseStmt(self):
            return self.getTypedRuleContext(nimParser.SimpleElseStmtContext,0)


        def getRuleIndex(self):
            return nimParser.RULE_complexIfStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplexIfStmt" ):
                listener.enterComplexIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplexIfStmt" ):
                listener.exitComplexIfStmt(self)




    def complexIfStmt(self):

        localctx = nimParser.ComplexIfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_complexIfStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 290
            self.simpleIfStmt()
            self.state = 292
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.state = 291
                self.match(nimParser.INDENT)


            self.state = 297
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,37,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 294
                    self.simpleElifStmt() 
                self.state = 299
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,37,self._ctx)

            self.state = 301
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.state = 300
                self.simpleElseStmt()


            self.state = 305
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.state = 303
                self.match(nimParser.T__0)
                self.state = 304
                self.match(nimParser.INDENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarComplexIfStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varSimpleIfStmt(self):
            return self.getTypedRuleContext(nimParser.VarSimpleIfStmtContext,0)


        def varSimpleElifStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.VarSimpleElifStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.VarSimpleElifStmtContext,i)


        def varSimpleElseStmt(self):
            return self.getTypedRuleContext(nimParser.VarSimpleElseStmtContext,0)


        def getRuleIndex(self):
            return nimParser.RULE_varComplexIfStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarComplexIfStmt" ):
                listener.enterVarComplexIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarComplexIfStmt" ):
                listener.exitVarComplexIfStmt(self)




    def varComplexIfStmt(self):

        localctx = nimParser.VarComplexIfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_varComplexIfStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 307
            self.varSimpleIfStmt()
            self.state = 311
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,40,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 308
                    self.varSimpleElifStmt() 
                self.state = 313
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,40,self._ctx)

            self.state = 315
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.state = 314
                self.varSimpleElseStmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleIfStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(nimParser.IF, 0)

        def condition(self):
            return self.getTypedRuleContext(nimParser.ConditionContext,0)


        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def assignStmt(self):
            return self.getTypedRuleContext(nimParser.AssignStmtContext,0)


        def NOT(self):
            return self.getToken(nimParser.NOT, 0)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def BREAK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.BREAK)
            else:
                return self.getToken(nimParser.BREAK, i)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.IDENTIFIER)
            else:
                return self.getToken(nimParser.IDENTIFIER, i)

        def CONTINUE(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.CONTINUE)
            else:
                return self.getToken(nimParser.CONTINUE, i)

        def RETURN(self):
            return self.getToken(nimParser.RETURN, 0)

        def OPEN_PAREN(self):
            return self.getToken(nimParser.OPEN_PAREN, 0)

        def rightHandSideStmt(self):
            return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(nimParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return nimParser.RULE_simpleIfStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleIfStmt" ):
                listener.enterSimpleIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleIfStmt" ):
                listener.exitSimpleIfStmt(self)




    def simpleIfStmt(self):

        localctx = nimParser.SimpleIfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_simpleIfStmt)
        self._la = 0 # Token type
        try:
            self.state = 413
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 317
                self.match(nimParser.IF)
                self.state = 319
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.NOT:
                    self.state = 318
                    self.match(nimParser.NOT)


                self.state = 321
                self.condition()
                self.state = 322
                self.match(nimParser.COLON)
                self.state = 323
                self.assignStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 325
                self.match(nimParser.IF)
                self.state = 327
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.NOT:
                    self.state = 326
                    self.match(nimParser.NOT)


                self.state = 329
                self.condition()
                self.state = 330
                self.match(nimParser.COLON)
                self.state = 343 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 331
                        self.match(nimParser.T__0)
                        self.state = 332
                        self.match(nimParser.INDENT)
                        self.state = 341
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [nimParser.T__0, nimParser.T__3, nimParser.T__7, nimParser.VARIABLE, nimParser.ECHO, nimParser.BLOCK, nimParser.CASE, nimParser.CONST, nimParser.FOR, nimParser.FROM, nimParser.IF, nimParser.IMPORT, nimParser.LET, nimParser.PROC, nimParser.TYPE, nimParser.WHEN, nimParser.WHILE, nimParser.OPEN_PAREN, nimParser.IDENTIFIER, nimParser.NEW_IDENTIFIER]:
                            self.state = 333
                            self.stmt()
                            pass
                        elif token in [nimParser.BREAK]:
                            self.state = 334
                            self.match(nimParser.BREAK)
                            self.state = 335
                            self.match(nimParser.IDENTIFIER)
                            pass
                        elif token in [nimParser.CONTINUE]:
                            self.state = 336
                            self.match(nimParser.CONTINUE)
                            pass
                        elif token in [nimParser.T__4]:
                            self.state = 337
                            self.match(nimParser.T__4)
                            self.state = 338
                            self.match(nimParser.IDENTIFIER)
                            pass
                        elif token in [nimParser.T__5]:
                            self.state = 339
                            self.match(nimParser.T__5)
                            self.state = 340
                            self.match(nimParser.IDENTIFIER)
                            pass
                        else:
                            raise NoViableAltException(self)


                    else:
                        raise NoViableAltException(self)
                    self.state = 345 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,45,self._ctx)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 347
                self.match(nimParser.IF)
                self.state = 349
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.NOT:
                    self.state = 348
                    self.match(nimParser.NOT)


                self.state = 351
                self.condition()
                self.state = 352
                self.match(nimParser.COLON)
                self.state = 368 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 353
                        self.match(nimParser.T__0)
                        self.state = 354
                        self.match(nimParser.INDENT)
                        self.state = 359 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 359
                                self._errHandler.sync(self)
                                token = self._input.LA(1)
                                if token in [nimParser.T__0, nimParser.T__3, nimParser.T__7, nimParser.VARIABLE, nimParser.ECHO, nimParser.BLOCK, nimParser.CASE, nimParser.CONST, nimParser.FOR, nimParser.FROM, nimParser.IF, nimParser.IMPORT, nimParser.LET, nimParser.PROC, nimParser.TYPE, nimParser.WHEN, nimParser.WHILE, nimParser.OPEN_PAREN, nimParser.IDENTIFIER, nimParser.NEW_IDENTIFIER]:
                                    self.state = 355
                                    self.stmt()
                                    pass
                                elif token in [nimParser.BREAK]:
                                    self.state = 356
                                    self.match(nimParser.BREAK)
                                    self.state = 357
                                    self.match(nimParser.IDENTIFIER)
                                    pass
                                elif token in [nimParser.CONTINUE]:
                                    self.state = 358
                                    self.match(nimParser.CONTINUE)
                                    pass
                                else:
                                    raise NoViableAltException(self)


                            else:
                                raise NoViableAltException(self)
                            self.state = 361 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,48,self._ctx)

                        self.state = 364 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 363
                                self.match(nimParser.T__0)

                            else:
                                raise NoViableAltException(self)
                            self.state = 366 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,49,self._ctx)


                    else:
                        raise NoViableAltException(self)
                    self.state = 370 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,50,self._ctx)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 372
                self.match(nimParser.IF)
                self.state = 374
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.NOT:
                    self.state = 373
                    self.match(nimParser.NOT)


                self.state = 376
                self.condition()
                self.state = 377
                self.match(nimParser.COLON)
                self.state = 378
                self.match(nimParser.RETURN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 380
                self.match(nimParser.IF)
                self.state = 382
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.NOT:
                    self.state = 381
                    self.match(nimParser.NOT)


                self.state = 384
                self.match(nimParser.IDENTIFIER)
                self.state = 385
                self.match(nimParser.OPEN_PAREN)
                self.state = 386
                self.rightHandSideStmt()
                self.state = 387
                self.match(nimParser.CLOSE_PAREN)
                self.state = 388
                self.match(nimParser.COLON)
                self.state = 398 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 389
                        self.match(nimParser.T__0)
                        self.state = 390
                        self.match(nimParser.INDENT)
                        self.state = 391
                        self.stmt()
                        self.state = 395
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,53,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 392
                                self.match(nimParser.T__0) 
                            self.state = 397
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,53,self._ctx)


                    else:
                        raise NoViableAltException(self)
                    self.state = 400 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,54,self._ctx)

                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 402
                self.match(nimParser.IF)
                self.state = 404
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.NOT:
                    self.state = 403
                    self.match(nimParser.NOT)


                self.state = 406
                self.match(nimParser.IDENTIFIER)
                self.state = 407
                self.match(nimParser.OPEN_PAREN)
                self.state = 408
                self.rightHandSideStmt()
                self.state = 409
                self.match(nimParser.CLOSE_PAREN)
                self.state = 410
                self.match(nimParser.COLON)
                self.state = 411
                self.assignStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleElifStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELIF(self):
            return self.getToken(nimParser.ELIF, 0)

        def condition(self):
            return self.getTypedRuleContext(nimParser.ConditionContext,0)


        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def assignStmt(self):
            return self.getTypedRuleContext(nimParser.AssignStmtContext,0)


        def NOT(self):
            return self.getToken(nimParser.NOT, 0)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def BREAK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.BREAK)
            else:
                return self.getToken(nimParser.BREAK, i)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.IDENTIFIER)
            else:
                return self.getToken(nimParser.IDENTIFIER, i)

        def CONTINUE(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.CONTINUE)
            else:
                return self.getToken(nimParser.CONTINUE, i)

        def RETURN(self):
            return self.getToken(nimParser.RETURN, 0)

        def OPEN_PAREN(self):
            return self.getToken(nimParser.OPEN_PAREN, 0)

        def rightHandSideStmt(self):
            return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(nimParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return nimParser.RULE_simpleElifStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleElifStmt" ):
                listener.enterSimpleElifStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleElifStmt" ):
                listener.exitSimpleElifStmt(self)




    def simpleElifStmt(self):

        localctx = nimParser.SimpleElifStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_simpleElifStmt)
        self._la = 0 # Token type
        try:
            self.state = 511
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 415
                self.match(nimParser.ELIF)
                self.state = 417
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.NOT:
                    self.state = 416
                    self.match(nimParser.NOT)


                self.state = 419
                self.condition()
                self.state = 420
                self.match(nimParser.COLON)
                self.state = 421
                self.assignStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 423
                self.match(nimParser.ELIF)
                self.state = 425
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.NOT:
                    self.state = 424
                    self.match(nimParser.NOT)


                self.state = 427
                self.condition()
                self.state = 428
                self.match(nimParser.COLON)
                self.state = 441 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 429
                        self.match(nimParser.T__0)
                        self.state = 430
                        self.match(nimParser.INDENT)
                        self.state = 439
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [nimParser.T__0, nimParser.T__3, nimParser.T__7, nimParser.VARIABLE, nimParser.ECHO, nimParser.BLOCK, nimParser.CASE, nimParser.CONST, nimParser.FOR, nimParser.FROM, nimParser.IF, nimParser.IMPORT, nimParser.LET, nimParser.PROC, nimParser.TYPE, nimParser.WHEN, nimParser.WHILE, nimParser.OPEN_PAREN, nimParser.IDENTIFIER, nimParser.NEW_IDENTIFIER]:
                            self.state = 431
                            self.stmt()
                            pass
                        elif token in [nimParser.BREAK]:
                            self.state = 432
                            self.match(nimParser.BREAK)
                            self.state = 433
                            self.match(nimParser.IDENTIFIER)
                            pass
                        elif token in [nimParser.CONTINUE]:
                            self.state = 434
                            self.match(nimParser.CONTINUE)
                            pass
                        elif token in [nimParser.T__4]:
                            self.state = 435
                            self.match(nimParser.T__4)
                            self.state = 436
                            self.match(nimParser.IDENTIFIER)
                            pass
                        elif token in [nimParser.T__5]:
                            self.state = 437
                            self.match(nimParser.T__5)
                            self.state = 438
                            self.match(nimParser.IDENTIFIER)
                            pass
                        else:
                            raise NoViableAltException(self)


                    else:
                        raise NoViableAltException(self)
                    self.state = 443 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,60,self._ctx)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 445
                self.match(nimParser.ELIF)
                self.state = 447
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.NOT:
                    self.state = 446
                    self.match(nimParser.NOT)


                self.state = 449
                self.condition()
                self.state = 450
                self.match(nimParser.COLON)
                self.state = 466 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 451
                        self.match(nimParser.T__0)
                        self.state = 452
                        self.match(nimParser.INDENT)
                        self.state = 457 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 457
                                self._errHandler.sync(self)
                                token = self._input.LA(1)
                                if token in [nimParser.T__0, nimParser.T__3, nimParser.T__7, nimParser.VARIABLE, nimParser.ECHO, nimParser.BLOCK, nimParser.CASE, nimParser.CONST, nimParser.FOR, nimParser.FROM, nimParser.IF, nimParser.IMPORT, nimParser.LET, nimParser.PROC, nimParser.TYPE, nimParser.WHEN, nimParser.WHILE, nimParser.OPEN_PAREN, nimParser.IDENTIFIER, nimParser.NEW_IDENTIFIER]:
                                    self.state = 453
                                    self.stmt()
                                    pass
                                elif token in [nimParser.BREAK]:
                                    self.state = 454
                                    self.match(nimParser.BREAK)
                                    self.state = 455
                                    self.match(nimParser.IDENTIFIER)
                                    pass
                                elif token in [nimParser.CONTINUE]:
                                    self.state = 456
                                    self.match(nimParser.CONTINUE)
                                    pass
                                else:
                                    raise NoViableAltException(self)


                            else:
                                raise NoViableAltException(self)
                            self.state = 459 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,63,self._ctx)

                        self.state = 462 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 461
                                self.match(nimParser.T__0)

                            else:
                                raise NoViableAltException(self)
                            self.state = 464 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,64,self._ctx)


                    else:
                        raise NoViableAltException(self)
                    self.state = 468 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,65,self._ctx)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 470
                self.match(nimParser.ELIF)
                self.state = 472
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.NOT:
                    self.state = 471
                    self.match(nimParser.NOT)


                self.state = 474
                self.condition()
                self.state = 475
                self.match(nimParser.COLON)
                self.state = 476
                self.match(nimParser.RETURN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 478
                self.match(nimParser.ELIF)
                self.state = 480
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.NOT:
                    self.state = 479
                    self.match(nimParser.NOT)


                self.state = 482
                self.match(nimParser.IDENTIFIER)
                self.state = 483
                self.match(nimParser.OPEN_PAREN)
                self.state = 484
                self.rightHandSideStmt()
                self.state = 485
                self.match(nimParser.CLOSE_PAREN)
                self.state = 486
                self.match(nimParser.COLON)
                self.state = 496 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 487
                        self.match(nimParser.T__0)
                        self.state = 488
                        self.match(nimParser.INDENT)
                        self.state = 489
                        self.stmt()
                        self.state = 493
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,68,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 490
                                self.match(nimParser.T__0) 
                            self.state = 495
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,68,self._ctx)


                    else:
                        raise NoViableAltException(self)
                    self.state = 498 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,69,self._ctx)

                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 500
                self.match(nimParser.ELIF)
                self.state = 502
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.NOT:
                    self.state = 501
                    self.match(nimParser.NOT)


                self.state = 504
                self.match(nimParser.IDENTIFIER)
                self.state = 505
                self.match(nimParser.OPEN_PAREN)
                self.state = 506
                self.rightHandSideStmt()
                self.state = 507
                self.match(nimParser.CLOSE_PAREN)
                self.state = 508
                self.match(nimParser.COLON)
                self.state = 509
                self.assignStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarSimpleIfStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(nimParser.IF, 0)

        def condition(self):
            return self.getTypedRuleContext(nimParser.ConditionContext,0)


        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def rightHandSideStmt(self):
            return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,0)


        def NEW_IDENTIFIER(self):
            return self.getToken(nimParser.NEW_IDENTIFIER, 0)

        def NOT(self):
            return self.getToken(nimParser.NOT, 0)

        def getRuleIndex(self):
            return nimParser.RULE_varSimpleIfStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarSimpleIfStmt" ):
                listener.enterVarSimpleIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarSimpleIfStmt" ):
                listener.exitVarSimpleIfStmt(self)




    def varSimpleIfStmt(self):

        localctx = nimParser.VarSimpleIfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_varSimpleIfStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 513
            self.match(nimParser.IF)
            self.state = 515
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.NOT:
                self.state = 514
                self.match(nimParser.NOT)


            self.state = 517
            self.condition()
            self.state = 518
            self.match(nimParser.COLON)
            self.state = 521
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nimParser.T__6, nimParser.T__11, nimParser.DIGIT, nimParser.NIL, nimParser.OPEN_PAREN, nimParser.OPEN_BRACK, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.IDENTIFIER, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                self.state = 519
                self.rightHandSideStmt()
                pass
            elif token in [nimParser.NEW_IDENTIFIER]:
                self.state = 520
                self.match(nimParser.NEW_IDENTIFIER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarSimpleElifStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELIF(self):
            return self.getToken(nimParser.ELIF, 0)

        def condition(self):
            return self.getTypedRuleContext(nimParser.ConditionContext,0)


        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def rightHandSideStmt(self):
            return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,0)


        def NEW_IDENTIFIER(self):
            return self.getToken(nimParser.NEW_IDENTIFIER, 0)

        def NOT(self):
            return self.getToken(nimParser.NOT, 0)

        def getRuleIndex(self):
            return nimParser.RULE_varSimpleElifStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarSimpleElifStmt" ):
                listener.enterVarSimpleElifStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarSimpleElifStmt" ):
                listener.exitVarSimpleElifStmt(self)




    def varSimpleElifStmt(self):

        localctx = nimParser.VarSimpleElifStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_varSimpleElifStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 523
            self.match(nimParser.ELIF)
            self.state = 525
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.NOT:
                self.state = 524
                self.match(nimParser.NOT)


            self.state = 527
            self.condition()
            self.state = 528
            self.match(nimParser.COLON)
            self.state = 531
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nimParser.T__6, nimParser.T__11, nimParser.DIGIT, nimParser.NIL, nimParser.OPEN_PAREN, nimParser.OPEN_BRACK, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.IDENTIFIER, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                self.state = 529
                self.rightHandSideStmt()
                pass
            elif token in [nimParser.NEW_IDENTIFIER]:
                self.state = 530
                self.match(nimParser.NEW_IDENTIFIER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarSimpleElseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(nimParser.ELSE, 0)

        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def rightHandSideStmt(self):
            return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,0)


        def NEW_IDENTIFIER(self):
            return self.getToken(nimParser.NEW_IDENTIFIER, 0)

        def INDENT(self):
            return self.getToken(nimParser.INDENT, 0)

        def getRuleIndex(self):
            return nimParser.RULE_varSimpleElseStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarSimpleElseStmt" ):
                listener.enterVarSimpleElseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarSimpleElseStmt" ):
                listener.exitVarSimpleElseStmt(self)




    def varSimpleElseStmt(self):

        localctx = nimParser.VarSimpleElseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_varSimpleElseStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 534
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.INDENT:
                self.state = 533
                self.match(nimParser.INDENT)


            self.state = 536
            self.match(nimParser.ELSE)
            self.state = 537
            self.match(nimParser.COLON)
            self.state = 540
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nimParser.T__6, nimParser.T__11, nimParser.DIGIT, nimParser.NIL, nimParser.OPEN_PAREN, nimParser.OPEN_BRACK, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.IDENTIFIER, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                self.state = 538
                self.rightHandSideStmt()
                pass
            elif token in [nimParser.NEW_IDENTIFIER]:
                self.state = 539
                self.match(nimParser.NEW_IDENTIFIER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleElseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(nimParser.ELSE, 0)

        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def printStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.PrintStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.PrintStmtContext,i)


        def assignStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.AssignStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.AssignStmtContext,i)


        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def BREAK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.BREAK)
            else:
                return self.getToken(nimParser.BREAK, i)

        def getRuleIndex(self):
            return nimParser.RULE_simpleElseStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleElseStmt" ):
                listener.enterSimpleElseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleElseStmt" ):
                listener.exitSimpleElseStmt(self)




    def simpleElseStmt(self):

        localctx = nimParser.SimpleElseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_simpleElseStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 543
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.INDENT:
                self.state = 542
                self.match(nimParser.INDENT)


            self.state = 545
            self.match(nimParser.ELSE)
            self.state = 546
            self.match(nimParser.COLON)
            self.state = 559 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 559
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [nimParser.T__0]:
                        self.state = 553 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 547
                                self.match(nimParser.T__0)
                                self.state = 548
                                self.match(nimParser.INDENT)
                                self.state = 551
                                self._errHandler.sync(self)
                                token = self._input.LA(1)
                                if token in [nimParser.T__0, nimParser.T__3, nimParser.T__7, nimParser.VARIABLE, nimParser.ECHO, nimParser.BLOCK, nimParser.CASE, nimParser.CONST, nimParser.FOR, nimParser.FROM, nimParser.IF, nimParser.IMPORT, nimParser.LET, nimParser.PROC, nimParser.TYPE, nimParser.WHEN, nimParser.WHILE, nimParser.OPEN_PAREN, nimParser.IDENTIFIER, nimParser.NEW_IDENTIFIER]:
                                    self.state = 549
                                    self.stmt()
                                    pass
                                elif token in [nimParser.BREAK]:
                                    self.state = 550
                                    self.match(nimParser.BREAK)
                                    pass
                                else:
                                    raise NoViableAltException(self)


                            else:
                                raise NoViableAltException(self)
                            self.state = 555 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,80,self._ctx)

                        pass
                    elif token in [nimParser.ECHO]:
                        self.state = 557
                        self.printStmt()
                        pass
                    elif token in [nimParser.IDENTIFIER]:
                        self.state = 558
                        self.assignStmt()
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 561 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,82,self._ctx)

            self.state = 566
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,83,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 563
                    self.match(nimParser.T__0) 
                self.state = 568
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,83,self._ctx)

            self.state = 570
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.state = 569
                self.match(nimParser.INDENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForLoopContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(nimParser.FOR, 0)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.IDENTIFIER)
            else:
                return self.getToken(nimParser.IDENTIFIER, i)

        def IN(self):
            return self.getToken(nimParser.IN, 0)

        def CHAR_LIT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.CHAR_LIT)
            else:
                return self.getToken(nimParser.CHAR_LIT, i)

        def OP6(self):
            return self.getToken(nimParser.OP6, 0)

        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def COMMENT(self):
            return self.getToken(nimParser.COMMENT, 0)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def FORLOOP_RANGE(self):
            return self.getToken(nimParser.FORLOOP_RANGE, 0)

        def methodInvoke(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.MethodInvokeContext)
            else:
                return self.getTypedRuleContext(nimParser.MethodInvokeContext,i)


        def LESS_THAN(self):
            return self.getToken(nimParser.LESS_THAN, 0)

        def NEW_IDENTIFIER(self):
            return self.getToken(nimParser.NEW_IDENTIFIER, 0)

        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.DIGIT)
            else:
                return self.getToken(nimParser.DIGIT, i)

        def AT(self):
            return self.getToken(nimParser.AT, 0)

        def OPEN_BRACK(self):
            return self.getToken(nimParser.OPEN_BRACK, 0)

        def CLOSE_BRACK(self):
            return self.getToken(nimParser.CLOSE_BRACK, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMA)
            else:
                return self.getToken(nimParser.COMMA, i)

        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.LiteralContext)
            else:
                return self.getTypedRuleContext(nimParser.LiteralContext,i)


        def OPEN_PAREN(self):
            return self.getToken(nimParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(nimParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return nimParser.RULE_forLoop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForLoop" ):
                listener.enterForLoop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForLoop" ):
                listener.exitForLoop(self)




    def forLoop(self):

        localctx = nimParser.ForLoopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_forLoop)
        self._la = 0 # Token type
        try:
            self.state = 750
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 572
                self.match(nimParser.FOR)
                self.state = 573
                self.match(nimParser.IDENTIFIER)
                self.state = 574
                self.match(nimParser.IN)
                self.state = 575
                self.match(nimParser.CHAR_LIT)
                self.state = 576
                self.match(nimParser.OP6)
                self.state = 577
                self.match(nimParser.CHAR_LIT)
                self.state = 578
                self.match(nimParser.COLON)
                self.state = 580
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.COMMENT:
                    self.state = 579
                    self.match(nimParser.COMMENT)


                self.state = 585 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 582
                        self.match(nimParser.T__0)
                        self.state = 583
                        self.match(nimParser.INDENT)
                        self.state = 584
                        self.stmt()

                    else:
                        raise NoViableAltException(self)
                    self.state = 587 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,86,self._ctx)

                self.state = 592
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,87,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 589
                        self.match(nimParser.INDENT) 
                    self.state = 594
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,87,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 595
                self.match(nimParser.FOR)
                self.state = 596
                self.match(nimParser.IDENTIFIER)
                self.state = 597
                self.match(nimParser.IN)
                self.state = 600
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.FORLOOP_RANGE]:
                    self.state = 598
                    self.match(nimParser.FORLOOP_RANGE)
                    pass
                elif token in [nimParser.OPEN_PAREN, nimParser.IDENTIFIER]:
                    self.state = 599
                    self.methodInvoke()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 602
                self.match(nimParser.COLON)
                self.state = 604
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.COMMENT:
                    self.state = 603
                    self.match(nimParser.COMMENT)


                self.state = 609 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 606
                        self.match(nimParser.T__0)
                        self.state = 607
                        self.match(nimParser.INDENT)
                        self.state = 608
                        self.stmt()

                    else:
                        raise NoViableAltException(self)
                    self.state = 611 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,90,self._ctx)

                self.state = 616
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,91,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 613
                        self.match(nimParser.INDENT) 
                    self.state = 618
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,91,self._ctx)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 619
                self.match(nimParser.FOR)
                self.state = 620
                self.match(nimParser.IDENTIFIER)
                self.state = 621
                self.match(nimParser.IN)
                self.state = 623 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 622
                    self.match(nimParser.DIGIT)
                    self.state = 625 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==nimParser.DIGIT):
                        break

                self.state = 627
                self.match(nimParser.OP6)
                self.state = 628
                self.match(nimParser.LESS_THAN)
                self.state = 629
                self.match(nimParser.NEW_IDENTIFIER)
                self.state = 630
                self.match(nimParser.COLON)
                self.state = 632
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.COMMENT:
                    self.state = 631
                    self.match(nimParser.COMMENT)


                self.state = 637 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 634
                        self.match(nimParser.T__0)
                        self.state = 635
                        self.match(nimParser.INDENT)
                        self.state = 636
                        self.stmt()

                    else:
                        raise NoViableAltException(self)
                    self.state = 639 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,94,self._ctx)

                self.state = 644
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,95,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 641
                        self.match(nimParser.INDENT) 
                    self.state = 646
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,95,self._ctx)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 647
                self.match(nimParser.FOR)
                self.state = 648
                self.match(nimParser.IDENTIFIER)
                self.state = 653
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nimParser.COMMA:
                    self.state = 649
                    self.match(nimParser.COMMA)
                    self.state = 650
                    self.match(nimParser.IDENTIFIER)
                    self.state = 655
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 656
                self.match(nimParser.IN)
                self.state = 657
                self.match(nimParser.AT)
                self.state = 658
                self.match(nimParser.OPEN_BRACK)
                self.state = 683
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nimParser.DIGIT or ((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & ((1 << (nimParser.NIL - 88)) | (1 << (nimParser.TRIPLESTR_LIT - 88)) | (1 << (nimParser.CHAR_LIT - 88)) | (1 << (nimParser.STR_LIT - 88)) | (1 << (nimParser.RSTR_LIT - 88)) | (1 << (nimParser.INT_LIT - 88)) | (1 << (nimParser.INT8_LIT - 88)) | (1 << (nimParser.INT16_LIT - 88)) | (1 << (nimParser.INT32_LIT - 88)) | (1 << (nimParser.INT64_LIT - 88)) | (1 << (nimParser.UINT_LIT - 88)) | (1 << (nimParser.UINT8_LIT - 88)) | (1 << (nimParser.UINT16_LIT - 88)) | (1 << (nimParser.UINT32_LIT - 88)) | (1 << (nimParser.UINT64_LIT - 88)) | (1 << (nimParser.FLOAT_LIT - 88)) | (1 << (nimParser.FLOAT32_LIT - 88)) | (1 << (nimParser.FLOAT64_LIT - 88)))) != 0):
                    self.state = 665
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                        self.state = 659
                        self.literal()
                        pass
                    elif token in [nimParser.DIGIT]:
                        self.state = 661 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 660
                                self.match(nimParser.DIGIT)

                            else:
                                raise NoViableAltException(self)
                            self.state = 663 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,97,self._ctx)

                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 678
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==nimParser.COMMA:
                        self.state = 667
                        self.match(nimParser.COMMA)
                        self.state = 674
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                            self.state = 668
                            self.literal()
                            pass
                        elif token in [nimParser.DIGIT]:
                            self.state = 670 
                            self._errHandler.sync(self)
                            _alt = 1
                            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                if _alt == 1:
                                    self.state = 669
                                    self.match(nimParser.DIGIT)

                                else:
                                    raise NoViableAltException(self)
                                self.state = 672 
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,99,self._ctx)

                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 680
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 685
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 686
                self.match(nimParser.CLOSE_BRACK)
                self.state = 687
                self.match(nimParser.COLON)
                self.state = 689
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.COMMENT:
                    self.state = 688
                    self.match(nimParser.COMMENT)


                self.state = 694 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 691
                        self.match(nimParser.T__0)
                        self.state = 692
                        self.match(nimParser.INDENT)
                        self.state = 693
                        self.stmt()

                    else:
                        raise NoViableAltException(self)
                    self.state = 696 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,104,self._ctx)

                self.state = 701
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,105,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 698
                        self.match(nimParser.INDENT) 
                    self.state = 703
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,105,self._ctx)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 704
                self.match(nimParser.FOR)
                self.state = 705
                self.match(nimParser.IDENTIFIER)
                self.state = 706
                self.match(nimParser.IN)
                self.state = 707
                self.match(nimParser.IDENTIFIER)
                self.state = 708
                self.match(nimParser.OPEN_PAREN)
                self.state = 709
                self.match(nimParser.IDENTIFIER)
                self.state = 710
                self.match(nimParser.CLOSE_PAREN)
                self.state = 711
                self.match(nimParser.COLON)
                self.state = 713
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.COMMENT:
                    self.state = 712
                    self.match(nimParser.COMMENT)


                self.state = 718 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 715
                        self.match(nimParser.T__0)
                        self.state = 716
                        self.match(nimParser.INDENT)
                        self.state = 717
                        self.stmt()

                    else:
                        raise NoViableAltException(self)
                    self.state = 720 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,107,self._ctx)

                self.state = 725
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,108,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 722
                        self.match(nimParser.INDENT) 
                    self.state = 727
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,108,self._ctx)

                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 728
                self.match(nimParser.FOR)
                self.state = 729
                self.match(nimParser.IDENTIFIER)
                self.state = 730
                self.match(nimParser.IN)
                self.state = 731
                self.methodInvoke()
                self.state = 732
                self.match(nimParser.COLON)
                self.state = 733
                self.match(nimParser.T__0)
                self.state = 734
                self.match(nimParser.INDENT)
                self.state = 735
                self.methodInvoke()
                self.state = 737
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
                if la_ == 1:
                    self.state = 736
                    self.match(nimParser.T__0)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 739
                self.match(nimParser.FOR)
                self.state = 740
                self.match(nimParser.IDENTIFIER)
                self.state = 741
                self.match(nimParser.IN)
                self.state = 742
                self.match(nimParser.IDENTIFIER)
                self.state = 743
                self.match(nimParser.COLON)
                self.state = 744
                self.match(nimParser.T__0)
                self.state = 745
                self.match(nimParser.INDENT)
                self.state = 746
                self.methodInvoke()
                self.state = 748
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
                if la_ == 1:
                    self.state = 747
                    self.match(nimParser.T__0)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileLoopContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(nimParser.WHILE, 0)

        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def condition(self):
            return self.getTypedRuleContext(nimParser.ConditionContext,0)


        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def BREAK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.BREAK)
            else:
                return self.getToken(nimParser.BREAK, i)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.IDENTIFIER)
            else:
                return self.getToken(nimParser.IDENTIFIER, i)

        def getRuleIndex(self):
            return nimParser.RULE_whileLoop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileLoop" ):
                listener.enterWhileLoop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileLoop" ):
                listener.exitWhileLoop(self)




    def whileLoop(self):

        localctx = nimParser.WhileLoopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_whileLoop)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 752
            self.match(nimParser.WHILE)
            self.state = 755
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.state = 753
                self.condition()
                pass

            elif la_ == 2:
                self.state = 754
                self.match(nimParser.T__6)
                pass


            self.state = 757
            self.match(nimParser.COLON)
            self.state = 767 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 758
                    self.match(nimParser.T__0)
                    self.state = 759
                    self.match(nimParser.INDENT)
                    self.state = 765
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [nimParser.T__0, nimParser.T__3, nimParser.T__7, nimParser.VARIABLE, nimParser.ECHO, nimParser.BLOCK, nimParser.CASE, nimParser.CONST, nimParser.FOR, nimParser.FROM, nimParser.IF, nimParser.IMPORT, nimParser.LET, nimParser.PROC, nimParser.TYPE, nimParser.WHEN, nimParser.WHILE, nimParser.OPEN_PAREN, nimParser.IDENTIFIER, nimParser.NEW_IDENTIFIER]:
                        self.state = 760
                        self.stmt()
                        pass
                    elif token in [nimParser.BREAK]:
                        self.state = 761
                        self.match(nimParser.BREAK)
                        self.state = 763
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
                        if la_ == 1:
                            self.state = 762
                            self.match(nimParser.IDENTIFIER)


                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 769 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,115,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleWhenStmt(self):
            return self.getTypedRuleContext(nimParser.SimpleWhenStmtContext,0)


        def simpleElseStmt(self):
            return self.getTypedRuleContext(nimParser.SimpleElseStmtContext,0)


        def simpleElifStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.SimpleElifStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.SimpleElifStmtContext,i)


        def getRuleIndex(self):
            return nimParser.RULE_whenStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenStmt" ):
                listener.enterWhenStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenStmt" ):
                listener.exitWhenStmt(self)




    def whenStmt(self):

        localctx = nimParser.WhenStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_whenStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 771
            self.simpleWhenStmt()
            self.state = 775
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==nimParser.ELIF:
                self.state = 772
                self.simpleElifStmt()
                self.state = 777
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 778
            self.simpleElseStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleWhenStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(nimParser.WHEN, 0)

        def condition(self):
            return self.getTypedRuleContext(nimParser.ConditionContext,0)


        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def BREAK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.BREAK)
            else:
                return self.getToken(nimParser.BREAK, i)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def getRuleIndex(self):
            return nimParser.RULE_simpleWhenStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleWhenStmt" ):
                listener.enterSimpleWhenStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleWhenStmt" ):
                listener.exitSimpleWhenStmt(self)




    def simpleWhenStmt(self):

        localctx = nimParser.SimpleWhenStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_simpleWhenStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 780
            self.match(nimParser.WHEN)
            self.state = 781
            self.condition()
            self.state = 782
            self.match(nimParser.COLON)
            self.state = 791 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 785
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
                if la_ == 1:
                    self.state = 783
                    self.match(nimParser.T__0)
                    self.state = 784
                    self.match(nimParser.INDENT)


                self.state = 789
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.T__0, nimParser.T__3, nimParser.T__7, nimParser.VARIABLE, nimParser.ECHO, nimParser.BLOCK, nimParser.CASE, nimParser.CONST, nimParser.FOR, nimParser.FROM, nimParser.IF, nimParser.IMPORT, nimParser.LET, nimParser.PROC, nimParser.TYPE, nimParser.WHEN, nimParser.WHILE, nimParser.OPEN_PAREN, nimParser.IDENTIFIER, nimParser.NEW_IDENTIFIER]:
                    self.state = 787
                    self.stmt()
                    pass
                elif token in [nimParser.BREAK]:
                    self.state = 788
                    self.match(nimParser.BREAK)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 793 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.T__0) | (1 << nimParser.T__3) | (1 << nimParser.T__7) | (1 << nimParser.VARIABLE) | (1 << nimParser.ECHO) | (1 << nimParser.BLOCK) | (1 << nimParser.BREAK) | (1 << nimParser.CASE) | (1 << nimParser.CONST))) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (nimParser.FOR - 75)) | (1 << (nimParser.FROM - 75)) | (1 << (nimParser.IF - 75)) | (1 << (nimParser.IMPORT - 75)) | (1 << (nimParser.LET - 75)) | (1 << (nimParser.PROC - 75)) | (1 << (nimParser.TYPE - 75)) | (1 << (nimParser.WHEN - 75)) | (1 << (nimParser.WHILE - 75)) | (1 << (nimParser.OPEN_PAREN - 75)) | (1 << (nimParser.IDENTIFIER - 75)))) != 0) or _la==nimParser.NEW_IDENTIFIER):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROC(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.PROC)
            else:
                return self.getToken(nimParser.PROC, i)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.IDENTIFIER)
            else:
                return self.getToken(nimParser.IDENTIFIER, i)

        def OPEN_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.OPEN_PAREN)
            else:
                return self.getToken(nimParser.OPEN_PAREN, i)

        def CLOSE_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.CLOSE_PAREN)
            else:
                return self.getToken(nimParser.CLOSE_PAREN, i)

        def EQUALS_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.EQUALS_OPERATOR)
            else:
                return self.getToken(nimParser.EQUALS_OPERATOR, i)

        def OPEN_BRACK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.OPEN_BRACK)
            else:
                return self.getToken(nimParser.OPEN_BRACK, i)

        def CLOSE_BRACK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.CLOSE_BRACK)
            else:
                return self.getToken(nimParser.CLOSE_BRACK, i)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COLON)
            else:
                return self.getToken(nimParser.COLON, i)

        def dataType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.DataTypeContext)
            else:
                return self.getTypedRuleContext(nimParser.DataTypeContext,i)


        def RETURN(self):
            return self.getToken(nimParser.RETURN, 0)

        def rightHandSideStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.RightHandSideStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,i)


        def assignStmt(self):
            return self.getTypedRuleContext(nimParser.AssignStmtContext,0)


        def printStmt(self):
            return self.getTypedRuleContext(nimParser.PrintStmtContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMA)
            else:
                return self.getToken(nimParser.COMMA, i)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def VARIABLE(self):
            return self.getToken(nimParser.VARIABLE, 0)

        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.LiteralContext)
            else:
                return self.getTypedRuleContext(nimParser.LiteralContext,i)


        def MINUS_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.MINUS_OPERATOR)
            else:
                return self.getToken(nimParser.MINUS_OPERATOR, i)

        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.DIGIT)
            else:
                return self.getToken(nimParser.DIGIT, i)

        def getRuleIndex(self):
            return nimParser.RULE_procBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcBlock" ):
                listener.enterProcBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcBlock" ):
                listener.exitProcBlock(self)




    def procBlock(self):

        localctx = nimParser.ProcBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_procBlock)
        self._la = 0 # Token type
        try:
            self.state = 1018
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 795
                self.match(nimParser.PROC)
                self.state = 796
                self.match(nimParser.IDENTIFIER)
                self.state = 800
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.OPEN_BRACK:
                    self.state = 797
                    self.match(nimParser.OPEN_BRACK)
                    self.state = 798
                    self.match(nimParser.IDENTIFIER)
                    self.state = 799
                    self.match(nimParser.CLOSE_BRACK)


                self.state = 802
                self.match(nimParser.OPEN_PAREN)
                self.state = 813 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 803
                    self.match(nimParser.IDENTIFIER)
                    self.state = 808
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [nimParser.COLON]:
                        self.state = 804
                        self.match(nimParser.COLON)
                        self.state = 805
                        self.dataType()
                        pass
                    elif token in [nimParser.EQUALS_OPERATOR]:
                        self.state = 806
                        self.match(nimParser.EQUALS_OPERATOR)
                        self.state = 807
                        self.rightHandSideStmt()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 811
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==nimParser.COMMA:
                        self.state = 810
                        self.match(nimParser.COMMA)


                    self.state = 815 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==nimParser.IDENTIFIER):
                        break

                self.state = 817
                self.match(nimParser.CLOSE_PAREN)
                self.state = 820
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.COLON:
                    self.state = 818
                    self.match(nimParser.COLON)
                    self.state = 819
                    self.dataType()


                self.state = 822
                self.match(nimParser.EQUALS_OPERATOR)
                self.state = 860
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.T__0]:
                    self.state = 826 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 823
                            self.match(nimParser.T__0)
                            self.state = 824
                            self.match(nimParser.INDENT)
                            self.state = 825
                            self.stmt()

                        else:
                            raise NoViableAltException(self)
                        self.state = 828 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,125,self._ctx)

                    pass
                elif token in [nimParser.IDENTIFIER]:
                    self.state = 830
                    self.assignStmt()
                    self.state = 834
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,126,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 831
                            self.match(nimParser.T__0) 
                        self.state = 836
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,126,self._ctx)

                    self.state = 842
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,127,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 837
                            self.match(nimParser.T__0)
                            self.state = 838
                            self.match(nimParser.INDENT)
                            self.state = 839
                            self.stmt() 
                        self.state = 844
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,127,self._ctx)

                    pass
                elif token in [nimParser.ECHO]:
                    self.state = 845
                    self.printStmt()
                    self.state = 849
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,128,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 846
                            self.match(nimParser.T__0) 
                        self.state = 851
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,128,self._ctx)

                    self.state = 857
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,129,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 852
                            self.match(nimParser.T__0)
                            self.state = 853
                            self.match(nimParser.INDENT)
                            self.state = 854
                            self.stmt() 
                        self.state = 859
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,129,self._ctx)

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 864
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
                if la_ == 1:
                    self.state = 862
                    self.match(nimParser.RETURN)
                    self.state = 863
                    self.rightHandSideStmt()


                self.state = 867
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
                if la_ == 1:
                    self.state = 866
                    self.match(nimParser.T__0)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 869
                self.match(nimParser.PROC)
                self.state = 870
                self.match(nimParser.T__7)
                self.state = 871
                self.match(nimParser.OPEN_PAREN)
                self.state = 872
                self.match(nimParser.IDENTIFIER)
                self.state = 873
                self.match(nimParser.COLON)
                self.state = 874
                self.match(nimParser.PROC)
                self.state = 875
                self.match(nimParser.OPEN_PAREN)
                self.state = 876
                self.match(nimParser.IDENTIFIER)
                self.state = 877
                self.match(nimParser.COLON)
                self.state = 878
                self.dataType()
                self.state = 879
                self.match(nimParser.CLOSE_PAREN)
                self.state = 880
                self.match(nimParser.CLOSE_PAREN)
                self.state = 883
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.COLON:
                    self.state = 881
                    self.match(nimParser.COLON)
                    self.state = 882
                    self.dataType()


                self.state = 885
                self.match(nimParser.EQUALS_OPERATOR)
                self.state = 923
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.T__0]:
                    self.state = 889 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 886
                        self.match(nimParser.T__0)
                        self.state = 887
                        self.match(nimParser.INDENT)
                        self.state = 888
                        self.stmt()
                        self.state = 891 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==nimParser.T__0):
                            break

                    pass
                elif token in [nimParser.IDENTIFIER]:
                    self.state = 893
                    self.assignStmt()
                    self.state = 897
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,135,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 894
                            self.match(nimParser.T__0) 
                        self.state = 899
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,135,self._ctx)

                    self.state = 905
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==nimParser.T__0:
                        self.state = 900
                        self.match(nimParser.T__0)
                        self.state = 901
                        self.match(nimParser.INDENT)
                        self.state = 902
                        self.stmt()
                        self.state = 907
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [nimParser.ECHO]:
                    self.state = 908
                    self.printStmt()
                    self.state = 912
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,137,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 909
                            self.match(nimParser.T__0) 
                        self.state = 914
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,137,self._ctx)

                    self.state = 920
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==nimParser.T__0:
                        self.state = 915
                        self.match(nimParser.T__0)
                        self.state = 916
                        self.match(nimParser.INDENT)
                        self.state = 917
                        self.stmt()
                        self.state = 922
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 925
                self.match(nimParser.RETURN)
                self.state = 926
                self.rightHandSideStmt()
                self.state = 929
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
                if la_ == 1:
                    self.state = 928
                    self.match(nimParser.T__0)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 931
                self.match(nimParser.PROC)
                self.state = 932
                self.match(nimParser.IDENTIFIER)
                self.state = 936
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.OPEN_BRACK:
                    self.state = 933
                    self.match(nimParser.OPEN_BRACK)
                    self.state = 934
                    self.match(nimParser.IDENTIFIER)
                    self.state = 935
                    self.match(nimParser.CLOSE_BRACK)


                self.state = 938
                self.match(nimParser.OPEN_PAREN)
                self.state = 939
                self.match(nimParser.IDENTIFIER)
                self.state = 940
                self.match(nimParser.COLON)
                self.state = 941
                self.match(nimParser.VARIABLE)
                self.state = 942
                self.match(nimParser.IDENTIFIER)
                self.state = 943
                self.match(nimParser.OPEN_BRACK)
                self.state = 944
                self.match(nimParser.IDENTIFIER)
                self.state = 945
                self.match(nimParser.CLOSE_BRACK)
                self.state = 963
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nimParser.COMMA:
                    self.state = 946
                    self.match(nimParser.COMMA)
                    self.state = 947
                    self.match(nimParser.IDENTIFIER)
                    self.state = 948
                    self.match(nimParser.EQUALS_OPERATOR)
                    self.state = 959
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [nimParser.DIGIT, nimParser.MINUS_OPERATOR]:
                        self.state = 950
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==nimParser.MINUS_OPERATOR:
                            self.state = 949
                            self.match(nimParser.MINUS_OPERATOR)


                        self.state = 953 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 952
                            self.match(nimParser.DIGIT)
                            self.state = 955 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==nimParser.DIGIT):
                                break

                        pass
                    elif token in [nimParser.IDENTIFIER]:
                        self.state = 957
                        self.match(nimParser.IDENTIFIER)
                        pass
                    elif token in [nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                        self.state = 958
                        self.literal()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 965
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 966
                self.match(nimParser.CLOSE_PAREN)
                self.state = 969
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.COLON:
                    self.state = 967
                    self.match(nimParser.COLON)
                    self.state = 968
                    self.dataType()


                self.state = 971
                self.match(nimParser.EQUALS_OPERATOR)
                self.state = 1009
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.T__0]:
                    self.state = 975 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 972
                            self.match(nimParser.T__0)
                            self.state = 973
                            self.match(nimParser.INDENT)
                            self.state = 974
                            self.stmt()

                        else:
                            raise NoViableAltException(self)
                        self.state = 977 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,147,self._ctx)

                    pass
                elif token in [nimParser.IDENTIFIER]:
                    self.state = 979
                    self.assignStmt()
                    self.state = 983
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,148,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 980
                            self.match(nimParser.T__0) 
                        self.state = 985
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,148,self._ctx)

                    self.state = 991
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,149,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 986
                            self.match(nimParser.T__0)
                            self.state = 987
                            self.match(nimParser.INDENT)
                            self.state = 988
                            self.stmt() 
                        self.state = 993
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,149,self._ctx)

                    pass
                elif token in [nimParser.ECHO]:
                    self.state = 994
                    self.printStmt()
                    self.state = 998
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,150,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 995
                            self.match(nimParser.T__0) 
                        self.state = 1000
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,150,self._ctx)

                    self.state = 1006
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,151,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1001
                            self.match(nimParser.T__0)
                            self.state = 1002
                            self.match(nimParser.INDENT)
                            self.state = 1003
                            self.stmt() 
                        self.state = 1008
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,151,self._ctx)

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1013
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
                if la_ == 1:
                    self.state = 1011
                    self.match(nimParser.RETURN)
                    self.state = 1012
                    self.rightHandSideStmt()


                self.state = 1016
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
                if la_ == 1:
                    self.state = 1015
                    self.match(nimParser.T__0)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BLOCK(self):
            return self.getToken(nimParser.BLOCK, 0)

        def IDENTIFIER(self):
            return self.getToken(nimParser.IDENTIFIER, 0)

        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def getRuleIndex(self):
            return nimParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = nimParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1020
            self.match(nimParser.BLOCK)
            self.state = 1021
            self.match(nimParser.IDENTIFIER)
            self.state = 1022
            self.match(nimParser.COLON)
            self.state = 1026 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1023
                    self.match(nimParser.T__0)
                    self.state = 1024
                    self.match(nimParser.INDENT)
                    self.state = 1025
                    self.stmt()

                else:
                    raise NoViableAltException(self)
                self.state = 1028 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,156,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(nimParser.TYPE, 0)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.IDENTIFIER)
            else:
                return self.getToken(nimParser.IDENTIFIER, i)

        def EQUALS_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.EQUALS_OPERATOR)
            else:
                return self.getToken(nimParser.EQUALS_OPERATOR, i)

        def OPEN_BRACK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.OPEN_BRACK)
            else:
                return self.getToken(nimParser.OPEN_BRACK, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMA)
            else:
                return self.getToken(nimParser.COMMA, i)

        def dataType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.DataTypeContext)
            else:
                return self.getTypedRuleContext(nimParser.DataTypeContext,i)


        def CLOSE_BRACK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.CLOSE_BRACK)
            else:
                return self.getToken(nimParser.CLOSE_BRACK, i)

        def FORLOOP_RANGE(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.FORLOOP_RANGE)
            else:
                return self.getToken(nimParser.FORLOOP_RANGE, i)

        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.DIGIT)
            else:
                return self.getToken(nimParser.DIGIT, i)

        def getRuleIndex(self):
            return nimParser.RULE_typeBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeBlock" ):
                listener.enterTypeBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeBlock" ):
                listener.exitTypeBlock(self)




    def typeBlock(self):

        localctx = nimParser.TypeBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_typeBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1030
            self.match(nimParser.TYPE)
            self.state = 1031
            self.match(nimParser.T__0)
            self.state = 1050 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1032
                    self.match(nimParser.INDENT)
                    self.state = 1033
                    self.match(nimParser.IDENTIFIER)
                    self.state = 1034
                    self.match(nimParser.EQUALS_OPERATOR)
                    self.state = 1035
                    self.match(nimParser.T__8)
                    self.state = 1036
                    self.match(nimParser.OPEN_BRACK)
                    self.state = 1043
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [nimParser.FORLOOP_RANGE]:
                        self.state = 1037
                        self.match(nimParser.FORLOOP_RANGE)
                        pass
                    elif token in [nimParser.DIGIT]:
                        self.state = 1039 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 1038
                            self.match(nimParser.DIGIT)
                            self.state = 1041 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==nimParser.DIGIT):
                                break

                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1045
                    self.match(nimParser.COMMA)
                    self.state = 1046
                    self.dataType()
                    self.state = 1047
                    self.match(nimParser.CLOSE_BRACK)
                    self.state = 1048
                    self.match(nimParser.T__0)

                else:
                    raise NoViableAltException(self)
                self.state = 1052 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,159,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodInvokeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.IDENTIFIER)
            else:
                return self.getToken(nimParser.IDENTIFIER, i)

        def OPEN_PAREN(self):
            return self.getToken(nimParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(nimParser.CLOSE_PAREN, 0)

        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.LiteralContext)
            else:
                return self.getTypedRuleContext(nimParser.LiteralContext,i)


        def rightHandSideStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.RightHandSideStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMA)
            else:
                return self.getToken(nimParser.COMMA, i)

        def EQUALS_OPERATOR(self):
            return self.getToken(nimParser.EQUALS_OPERATOR, 0)

        def ADD_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.ADD_OPERATOR)
            else:
                return self.getToken(nimParser.ADD_OPERATOR, i)

        def MINUS_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.MINUS_OPERATOR)
            else:
                return self.getToken(nimParser.MINUS_OPERATOR, i)

        def MOD(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.MOD)
            else:
                return self.getToken(nimParser.MOD, i)

        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.DIGIT)
            else:
                return self.getToken(nimParser.DIGIT, i)

        def NEW_IDENTIFIER(self):
            return self.getToken(nimParser.NEW_IDENTIFIER, 0)

        def OPEN_BRACK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.OPEN_BRACK)
            else:
                return self.getToken(nimParser.OPEN_BRACK, i)

        def CLOSE_BRACK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.CLOSE_BRACK)
            else:
                return self.getToken(nimParser.CLOSE_BRACK, i)

        def getRuleIndex(self):
            return nimParser.RULE_methodInvoke

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodInvoke" ):
                listener.enterMethodInvoke(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodInvoke" ):
                listener.exitMethodInvoke(self)




    def methodInvoke(self):

        localctx = nimParser.MethodInvokeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_methodInvoke)
        self._la = 0 # Token type
        try:
            self.state = 1139
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1054
                self.match(nimParser.IDENTIFIER)
                self.state = 1055
                self.match(nimParser.OPEN_PAREN)
                self.state = 1064
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
                if la_ == 1:
                    self.state = 1056
                    self.match(nimParser.IDENTIFIER)
                    pass

                elif la_ == 2:
                    self.state = 1058 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 1057
                        self.match(nimParser.DIGIT)
                        self.state = 1060 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==nimParser.DIGIT):
                            break

                    pass

                elif la_ == 3:
                    self.state = 1062
                    self.literal()
                    pass

                elif la_ == 4:
                    self.state = 1063
                    self.rightHandSideStmt()
                    pass


                self.state = 1079
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,164,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1066
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.MOD) | (1 << nimParser.ADD_OPERATOR) | (1 << nimParser.MINUS_OPERATOR) | (1 << nimParser.COMMA))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1075
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
                        if la_ == 1:
                            self.state = 1067
                            self.match(nimParser.IDENTIFIER)
                            pass

                        elif la_ == 2:
                            self.state = 1069 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 1068
                                self.match(nimParser.DIGIT)
                                self.state = 1071 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==nimParser.DIGIT):
                                    break

                            pass

                        elif la_ == 3:
                            self.state = 1073
                            self.literal()
                            pass

                        elif la_ == 4:
                            self.state = 1074
                            self.rightHandSideStmt()
                            pass

                 
                    self.state = 1081
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,164,self._ctx)

                self.state = 1086
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.COMMA:
                    self.state = 1082
                    self.match(nimParser.COMMA)
                    self.state = 1083
                    self.match(nimParser.IDENTIFIER)
                    self.state = 1084
                    self.match(nimParser.EQUALS_OPERATOR)
                    self.state = 1085
                    self.match(nimParser.T__6)


                self.state = 1088
                self.match(nimParser.CLOSE_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1089
                self.match(nimParser.OPEN_PAREN)
                self.state = 1097
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.IDENTIFIER]:
                    self.state = 1090
                    self.match(nimParser.IDENTIFIER)
                    pass
                elif token in [nimParser.DIGIT]:
                    self.state = 1092 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 1091
                        self.match(nimParser.DIGIT)
                        self.state = 1094 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==nimParser.DIGIT):
                            break

                    pass
                elif token in [nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                    self.state = 1096
                    self.literal()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1111
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.ADD_OPERATOR) | (1 << nimParser.MINUS_OPERATOR) | (1 << nimParser.COMMA))) != 0):
                    self.state = 1099
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.ADD_OPERATOR) | (1 << nimParser.MINUS_OPERATOR) | (1 << nimParser.COMMA))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1107
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [nimParser.IDENTIFIER]:
                        self.state = 1100
                        self.match(nimParser.IDENTIFIER)
                        pass
                    elif token in [nimParser.DIGIT]:
                        self.state = 1102 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 1101
                            self.match(nimParser.DIGIT)
                            self.state = 1104 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==nimParser.DIGIT):
                                break

                        pass
                    elif token in [nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                        self.state = 1106
                        self.literal()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1113
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1114
                self.match(nimParser.CLOSE_PAREN)
                self.state = 1115
                self.match(nimParser.NEW_IDENTIFIER)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1116
                self.match(nimParser.IDENTIFIER)
                self.state = 1117
                self.match(nimParser.IDENTIFIER)
                self.state = 1131
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.OPEN_BRACK:
                    self.state = 1118
                    self.match(nimParser.OPEN_BRACK)
                    self.state = 1119
                    self.match(nimParser.IDENTIFIER)
                    self.state = 1120
                    self.match(nimParser.CLOSE_BRACK)
                    self.state = 1128
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,171,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1121
                            self.match(nimParser.COMMA)
                            self.state = 1122
                            self.match(nimParser.IDENTIFIER)
                            self.state = 1123
                            self.match(nimParser.OPEN_BRACK)
                            self.state = 1124
                            self.match(nimParser.IDENTIFIER)
                            self.state = 1125
                            self.match(nimParser.CLOSE_BRACK) 
                        self.state = 1130
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,171,self._ctx)



                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1133
                self.match(nimParser.IDENTIFIER)
                self.state = 1134
                self.match(nimParser.OPEN_PAREN)
                self.state = 1136
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.NEW_IDENTIFIER:
                    self.state = 1135
                    self.match(nimParser.NEW_IDENTIFIER)


                self.state = 1138
                self.match(nimParser.CLOSE_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstanceMethodInvokeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW_IDENTIFIER(self):
            return self.getToken(nimParser.NEW_IDENTIFIER, 0)

        def OPEN_PAREN(self):
            return self.getToken(nimParser.OPEN_PAREN, 0)

        def rightHandSideStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.RightHandSideStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,i)


        def CLOSE_PAREN(self):
            return self.getToken(nimParser.CLOSE_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMA)
            else:
                return self.getToken(nimParser.COMMA, i)

        def MOD(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.MOD)
            else:
                return self.getToken(nimParser.MOD, i)

        def ADD_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.ADD_OPERATOR)
            else:
                return self.getToken(nimParser.ADD_OPERATOR, i)

        def getRuleIndex(self):
            return nimParser.RULE_instanceMethodInvoke

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstanceMethodInvoke" ):
                listener.enterInstanceMethodInvoke(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstanceMethodInvoke" ):
                listener.exitInstanceMethodInvoke(self)




    def instanceMethodInvoke(self):

        localctx = nimParser.InstanceMethodInvokeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_instanceMethodInvoke)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1141
            self.match(nimParser.NEW_IDENTIFIER)
            self.state = 1142
            self.match(nimParser.OPEN_PAREN)
            self.state = 1143
            self.rightHandSideStmt()
            self.state = 1148
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.MOD) | (1 << nimParser.ADD_OPERATOR) | (1 << nimParser.COMMA))) != 0):
                self.state = 1144
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.MOD) | (1 << nimParser.ADD_OPERATOR) | (1 << nimParser.COMMA))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1145
                self.rightHandSideStmt()
                self.state = 1150
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1151
            self.match(nimParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForEachStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(nimParser.OPEN_PAREN, 0)

        def IDENTIFIER(self):
            return self.getToken(nimParser.IDENTIFIER, 0)

        def CLOSE_PAREN(self):
            return self.getToken(nimParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return nimParser.RULE_forEachStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForEachStmt" ):
                listener.enterForEachStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForEachStmt" ):
                listener.exitForEachStmt(self)




    def forEachStmt(self):

        localctx = nimParser.ForEachStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_forEachStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1153
            self.match(nimParser.T__7)
            self.state = 1154
            self.match(nimParser.OPEN_PAREN)
            self.state = 1155
            self.match(nimParser.IDENTIFIER)
            self.state = 1156
            self.match(nimParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(nimParser.IMPORT, 0)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.IDENTIFIER)
            else:
                return self.getToken(nimParser.IDENTIFIER, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMA)
            else:
                return self.getToken(nimParser.COMMA, i)

        def FROM(self):
            return self.getToken(nimParser.FROM, 0)

        def getRuleIndex(self):
            return nimParser.RULE_importStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportStmt" ):
                listener.enterImportStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportStmt" ):
                listener.exitImportStmt(self)




    def importStmt(self):

        localctx = nimParser.ImportStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_importStmt)
        self._la = 0 # Token type
        try:
            self.state = 1182
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nimParser.IMPORT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1158
                self.match(nimParser.IMPORT)
                self.state = 1159
                self.match(nimParser.IDENTIFIER)
                self.state = 1164
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nimParser.COMMA:
                    self.state = 1160
                    self.match(nimParser.COMMA)
                    self.state = 1161
                    self.match(nimParser.IDENTIFIER)
                    self.state = 1166
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1169
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
                if la_ == 1:
                    self.state = 1167
                    self.match(nimParser.FROM)
                    self.state = 1168
                    self.match(nimParser.IDENTIFIER)


                pass
            elif token in [nimParser.FROM]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1171
                self.match(nimParser.FROM)
                self.state = 1172
                self.match(nimParser.IDENTIFIER)
                self.state = 1173
                self.match(nimParser.IMPORT)
                self.state = 1174
                self.match(nimParser.IDENTIFIER)
                self.state = 1179
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nimParser.COMMA:
                    self.state = 1175
                    self.match(nimParser.COMMA)
                    self.state = 1176
                    self.match(nimParser.IDENTIFIER)
                    self.state = 1181
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleCondition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.SimpleConditionContext)
            else:
                return self.getTypedRuleContext(nimParser.SimpleConditionContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.AND)
            else:
                return self.getToken(nimParser.AND, i)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.OR)
            else:
                return self.getToken(nimParser.OR, i)

        def AND_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.AND_OPERATOR)
            else:
                return self.getToken(nimParser.AND_OPERATOR, i)

        def OR_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.OR_OPERATOR)
            else:
                return self.getToken(nimParser.OR_OPERATOR, i)

        def getRuleIndex(self):
            return nimParser.RULE_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition" ):
                listener.enterCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition" ):
                listener.exitCondition(self)




    def condition(self):

        localctx = nimParser.ConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_condition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1184
            self.simpleCondition()
            self.state = 1189
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.AND) | (1 << nimParser.OR) | (1 << nimParser.AND_OPERATOR) | (1 << nimParser.OR_OPERATOR))) != 0):
                self.state = 1185
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.AND) | (1 << nimParser.OR) | (1 << nimParser.AND_OPERATOR) | (1 << nimParser.OR_OPERATOR))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1186
                self.simpleCondition()
                self.state = 1191
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleConditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rightHandSideStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.RightHandSideStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,i)


        def LESS_THAN(self):
            return self.getToken(nimParser.LESS_THAN, 0)

        def GREATER_THAN(self):
            return self.getToken(nimParser.GREATER_THAN, 0)

        def EQUALS_EQUALS(self):
            return self.getToken(nimParser.EQUALS_EQUALS, 0)

        def EQUALS_OPERATOR(self):
            return self.getToken(nimParser.EQUALS_OPERATOR, 0)

        def IDENTIFIER(self):
            return self.getToken(nimParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return nimParser.RULE_simpleCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleCondition" ):
                listener.enterSimpleCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleCondition" ):
                listener.exitSimpleCondition(self)




    def simpleCondition(self):

        localctx = nimParser.SimpleConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_simpleCondition)
        self._la = 0 # Token type
        try:
            self.state = 1211
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,184,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1192
                self.rightHandSideStmt()
                self.state = 1204
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.LESS_THAN]:
                    self.state = 1193
                    self.match(nimParser.LESS_THAN)
                    self.state = 1195
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==nimParser.EQUALS_OPERATOR:
                        self.state = 1194
                        self.match(nimParser.EQUALS_OPERATOR)


                    pass
                elif token in [nimParser.T__9]:
                    self.state = 1197
                    self.match(nimParser.T__9)
                    pass
                elif token in [nimParser.T__10]:
                    self.state = 1198
                    self.match(nimParser.T__10)
                    pass
                elif token in [nimParser.GREATER_THAN]:
                    self.state = 1199
                    self.match(nimParser.GREATER_THAN)
                    self.state = 1201
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==nimParser.EQUALS_OPERATOR:
                        self.state = 1200
                        self.match(nimParser.EQUALS_OPERATOR)


                    pass
                elif token in [nimParser.EQUALS_EQUALS]:
                    self.state = 1203
                    self.match(nimParser.EQUALS_EQUALS)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1206
                self.rightHandSideStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1208
                self.match(nimParser.T__6)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1209
                self.match(nimParser.T__11)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1210
                self.match(nimParser.IDENTIFIER)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Character_literalsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_LIT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.CHAR_LIT)
            else:
                return self.getToken(nimParser.CHAR_LIT, i)

        def getRuleIndex(self):
            return nimParser.RULE_character_literals

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharacter_literals" ):
                listener.enterCharacter_literals(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharacter_literals" ):
                listener.exitCharacter_literals(self)




    def character_literals(self):

        localctx = nimParser.Character_literalsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_character_literals)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1214 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1213
                self.match(nimParser.CHAR_LIT)
                self.state = 1216 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==nimParser.CHAR_LIT):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class String_literalsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STR_LIT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.STR_LIT)
            else:
                return self.getToken(nimParser.STR_LIT, i)

        def getRuleIndex(self):
            return nimParser.RULE_string_literals

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_literals" ):
                listener.enterString_literals(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_literals" ):
                listener.exitString_literals(self)




    def string_literals(self):

        localctx = nimParser.String_literalsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_string_literals)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1219 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1218
                self.match(nimParser.STR_LIT)
                self.state = 1221 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==nimParser.STR_LIT):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RightHandSideStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STR_LIT(self):
            return self.getToken(nimParser.STR_LIT, 0)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.IDENTIFIER)
            else:
                return self.getToken(nimParser.IDENTIFIER, i)

        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.LiteralContext)
            else:
                return self.getTypedRuleContext(nimParser.LiteralContext,i)


        def ADD_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.ADD_OPERATOR)
            else:
                return self.getToken(nimParser.ADD_OPERATOR, i)

        def AND_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.AND_OPERATOR)
            else:
                return self.getToken(nimParser.AND_OPERATOR, i)

        def MINUS_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.MINUS_OPERATOR)
            else:
                return self.getToken(nimParser.MINUS_OPERATOR, i)

        def MOD(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.MOD)
            else:
                return self.getToken(nimParser.MOD, i)

        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.DIGIT)
            else:
                return self.getToken(nimParser.DIGIT, i)

        def OPEN_BRACK(self):
            return self.getToken(nimParser.OPEN_BRACK, 0)

        def CLOSE_BRACK(self):
            return self.getToken(nimParser.CLOSE_BRACK, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMA)
            else:
                return self.getToken(nimParser.COMMA, i)

        def MUL_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.MUL_OPERATOR)
            else:
                return self.getToken(nimParser.MUL_OPERATOR, i)

        def DIV(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.DIV)
            else:
                return self.getToken(nimParser.DIV, i)

        def methodInvoke(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.MethodInvokeContext)
            else:
                return self.getTypedRuleContext(nimParser.MethodInvokeContext,i)


        def OPEN_PAREN(self):
            return self.getToken(nimParser.OPEN_PAREN, 0)

        def rightHandSideStmt(self):
            return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(nimParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return nimParser.RULE_rightHandSideStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRightHandSideStmt" ):
                listener.enterRightHandSideStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRightHandSideStmt" ):
                listener.exitRightHandSideStmt(self)




    def rightHandSideStmt(self):

        localctx = nimParser.RightHandSideStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_rightHandSideStmt)
        self._la = 0 # Token type
        try:
            self.state = 1351
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,213,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1223
                self.match(nimParser.T__6)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1224
                self.match(nimParser.T__11)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1225
                self.match(nimParser.STR_LIT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1233
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.DIGIT]:
                    self.state = 1227 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 1226
                        self.match(nimParser.DIGIT)
                        self.state = 1229 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==nimParser.DIGIT):
                            break

                    pass
                elif token in [nimParser.IDENTIFIER]:
                    self.state = 1231
                    self.match(nimParser.IDENTIFIER)
                    pass
                elif token in [nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                    self.state = 1232
                    self.literal()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1247
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,191,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1235
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.MOD) | (1 << nimParser.ADD_OPERATOR) | (1 << nimParser.MINUS_OPERATOR) | (1 << nimParser.AND_OPERATOR))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1243
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [nimParser.DIGIT]:
                            self.state = 1237 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 1236
                                self.match(nimParser.DIGIT)
                                self.state = 1239 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==nimParser.DIGIT):
                                    break

                            pass
                        elif token in [nimParser.IDENTIFIER]:
                            self.state = 1241
                            self.match(nimParser.IDENTIFIER)
                            pass
                        elif token in [nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                            self.state = 1242
                            self.literal()
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 1249
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,191,self._ctx)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1250
                self.match(nimParser.IDENTIFIER)
                self.state = 1251
                self.match(nimParser.OPEN_BRACK)
                self.state = 1261
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.IDENTIFIER]:
                    self.state = 1252
                    self.match(nimParser.IDENTIFIER)
                    pass
                elif token in [nimParser.DIGIT, nimParser.MINUS_OPERATOR]:
                    self.state = 1254
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==nimParser.MINUS_OPERATOR:
                        self.state = 1253
                        self.match(nimParser.MINUS_OPERATOR)


                    self.state = 1257 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 1256
                        self.match(nimParser.DIGIT)
                        self.state = 1259 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==nimParser.DIGIT):
                            break

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1281
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.DIV) | (1 << nimParser.ADD_OPERATOR) | (1 << nimParser.MUL_OPERATOR) | (1 << nimParser.MINUS_OPERATOR) | (1 << nimParser.COMMA))) != 0):
                    self.state = 1263
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.DIV) | (1 << nimParser.ADD_OPERATOR) | (1 << nimParser.MUL_OPERATOR) | (1 << nimParser.MINUS_OPERATOR) | (1 << nimParser.COMMA))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1277
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,198,self._ctx)
                    if la_ == 1:
                        self.state = 1265
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==nimParser.MINUS_OPERATOR:
                            self.state = 1264
                            self.match(nimParser.MINUS_OPERATOR)


                        self.state = 1267
                        self.literal()
                        pass

                    elif la_ == 2:
                        self.state = 1269
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==nimParser.MINUS_OPERATOR:
                            self.state = 1268
                            self.match(nimParser.MINUS_OPERATOR)


                        self.state = 1272 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 1271
                            self.match(nimParser.DIGIT)
                            self.state = 1274 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==nimParser.DIGIT):
                                break

                        pass

                    elif la_ == 3:
                        self.state = 1276
                        self.match(nimParser.IDENTIFIER)
                        pass


                    self.state = 1283
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1284
                self.match(nimParser.CLOSE_BRACK)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1285
                self.methodInvoke()
                self.state = 1298
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,202,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1286
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.ADD_OPERATOR) | (1 << nimParser.MUL_OPERATOR) | (1 << nimParser.MINUS_OPERATOR))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1294
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [nimParser.OPEN_PAREN, nimParser.IDENTIFIER]:
                            self.state = 1287
                            self.methodInvoke()
                            pass
                        elif token in [nimParser.DIGIT]:
                            self.state = 1289 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 1288
                                self.match(nimParser.DIGIT)
                                self.state = 1291 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==nimParser.DIGIT):
                                    break

                            pass
                        elif token in [nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                            self.state = 1293
                            self.literal()
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 1300
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,202,self._ctx)

                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1301
                self.literal()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1302
                self.match(nimParser.OPEN_BRACK)
                self.state = 1333
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nimParser.DIGIT or _la==nimParser.MINUS_OPERATOR or ((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & ((1 << (nimParser.NIL - 88)) | (1 << (nimParser.TRIPLESTR_LIT - 88)) | (1 << (nimParser.CHAR_LIT - 88)) | (1 << (nimParser.STR_LIT - 88)) | (1 << (nimParser.RSTR_LIT - 88)) | (1 << (nimParser.INT_LIT - 88)) | (1 << (nimParser.INT8_LIT - 88)) | (1 << (nimParser.INT16_LIT - 88)) | (1 << (nimParser.INT32_LIT - 88)) | (1 << (nimParser.INT64_LIT - 88)) | (1 << (nimParser.UINT_LIT - 88)) | (1 << (nimParser.UINT8_LIT - 88)) | (1 << (nimParser.UINT16_LIT - 88)) | (1 << (nimParser.UINT32_LIT - 88)) | (1 << (nimParser.UINT64_LIT - 88)) | (1 << (nimParser.FLOAT_LIT - 88)) | (1 << (nimParser.FLOAT32_LIT - 88)) | (1 << (nimParser.FLOAT64_LIT - 88)))) != 0):
                    self.state = 1312
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [nimParser.MINUS_OPERATOR, nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                        self.state = 1304
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==nimParser.MINUS_OPERATOR:
                            self.state = 1303
                            self.match(nimParser.MINUS_OPERATOR)


                        self.state = 1306
                        self.literal()
                        pass
                    elif token in [nimParser.DIGIT]:
                        self.state = 1308 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 1307
                                self.match(nimParser.DIGIT)

                            else:
                                raise NoViableAltException(self)
                            self.state = 1310 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,204,self._ctx)

                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1328
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==nimParser.COMMA:
                        self.state = 1314
                        self.match(nimParser.COMMA)
                        self.state = 1324
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [nimParser.MINUS_OPERATOR, nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                            self.state = 1316
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==nimParser.MINUS_OPERATOR:
                                self.state = 1315
                                self.match(nimParser.MINUS_OPERATOR)


                            self.state = 1318
                            self.literal()
                            pass
                        elif token in [nimParser.DIGIT]:
                            self.state = 1320 
                            self._errHandler.sync(self)
                            _alt = 1
                            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                if _alt == 1:
                                    self.state = 1319
                                    self.match(nimParser.DIGIT)

                                else:
                                    raise NoViableAltException(self)
                                self.state = 1322 
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,207,self._ctx)

                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 1330
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1335
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1336
                self.match(nimParser.CLOSE_BRACK)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1337
                self.match(nimParser.OPEN_PAREN)
                self.state = 1338
                self.rightHandSideStmt()
                self.state = 1346
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nimParser.ADD_OPERATOR or _la==nimParser.MINUS_OPERATOR:
                    self.state = 1339
                    _la = self._input.LA(1)
                    if not(_la==nimParser.ADD_OPERATOR or _la==nimParser.MINUS_OPERATOR):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1342
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                        self.state = 1340
                        self.literal()
                        pass
                    elif token in [nimParser.IDENTIFIER]:
                        self.state = 1341
                        self.match(nimParser.IDENTIFIER)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1348
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1349
                self.match(nimParser.CLOSE_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return nimParser.RULE_dataType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataType" ):
                listener.enterDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataType" ):
                listener.exitDataType(self)




    def dataType(self):

        localctx = nimParser.DataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_dataType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1353
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.T__12) | (1 << nimParser.T__13) | (1 << nimParser.T__14))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleCaseStmt(self):
            return self.getTypedRuleContext(nimParser.SimpleCaseStmtContext,0)


        def simpleElseStmt(self):
            return self.getTypedRuleContext(nimParser.SimpleElseStmtContext,0)


        def simpleOfStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.SimpleOfStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.SimpleOfStmtContext,i)


        def simpleElifOfStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.SimpleElifOfStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.SimpleElifOfStmtContext,i)


        def getRuleIndex(self):
            return nimParser.RULE_caseStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseStmt" ):
                listener.enterCaseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseStmt" ):
                listener.exitCaseStmt(self)




    def caseStmt(self):

        localctx = nimParser.CaseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_caseStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1355
            self.simpleCaseStmt()
            self.state = 1359
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,214,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1356
                    self.simpleOfStmt() 
                self.state = 1361
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,214,self._ctx)

            self.state = 1365
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==nimParser.ELIF:
                self.state = 1362
                self.simpleElifOfStmt()
                self.state = 1367
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1368
            self.simpleElseStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleOfStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OF(self):
            return self.getToken(nimParser.OF, 0)

        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.IDENTIFIER)
            else:
                return self.getToken(nimParser.IDENTIFIER, i)

        def STR_LIT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.STR_LIT)
            else:
                return self.getToken(nimParser.STR_LIT, i)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMA)
            else:
                return self.getToken(nimParser.COMMA, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def RETURN(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.RETURN)
            else:
                return self.getToken(nimParser.RETURN, i)

        def rightHandSideStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.RightHandSideStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,i)


        def getRuleIndex(self):
            return nimParser.RULE_simpleOfStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleOfStmt" ):
                listener.enterSimpleOfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleOfStmt" ):
                listener.exitSimpleOfStmt(self)




    def simpleOfStmt(self):

        localctx = nimParser.SimpleOfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_simpleOfStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1371
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.INDENT:
                self.state = 1370
                self.match(nimParser.INDENT)


            self.state = 1373
            self.match(nimParser.OF)
            self.state = 1374
            _la = self._input.LA(1)
            if not(_la==nimParser.STR_LIT or _la==nimParser.IDENTIFIER):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1379
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==nimParser.COMMA:
                self.state = 1375
                self.match(nimParser.COMMA)
                self.state = 1376
                _la = self._input.LA(1)
                if not(_la==nimParser.STR_LIT or _la==nimParser.IDENTIFIER):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1381
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1382
            self.match(nimParser.COLON)
            self.state = 1395 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1385
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,218,self._ctx)
                if la_ == 1:
                    self.state = 1383
                    self.match(nimParser.T__0)
                    self.state = 1384
                    self.match(nimParser.INDENT)


                self.state = 1390
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.T__0, nimParser.T__3, nimParser.T__7, nimParser.VARIABLE, nimParser.ECHO, nimParser.BLOCK, nimParser.CASE, nimParser.CONST, nimParser.FOR, nimParser.FROM, nimParser.IF, nimParser.IMPORT, nimParser.LET, nimParser.PROC, nimParser.TYPE, nimParser.WHEN, nimParser.WHILE, nimParser.OPEN_PAREN, nimParser.IDENTIFIER, nimParser.NEW_IDENTIFIER]:
                    self.state = 1387
                    self.stmt()
                    pass
                elif token in [nimParser.RETURN]:
                    self.state = 1388
                    self.match(nimParser.RETURN)
                    self.state = 1389
                    self.rightHandSideStmt()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1393
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,220,self._ctx)
                if la_ == 1:
                    self.state = 1392
                    self.match(nimParser.T__0)


                self.state = 1397 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.T__0) | (1 << nimParser.T__3) | (1 << nimParser.T__7) | (1 << nimParser.VARIABLE) | (1 << nimParser.ECHO) | (1 << nimParser.BLOCK) | (1 << nimParser.CASE) | (1 << nimParser.CONST))) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (nimParser.FOR - 75)) | (1 << (nimParser.FROM - 75)) | (1 << (nimParser.IF - 75)) | (1 << (nimParser.IMPORT - 75)) | (1 << (nimParser.LET - 75)) | (1 << (nimParser.PROC - 75)) | (1 << (nimParser.RETURN - 75)) | (1 << (nimParser.TYPE - 75)) | (1 << (nimParser.WHEN - 75)) | (1 << (nimParser.WHILE - 75)) | (1 << (nimParser.OPEN_PAREN - 75)) | (1 << (nimParser.IDENTIFIER - 75)))) != 0) or _la==nimParser.NEW_IDENTIFIER):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleElifOfStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELIF(self):
            return self.getToken(nimParser.ELIF, 0)

        def rightHandSideStmt(self):
            return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,0)


        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def COMMENT(self):
            return self.getToken(nimParser.COMMENT, 0)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def getRuleIndex(self):
            return nimParser.RULE_simpleElifOfStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleElifOfStmt" ):
                listener.enterSimpleElifOfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleElifOfStmt" ):
                listener.exitSimpleElifOfStmt(self)




    def simpleElifOfStmt(self):

        localctx = nimParser.SimpleElifOfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_simpleElifOfStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1399
            self.match(nimParser.ELIF)
            self.state = 1400
            self.rightHandSideStmt()
            self.state = 1401
            self.match(nimParser.COLON)
            self.state = 1403
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.COMMENT:
                self.state = 1402
                self.match(nimParser.COMMENT)


            self.state = 1410 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1405
                self.match(nimParser.T__0)
                self.state = 1407
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.INDENT:
                    self.state = 1406
                    self.match(nimParser.INDENT)


                self.state = 1409
                self.stmt()
                self.state = 1412 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==nimParser.T__0):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleCaseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(nimParser.CASE, 0)

        def IDENTIFIER(self):
            return self.getToken(nimParser.IDENTIFIER, 0)

        def COMMENT(self):
            return self.getToken(nimParser.COMMENT, 0)

        def getRuleIndex(self):
            return nimParser.RULE_simpleCaseStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleCaseStmt" ):
                listener.enterSimpleCaseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleCaseStmt" ):
                listener.exitSimpleCaseStmt(self)




    def simpleCaseStmt(self):

        localctx = nimParser.SimpleCaseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_simpleCaseStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1414
            self.match(nimParser.CASE)
            self.state = 1415
            self.match(nimParser.IDENTIFIER)
            self.state = 1417
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.COMMENT:
                self.state = 1416
                self.match(nimParser.COMMENT)


            self.state = 1420
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.T__0:
                self.state = 1419
                self.match(nimParser.T__0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmptyStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return nimParser.RULE_emptyStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptyStmt" ):
                listener.enterEmptyStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptyStmt" ):
                listener.exitEmptyStmt(self)




    def emptyStmt(self):

        localctx = nimParser.EmptyStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_emptyStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1422
            self.match(nimParser.T__0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommentStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(nimParser.COMMENT, 0)

        def INDENT(self):
            return self.getToken(nimParser.INDENT, 0)

        def getRuleIndex(self):
            return nimParser.RULE_commentStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommentStmt" ):
                listener.enterCommentStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommentStmt" ):
                listener.exitCommentStmt(self)




    def commentStmt(self):

        localctx = nimParser.CommentStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_commentStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1425
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.INDENT:
                self.state = 1424
                self.match(nimParser.INDENT)


            self.state = 1427
            self.match(nimParser.COMMENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUALS_OPERATOR(self):
            return self.getToken(nimParser.EQUALS_OPERATOR, 0)

        def ADD_OPERATOR(self):
            return self.getToken(nimParser.ADD_OPERATOR, 0)

        def MUL_OPERATOR(self):
            return self.getToken(nimParser.MUL_OPERATOR, 0)

        def MINUS_OPERATOR(self):
            return self.getToken(nimParser.MINUS_OPERATOR, 0)

        def DIV_OPERATOR(self):
            return self.getToken(nimParser.DIV_OPERATOR, 0)

        def BITWISE_NOT_OPERATOR(self):
            return self.getToken(nimParser.BITWISE_NOT_OPERATOR, 0)

        def AND_OPERATOR(self):
            return self.getToken(nimParser.AND_OPERATOR, 0)

        def OR_OPERATOR(self):
            return self.getToken(nimParser.OR_OPERATOR, 0)

        def LESS_THAN(self):
            return self.getToken(nimParser.LESS_THAN, 0)

        def GREATER_THAN(self):
            return self.getToken(nimParser.GREATER_THAN, 0)

        def NOT_OPERATOR(self):
            return self.getToken(nimParser.NOT_OPERATOR, 0)

        def XOR_OPERATOR(self):
            return self.getToken(nimParser.XOR_OPERATOR, 0)

        def getRuleIndex(self):
            return nimParser.RULE_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator" ):
                listener.enterOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator" ):
                listener.exitOperator(self)




    def operator(self):

        localctx = nimParser.OperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1429
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.EQUALS_OPERATOR) | (1 << nimParser.ADD_OPERATOR) | (1 << nimParser.MUL_OPERATOR) | (1 << nimParser.MINUS_OPERATOR) | (1 << nimParser.DIV_OPERATOR) | (1 << nimParser.BITWISE_NOT_OPERATOR) | (1 << nimParser.AND_OPERATOR) | (1 << nimParser.OR_OPERATOR) | (1 << nimParser.LESS_THAN) | (1 << nimParser.GREATER_THAN) | (1 << nimParser.NOT_OPERATOR) | (1 << nimParser.XOR_OPERATOR))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_LIT(self):
            return self.getToken(nimParser.INT_LIT, 0)

        def INT8_LIT(self):
            return self.getToken(nimParser.INT8_LIT, 0)

        def INT16_LIT(self):
            return self.getToken(nimParser.INT16_LIT, 0)

        def INT32_LIT(self):
            return self.getToken(nimParser.INT32_LIT, 0)

        def INT64_LIT(self):
            return self.getToken(nimParser.INT64_LIT, 0)

        def UINT_LIT(self):
            return self.getToken(nimParser.UINT_LIT, 0)

        def UINT8_LIT(self):
            return self.getToken(nimParser.UINT8_LIT, 0)

        def UINT16_LIT(self):
            return self.getToken(nimParser.UINT16_LIT, 0)

        def UINT32_LIT(self):
            return self.getToken(nimParser.UINT32_LIT, 0)

        def UINT64_LIT(self):
            return self.getToken(nimParser.UINT64_LIT, 0)

        def FLOAT_LIT(self):
            return self.getToken(nimParser.FLOAT_LIT, 0)

        def FLOAT32_LIT(self):
            return self.getToken(nimParser.FLOAT32_LIT, 0)

        def FLOAT64_LIT(self):
            return self.getToken(nimParser.FLOAT64_LIT, 0)

        def STR_LIT(self):
            return self.getToken(nimParser.STR_LIT, 0)

        def RSTR_LIT(self):
            return self.getToken(nimParser.RSTR_LIT, 0)

        def TRIPLESTR_LIT(self):
            return self.getToken(nimParser.TRIPLESTR_LIT, 0)

        def CHAR_LIT(self):
            return self.getToken(nimParser.CHAR_LIT, 0)

        def NIL(self):
            return self.getToken(nimParser.NIL, 0)

        def getRuleIndex(self):
            return nimParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = nimParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1431
            _la = self._input.LA(1)
            if not(((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & ((1 << (nimParser.NIL - 88)) | (1 << (nimParser.TRIPLESTR_LIT - 88)) | (1 << (nimParser.CHAR_LIT - 88)) | (1 << (nimParser.STR_LIT - 88)) | (1 << (nimParser.RSTR_LIT - 88)) | (1 << (nimParser.INT_LIT - 88)) | (1 << (nimParser.INT8_LIT - 88)) | (1 << (nimParser.INT16_LIT - 88)) | (1 << (nimParser.INT32_LIT - 88)) | (1 << (nimParser.INT64_LIT - 88)) | (1 << (nimParser.UINT_LIT - 88)) | (1 << (nimParser.UINT8_LIT - 88)) | (1 << (nimParser.UINT16_LIT - 88)) | (1 << (nimParser.UINT32_LIT - 88)) | (1 << (nimParser.UINT64_LIT - 88)) | (1 << (nimParser.FLOAT_LIT - 88)) | (1 << (nimParser.FLOAT32_LIT - 88)) | (1 << (nimParser.FLOAT64_LIT - 88)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx






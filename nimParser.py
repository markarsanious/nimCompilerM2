# Generated from nim.g4 by ANTLR 4.7.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u009e")
        buf.write("\u074c\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\3")
        buf.write("\2\3\2\7\2_\n\2\f\2\16\2b\13\2\7\2d\n\2\f\2\16\2g\13\2")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\5\3~\n\3\3\4\3\4\3\4\3")
        buf.write("\4\3\4\3\4\5\4\u0086\n\4\3\4\3\4\3\4\7\4\u008b\n\4\f\4")
        buf.write("\16\4\u008e\13\4\3\4\3\4\3\4\5\4\u0093\n\4\3\4\7\4\u0096")
        buf.write("\n\4\f\4\16\4\u0099\13\4\3\4\3\4\5\4\u009d\n\4\3\4\3\4")
        buf.write("\7\4\u00a1\n\4\f\4\16\4\u00a4\13\4\3\4\7\4\u00a7\n\4\f")
        buf.write("\4\16\4\u00aa\13\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\5\4")
        buf.write("\u00b4\n\4\3\4\3\4\3\4\5\4\u00b9\n\4\3\4\3\4\3\4\3\4\3")
        buf.write("\4\3\4\3\4\3\4\5\4\u00c3\n\4\3\4\6\4\u00c6\n\4\r\4\16")
        buf.write("\4\u00c7\3\4\5\4\u00cb\n\4\3\4\3\4\5\4\u00cf\n\4\3\4\6")
        buf.write("\4\u00d2\n\4\r\4\16\4\u00d3\3\4\5\4\u00d7\n\4\7\4\u00d9")
        buf.write("\n\4\f\4\16\4\u00dc\13\4\3\4\6\4\u00df\n\4\r\4\16\4\u00e0")
        buf.write("\3\5\3\5\3\5\5\5\u00e6\n\5\3\5\3\5\5\5\u00ea\n\5\3\5\3")
        buf.write("\5\5\5\u00ee\n\5\6\5\u00f0\n\5\r\5\16\5\u00f1\3\6\3\6")
        buf.write("\3\6\5\6\u00f7\n\6\3\6\3\6\5\6\u00fb\n\6\3\6\3\6\5\6\u00ff")
        buf.write("\n\6\6\6\u0101\n\6\r\6\16\6\u0102\3\7\3\7\3\7\5\7\u0108")
        buf.write("\n\7\3\7\3\7\3\7\5\7\u010d\n\7\3\7\5\7\u0110\n\7\3\7\7")
        buf.write("\7\u0113\n\7\f\7\16\7\u0116\13\7\3\7\5\7\u0119\n\7\3\7")
        buf.write("\3\7\3\7\3\7\5\7\u011f\n\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write("\5\7\u0128\n\7\3\7\7\7\u012b\n\7\f\7\16\7\u012e\13\7\3")
        buf.write("\7\5\7\u0131\n\7\5\7\u0133\n\7\3\b\3\b\3\b\3\b\3\b\7\b")
        buf.write("\u013a\n\b\f\b\16\b\u013d\13\b\3\b\3\b\3\b\3\b\3\b\3\b")
        buf.write("\7\b\u0145\n\b\f\b\16\b\u0148\13\b\3\b\3\b\5\b\u014c\n")
        buf.write("\b\3\t\3\t\3\t\3\t\3\t\3\n\3\n\5\n\u0155\n\n\3\n\7\n\u0158")
        buf.write("\n\n\f\n\16\n\u015b\13\n\3\n\5\n\u015e\n\n\3\n\3\n\5\n")
        buf.write("\u0162\n\n\3\13\3\13\7\13\u0166\n\13\f\13\16\13\u0169")
        buf.write("\13\13\3\13\5\13\u016c\n\13\3\f\3\f\5\f\u0170\n\f\3\f")
        buf.write("\3\f\3\f\3\f\3\f\3\f\5\f\u0178\n\f\3\f\3\f\3\f\3\f\3\f")
        buf.write("\3\f\5\f\u0180\n\f\3\f\3\f\3\f\5\f\u0185\n\f\3\f\3\f\3")
        buf.write("\f\3\f\5\f\u018b\n\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\5\f\u0194")
        buf.write("\n\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\5")
        buf.write("\f\u01a2\n\f\6\f\u01a4\n\f\r\f\16\f\u01a5\3\f\3\f\5\f")
        buf.write("\u01aa\n\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\6\f\u01b4\n")
        buf.write("\f\r\f\16\f\u01b5\3\f\6\f\u01b9\n\f\r\f\16\f\u01ba\6\f")
        buf.write("\u01bd\n\f\r\f\16\f\u01be\3\f\3\f\5\f\u01c3\n\f\3\f\3")
        buf.write("\f\3\f\3\f\7\f\u01c9\n\f\f\f\16\f\u01cc\13\f\3\f\3\f\3")
        buf.write("\f\7\f\u01d1\n\f\f\f\16\f\u01d4\13\f\3\f\3\f\3\f\3\f\3")
        buf.write("\f\7\f\u01db\n\f\f\f\16\f\u01de\13\f\3\f\3\f\3\f\7\f\u01e3")
        buf.write("\n\f\f\f\16\f\u01e6\13\f\3\f\3\f\3\f\6\f\u01eb\n\f\r\f")
        buf.write("\16\f\u01ec\3\f\6\f\u01f0\n\f\r\f\16\f\u01f1\6\f\u01f4")
        buf.write("\n\f\r\f\16\f\u01f5\3\f\3\f\5\f\u01fa\n\f\3\f\3\f\3\f")
        buf.write("\3\f\3\f\3\f\5\f\u0202\n\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f")
        buf.write("\3\f\3\f\7\f\u020d\n\f\f\f\16\f\u0210\13\f\6\f\u0212\n")
        buf.write("\f\r\f\16\f\u0213\3\f\3\f\5\f\u0218\n\f\3\f\3\f\3\f\3")
        buf.write("\f\3\f\3\f\3\f\5\f\u0221\n\f\3\r\3\r\5\r\u0225\n\r\3\r")
        buf.write("\3\r\3\r\3\r\3\r\3\r\5\r\u022d\n\r\3\r\3\r\3\r\3\r\3\r")
        buf.write("\3\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u023b\n\r\6\r\u023d\n")
        buf.write("\r\r\r\16\r\u023e\3\r\3\r\5\r\u0243\n\r\3\r\3\r\3\r\3")
        buf.write("\r\3\r\3\r\3\r\3\r\6\r\u024d\n\r\r\r\16\r\u024e\3\r\6")
        buf.write("\r\u0252\n\r\r\r\16\r\u0253\6\r\u0256\n\r\r\r\16\r\u0257")
        buf.write("\3\r\3\r\5\r\u025c\n\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u0264")
        buf.write("\n\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\7\r\u026f\n\r")
        buf.write("\f\r\16\r\u0272\13\r\6\r\u0274\n\r\r\r\16\r\u0275\3\r")
        buf.write("\3\r\5\r\u027a\n\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u0283")
        buf.write("\n\r\3\16\3\16\5\16\u0287\n\16\3\16\3\16\3\16\3\16\5\16")
        buf.write("\u028d\n\16\3\17\3\17\5\17\u0291\n\17\3\17\3\17\3\17\3")
        buf.write("\17\5\17\u0297\n\17\3\20\5\20\u029a\n\20\3\20\3\20\3\20")
        buf.write("\3\20\5\20\u02a0\n\20\3\21\5\21\u02a3\n\21\3\21\3\21\3")
        buf.write("\21\3\21\3\21\3\21\5\21\u02ab\n\21\6\21\u02ad\n\21\r\21")
        buf.write("\16\21\u02ae\3\21\3\21\6\21\u02b3\n\21\r\21\16\21\u02b4")
        buf.write("\3\21\7\21\u02b8\n\21\f\21\16\21\u02bb\13\21\3\21\5\21")
        buf.write("\u02be\n\21\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\5")
        buf.write("\22\u02c8\n\22\3\22\3\22\3\22\6\22\u02cd\n\22\r\22\16")
        buf.write("\22\u02ce\3\22\7\22\u02d2\n\22\f\22\16\22\u02d5\13\22")
        buf.write("\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\5\22\u02e0")
        buf.write("\n\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22")
        buf.write("\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22")
        buf.write("\7\22\u02f7\n\22\f\22\16\22\u02fa\13\22\3\22\3\22\3\22")
        buf.write("\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\7\22\u0307\n")
        buf.write("\22\f\22\16\22\u030a\13\22\3\22\3\22\3\22\3\22\3\22\5")
        buf.write("\22\u0311\n\22\3\22\3\22\5\22\u0315\n\22\3\22\3\22\3\22")
        buf.write("\6\22\u031a\n\22\r\22\16\22\u031b\3\22\7\22\u031f\n\22")
        buf.write("\f\22\16\22\u0322\13\22\3\22\3\22\3\22\3\22\6\22\u0328")
        buf.write("\n\22\r\22\16\22\u0329\3\22\3\22\3\22\3\22\3\22\5\22\u0331")
        buf.write("\n\22\3\22\3\22\3\22\6\22\u0336\n\22\r\22\16\22\u0337")
        buf.write("\3\22\7\22\u033b\n\22\f\22\16\22\u033e\13\22\3\22\3\22")
        buf.write("\3\22\3\22\7\22\u0344\n\22\f\22\16\22\u0347\13\22\3\22")
        buf.write("\3\22\3\22\3\22\3\22\6\22\u034e\n\22\r\22\16\22\u034f")
        buf.write("\5\22\u0352\n\22\3\22\3\22\3\22\6\22\u0357\n\22\r\22\16")
        buf.write("\22\u0358\5\22\u035b\n\22\7\22\u035d\n\22\f\22\16\22\u0360")
        buf.write("\13\22\7\22\u0362\n\22\f\22\16\22\u0365\13\22\3\22\3\22")
        buf.write("\3\22\5\22\u036a\n\22\3\22\3\22\3\22\6\22\u036f\n\22\r")
        buf.write("\22\16\22\u0370\3\22\7\22\u0374\n\22\f\22\16\22\u0377")
        buf.write("\13\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\5")
        buf.write("\22\u0382\n\22\3\22\3\22\3\22\6\22\u0387\n\22\r\22\16")
        buf.write("\22\u0388\3\22\7\22\u038c\n\22\f\22\16\22\u038f\13\22")
        buf.write("\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\5\22\u039a")
        buf.write("\n\22\3\22\3\22\3\22\3\22\7\22\u03a0\n\22\f\22\16\22\u03a3")
        buf.write("\13\22\3\22\3\22\3\22\3\22\3\22\3\22\5\22\u03ab\n\22\3")
        buf.write("\22\3\22\3\22\3\22\6\22\u03b1\n\22\r\22\16\22\u03b2\3")
        buf.write("\22\5\22\u03b6\n\22\5\22\u03b8\n\22\3\23\3\23\3\23\5\23")
        buf.write("\u03bd\n\23\3\23\3\23\3\23\3\23\3\23\3\23\5\23\u03c5\n")
        buf.write("\23\5\23\u03c7\n\23\6\23\u03c9\n\23\r\23\16\23\u03ca\3")
        buf.write("\24\3\24\7\24\u03cf\n\24\f\24\16\24\u03d2\13\24\3\24\3")
        buf.write("\24\3\25\3\25\3\25\3\25\3\25\5\25\u03db\n\25\3\25\3\25")
        buf.write("\5\25\u03df\n\25\6\25\u03e1\n\25\r\25\16\25\u03e2\3\26")
        buf.write("\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26")
        buf.write("\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26")
        buf.write("\3\26\3\26\3\26\3\26\3\26\3\26\3\26\7\26\u0403\n\26\f")
        buf.write("\26\16\26\u0406\13\26\3\26\3\26\3\26\3\26\3\26\3\26\3")
        buf.write("\26\5\26\u040f\n\26\3\26\3\26\3\26\3\26\3\26\5\26\u0416")
        buf.write("\n\26\3\26\3\26\5\26\u041a\n\26\3\26\5\26\u041d\n\26\6")
        buf.write("\26\u041f\n\26\r\26\16\26\u0420\3\26\3\26\3\26\3\26\5")
        buf.write("\26\u0427\n\26\5\26\u0429\n\26\3\26\3\26\3\26\3\26\6\26")
        buf.write("\u042f\n\26\r\26\16\26\u0430\3\26\3\26\7\26\u0435\n\26")
        buf.write("\f\26\16\26\u0438\13\26\3\26\3\26\3\26\7\26\u043d\n\26")
        buf.write("\f\26\16\26\u0440\13\26\3\26\3\26\7\26\u0444\n\26\f\26")
        buf.write("\16\26\u0447\13\26\3\26\3\26\3\26\7\26\u044c\n\26\f\26")
        buf.write("\16\26\u044f\13\26\5\26\u0451\n\26\3\26\3\26\5\26\u0455")
        buf.write("\n\26\3\26\5\26\u0458\n\26\3\26\3\26\3\26\3\26\3\26\3")
        buf.write("\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\5\26\u0468")
        buf.write("\n\26\3\26\3\26\3\26\7\26\u046d\n\26\f\26\16\26\u0470")
        buf.write("\13\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\5\26\u047a")
        buf.write("\n\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26")
        buf.write("\3\26\3\26\5\26\u0488\n\26\3\26\6\26\u048b\n\26\r\26\16")
        buf.write("\26\u048c\3\26\3\26\5\26\u0491\n\26\7\26\u0493\n\26\f")
        buf.write("\26\16\26\u0496\13\26\3\26\3\26\3\26\5\26\u049b\n\26\3")
        buf.write("\26\3\26\3\26\3\26\6\26\u04a1\n\26\r\26\16\26\u04a2\3")
        buf.write("\26\3\26\7\26\u04a7\n\26\f\26\16\26\u04aa\13\26\3\26\3")
        buf.write("\26\3\26\7\26\u04af\n\26\f\26\16\26\u04b2\13\26\3\26\3")
        buf.write("\26\7\26\u04b6\n\26\f\26\16\26\u04b9\13\26\3\26\3\26\3")
        buf.write("\26\7\26\u04be\n\26\f\26\16\26\u04c1\13\26\5\26\u04c3")
        buf.write("\n\26\3\26\3\26\5\26\u04c7\n\26\3\26\5\26\u04ca\n\26\5")
        buf.write("\26\u04cc\n\26\3\27\3\27\3\27\3\27\3\27\5\27\u04d3\n\27")
        buf.write("\3\27\3\27\3\27\3\27\3\27\5\27\u04da\n\27\3\27\5\27\u04dd")
        buf.write("\n\27\3\27\3\27\5\27\u04e1\n\27\3\27\5\27\u04e4\n\27\6")
        buf.write("\27\u04e6\n\27\r\27\16\27\u04e7\3\27\3\27\3\27\3\27\5")
        buf.write("\27\u04ee\n\27\5\27\u04f0\n\27\3\27\3\27\5\27\u04f4\n")
        buf.write("\27\3\27\3\27\5\27\u04f8\n\27\7\27\u04fa\n\27\f\27\16")
        buf.write("\27\u04fd\13\27\3\27\5\27\u0500\n\27\3\27\5\27\u0503\n")
        buf.write("\27\3\27\6\27\u0506\n\27\r\27\16\27\u0507\3\27\3\27\7")
        buf.write("\27\u050c\n\27\f\27\16\27\u050f\13\27\3\27\5\27\u0512")
        buf.write("\n\27\3\27\5\27\u0515\n\27\3\27\7\27\u0518\n\27\f\27\16")
        buf.write("\27\u051b\13\27\3\27\3\27\7\27\u051f\n\27\f\27\16\27\u0522")
        buf.write("\13\27\3\27\3\27\3\27\7\27\u0527\n\27\f\27\16\27\u052a")
        buf.write("\13\27\5\27\u052c\n\27\3\27\3\27\5\27\u0530\n\27\3\27")
        buf.write("\5\27\u0533\n\27\3\30\3\30\3\30\3\30\3\30\5\30\u053a\n")
        buf.write("\30\3\30\3\30\3\30\5\30\u053f\n\30\3\30\6\30\u0542\n\30")
        buf.write("\r\30\16\30\u0543\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3")
        buf.write("\31\3\31\7\31\u054f\n\31\f\31\16\31\u0552\13\31\3\31\3")
        buf.write("\31\3\31\3\31\5\31\u0558\n\31\6\31\u055a\n\31\r\31\16")
        buf.write("\31\u055b\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32")
        buf.write("\6\32\u0567\n\32\r\32\16\32\u0568\5\32\u056b\n\32\3\32")
        buf.write("\3\32\3\32\3\32\3\32\6\32\u0572\n\32\r\32\16\32\u0573")
        buf.write("\3\32\3\32\3\32\3\32\3\32\3\32\3\32\5\32\u057d\n\32\3")
        buf.write("\32\3\32\5\32\u0581\n\32\3\32\3\32\3\32\3\32\3\32\5\32")
        buf.write("\u0588\n\32\3\32\6\32\u058b\n\32\r\32\16\32\u058c\3\32")
        buf.write("\5\32\u0590\n\32\3\32\7\32\u0593\n\32\f\32\16\32\u0596")
        buf.write("\13\32\3\32\5\32\u0599\n\32\3\33\3\33\3\33\3\33\3\33\5")
        buf.write("\33\u05a0\n\33\3\33\3\33\3\33\6\33\u05a5\n\33\r\33\16")
        buf.write("\33\u05a6\3\33\3\33\5\33\u05ab\n\33\3\33\3\33\3\33\6\33")
        buf.write("\u05b0\n\33\r\33\16\33\u05b1\3\33\3\33\5\33\u05b6\n\33")
        buf.write("\7\33\u05b8\n\33\f\33\16\33\u05bb\13\33\3\33\3\33\3\33")
        buf.write("\3\33\5\33\u05c1\n\33\3\33\3\33\3\33\3\33\6\33\u05c7\n")
        buf.write("\33\r\33\16\33\u05c8\3\33\5\33\u05cc\n\33\3\33\3\33\3")
        buf.write("\33\6\33\u05d1\n\33\r\33\16\33\u05d2\3\33\5\33\u05d6\n")
        buf.write("\33\7\33\u05d8\n\33\f\33\16\33\u05db\13\33\3\33\3\33\3")
        buf.write("\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\7\33")
        buf.write("\u05e9\n\33\f\33\16\33\u05ec\13\33\5\33\u05ee\n\33\3\33")
        buf.write("\3\33\3\33\3\33\3\33\5\33\u05f5\n\33\3\33\3\33\5\33\u05f9")
        buf.write("\n\33\3\33\5\33\u05fc\n\33\3\34\3\34\5\34\u0600\n\34\3")
        buf.write("\34\3\34\3\34\7\34\u0605\n\34\f\34\16\34\u0608\13\34\3")
        buf.write("\34\5\34\u060b\n\34\3\35\6\35\u060e\n\35\r\35\16\35\u060f")
        buf.write("\3\35\3\35\3\35\7\35\u0615\n\35\f\35\16\35\u0618\13\35")
        buf.write("\3\36\3\36\3\36\3\36\3\36\3\36\5\36\u0620\n\36\3\37\3")
        buf.write("\37\3\37\3\37\7\37\u0626\n\37\f\37\16\37\u0629\13\37\3")
        buf.write("\37\3\37\5\37\u062d\n\37\3\37\3\37\3\37\3\37\3\37\3\37")
        buf.write("\7\37\u0635\n\37\f\37\16\37\u0638\13\37\5\37\u063a\n\37")
        buf.write("\3 \3 \3 \7 \u063f\n \f \16 \u0642\13 \3!\3!\3!\5!\u0647")
        buf.write("\n!\3!\3!\3!\3!\5!\u064d\n!\3!\5!\u0650\n!\3!\3!\3!\3")
        buf.write("!\3!\5!\u0657\n!\3\"\6\"\u065a\n\"\r\"\16\"\u065b\3#\6")
        buf.write("#\u065f\n#\r#\16#\u0660\3$\3$\3$\3$\6$\u0667\n$\r$\16")
        buf.write("$\u0668\3$\3$\5$\u066d\n$\3$\3$\6$\u0671\n$\r$\16$\u0672")
        buf.write("\3$\3$\5$\u0677\n$\7$\u0679\n$\f$\16$\u067c\13$\3$\3$")
        buf.write("\3$\3$\5$\u0682\n$\3$\6$\u0685\n$\r$\16$\u0686\5$\u0689")
        buf.write("\n$\3$\3$\5$\u068d\n$\3$\3$\5$\u0691\n$\3$\6$\u0694\n")
        buf.write("$\r$\16$\u0695\3$\5$\u0699\n$\7$\u069b\n$\f$\16$\u069e")
        buf.write("\13$\3$\3$\3$\3$\3$\6$\u06a5\n$\r$\16$\u06a6\3$\5$\u06aa")
        buf.write("\n$\7$\u06ac\n$\f$\16$\u06af\13$\3$\3$\3$\5$\u06b4\n$")
        buf.write("\3$\3$\6$\u06b8\n$\r$\16$\u06b9\5$\u06bc\n$\3$\3$\5$\u06c0")
        buf.write("\n$\3$\3$\6$\u06c4\n$\r$\16$\u06c5\5$\u06c8\n$\7$\u06ca")
        buf.write("\n$\f$\16$\u06cd\13$\7$\u06cf\n$\f$\16$\u06d2\13$\3$\3")
        buf.write("$\3$\3$\3$\3$\5$\u06da\n$\7$\u06dc\n$\f$\16$\u06df\13")
        buf.write("$\3$\3$\3$\3$\3$\3$\3$\3$\5$\u06e9\n$\3%\3%\3&\3&\3\'")
        buf.write("\3\'\7\'\u06f1\n\'\f\'\16\'\u06f4\13\'\3\'\7\'\u06f7\n")
        buf.write("\'\f\'\16\'\u06fa\13\'\3\'\3\'\3(\5(\u06ff\n(\3(\3(\3")
        buf.write("(\3(\5(\u0705\n(\3(\3(\3(\7(\u070a\n(\f(\16(\u070d\13")
        buf.write("(\3(\3(\3(\5(\u0712\n(\3(\3(\5(\u0716\n(\3(\5(\u0719\n")
        buf.write("(\3(\5(\u071c\n(\6(\u071e\n(\r(\16(\u071f\3)\3)\3)\3)")
        buf.write("\5)\u0726\n)\3)\3)\5)\u072a\n)\3)\6)\u072d\n)\r)\16)\u072e")
        buf.write("\3*\3*\3*\5*\u0734\n*\3*\5*\u0737\n*\3*\3*\3*\3*\5*\u073d")
        buf.write("\n*\5*\u073f\n*\3+\3+\3,\5,\u0744\n,\3,\3,\3-\3-\3.\3")
        buf.write(".\3.\2\2/\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&")
        buf.write("(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\2\24\3\2\3\4\3\2\3")
        buf.write("\5\4\2\n\n\u0082\u0082\4\2\66\6688\6\2\"\"**,,\67\67\5")
        buf.write("\2**,,\67\67\5\2\"\"**\67\67\4\2\13\13oo\4\2\3\3\26\26")
        buf.write("\5\2\32\32\34\34/\60\6\2\"\"**,,//\5\2\36\36*,\67\67\3")
        buf.write("\2*,\4\2**,,\4\2\22\24__\4\2xx\u0082\u0082\3\2)\64\7\2")
        buf.write("]]vy\u0085\u0085\u008a\u0094\u0096\u0096\2\u089d\2e\3")
        buf.write("\2\2\2\4}\3\2\2\2\6\177\3\2\2\2\b\u00e2\3\2\2\2\n\u00f3")
        buf.write("\3\2\2\2\f\u0132\3\2\2\2\16\u014b\3\2\2\2\20\u014d\3\2")
        buf.write("\2\2\22\u0152\3\2\2\2\24\u0163\3\2\2\2\26\u0220\3\2\2")
        buf.write("\2\30\u0282\3\2\2\2\32\u0284\3\2\2\2\34\u028e\3\2\2\2")
        buf.write("\36\u0299\3\2\2\2 \u02a2\3\2\2\2\"\u03b7\3\2\2\2$\u03b9")
        buf.write("\3\2\2\2&\u03cc\3\2\2\2(\u03d5\3\2\2\2*\u04cb\3\2\2\2")
        buf.write(",\u04cd\3\2\2\2.\u0534\3\2\2\2\60\u0545\3\2\2\2\62\u0598")
        buf.write("\3\2\2\2\64\u05fb\3\2\2\2\66\u05fd\3\2\2\28\u060d\3\2")
        buf.write("\2\2:\u061f\3\2\2\2<\u0639\3\2\2\2>\u063b\3\2\2\2@\u0656")
        buf.write("\3\2\2\2B\u0659\3\2\2\2D\u065e\3\2\2\2F\u06e8\3\2\2\2")
        buf.write("H\u06ea\3\2\2\2J\u06ec\3\2\2\2L\u06ee\3\2\2\2N\u06fe\3")
        buf.write("\2\2\2P\u0721\3\2\2\2R\u0730\3\2\2\2T\u0740\3\2\2\2V\u0743")
        buf.write("\3\2\2\2X\u0747\3\2\2\2Z\u0749\3\2\2\2\\`\5\4\3\2]_\t")
        buf.write("\2\2\2^]\3\2\2\2_b\3\2\2\2`^\3\2\2\2`a\3\2\2\2ad\3\2\2")
        buf.write("\2b`\3\2\2\2c\\\3\2\2\2dg\3\2\2\2ec\3\2\2\2ef\3\2\2\2")
        buf.write("f\3\3\2\2\2ge\3\2\2\2h~\5\6\4\2i~\5\f\7\2j~\5\16\b\2k")
        buf.write("~\5\b\5\2l~\5\n\6\2m~\5\22\n\2n~\5\"\22\2o~\5$\23\2p~")
        buf.write("\5&\24\2q~\5*\26\2r~\5\60\31\2s~\5\62\32\2t~\5\64\33\2")
        buf.write("u~\5\66\34\2v~\5T+\2w~\5L\'\2x~\58\35\2y~\5<\37\2z~\5")
        buf.write("\20\t\2{~\5,\27\2|~\5.\30\2}h\3\2\2\2}i\3\2\2\2}j\3\2")
        buf.write("\2\2}k\3\2\2\2}l\3\2\2\2}m\3\2\2\2}n\3\2\2\2}o\3\2\2\2")
        buf.write("}p\3\2\2\2}q\3\2\2\2}r\3\2\2\2}s\3\2\2\2}t\3\2\2\2}u\3")
        buf.write("\2\2\2}v\3\2\2\2}w\3\2\2\2}x\3\2\2\2}y\3\2\2\2}z\3\2\2")
        buf.write("\2}{\3\2\2\2}|\3\2\2\2~\5\3\2\2\2\177\u00de\7\33\2\2\u0080")
        buf.write("\u0081\7\u0082\2\2\u0081\u0082\7)\2\2\u0082\u00df\5H%")
        buf.write("\2\u0083\u0084\7\3\2\2\u0084\u0086\7\26\2\2\u0085\u0083")
        buf.write("\3\2\2\2\u0085\u0086\3\2\2\2\u0086\u0087\3\2\2\2\u0087")
        buf.write("\u008c\7\u0082\2\2\u0088\u0089\7\67\2\2\u0089\u008b\7")
        buf.write("\u0082\2\2\u008a\u0088\3\2\2\2\u008b\u008e\3\2\2\2\u008c")
        buf.write("\u008a\3\2\2\2\u008c\u008d\3\2\2\2\u008d\u008f\3\2\2\2")
        buf.write("\u008e\u008c\3\2\2\2\u008f\u0092\7\66\2\2\u0090\u0093")
        buf.write("\5J&\2\u0091\u0093\7\u0082\2\2\u0092\u0090\3\2\2\2\u0092")
        buf.write("\u0091\3\2\2\2\u0093\u0097\3\2\2\2\u0094\u0096\7\3\2\2")
        buf.write("\u0095\u0094\3\2\2\2\u0096\u0099\3\2\2\2\u0097\u0095\3")
        buf.write("\2\2\2\u0097\u0098\3\2\2\2\u0098\u00df\3\2\2\2\u0099\u0097")
        buf.write("\3\2\2\2\u009a\u009b\7\3\2\2\u009b\u009d\7\26\2\2\u009c")
        buf.write("\u009a\3\2\2\2\u009c\u009d\3\2\2\2\u009d\u009e\3\2\2\2")
        buf.write("\u009e\u00a2\7\5\2\2\u009f\u00a1\n\3\2\2\u00a0\u009f\3")
        buf.write("\2\2\2\u00a1\u00a4\3\2\2\2\u00a2\u00a0\3\2\2\2\u00a2\u00a3")
        buf.write("\3\2\2\2\u00a3\u00a8\3\2\2\2\u00a4\u00a2\3\2\2\2\u00a5")
        buf.write("\u00a7\7\3\2\2\u00a6\u00a5\3\2\2\2\u00a7\u00aa\3\2\2\2")
        buf.write("\u00a8\u00a6\3\2\2\2\u00a8\u00a9\3\2\2\2\u00a9\u00df\3")
        buf.write("\2\2\2\u00aa\u00a8\3\2\2\2\u00ab\u00df\5\f\7\2\u00ac\u00ad")
        buf.write("\7\u0082\2\2\u00ad\u00ae\7\66\2\2\u00ae\u00af\5F$\2\u00af")
        buf.write("\u00b0\7)\2\2\u00b0\u00b1\7}\2\2\u00b1\u00b3\7s\2\2\u00b2")
        buf.write("\u00b4\5F$\2\u00b3\u00b2\3\2\2\2\u00b3\u00b4\3\2\2\2\u00b4")
        buf.write("\u00b5\3\2\2\2\u00b5\u00b8\7t\2\2\u00b6\u00b7\7\3\2\2")
        buf.write("\u00b7\u00b9\7\26\2\2\u00b8\u00b6\3\2\2\2\u00b8\u00b9")
        buf.write("\3\2\2\2\u00b9\u00df\3\2\2\2\u00ba\u00bb\7\u0082\2\2\u00bb")
        buf.write("\u00bc\7)\2\2\u00bc\u00df\5\24\13\2\u00bd\u00be\7\u0082")
        buf.write("\2\2\u00be\u00bf\7)\2\2\u00bf\u00c0\7}\2\2\u00c0\u00ca")
        buf.write("\7s\2\2\u00c1\u00c3\7,\2\2\u00c2\u00c1\3\2\2\2\u00c2\u00c3")
        buf.write("\3\2\2\2\u00c3\u00c5\3\2\2\2\u00c4\u00c6\7\25\2\2\u00c5")
        buf.write("\u00c4\3\2\2\2\u00c6\u00c7\3\2\2\2\u00c7\u00c5\3\2\2\2")
        buf.write("\u00c7\u00c8\3\2\2\2\u00c8\u00cb\3\2\2\2\u00c9\u00cb\7")
        buf.write("\u0082\2\2\u00ca\u00c2\3\2\2\2\u00ca\u00c9\3\2\2\2\u00cb")
        buf.write("\u00da\3\2\2\2\u00cc\u00d6\7\67\2\2\u00cd\u00cf\7,\2\2")
        buf.write("\u00ce\u00cd\3\2\2\2\u00ce\u00cf\3\2\2\2\u00cf\u00d1\3")
        buf.write("\2\2\2\u00d0\u00d2\7\25\2\2\u00d1\u00d0\3\2\2\2\u00d2")
        buf.write("\u00d3\3\2\2\2\u00d3\u00d1\3\2\2\2\u00d3\u00d4\3\2\2\2")
        buf.write("\u00d4\u00d7\3\2\2\2\u00d5\u00d7\7\u0082\2\2\u00d6\u00ce")
        buf.write("\3\2\2\2\u00d6\u00d5\3\2\2\2\u00d7\u00d9\3\2\2\2\u00d8")
        buf.write("\u00cc\3\2\2\2\u00d9\u00dc\3\2\2\2\u00da\u00d8\3\2\2\2")
        buf.write("\u00da\u00db\3\2\2\2\u00db\u00dd\3\2\2\2\u00dc\u00da\3")
        buf.write("\2\2\2\u00dd\u00df\7t\2\2\u00de\u0080\3\2\2\2\u00de\u0085")
        buf.write("\3\2\2\2\u00de\u009c\3\2\2\2\u00de\u00ab\3\2\2\2\u00de")
        buf.write("\u00ac\3\2\2\2\u00de\u00ba\3\2\2\2\u00de\u00bd\3\2\2\2")
        buf.write("\u00df\u00e0\3\2\2\2\u00e0\u00de\3\2\2\2\u00e0\u00e1\3")
        buf.write("\2\2\2\u00e1\7\3\2\2\2\u00e2\u00ef\7B\2\2\u00e3\u00e4")
        buf.write("\7\3\2\2\u00e4\u00e6\7\26\2\2\u00e5\u00e3\3\2\2\2\u00e5")
        buf.write("\u00e6\3\2\2\2\u00e6\u00e7\3\2\2\2\u00e7\u00e9\5\f\7\2")
        buf.write("\u00e8\u00ea\7\3\2\2\u00e9\u00e8\3\2\2\2\u00e9\u00ea\3")
        buf.write("\2\2\2\u00ea\u00ed\3\2\2\2\u00eb\u00ec\7\26\2\2\u00ec")
        buf.write("\u00ee\7~\2\2\u00ed\u00eb\3\2\2\2\u00ed\u00ee\3\2\2\2")
        buf.write("\u00ee\u00f0\3\2\2\2\u00ef\u00e5\3\2\2\2\u00f0\u00f1\3")
        buf.write("\2\2\2\u00f1\u00ef\3\2\2\2\u00f1\u00f2\3\2\2\2\u00f2\t")
        buf.write("\3\2\2\2\u00f3\u0100\7Y\2\2\u00f4\u00f5\7\3\2\2\u00f5")
        buf.write("\u00f7\7\26\2\2\u00f6\u00f4\3\2\2\2\u00f6\u00f7\3\2\2")
        buf.write("\2\u00f7\u00f8\3\2\2\2\u00f8\u00fa\5\f\7\2\u00f9\u00fb")
        buf.write("\7\3\2\2\u00fa\u00f9\3\2\2\2\u00fa\u00fb\3\2\2\2\u00fb")
        buf.write("\u00fe\3\2\2\2\u00fc\u00fd\7\26\2\2\u00fd\u00ff\7~\2\2")
        buf.write("\u00fe\u00fc\3\2\2\2\u00fe\u00ff\3\2\2\2\u00ff\u0101\3")
        buf.write("\2\2\2\u0100\u00f6\3\2\2\2\u0101\u0102\3\2\2\2\u0102\u0100")
        buf.write("\3\2\2\2\u0102\u0103\3\2\2\2\u0103\13\3\2\2\2\u0104\u0105")
        buf.write("\7\u0082\2\2\u0105\u0107\7)\2\2\u0106\u0108\7}\2\2\u0107")
        buf.write("\u0106\3\2\2\2\u0107\u0108\3\2\2\2\u0108\u010c\3\2\2\2")
        buf.write("\u0109\u010d\5\66\34\2\u010a\u010d\5F$\2\u010b\u010d\5")
        buf.write(":\36\2\u010c\u0109\3\2\2\2\u010c\u010a\3\2\2\2\u010c\u010b")
        buf.write("\3\2\2\2\u010d\u010f\3\2\2\2\u010e\u0110\78\2\2\u010f")
        buf.write("\u010e\3\2\2\2\u010f\u0110\3\2\2\2\u0110\u0114\3\2\2\2")
        buf.write("\u0111\u0113\7\3\2\2\u0112\u0111\3\2\2\2\u0113\u0116\3")
        buf.write("\2\2\2\u0114\u0112\3\2\2\2\u0114\u0115\3\2\2\2\u0115\u0118")
        buf.write("\3\2\2\2\u0116\u0114\3\2\2\2\u0117\u0119\7\26\2\2\u0118")
        buf.write("\u0117\3\2\2\2\u0118\u0119\3\2\2\2\u0119\u0133\3\2\2\2")
        buf.write("\u011a\u011b\7\u0082\2\2\u011b\u011e\7)\2\2\u011c\u011f")
        buf.write("\5:\36\2\u011d\u011f\5\64\33\2\u011e\u011c\3\2\2\2\u011e")
        buf.write("\u011d\3\2\2\2\u011f\u0120\3\2\2\2\u0120\u0121\7*\2\2")
        buf.write("\u0121\u0122\5Z.\2\u0122\u0133\3\2\2\2\u0123\u0124\7\u0082")
        buf.write("\2\2\u0124\u0125\7)\2\2\u0125\u0127\5H%\2\u0126\u0128")
        buf.write("\78\2\2\u0127\u0126\3\2\2\2\u0127\u0128\3\2\2\2\u0128")
        buf.write("\u012c\3\2\2\2\u0129\u012b\7\3\2\2\u012a\u0129\3\2\2\2")
        buf.write("\u012b\u012e\3\2\2\2\u012c\u012a\3\2\2\2\u012c\u012d\3")
        buf.write("\2\2\2\u012d\u0130\3\2\2\2\u012e\u012c\3\2\2\2\u012f\u0131")
        buf.write("\7\26\2\2\u0130\u012f\3\2\2\2\u0130\u0131\3\2\2\2\u0131")
        buf.write("\u0133\3\2\2\2\u0132\u0104\3\2\2\2\u0132\u011a\3\2\2\2")
        buf.write("\u0132\u0123\3\2\2\2\u0133\r\3\2\2\2\u0134\u0135\7#\2")
        buf.write("\2\u0135\u0136\7o\2\2\u0136\u013b\5F$\2\u0137\u0138\7")
        buf.write("\67\2\2\u0138\u013a\5F$\2\u0139\u0137\3\2\2\2\u013a\u013d")
        buf.write("\3\2\2\2\u013b\u0139\3\2\2\2\u013b\u013c\3\2\2\2\u013c")
        buf.write("\u013e\3\2\2\2\u013d\u013b\3\2\2\2\u013e\u013f\7p\2\2")
        buf.write("\u013f\u014c\3\2\2\2\u0140\u0141\7#\2\2\u0141\u0146\5")
        buf.write("F$\2\u0142\u0143\7\67\2\2\u0143\u0145\5F$\2\u0144\u0142")
        buf.write("\3\2\2\2\u0145\u0148\3\2\2\2\u0146\u0144\3\2\2\2\u0146")
        buf.write("\u0147\3\2\2\2\u0147\u014c\3\2\2\2\u0148\u0146\3\2\2\2")
        buf.write("\u0149\u014a\7#\2\2\u014a\u014c\5\64\33\2\u014b\u0134")
        buf.write("\3\2\2\2\u014b\u0140\3\2\2\2\u014b\u0149\3\2\2\2\u014c")
        buf.write("\17\3\2\2\2\u014d\u014e\7\6\2\2\u014e\u014f\5Z.\2\u014f")
        buf.write("\u0150\7(\2\2\u0150\u0151\5Z.\2\u0151\21\3\2\2\2\u0152")
        buf.write("\u0154\5\26\f\2\u0153\u0155\7\26\2\2\u0154\u0153\3\2\2")
        buf.write("\2\u0154\u0155\3\2\2\2\u0155\u0159\3\2\2\2\u0156\u0158")
        buf.write("\5\30\r\2\u0157\u0156\3\2\2\2\u0158\u015b\3\2\2\2\u0159")
        buf.write("\u0157\3\2\2\2\u0159\u015a\3\2\2\2\u015a\u015d\3\2\2\2")
        buf.write("\u015b\u0159\3\2\2\2\u015c\u015e\5 \21\2\u015d\u015c\3")
        buf.write("\2\2\2\u015d\u015e\3\2\2\2\u015e\u0161\3\2\2\2\u015f\u0160")
        buf.write("\7\3\2\2\u0160\u0162\7\26\2\2\u0161\u015f\3\2\2\2\u0161")
        buf.write("\u0162\3\2\2\2\u0162\23\3\2\2\2\u0163\u0167\5\32\16\2")
        buf.write("\u0164\u0166\5\34\17\2\u0165\u0164\3\2\2\2\u0166\u0169")
        buf.write("\3\2\2\2\u0167\u0165\3\2\2\2\u0167\u0168\3\2\2\2\u0168")
        buf.write("\u016b\3\2\2\2\u0169\u0167\3\2\2\2\u016a\u016c\5\36\20")
        buf.write("\2\u016b\u016a\3\2\2\2\u016b\u016c\3\2\2\2\u016c\25\3")
        buf.write("\2\2\2\u016d\u016f\7S\2\2\u016e\u0170\7\35\2\2\u016f\u016e")
        buf.write("\3\2\2\2\u016f\u0170\3\2\2\2\u0170\u0171\3\2\2\2\u0171")
        buf.write("\u0172\5> \2\u0172\u0173\7\66\2\2\u0173\u0174\5\f\7\2")
        buf.write("\u0174\u0221\3\2\2\2\u0175\u0177\7S\2\2\u0176\u0178\7")
        buf.write("\35\2\2\u0177\u0176\3\2\2\2\u0177\u0178\3\2\2\2\u0178")
        buf.write("\u0179\3\2\2\2\u0179\u017a\7\u009c\2\2\u017a\u017b\7\66")
        buf.write("\2\2\u017b\u017c\7\u0082\2\2\u017c\u0184\7)\2\2\u017d")
        buf.write("\u0185\7\u009c\2\2\u017e\u0180\7}\2\2\u017f\u017e\3\2")
        buf.write("\2\2\u017f\u0180\3\2\2\2\u0180\u0181\3\2\2\2\u0181\u0182")
        buf.write("\7s\2\2\u0182\u0183\7\u009c\2\2\u0183\u0185\7t\2\2\u0184")
        buf.write("\u017d\3\2\2\2\u0184\u017f\3\2\2\2\u0185\u0186\3\2\2\2")
        buf.write("\u0186\u0187\7\3\2\2\u0187\u0221\7\26\2\2\u0188\u018a")
        buf.write("\7S\2\2\u0189\u018b\7\35\2\2\u018a\u0189\3\2\2\2\u018a")
        buf.write("\u018b\3\2\2\2\u018b\u018c\3\2\2\2\u018c\u018d\5> \2\u018d")
        buf.write("\u018e\7\66\2\2\u018e\u018f\7\u009c\2\2\u018f\u0190\5")
        buf.write("Z.\2\u0190\u0221\3\2\2\2\u0191\u0193\7S\2\2\u0192\u0194")
        buf.write("\7\35\2\2\u0193\u0192\3\2\2\2\u0193\u0194\3\2\2\2\u0194")
        buf.write("\u0195\3\2\2\2\u0195\u0196\5> \2\u0196\u01a3\7\66\2\2")
        buf.write("\u0197\u0198\7\3\2\2\u0198\u01a1\7\26\2\2\u0199\u01a2")
        buf.write("\5\4\3\2\u019a\u019b\7>\2\2\u019b\u01a2\7\u0082\2\2\u019c")
        buf.write("\u01a2\7C\2\2\u019d\u019e\7\7\2\2\u019e\u01a2\7\u0082")
        buf.write("\2\2\u019f\u01a0\7\b\2\2\u01a0\u01a2\7\u0082\2\2\u01a1")
        buf.write("\u0199\3\2\2\2\u01a1\u019a\3\2\2\2\u01a1\u019c\3\2\2\2")
        buf.write("\u01a1\u019d\3\2\2\2\u01a1\u019f\3\2\2\2\u01a2\u01a4\3")
        buf.write("\2\2\2\u01a3\u0197\3\2\2\2\u01a4\u01a5\3\2\2\2\u01a5\u01a3")
        buf.write("\3\2\2\2\u01a5\u01a6\3\2\2\2\u01a6\u0221\3\2\2\2\u01a7")
        buf.write("\u01a9\7S\2\2\u01a8\u01aa\7\35\2\2\u01a9\u01a8\3\2\2\2")
        buf.write("\u01a9\u01aa\3\2\2\2\u01aa\u01ab\3\2\2\2\u01ab\u01ac\5")
        buf.write("> \2\u01ac\u01bc\7\66\2\2\u01ad\u01ae\7\3\2\2\u01ae\u01b3")
        buf.write("\7\26\2\2\u01af\u01b4\5\4\3\2\u01b0\u01b1\7>\2\2\u01b1")
        buf.write("\u01b4\7\u0082\2\2\u01b2\u01b4\7C\2\2\u01b3\u01af\3\2")
        buf.write("\2\2\u01b3\u01b0\3\2\2\2\u01b3\u01b2\3\2\2\2\u01b4\u01b5")
        buf.write("\3\2\2\2\u01b5\u01b3\3\2\2\2\u01b5\u01b6\3\2\2\2\u01b6")
        buf.write("\u01b8\3\2\2\2\u01b7\u01b9\7\3\2\2\u01b8\u01b7\3\2\2\2")
        buf.write("\u01b9\u01ba\3\2\2\2\u01ba\u01b8\3\2\2\2\u01ba\u01bb\3")
        buf.write("\2\2\2\u01bb\u01bd\3\2\2\2\u01bc\u01ad\3\2\2\2\u01bd\u01be")
        buf.write("\3\2\2\2\u01be\u01bc\3\2\2\2\u01be\u01bf\3\2\2\2\u01bf")
        buf.write("\u0221\3\2\2\2\u01c0\u01c2\7S\2\2\u01c1\u01c3\7\35\2\2")
        buf.write("\u01c2\u01c1\3\2\2\2\u01c2\u01c3\3\2\2\2\u01c3\u01c4\3")
        buf.write("\2\2\2\u01c4\u01c5\5> \2\u01c5\u01f3\7\66\2\2\u01c6\u01ca")
        buf.write("\7\3\2\2\u01c7\u01c9\7\26\2\2\u01c8\u01c7\3\2\2\2\u01c9")
        buf.write("\u01cc\3\2\2\2\u01ca\u01c8\3\2\2\2\u01ca\u01cb\3\2\2\2")
        buf.write("\u01cb\u01ea\3\2\2\2\u01cc\u01ca\3\2\2\2\u01cd\u01ce\7")
        buf.write("\u0082\2\2\u01ce\u01d2\7\3\2\2\u01cf\u01d1\7\26\2\2\u01d0")
        buf.write("\u01cf\3\2\2\2\u01d1\u01d4\3\2\2\2\u01d2\u01d0\3\2\2\2")
        buf.write("\u01d2\u01d3\3\2\2\2\u01d3\u01d5\3\2\2\2\u01d4\u01d2\3")
        buf.write("\2\2\2\u01d5\u01d6\7\7\2\2\u01d6\u01d7\7o\2\2\u01d7\u01dc")
        buf.write("\7\u0082\2\2\u01d8\u01d9\7\67\2\2\u01d9\u01db\7\u0082")
        buf.write("\2\2\u01da\u01d8\3\2\2\2\u01db\u01de\3\2\2\2\u01dc\u01da")
        buf.write("\3\2\2\2\u01dc\u01dd\3\2\2\2\u01dd\u01df\3\2\2\2\u01de")
        buf.write("\u01dc\3\2\2\2\u01df\u01e0\7p\2\2\u01e0\u01e4\7\3\2\2")
        buf.write("\u01e1\u01e3\7\26\2\2\u01e2\u01e1\3\2\2\2\u01e3\u01e6")
        buf.write("\3\2\2\2\u01e4\u01e2\3\2\2\2\u01e4\u01e5\3\2\2\2\u01e5")
        buf.write("\u01e7\3\2\2\2\u01e6\u01e4\3\2\2\2\u01e7\u01e8\7>\2\2")
        buf.write("\u01e8\u01eb\7\u0082\2\2\u01e9\u01eb\5\4\3\2\u01ea\u01cd")
        buf.write("\3\2\2\2\u01ea\u01e9\3\2\2\2\u01eb\u01ec\3\2\2\2\u01ec")
        buf.write("\u01ea\3\2\2\2\u01ec\u01ed\3\2\2\2\u01ed\u01ef\3\2\2\2")
        buf.write("\u01ee\u01f0\7\3\2\2\u01ef\u01ee\3\2\2\2\u01f0\u01f1\3")
        buf.write("\2\2\2\u01f1\u01ef\3\2\2\2\u01f1\u01f2\3\2\2\2\u01f2\u01f4")
        buf.write("\3\2\2\2\u01f3\u01c6\3\2\2\2\u01f4\u01f5\3\2\2\2\u01f5")
        buf.write("\u01f3\3\2\2\2\u01f5\u01f6\3\2\2\2\u01f6\u0221\3\2\2\2")
        buf.write("\u01f7\u01f9\7S\2\2\u01f8\u01fa\7\35\2\2\u01f9\u01f8\3")
        buf.write("\2\2\2\u01f9\u01fa\3\2\2\2\u01fa\u01fb\3\2\2\2\u01fb\u01fc")
        buf.write("\5> \2\u01fc\u01fd\7\66\2\2\u01fd\u01fe\7e\2\2\u01fe\u0221")
        buf.write("\3\2\2\2\u01ff\u0201\7S\2\2\u0200\u0202\7\35\2\2\u0201")
        buf.write("\u0200\3\2\2\2\u0201\u0202\3\2\2\2\u0202\u0203\3\2\2\2")
        buf.write("\u0203\u0204\7\u0082\2\2\u0204\u0205\7o\2\2\u0205\u0206")
        buf.write("\5F$\2\u0206\u0207\7p\2\2\u0207\u0211\7\66\2\2\u0208\u0209")
        buf.write("\7\3\2\2\u0209\u020a\7\26\2\2\u020a\u020e\5\4\3\2\u020b")
        buf.write("\u020d\7\3\2\2\u020c\u020b\3\2\2\2\u020d\u0210\3\2\2\2")
        buf.write("\u020e\u020c\3\2\2\2\u020e\u020f\3\2\2\2\u020f\u0212\3")
        buf.write("\2\2\2\u0210\u020e\3\2\2\2\u0211\u0208\3\2\2\2\u0212\u0213")
        buf.write("\3\2\2\2\u0213\u0211\3\2\2\2\u0213\u0214\3\2\2\2\u0214")
        buf.write("\u0221\3\2\2\2\u0215\u0217\7S\2\2\u0216\u0218\7\35\2\2")
        buf.write("\u0217\u0216\3\2\2\2\u0217\u0218\3\2\2\2\u0218\u0219\3")
        buf.write("\2\2\2\u0219\u021a\7\u0082\2\2\u021a\u021b\7o\2\2\u021b")
        buf.write("\u021c\5F$\2\u021c\u021d\7p\2\2\u021d\u021e\7\66\2\2\u021e")
        buf.write("\u021f\5\f\7\2\u021f\u0221\3\2\2\2\u0220\u016d\3\2\2\2")
        buf.write("\u0220\u0175\3\2\2\2\u0220\u0188\3\2\2\2\u0220\u0191\3")
        buf.write("\2\2\2\u0220\u01a7\3\2\2\2\u0220\u01c0\3\2\2\2\u0220\u01f7")
        buf.write("\3\2\2\2\u0220\u01ff\3\2\2\2\u0220\u0215\3\2\2\2\u0221")
        buf.write("\27\3\2\2\2\u0222\u0224\7I\2\2\u0223\u0225\7\35\2\2\u0224")
        buf.write("\u0223\3\2\2\2\u0224\u0225\3\2\2\2\u0225\u0226\3\2\2\2")
        buf.write("\u0226\u0227\5> \2\u0227\u0228\7\66\2\2\u0228\u0229\5")
        buf.write("\f\7\2\u0229\u0283\3\2\2\2\u022a\u022c\7I\2\2\u022b\u022d")
        buf.write("\7\35\2\2\u022c\u022b\3\2\2\2\u022c\u022d\3\2\2\2\u022d")
        buf.write("\u022e\3\2\2\2\u022e\u022f\5> \2\u022f\u023c\7\66\2\2")
        buf.write("\u0230\u0231\7\3\2\2\u0231\u023a\7\26\2\2\u0232\u023b")
        buf.write("\5\4\3\2\u0233\u0234\7>\2\2\u0234\u023b\7\u0082\2\2\u0235")
        buf.write("\u023b\7C\2\2\u0236\u0237\7\7\2\2\u0237\u023b\7\u0082")
        buf.write("\2\2\u0238\u0239\7\b\2\2\u0239\u023b\7\u0082\2\2\u023a")
        buf.write("\u0232\3\2\2\2\u023a\u0233\3\2\2\2\u023a\u0235\3\2\2\2")
        buf.write("\u023a\u0236\3\2\2\2\u023a\u0238\3\2\2\2\u023b\u023d\3")
        buf.write("\2\2\2\u023c\u0230\3\2\2\2\u023d\u023e\3\2\2\2\u023e\u023c")
        buf.write("\3\2\2\2\u023e\u023f\3\2\2\2\u023f\u0283\3\2\2\2\u0240")
        buf.write("\u0242\7I\2\2\u0241\u0243\7\35\2\2\u0242\u0241\3\2\2\2")
        buf.write("\u0242\u0243\3\2\2\2\u0243\u0244\3\2\2\2\u0244\u0245\5")
        buf.write("> \2\u0245\u0255\7\66\2\2\u0246\u0247\7\3\2\2\u0247\u024c")
        buf.write("\7\26\2\2\u0248\u024d\5\4\3\2\u0249\u024a\7>\2\2\u024a")
        buf.write("\u024d\7\u0082\2\2\u024b\u024d\7C\2\2\u024c\u0248\3\2")
        buf.write("\2\2\u024c\u0249\3\2\2\2\u024c\u024b\3\2\2\2\u024d\u024e")
        buf.write("\3\2\2\2\u024e\u024c\3\2\2\2\u024e\u024f\3\2\2\2\u024f")
        buf.write("\u0251\3\2\2\2\u0250\u0252\7\3\2\2\u0251\u0250\3\2\2\2")
        buf.write("\u0252\u0253\3\2\2\2\u0253\u0251\3\2\2\2\u0253\u0254\3")
        buf.write("\2\2\2\u0254\u0256\3\2\2\2\u0255\u0246\3\2\2\2\u0256\u0257")
        buf.write("\3\2\2\2\u0257\u0255\3\2\2\2\u0257\u0258\3\2\2\2\u0258")
        buf.write("\u0283\3\2\2\2\u0259\u025b\7I\2\2\u025a\u025c\7\35\2\2")
        buf.write("\u025b\u025a\3\2\2\2\u025b\u025c\3\2\2\2\u025c\u025d\3")
        buf.write("\2\2\2\u025d\u025e\5> \2\u025e\u025f\7\66\2\2\u025f\u0260")
        buf.write("\7e\2\2\u0260\u0283\3\2\2\2\u0261\u0263\7I\2\2\u0262\u0264")
        buf.write("\7\35\2\2\u0263\u0262\3\2\2\2\u0263\u0264\3\2\2\2\u0264")
        buf.write("\u0265\3\2\2\2\u0265\u0266\7\u0082\2\2\u0266\u0267\7o")
        buf.write("\2\2\u0267\u0268\5F$\2\u0268\u0269\7p\2\2\u0269\u0273")
        buf.write("\7\66\2\2\u026a\u026b\7\3\2\2\u026b\u026c\7\26\2\2\u026c")
        buf.write("\u0270\5\4\3\2\u026d\u026f\7\3\2\2\u026e\u026d\3\2\2\2")
        buf.write("\u026f\u0272\3\2\2\2\u0270\u026e\3\2\2\2\u0270\u0271\3")
        buf.write("\2\2\2\u0271\u0274\3\2\2\2\u0272\u0270\3\2\2\2\u0273\u026a")
        buf.write("\3\2\2\2\u0274\u0275\3\2\2\2\u0275\u0273\3\2\2\2\u0275")
        buf.write("\u0276\3\2\2\2\u0276\u0283\3\2\2\2\u0277\u0279\7I\2\2")
        buf.write("\u0278\u027a\7\35\2\2\u0279\u0278\3\2\2\2\u0279\u027a")
        buf.write("\3\2\2\2\u027a\u027b\3\2\2\2\u027b\u027c\7\u0082\2\2\u027c")
        buf.write("\u027d\7o\2\2\u027d\u027e\5F$\2\u027e\u027f\7p\2\2\u027f")
        buf.write("\u0280\7\66\2\2\u0280\u0281\5\f\7\2\u0281\u0283\3\2\2")
        buf.write("\2\u0282\u0222\3\2\2\2\u0282\u022a\3\2\2\2\u0282\u0240")
        buf.write("\3\2\2\2\u0282\u0259\3\2\2\2\u0282\u0261\3\2\2\2\u0282")
        buf.write("\u0277\3\2\2\2\u0283\31\3\2\2\2\u0284\u0286\7S\2\2\u0285")
        buf.write("\u0287\7\35\2\2\u0286\u0285\3\2\2\2\u0286\u0287\3\2\2")
        buf.write("\2\u0287\u0288\3\2\2\2\u0288\u0289\5> \2\u0289\u028c\7")
        buf.write("\66\2\2\u028a\u028d\5F$\2\u028b\u028d\7\u009c\2\2\u028c")
        buf.write("\u028a\3\2\2\2\u028c\u028b\3\2\2\2\u028d\33\3\2\2\2\u028e")
        buf.write("\u0290\7I\2\2\u028f\u0291\7\35\2\2\u0290\u028f\3\2\2\2")
        buf.write("\u0290\u0291\3\2\2\2\u0291\u0292\3\2\2\2\u0292\u0293\5")
        buf.write("> \2\u0293\u0296\7\66\2\2\u0294\u0297\5F$\2\u0295\u0297")
        buf.write("\7\u009c\2\2\u0296\u0294\3\2\2\2\u0296\u0295\3\2\2\2\u0297")
        buf.write("\35\3\2\2\2\u0298\u029a\7\26\2\2\u0299\u0298\3\2\2\2\u0299")
        buf.write("\u029a\3\2\2\2\u029a\u029b\3\2\2\2\u029b\u029c\7J\2\2")
        buf.write("\u029c\u029f\7\66\2\2\u029d\u02a0\5F$\2\u029e\u02a0\7")
        buf.write("\u009c\2\2\u029f\u029d\3\2\2\2\u029f\u029e\3\2\2\2\u02a0")
        buf.write("\37\3\2\2\2\u02a1\u02a3\7\26\2\2\u02a2\u02a1\3\2\2\2\u02a2")
        buf.write("\u02a3\3\2\2\2\u02a3\u02a4\3\2\2\2\u02a4\u02a5\7J\2\2")
        buf.write("\u02a5\u02b2\7\66\2\2\u02a6\u02a7\7\3\2\2\u02a7\u02aa")
        buf.write("\7\26\2\2\u02a8\u02ab\5\4\3\2\u02a9\u02ab\7>\2\2\u02aa")
        buf.write("\u02a8\3\2\2\2\u02aa\u02a9\3\2\2\2\u02ab\u02ad\3\2\2\2")
        buf.write("\u02ac\u02a6\3\2\2\2\u02ad\u02ae\3\2\2\2\u02ae\u02ac\3")
        buf.write("\2\2\2\u02ae\u02af\3\2\2\2\u02af\u02b3\3\2\2\2\u02b0\u02b3")
        buf.write("\5\16\b\2\u02b1\u02b3\5\f\7\2\u02b2\u02ac\3\2\2\2\u02b2")
        buf.write("\u02b0\3\2\2\2\u02b2\u02b1\3\2\2\2\u02b3\u02b4\3\2\2\2")
        buf.write("\u02b4\u02b2\3\2\2\2\u02b4\u02b5\3\2\2\2\u02b5\u02b9\3")
        buf.write("\2\2\2\u02b6\u02b8\7\3\2\2\u02b7\u02b6\3\2\2\2\u02b8\u02bb")
        buf.write("\3\2\2\2\u02b9\u02b7\3\2\2\2\u02b9\u02ba\3\2\2\2\u02ba")
        buf.write("\u02bd\3\2\2\2\u02bb\u02b9\3\2\2\2\u02bc\u02be\7\26\2")
        buf.write("\2\u02bd\u02bc\3\2\2\2\u02bd\u02be\3\2\2\2\u02be!\3\2")
        buf.write("\2\2\u02bf\u02c0\7P\2\2\u02c0\u02c1\7\u0082\2\2\u02c1")
        buf.write("\u02c2\7U\2\2\u02c2\u02c3\7w\2\2\u02c3\u02c4\7\'\2\2\u02c4")
        buf.write("\u02c5\7w\2\2\u02c5\u02c7\7\66\2\2\u02c6\u02c8\7~\2\2")
        buf.write("\u02c7\u02c6\3\2\2\2\u02c7\u02c8\3\2\2\2\u02c8\u02cc\3")
        buf.write("\2\2\2\u02c9\u02ca\7\3\2\2\u02ca\u02cb\7\26\2\2\u02cb")
        buf.write("\u02cd\5\4\3\2\u02cc\u02c9\3\2\2\2\u02cd\u02ce\3\2\2\2")
        buf.write("\u02ce\u02cc\3\2\2\2\u02ce\u02cf\3\2\2\2\u02cf\u02d3\3")
        buf.write("\2\2\2\u02d0\u02d2\7\26\2\2\u02d1\u02d0\3\2\2\2\u02d2")
        buf.write("\u02d5\3\2\2\2\u02d3\u02d1\3\2\2\2\u02d3\u02d4\3\2\2\2")
        buf.write("\u02d4\u03b8\3\2\2\2\u02d5\u02d3\3\2\2\2\u02d6\u02d7\7")
        buf.write("P\2\2\u02d7\u02d8\7\u0082\2\2\u02d8\u02d9\7U\2\2\u02d9")
        buf.write("\u02da\7\u0082\2\2\u02da\u02db\7\66\2\2\u02db\u02dc\7")
        buf.write("\3\2\2\u02dc\u02dd\7\26\2\2\u02dd\u02df\5L\'\2\u02de\u02e0")
        buf.write("\7\3\2\2\u02df\u02de\3\2\2\2\u02df\u02e0\3\2\2\2\u02e0")
        buf.write("\u03b8\3\2\2\2\u02e1\u02e2\7P\2\2\u02e2\u02e3\7\u0082")
        buf.write("\2\2\u02e3\u02e4\7U\2\2\u02e4\u02e5\7\u0082\2\2\u02e5")
        buf.write("\u02e6\7\66\2\2\u02e6\u02e7\7\u009c\2\2\u02e7\u02e8\7")
        buf.write("\u0082\2\2\u02e8\u02e9\7\3\2\2\u02e9\u02ea\7\26\2\2\u02ea")
        buf.write("\u02eb\7\u0082\2\2\u02eb\u02ec\7s\2\2\u02ec\u02ed\7\u0082")
        buf.write("\2\2\u02ed\u02ee\7t\2\2\u02ee\u02ef\7o\2\2\u02ef\u02f0")
        buf.write("\7\u0082\2\2\u02f0\u02f1\7\66\2\2\u02f1\u02f8\5F$\2\u02f2")
        buf.write("\u02f3\7\67\2\2\u02f3\u02f4\7\u0082\2\2\u02f4\u02f5\7")
        buf.write("\66\2\2\u02f5\u02f7\5F$\2\u02f6\u02f2\3\2\2\2\u02f7\u02fa")
        buf.write("\3\2\2\2\u02f8\u02f6\3\2\2\2\u02f8\u02f9\3\2\2\2\u02f9")
        buf.write("\u02fb\3\2\2\2\u02fa\u02f8\3\2\2\2\u02fb\u02fc\7p\2\2")
        buf.write("\u02fc\u03b8\3\2\2\2\u02fd\u02fe\7P\2\2\u02fe\u02ff\7")
        buf.write("\u0082\2\2\u02ff\u0300\7U\2\2\u0300\u0301\5\64\33\2\u0301")
        buf.write("\u0302\7\66\2\2\u0302\u0303\7\3\2\2\u0303\u0304\7\26\2")
        buf.write("\2\u0304\u0308\5\64\33\2\u0305\u0307\7\3\2\2\u0306\u0305")
        buf.write("\3\2\2\2\u0307\u030a\3\2\2\2\u0308\u0306\3\2\2\2\u0308")
        buf.write("\u0309\3\2\2\2\u0309\u03b8\3\2\2\2\u030a\u0308\3\2\2\2")
        buf.write("\u030b\u030c\7P\2\2\u030c\u030d\7\u0082\2\2\u030d\u0310")
        buf.write("\7U\2\2\u030e\u0311\7\u009e\2\2\u030f\u0311\5\64\33\2")
        buf.write("\u0310\u030e\3\2\2\2\u0310\u030f\3\2\2\2\u0311\u0312\3")
        buf.write("\2\2\2\u0312\u0314\7\66\2\2\u0313\u0315\7~\2\2\u0314\u0313")
        buf.write("\3\2\2\2\u0314\u0315\3\2\2\2\u0315\u0319\3\2\2\2\u0316")
        buf.write("\u0317\7\3\2\2\u0317\u0318\7\26\2\2\u0318\u031a\5\4\3")
        buf.write("\2\u0319\u0316\3\2\2\2\u031a\u031b\3\2\2\2\u031b\u0319")
        buf.write("\3\2\2\2\u031b\u031c\3\2\2\2\u031c\u0320\3\2\2\2\u031d")
        buf.write("\u031f\7\26\2\2\u031e\u031d\3\2\2\2\u031f\u0322\3\2\2")
        buf.write("\2\u0320\u031e\3\2\2\2\u0320\u0321\3\2\2\2\u0321\u03b8")
        buf.write("\3\2\2\2\u0322\u0320\3\2\2\2\u0323\u0324\7P\2\2\u0324")
        buf.write("\u0325\7\u0082\2\2\u0325\u0327\7U\2\2\u0326\u0328\7\25")
        buf.write("\2\2\u0327\u0326\3\2\2\2\u0328\u0329\3\2\2\2\u0329\u0327")
        buf.write("\3\2\2\2\u0329\u032a\3\2\2\2\u032a\u032b\3\2\2\2\u032b")
        buf.write("\u032c\7\'\2\2\u032c\u032d\7\61\2\2\u032d\u032e\7\u009c")
        buf.write("\2\2\u032e\u0330\7\66\2\2\u032f\u0331\7~\2\2\u0330\u032f")
        buf.write("\3\2\2\2\u0330\u0331\3\2\2\2\u0331\u0335\3\2\2\2\u0332")
        buf.write("\u0333\7\3\2\2\u0333\u0334\7\26\2\2\u0334\u0336\5\4\3")
        buf.write("\2\u0335\u0332\3\2\2\2\u0336\u0337\3\2\2\2\u0337\u0335")
        buf.write("\3\2\2\2\u0337\u0338\3\2\2\2\u0338\u033c\3\2\2\2\u0339")
        buf.write("\u033b\7\26\2\2\u033a\u0339\3\2\2\2\u033b\u033e\3\2\2")
        buf.write("\2\u033c\u033a\3\2\2\2\u033c\u033d\3\2\2\2\u033d\u03b8")
        buf.write("\3\2\2\2\u033e\u033c\3\2\2\2\u033f\u0340\7P\2\2\u0340")
        buf.write("\u0345\7\u0082\2\2\u0341\u0342\7\67\2\2\u0342\u0344\7")
        buf.write("\u0082\2\2\u0343\u0341\3\2\2\2\u0344\u0347\3\2\2\2\u0345")
        buf.write("\u0343\3\2\2\2\u0345\u0346\3\2\2\2\u0346\u0348\3\2\2\2")
        buf.write("\u0347\u0345\3\2\2\2\u0348\u0349\7U\2\2\u0349\u034a\7")
        buf.write("}\2\2\u034a\u0363\7s\2\2\u034b\u0352\5Z.\2\u034c\u034e")
        buf.write("\7\25\2\2\u034d\u034c\3\2\2\2\u034e\u034f\3\2\2\2\u034f")
        buf.write("\u034d\3\2\2\2\u034f\u0350\3\2\2\2\u0350\u0352\3\2\2\2")
        buf.write("\u0351\u034b\3\2\2\2\u0351\u034d\3\2\2\2\u0352\u035e\3")
        buf.write("\2\2\2\u0353\u035a\7\67\2\2\u0354\u035b\5Z.\2\u0355\u0357")
        buf.write("\7\25\2\2\u0356\u0355\3\2\2\2\u0357\u0358\3\2\2\2\u0358")
        buf.write("\u0356\3\2\2\2\u0358\u0359\3\2\2\2\u0359\u035b\3\2\2\2")
        buf.write("\u035a\u0354\3\2\2\2\u035a\u0356\3\2\2\2\u035b\u035d\3")
        buf.write("\2\2\2\u035c\u0353\3\2\2\2\u035d\u0360\3\2\2\2\u035e\u035c")
        buf.write("\3\2\2\2\u035e\u035f\3\2\2\2\u035f\u0362\3\2\2\2\u0360")
        buf.write("\u035e\3\2\2\2\u0361\u0351\3\2\2\2\u0362\u0365\3\2\2\2")
        buf.write("\u0363\u0361\3\2\2\2\u0363\u0364\3\2\2\2\u0364\u0366\3")
        buf.write("\2\2\2\u0365\u0363\3\2\2\2\u0366\u0367\7t\2\2\u0367\u0369")
        buf.write("\7\66\2\2\u0368\u036a\7~\2\2\u0369\u0368\3\2\2\2\u0369")
        buf.write("\u036a\3\2\2\2\u036a\u036e\3\2\2\2\u036b\u036c\7\3\2\2")
        buf.write("\u036c\u036d\7\26\2\2\u036d\u036f\5\4\3\2\u036e\u036b")
        buf.write("\3\2\2\2\u036f\u0370\3\2\2\2\u0370\u036e\3\2\2\2\u0370")
        buf.write("\u0371\3\2\2\2\u0371\u0375\3\2\2\2\u0372\u0374\7\26\2")
        buf.write("\2\u0373\u0372\3\2\2\2\u0374\u0377\3\2\2\2\u0375\u0373")
        buf.write("\3\2\2\2\u0375\u0376\3\2\2\2\u0376\u03b8\3\2\2\2\u0377")
        buf.write("\u0375\3\2\2\2\u0378\u0379\7P\2\2\u0379\u037a\7\u0082")
        buf.write("\2\2\u037a\u037b\7U\2\2\u037b\u037c\7\u0082\2\2\u037c")
        buf.write("\u037d\7o\2\2\u037d\u037e\7\u0082\2\2\u037e\u037f\7p\2")
        buf.write("\2\u037f\u0381\7\66\2\2\u0380\u0382\7~\2\2\u0381\u0380")
        buf.write("\3\2\2\2\u0381\u0382\3\2\2\2\u0382\u0386\3\2\2\2\u0383")
        buf.write("\u0384\7\3\2\2\u0384\u0385\7\26\2\2\u0385\u0387\5\4\3")
        buf.write("\2\u0386\u0383\3\2\2\2\u0387\u0388\3\2\2\2\u0388\u0386")
        buf.write("\3\2\2\2\u0388\u0389\3\2\2\2\u0389\u038d\3\2\2\2\u038a")
        buf.write("\u038c\7\26\2\2\u038b\u038a\3\2\2\2\u038c\u038f\3\2\2")
        buf.write("\2\u038d\u038b\3\2\2\2\u038d\u038e\3\2\2\2\u038e\u03b8")
        buf.write("\3\2\2\2\u038f\u038d\3\2\2\2\u0390\u0391\7P\2\2\u0391")
        buf.write("\u0392\7\u0082\2\2\u0392\u0393\7U\2\2\u0393\u0394\7\u0082")
        buf.write("\2\2\u0394\u0395\7\66\2\2\u0395\u0396\7\3\2\2\u0396\u0397")
        buf.write("\7\26\2\2\u0397\u0399\5\64\33\2\u0398\u039a\7\3\2\2\u0399")
        buf.write("\u0398\3\2\2\2\u0399\u039a\3\2\2\2\u039a\u03b8\3\2\2\2")
        buf.write("\u039b\u039c\7P\2\2\u039c\u03a1\7\u0082\2\2\u039d\u039e")
        buf.write("\7\67\2\2\u039e\u03a0\7\u0082\2\2\u039f\u039d\3\2\2\2")
        buf.write("\u03a0\u03a3\3\2\2\2\u03a1\u039f\3\2\2\2\u03a1\u03a2\3")
        buf.write("\2\2\2\u03a2\u03a4\3\2\2\2\u03a3\u03a1\3\2\2\2\u03a4\u03a5")
        buf.write("\7U\2\2\u03a5\u03aa\7\u009c\2\2\u03a6\u03a7\7o\2\2\u03a7")
        buf.write("\u03a8\5Z.\2\u03a8\u03a9\7p\2\2\u03a9\u03ab\3\2\2\2\u03aa")
        buf.write("\u03a6\3\2\2\2\u03aa\u03ab\3\2\2\2\u03ab\u03ac\3\2\2\2")
        buf.write("\u03ac\u03b0\7\66\2\2\u03ad\u03ae\7\3\2\2\u03ae\u03af")
        buf.write("\7\26\2\2\u03af\u03b1\5\4\3\2\u03b0\u03ad\3\2\2\2\u03b1")
        buf.write("\u03b2\3\2\2\2\u03b2\u03b0\3\2\2\2\u03b2\u03b3\3\2\2\2")
        buf.write("\u03b3\u03b5\3\2\2\2\u03b4\u03b6\7\3\2\2\u03b5\u03b4\3")
        buf.write("\2\2\2\u03b5\u03b6\3\2\2\2\u03b6\u03b8\3\2\2\2\u03b7\u02bf")
        buf.write("\3\2\2\2\u03b7\u02d6\3\2\2\2\u03b7\u02e1\3\2\2\2\u03b7")
        buf.write("\u02fd\3\2\2\2\u03b7\u030b\3\2\2\2\u03b7\u0323\3\2\2\2")
        buf.write("\u03b7\u033f\3\2\2\2\u03b7\u0378\3\2\2\2\u03b7\u0390\3")
        buf.write("\2\2\2\u03b7\u039b\3\2\2\2\u03b8#\3\2\2\2\u03b9\u03bc")
        buf.write("\7m\2\2\u03ba\u03bd\5> \2\u03bb\u03bd\7\t\2\2\u03bc\u03ba")
        buf.write("\3\2\2\2\u03bc\u03bb\3\2\2\2\u03bd\u03be\3\2\2\2\u03be")
        buf.write("\u03c8\7\66\2\2\u03bf\u03c0\7\3\2\2\u03c0\u03c6\7\26\2")
        buf.write("\2\u03c1\u03c7\5\4\3\2\u03c2\u03c4\7>\2\2\u03c3\u03c5")
        buf.write("\7\u0082\2\2\u03c4\u03c3\3\2\2\2\u03c4\u03c5\3\2\2\2\u03c5")
        buf.write("\u03c7\3\2\2\2\u03c6\u03c1\3\2\2\2\u03c6\u03c2\3\2\2\2")
        buf.write("\u03c7\u03c9\3\2\2\2\u03c8\u03bf\3\2\2\2\u03c9\u03ca\3")
        buf.write("\2\2\2\u03ca\u03c8\3\2\2\2\u03ca\u03cb\3\2\2\2\u03cb%")
        buf.write("\3\2\2\2\u03cc\u03d0\5(\25\2\u03cd\u03cf\5\30\r\2\u03ce")
        buf.write("\u03cd\3\2\2\2\u03cf\u03d2\3\2\2\2\u03d0\u03ce\3\2\2\2")
        buf.write("\u03d0\u03d1\3\2\2\2\u03d1\u03d3\3\2\2\2\u03d2\u03d0\3")
        buf.write("\2\2\2\u03d3\u03d4\5 \21\2\u03d4\'\3\2\2\2\u03d5\u03d6")
        buf.write("\7l\2\2\u03d6\u03d7\5> \2\u03d7\u03e0\7\66\2\2\u03d8\u03d9")
        buf.write("\7\3\2\2\u03d9\u03db\7\26\2\2\u03da\u03d8\3\2\2\2\u03da")
        buf.write("\u03db\3\2\2\2\u03db\u03de\3\2\2\2\u03dc\u03df\5\4\3\2")
        buf.write("\u03dd\u03df\7>\2\2\u03de\u03dc\3\2\2\2\u03de\u03dd\3")
        buf.write("\2\2\2\u03df\u03e1\3\2\2\2\u03e0\u03da\3\2\2\2\u03e1\u03e2")
        buf.write("\3\2\2\2\u03e2\u03e0\3\2\2\2\u03e2\u03e3\3\2\2\2\u03e3")
        buf.write(")\3\2\2\2\u03e4\u03e5\7a\2\2\u03e5\u03e6\7\u0082\2\2\u03e6")
        buf.write("\u03e7\7s\2\2\u03e7\u03e8\7\u0082\2\2\u03e8\u03e9\7t\2")
        buf.write("\2\u03e9\u03ea\7o\2\2\u03ea\u03eb\7\u0082\2\2\u03eb\u03ec")
        buf.write("\7\66\2\2\u03ec\u03ed\7\u0082\2\2\u03ed\u03ee\7p\2\2\u03ee")
        buf.write("\u03ef\7\66\2\2\u03ef\u03f0\7\u0082\2\2\u03f0\u03f1\7")
        buf.write("s\2\2\u03f1\u03f2\7\u0082\2\2\u03f2\u03f3\7t\2\2\u03f3")
        buf.write("\u03f4\7)\2\2\u03f4\u03f5\7\3\2\2\u03f5\u03f6\7\26\2\2")
        buf.write("\u03f6\u03f7\7\u0082\2\2\u03f7\u03f8\7s\2\2\u03f8\u03f9")
        buf.write("\7\u0082\2\2\u03f9\u03fa\7t\2\2\u03fa\u03fb\7o\2\2\u03fb")
        buf.write("\u03fc\7\u0082\2\2\u03fc\u03fd\7\66\2\2\u03fd\u0404\5")
        buf.write("F$\2\u03fe\u03ff\7\67\2\2\u03ff\u0400\7\u0082\2\2\u0400")
        buf.write("\u0401\7\66\2\2\u0401\u0403\5F$\2\u0402\u03fe\3\2\2\2")
        buf.write("\u0403\u0406\3\2\2\2\u0404\u0402\3\2\2\2\u0404\u0405\3")
        buf.write("\2\2\2\u0405\u0407\3\2\2\2\u0406\u0404\3\2\2\2\u0407\u0408")
        buf.write("\7p\2\2\u0408\u04cc\3\2\2\2\u0409\u040a\7a\2\2\u040a\u040e")
        buf.write("\t\4\2\2\u040b\u040c\7s\2\2\u040c\u040d\7\u0082\2\2\u040d")
        buf.write("\u040f\7t\2\2\u040e\u040b\3\2\2\2\u040e\u040f\3\2\2\2")
        buf.write("\u040f\u0410\3\2\2\2\u0410\u041e\7o\2\2\u0411\u0419\7")
        buf.write("\u0082\2\2\u0412\u0415\7\66\2\2\u0413\u0416\5J&\2\u0414")
        buf.write("\u0416\5F$\2\u0415\u0413\3\2\2\2\u0415\u0414\3\2\2\2\u0416")
        buf.write("\u041a\3\2\2\2\u0417\u0418\7)\2\2\u0418\u041a\5F$\2\u0419")
        buf.write("\u0412\3\2\2\2\u0419\u0417\3\2\2\2\u041a\u041c\3\2\2\2")
        buf.write("\u041b\u041d\7\67\2\2\u041c\u041b\3\2\2\2\u041c\u041d")
        buf.write("\3\2\2\2\u041d\u041f\3\2\2\2\u041e\u0411\3\2\2\2\u041f")
        buf.write("\u0420\3\2\2\2\u0420\u041e\3\2\2\2\u0420\u0421\3\2\2\2")
        buf.write("\u0421\u0422\3\2\2\2\u0422\u0428\7p\2\2\u0423\u0426\7")
        buf.write("\66\2\2\u0424\u0427\5J&\2\u0425\u0427\5F$\2\u0426\u0424")
        buf.write("\3\2\2\2\u0426\u0425\3\2\2\2\u0427\u0429\3\2\2\2\u0428")
        buf.write("\u0423\3\2\2\2\u0428\u0429\3\2\2\2\u0429\u042a\3\2\2\2")
        buf.write("\u042a\u0450\7)\2\2\u042b\u042c\7\3\2\2\u042c\u042d\7")
        buf.write("\26\2\2\u042d\u042f\5\4\3\2\u042e\u042b\3\2\2\2\u042f")
        buf.write("\u0430\3\2\2\2\u0430\u042e\3\2\2\2\u0430\u0431\3\2\2\2")
        buf.write("\u0431\u0451\3\2\2\2\u0432\u0436\5\f\7\2\u0433\u0435\7")
        buf.write("\3\2\2\u0434\u0433\3\2\2\2\u0435\u0438\3\2\2\2\u0436\u0434")
        buf.write("\3\2\2\2\u0436\u0437\3\2\2\2\u0437\u043e\3\2\2\2\u0438")
        buf.write("\u0436\3\2\2\2\u0439\u043a\7\3\2\2\u043a\u043b\7\26\2")
        buf.write("\2\u043b\u043d\5\4\3\2\u043c\u0439\3\2\2\2\u043d\u0440")
        buf.write("\3\2\2\2\u043e\u043c\3\2\2\2\u043e\u043f\3\2\2\2\u043f")
        buf.write("\u0451\3\2\2\2\u0440\u043e\3\2\2\2\u0441\u0445\5\16\b")
        buf.write("\2\u0442\u0444\7\3\2\2\u0443\u0442\3\2\2\2\u0444\u0447")
        buf.write("\3\2\2\2\u0445\u0443\3\2\2\2\u0445\u0446\3\2\2\2\u0446")
        buf.write("\u044d\3\2\2\2\u0447\u0445\3\2\2\2\u0448\u0449\7\3\2\2")
        buf.write("\u0449\u044a\7\26\2\2\u044a\u044c\5\4\3\2\u044b\u0448")
        buf.write("\3\2\2\2\u044c\u044f\3\2\2\2\u044d\u044b\3\2\2\2\u044d")
        buf.write("\u044e\3\2\2\2\u044e\u0451\3\2\2\2\u044f\u044d\3\2\2\2")
        buf.write("\u0450\u042e\3\2\2\2\u0450\u0432\3\2\2\2\u0450\u0441\3")
        buf.write("\2\2\2\u0451\u0454\3\2\2\2\u0452\u0453\7e\2\2\u0453\u0455")
        buf.write("\5F$\2\u0454\u0452\3\2\2\2\u0454\u0455\3\2\2\2\u0455\u0457")
        buf.write("\3\2\2\2\u0456\u0458\7\3\2\2\u0457\u0456\3\2\2\2\u0457")
        buf.write("\u0458\3\2\2\2\u0458\u04cc\3\2\2\2\u0459\u045a\7a\2\2")
        buf.write("\u045a\u045b\7\13\2\2\u045b\u045c\7o\2\2\u045c\u045d\7")
        buf.write("\u0082\2\2\u045d\u045e\7\66\2\2\u045e\u045f\7a\2\2\u045f")
        buf.write("\u0460\7o\2\2\u0460\u0461\7\u0082\2\2\u0461\u0462\7\66")
        buf.write("\2\2\u0462\u0463\5J&\2\u0463\u0464\7p\2\2\u0464\u0467")
        buf.write("\7p\2\2\u0465\u0466\7\66\2\2\u0466\u0468\5J&\2\u0467\u0465")
        buf.write("\3\2\2\2\u0467\u0468\3\2\2\2\u0468\u0469\3\2\2\2\u0469")
        buf.write("\u046a\7)\2\2\u046a\u046e\7\3\2\2\u046b\u046d\7\26\2\2")
        buf.write("\u046c\u046b\3\2\2\2\u046d\u0470\3\2\2\2\u046e\u046c\3")
        buf.write("\2\2\2\u046e\u046f\3\2\2\2\u046f\u0471\3\2\2\2\u0470\u046e")
        buf.write("\3\2\2\2\u0471\u0472\5\b\5\2\u0472\u0473\5\"\22\2\u0473")
        buf.write("\u04cc\3\2\2\2\u0474\u0475\7a\2\2\u0475\u0479\7\u0082")
        buf.write("\2\2\u0476\u0477\7s\2\2\u0477\u0478\7\u0082\2\2\u0478")
        buf.write("\u047a\7t\2\2\u0479\u0476\3\2\2\2\u0479\u047a\3\2\2\2")
        buf.write("\u047a\u047b\3\2\2\2\u047b\u047c\7o\2\2\u047c\u047d\7")
        buf.write("\u0082\2\2\u047d\u047e\7\66\2\2\u047e\u047f\7\33\2\2\u047f")
        buf.write("\u0480\7\u0082\2\2\u0480\u0481\7s\2\2\u0481\u0482\7\u0082")
        buf.write("\2\2\u0482\u0494\7t\2\2\u0483\u0484\7\67\2\2\u0484\u0485")
        buf.write("\7\u0082\2\2\u0485\u0490\7)\2\2\u0486\u0488\7,\2\2\u0487")
        buf.write("\u0486\3\2\2\2\u0487\u0488\3\2\2\2\u0488\u048a\3\2\2\2")
        buf.write("\u0489\u048b\7\25\2\2\u048a\u0489\3\2\2\2\u048b\u048c")
        buf.write("\3\2\2\2\u048c\u048a\3\2\2\2\u048c\u048d\3\2\2\2\u048d")
        buf.write("\u0491\3\2\2\2\u048e\u0491\7\u0082\2\2\u048f\u0491\5Z")
        buf.write(".\2\u0490\u0487\3\2\2\2\u0490\u048e\3\2\2\2\u0490\u048f")
        buf.write("\3\2\2\2\u0491\u0493\3\2\2\2\u0492\u0483\3\2\2\2\u0493")
        buf.write("\u0496\3\2\2\2\u0494\u0492\3\2\2\2\u0494\u0495\3\2\2\2")
        buf.write("\u0495\u0497\3\2\2\2\u0496\u0494\3\2\2\2\u0497\u049a\7")
        buf.write("p\2\2\u0498\u0499\7\66\2\2\u0499\u049b\5J&\2\u049a\u0498")
        buf.write("\3\2\2\2\u049a\u049b\3\2\2\2\u049b\u049c\3\2\2\2\u049c")
        buf.write("\u04c2\7)\2\2\u049d\u049e\7\3\2\2\u049e\u049f\7\26\2\2")
        buf.write("\u049f\u04a1\5\4\3\2\u04a0\u049d\3\2\2\2\u04a1\u04a2\3")
        buf.write("\2\2\2\u04a2\u04a0\3\2\2\2\u04a2\u04a3\3\2\2\2\u04a3\u04c3")
        buf.write("\3\2\2\2\u04a4\u04a8\5\f\7\2\u04a5\u04a7\7\3\2\2\u04a6")
        buf.write("\u04a5\3\2\2\2\u04a7\u04aa\3\2\2\2\u04a8\u04a6\3\2\2\2")
        buf.write("\u04a8\u04a9\3\2\2\2\u04a9\u04b0\3\2\2\2\u04aa\u04a8\3")
        buf.write("\2\2\2\u04ab\u04ac\7\3\2\2\u04ac\u04ad\7\26\2\2\u04ad")
        buf.write("\u04af\5\4\3\2\u04ae\u04ab\3\2\2\2\u04af\u04b2\3\2\2\2")
        buf.write("\u04b0\u04ae\3\2\2\2\u04b0\u04b1\3\2\2\2\u04b1\u04c3\3")
        buf.write("\2\2\2\u04b2\u04b0\3\2\2\2\u04b3\u04b7\5\16\b\2\u04b4")
        buf.write("\u04b6\7\3\2\2\u04b5\u04b4\3\2\2\2\u04b6\u04b9\3\2\2\2")
        buf.write("\u04b7\u04b5\3\2\2\2\u04b7\u04b8\3\2\2\2\u04b8\u04bf\3")
        buf.write("\2\2\2\u04b9\u04b7\3\2\2\2\u04ba\u04bb\7\3\2\2\u04bb\u04bc")
        buf.write("\7\26\2\2\u04bc\u04be\5\4\3\2\u04bd\u04ba\3\2\2\2\u04be")
        buf.write("\u04c1\3\2\2\2\u04bf\u04bd\3\2\2\2\u04bf\u04c0\3\2\2\2")
        buf.write("\u04c0\u04c3\3\2\2\2\u04c1\u04bf\3\2\2\2\u04c2\u04a0\3")
        buf.write("\2\2\2\u04c2\u04a4\3\2\2\2\u04c2\u04b3\3\2\2\2\u04c3\u04c6")
        buf.write("\3\2\2\2\u04c4\u04c5\7e\2\2\u04c5\u04c7\5F$\2\u04c6\u04c4")
        buf.write("\3\2\2\2\u04c6\u04c7\3\2\2\2\u04c7\u04c9\3\2\2\2\u04c8")
        buf.write("\u04ca\7\3\2\2\u04c9\u04c8\3\2\2\2\u04c9\u04ca\3\2\2\2")
        buf.write("\u04ca\u04cc\3\2\2\2\u04cb\u03e4\3\2\2\2\u04cb\u0409\3")
        buf.write("\2\2\2\u04cb\u0459\3\2\2\2\u04cb\u0474\3\2\2\2\u04cc+")
        buf.write("\3\2\2\2\u04cd\u04ce\7Z\2\2\u04ce\u04d2\7\u0082\2\2\u04cf")
        buf.write("\u04d0\7s\2\2\u04d0\u04d1\7\u0082\2\2\u04d1\u04d3\7t\2")
        buf.write("\2\u04d2\u04cf\3\2\2\2\u04d2\u04d3\3\2\2\2\u04d3\u04d4")
        buf.write("\3\2\2\2\u04d4\u04e5\7o\2\2\u04d5\u04e0\7\u0082\2\2\u04d6")
        buf.write("\u04d9\t\5\2\2\u04d7\u04da\5J&\2\u04d8\u04da\7\f\2\2\u04d9")
        buf.write("\u04d7\3\2\2\2\u04d9\u04d8\3\2\2\2\u04da\u04dc\3\2\2\2")
        buf.write("\u04db\u04dd\78\2\2\u04dc\u04db\3\2\2\2\u04dc\u04dd\3")
        buf.write("\2\2\2\u04dd\u04e1\3\2\2\2\u04de\u04df\7)\2\2\u04df\u04e1")
        buf.write("\5F$\2\u04e0\u04d6\3\2\2\2\u04e0\u04de\3\2\2\2\u04e1\u04e3")
        buf.write("\3\2\2\2\u04e2\u04e4\7\67\2\2\u04e3\u04e2\3\2\2\2\u04e3")
        buf.write("\u04e4\3\2\2\2\u04e4\u04e6\3\2\2\2\u04e5\u04d5\3\2\2\2")
        buf.write("\u04e6\u04e7\3\2\2\2\u04e7\u04e5\3\2\2\2\u04e7\u04e8\3")
        buf.write("\2\2\2\u04e8\u04e9\3\2\2\2\u04e9\u04ef\7p\2\2\u04ea\u04ed")
        buf.write("\t\5\2\2\u04eb\u04ee\5J&\2\u04ec\u04ee\7\f\2\2\u04ed\u04eb")
        buf.write("\3\2\2\2\u04ed\u04ec\3\2\2\2\u04ee\u04f0\3\2\2\2\u04ef")
        buf.write("\u04ea\3\2\2\2\u04ef\u04f0\3\2\2\2\u04f0\u04f1\3\2\2\2")
        buf.write("\u04f1\u04fb\7)\2\2\u04f2\u04f4\7~\2\2\u04f3\u04f2\3\2")
        buf.write("\2\2\u04f3\u04f4\3\2\2\2\u04f4\u04f5\3\2\2\2\u04f5\u04f7")
        buf.write("\7\3\2\2\u04f6\u04f8\7\26\2\2\u04f7\u04f6\3\2\2\2\u04f7")
        buf.write("\u04f8\3\2\2\2\u04f8\u04fa\3\2\2\2\u04f9\u04f3\3\2\2\2")
        buf.write("\u04fa\u04fd\3\2\2\2\u04fb\u04f9\3\2\2\2\u04fb\u04fc\3")
        buf.write("\2\2\2\u04fc\u052b\3\2\2\2\u04fd\u04fb\3\2\2\2\u04fe\u0500")
        buf.write("\7\3\2\2\u04ff\u04fe\3\2\2\2\u04ff\u0500\3\2\2\2\u0500")
        buf.write("\u0502\3\2\2\2\u0501\u0503\7\26\2\2\u0502\u0501\3\2\2")
        buf.write("\2\u0502\u0503\3\2\2\2\u0503\u0504\3\2\2\2\u0504\u0506")
        buf.write("\5\4\3\2\u0505\u04ff\3\2\2\2\u0506\u0507\3\2\2\2\u0507")
        buf.write("\u0505\3\2\2\2\u0507\u0508\3\2\2\2\u0508\u052c\3\2\2\2")
        buf.write("\u0509\u050d\5\f\7\2\u050a\u050c\7\3\2\2\u050b\u050a\3")
        buf.write("\2\2\2\u050c\u050f\3\2\2\2\u050d\u050b\3\2\2\2\u050d\u050e")
        buf.write("\3\2\2\2\u050e\u0519\3\2\2\2\u050f\u050d\3\2\2\2\u0510")
        buf.write("\u0512\7\3\2\2\u0511\u0510\3\2\2\2\u0511\u0512\3\2\2\2")
        buf.write("\u0512\u0514\3\2\2\2\u0513\u0515\7\26\2\2\u0514\u0513")
        buf.write("\3\2\2\2\u0514\u0515\3\2\2\2\u0515\u0516\3\2\2\2\u0516")
        buf.write("\u0518\5\4\3\2\u0517\u0511\3\2\2\2\u0518\u051b\3\2\2\2")
        buf.write("\u0519\u0517\3\2\2\2\u0519\u051a\3\2\2\2\u051a\u052c\3")
        buf.write("\2\2\2\u051b\u0519\3\2\2\2\u051c\u0520\5\16\b\2\u051d")
        buf.write("\u051f\7\3\2\2\u051e\u051d\3\2\2\2\u051f\u0522\3\2\2\2")
        buf.write("\u0520\u051e\3\2\2\2\u0520\u0521\3\2\2\2\u0521\u0528\3")
        buf.write("\2\2\2\u0522\u0520\3\2\2\2\u0523\u0524\7\3\2\2\u0524\u0525")
        buf.write("\7\26\2\2\u0525\u0527\5\4\3\2\u0526\u0523\3\2\2\2\u0527")
        buf.write("\u052a\3\2\2\2\u0528\u0526\3\2\2\2\u0528\u0529\3\2\2\2")
        buf.write("\u0529\u052c\3\2\2\2\u052a\u0528\3\2\2\2\u052b\u0505\3")
        buf.write("\2\2\2\u052b\u0509\3\2\2\2\u052b\u051c\3\2\2\2\u052c\u052f")
        buf.write("\3\2\2\2\u052d\u052e\7e\2\2\u052e\u0530\5F$\2\u052f\u052d")
        buf.write("\3\2\2\2\u052f\u0530\3\2\2\2\u0530\u0532\3\2\2\2\u0531")
        buf.write("\u0533\7\3\2\2\u0532\u0531\3\2\2\2\u0532\u0533\3\2\2\2")
        buf.write("\u0533-\3\2\2\2\u0534\u0535\7g\2\2\u0535\u0539\5\64\33")
        buf.write("\2\u0536\u0537\7q\2\2\u0537\u0538\7\u009c\2\2\u0538\u053a")
        buf.write("\7r\2\2\u0539\u0536\3\2\2\2\u0539\u053a\3\2\2\2\u053a")
        buf.write("\u053b\3\2\2\2\u053b\u0541\7)\2\2\u053c\u053e\7\3\2\2")
        buf.write("\u053d\u053f\7\26\2\2\u053e\u053d\3\2\2\2\u053e\u053f")
        buf.write("\3\2\2\2\u053f\u0540\3\2\2\2\u0540\u0542\5\4\3\2\u0541")
        buf.write("\u053c\3\2\2\2\u0542\u0543\3\2\2\2\u0543\u0541\3\2\2\2")
        buf.write("\u0543\u0544\3\2\2\2\u0544/\3\2\2\2\u0545\u0546\7=\2\2")
        buf.write("\u0546\u0547\7\u0082\2\2\u0547\u0559\7\66\2\2\u0548\u0549")
        buf.write("\7\3\2\2\u0549\u0557\7\26\2\2\u054a\u0558\5\4\3\2\u054b")
        buf.write("\u054c\7\u0082\2\2\u054c\u0550\7\3\2\2\u054d\u054f\7\26")
        buf.write("\2\2\u054e\u054d\3\2\2\2\u054f\u0552\3\2\2\2\u0550\u054e")
        buf.write("\3\2\2\2\u0550\u0551\3\2\2\2\u0551\u0553\3\2\2\2\u0552")
        buf.write("\u0550\3\2\2\2\u0553\u0554\7\7\2\2\u0554\u0555\7o\2\2")
        buf.write("\u0555\u0556\7\u0082\2\2\u0556\u0558\7p\2\2\u0557\u054a")
        buf.write("\3\2\2\2\u0557\u054b\3\2\2\2\u0558\u055a\3\2\2\2\u0559")
        buf.write("\u0548\3\2\2\2\u055a\u055b\3\2\2\2\u055b\u0559\3\2\2\2")
        buf.write("\u055b\u055c\3\2\2\2\u055c\61\3\2\2\2\u055d\u055e\7j\2")
        buf.write("\2\u055e\u0571\7\3\2\2\u055f\u0560\7\26\2\2\u0560\u0561")
        buf.write("\7\u0082\2\2\u0561\u0562\7)\2\2\u0562\u0563\7\r\2\2\u0563")
        buf.write("\u056a\7s\2\2\u0564\u056b\7\u009e\2\2\u0565\u0567\7\25")
        buf.write("\2\2\u0566\u0565\3\2\2\2\u0567\u0568\3\2\2\2\u0568\u0566")
        buf.write("\3\2\2\2\u0568\u0569\3\2\2\2\u0569\u056b\3\2\2\2\u056a")
        buf.write("\u0564\3\2\2\2\u056a\u0566\3\2\2\2\u056b\u056c\3\2\2\2")
        buf.write("\u056c\u056d\7\67\2\2\u056d\u056e\5J&\2\u056e\u056f\7")
        buf.write("t\2\2\u056f\u0570\7\3\2\2\u0570\u0572\3\2\2\2\u0571\u055f")
        buf.write("\3\2\2\2\u0572\u0573\3\2\2\2\u0573\u0571\3\2\2\2\u0573")
        buf.write("\u0574\3\2\2\2\u0574\u0599\3\2\2\2\u0575\u0576\7j\2\2")
        buf.write("\u0576\u058a\7\3\2\2\u0577\u0578\7\26\2\2\u0578\u057c")
        buf.write("\7\u0082\2\2\u0579\u057a\7s\2\2\u057a\u057b\7\u0082\2")
        buf.write("\2\u057b\u057d\7t\2\2\u057c\u0579\3\2\2\2\u057c\u057d")
        buf.write("\3\2\2\2\u057d\u057e\3\2\2\2\u057e\u0580\7)\2\2\u057f")
        buf.write("\u0581\7d\2\2\u0580\u057f\3\2\2\2\u0580\u0581\3\2\2\2")
        buf.write("\u0581\u0587\3\2\2\2\u0582\u0583\7\u0082\2\2\u0583\u0584")
        buf.write("\7s\2\2\u0584\u0585\7\u0082\2\2\u0585\u0588\7t\2\2\u0586")
        buf.write("\u0588\5J&\2\u0587\u0582\3\2\2\2\u0587\u0586\3\2\2\2\u0588")
        buf.write("\u0589\3\2\2\2\u0589\u058b\7\3\2\2\u058a\u0577\3\2\2\2")
        buf.write("\u058b\u058c\3\2\2\2\u058c\u058a\3\2\2\2\u058c\u058d\3")
        buf.write("\2\2\2\u058d\u058f\3\2\2\2\u058e\u0590\7\3\2\2\u058f\u058e")
        buf.write("\3\2\2\2\u058f\u0590\3\2\2\2\u0590\u0594\3\2\2\2\u0591")
        buf.write("\u0593\7\26\2\2\u0592\u0591\3\2\2\2\u0593\u0596\3\2\2")
        buf.write("\2\u0594\u0592\3\2\2\2\u0594\u0595\3\2\2\2\u0595\u0597")
        buf.write("\3\2\2\2\u0596\u0594\3\2\2\2\u0597\u0599\5L\'\2\u0598")
        buf.write("\u055d\3\2\2\2\u0598\u0575\3\2\2\2\u0599\63\3\2\2\2\u059a")
        buf.write("\u059f\7\u0082\2\2\u059b\u059c\7s\2\2\u059c\u059d\5J&")
        buf.write("\2\u059d\u059e\7t\2\2\u059e\u05a0\3\2\2\2\u059f\u059b")
        buf.write("\3\2\2\2\u059f\u05a0\3\2\2\2\u05a0\u05a1\3\2\2\2\u05a1")
        buf.write("\u05aa\7o\2\2\u05a2\u05ab\7\u0082\2\2\u05a3\u05a5\7\25")
        buf.write("\2\2\u05a4\u05a3\3\2\2\2\u05a5\u05a6\3\2\2\2\u05a6\u05a4")
        buf.write("\3\2\2\2\u05a6\u05a7\3\2\2\2\u05a7\u05ab\3\2\2\2\u05a8")
        buf.write("\u05ab\5Z.\2\u05a9\u05ab\5F$\2\u05aa\u05a2\3\2\2\2\u05aa")
        buf.write("\u05a4\3\2\2\2\u05aa\u05a8\3\2\2\2\u05aa\u05a9\3\2\2\2")
        buf.write("\u05ab\u05b9\3\2\2\2\u05ac\u05b5\t\6\2\2\u05ad\u05b6\7")
        buf.write("\u0082\2\2\u05ae\u05b0\7\25\2\2\u05af\u05ae\3\2\2\2\u05b0")
        buf.write("\u05b1\3\2\2\2\u05b1\u05af\3\2\2\2\u05b1\u05b2\3\2\2\2")
        buf.write("\u05b2\u05b6\3\2\2\2\u05b3\u05b6\5Z.\2\u05b4\u05b6\5F")
        buf.write("$\2\u05b5\u05ad\3\2\2\2\u05b5\u05af\3\2\2\2\u05b5\u05b3")
        buf.write("\3\2\2\2\u05b5\u05b4\3\2\2\2\u05b6\u05b8\3\2\2\2\u05b7")
        buf.write("\u05ac\3\2\2\2\u05b8\u05bb\3\2\2\2\u05b9\u05b7\3\2\2\2")
        buf.write("\u05b9\u05ba\3\2\2\2\u05ba\u05c0\3\2\2\2\u05bb\u05b9\3")
        buf.write("\2\2\2\u05bc\u05bd\7\67\2\2\u05bd\u05be\7\u0082\2\2\u05be")
        buf.write("\u05bf\7)\2\2\u05bf\u05c1\7\t\2\2\u05c0\u05bc\3\2\2\2")
        buf.write("\u05c0\u05c1\3\2\2\2\u05c1\u05c2\3\2\2\2\u05c2\u05fc\7")
        buf.write("p\2\2\u05c3\u05cb\7o\2\2\u05c4\u05cc\7\u0082\2\2\u05c5")
        buf.write("\u05c7\7\25\2\2\u05c6\u05c5\3\2\2\2\u05c7\u05c8\3\2\2")
        buf.write("\2\u05c8\u05c6\3\2\2\2\u05c8\u05c9\3\2\2\2\u05c9\u05cc")
        buf.write("\3\2\2\2\u05ca\u05cc\5Z.\2\u05cb\u05c4\3\2\2\2\u05cb\u05c6")
        buf.write("\3\2\2\2\u05cb\u05ca\3\2\2\2\u05cc\u05d9\3\2\2\2\u05cd")
        buf.write("\u05d5\t\7\2\2\u05ce\u05d6\7\u0082\2\2\u05cf\u05d1\7\25")
        buf.write("\2\2\u05d0\u05cf\3\2\2\2\u05d1\u05d2\3\2\2\2\u05d2\u05d0")
        buf.write("\3\2\2\2\u05d2\u05d3\3\2\2\2\u05d3\u05d6\3\2\2\2\u05d4")
        buf.write("\u05d6\5Z.\2\u05d5\u05ce\3\2\2\2\u05d5\u05d0\3\2\2\2\u05d5")
        buf.write("\u05d4\3\2\2\2\u05d6\u05d8\3\2\2\2\u05d7\u05cd\3\2\2\2")
        buf.write("\u05d8\u05db\3\2\2\2\u05d9\u05d7\3\2\2\2\u05d9\u05da\3")
        buf.write("\2\2\2\u05da\u05dc\3\2\2\2\u05db\u05d9\3\2\2\2\u05dc\u05dd")
        buf.write("\7p\2\2\u05dd\u05fc\7\u009c\2\2\u05de\u05df\7\u0082\2")
        buf.write("\2\u05df\u05ed\7\u0082\2\2\u05e0\u05e1\7s\2\2\u05e1\u05e2")
        buf.write("\7\u0082\2\2\u05e2\u05ea\7t\2\2\u05e3\u05e4\7\67\2\2\u05e4")
        buf.write("\u05e5\7\u0082\2\2\u05e5\u05e6\7s\2\2\u05e6\u05e7\7\u0082")
        buf.write("\2\2\u05e7\u05e9\7t\2\2\u05e8\u05e3\3\2\2\2\u05e9\u05ec")
        buf.write("\3\2\2\2\u05ea\u05e8\3\2\2\2\u05ea\u05eb\3\2\2\2\u05eb")
        buf.write("\u05ee\3\2\2\2\u05ec\u05ea\3\2\2\2\u05ed\u05e0\3\2\2\2")
        buf.write("\u05ed\u05ee\3\2\2\2\u05ee\u05fc\3\2\2\2\u05ef\u05f4\7")
        buf.write("\u0082\2\2\u05f0\u05f1\7s\2\2\u05f1\u05f2\5J&\2\u05f2")
        buf.write("\u05f3\7t\2\2\u05f3\u05f5\3\2\2\2\u05f4\u05f0\3\2\2\2")
        buf.write("\u05f4\u05f5\3\2\2\2\u05f5\u05f6\3\2\2\2\u05f6\u05f8\7")
        buf.write("o\2\2\u05f7\u05f9\7\u009c\2\2\u05f8\u05f7\3\2\2\2\u05f8")
        buf.write("\u05f9\3\2\2\2\u05f9\u05fa\3\2\2\2\u05fa\u05fc\7p\2\2")
        buf.write("\u05fb\u059a\3\2\2\2\u05fb\u05c3\3\2\2\2\u05fb\u05de\3")
        buf.write("\2\2\2\u05fb\u05ef\3\2\2\2\u05fc\65\3\2\2\2\u05fd\u05ff")
        buf.write("\7\u009c\2\2\u05fe\u0600\7o\2\2\u05ff\u05fe\3\2\2\2\u05ff")
        buf.write("\u0600\3\2\2\2\u0600\u0601\3\2\2\2\u0601\u0606\5F$\2\u0602")
        buf.write("\u0603\t\b\2\2\u0603\u0605\5F$\2\u0604\u0602\3\2\2\2\u0605")
        buf.write("\u0608\3\2\2\2\u0606\u0604\3\2\2\2\u0606\u0607\3\2\2\2")
        buf.write("\u0607\u060a\3\2\2\2\u0608\u0606\3\2\2\2\u0609\u060b\7")
        buf.write("p\2\2\u060a\u0609\3\2\2\2\u060a\u060b\3\2\2\2\u060b\67")
        buf.write("\3\2\2\2\u060c\u060e\t\t\2\2\u060d\u060c\3\2\2\2\u060e")
        buf.write("\u060f\3\2\2\2\u060f\u060d\3\2\2\2\u060f\u0610\3\2\2\2")
        buf.write("\u0610\u0611\3\2\2\2\u0611\u0612\7\u0082\2\2\u0612\u0616")
        buf.write("\7p\2\2\u0613\u0615\t\n\2\2\u0614\u0613\3\2\2\2\u0615")
        buf.write("\u0618\3\2\2\2\u0616\u0614\3\2\2\2\u0616\u0617\3\2\2\2")
        buf.write("\u06179\3\2\2\2\u0618\u0616\3\2\2\2\u0619\u0620\5\64\33")
        buf.write("\2\u061a\u061b\7\u0082\2\2\u061b\u061c\7o\2\2\u061c\u061d")
        buf.write("\5:\36\2\u061d\u061e\7p\2\2\u061e\u0620\3\2\2\2\u061f")
        buf.write("\u0619\3\2\2\2\u061f\u061a\3\2\2\2\u0620;\3\2\2\2\u0621")
        buf.write("\u0622\7T\2\2\u0622\u0627\7\u0082\2\2\u0623\u0624\7\67")
        buf.write("\2\2\u0624\u0626\7\u0082\2\2\u0625\u0623\3\2\2\2\u0626")
        buf.write("\u0629\3\2\2\2\u0627\u0625\3\2\2\2\u0627\u0628\3\2\2\2")
        buf.write("\u0628\u062c\3\2\2\2\u0629\u0627\3\2\2\2\u062a\u062b\7")
        buf.write("Q\2\2\u062b\u062d\7\u0082\2\2\u062c\u062a\3\2\2\2\u062c")
        buf.write("\u062d\3\2\2\2\u062d\u063a\3\2\2\2\u062e\u062f\7Q\2\2")
        buf.write("\u062f\u0630\7\u0082\2\2\u0630\u0631\7T\2\2\u0631\u0636")
        buf.write("\7\u0082\2\2\u0632\u0633\7\67\2\2\u0633\u0635\7\u0082")
        buf.write("\2\2\u0634\u0632\3\2\2\2\u0635\u0638\3\2\2\2\u0636\u0634")
        buf.write("\3\2\2\2\u0636\u0637\3\2\2\2\u0637\u063a\3\2\2\2\u0638")
        buf.write("\u0636\3\2\2\2\u0639\u0621\3\2\2\2\u0639\u062e\3\2\2\2")
        buf.write("\u063a=\3\2\2\2\u063b\u0640\5@!\2\u063c\u063d\t\13\2\2")
        buf.write("\u063d\u063f\5@!\2\u063e\u063c\3\2\2\2\u063f\u0642\3\2")
        buf.write("\2\2\u0640\u063e\3\2\2\2\u0640\u0641\3\2\2\2\u0641?\3")
        buf.write("\2\2\2\u0642\u0640\3\2\2\2\u0643\u064f\5F$\2\u0644\u0646")
        buf.write("\7\61\2\2\u0645\u0647\7)\2\2\u0646\u0645\3\2\2\2\u0646")
        buf.write("\u0647\3\2\2\2\u0647\u0650\3\2\2\2\u0648\u0650\7\16\2")
        buf.write("\2\u0649\u0650\7\17\2\2\u064a\u064c\7\62\2\2\u064b\u064d")
        buf.write("\7)\2\2\u064c\u064b\3\2\2\2\u064c\u064d\3\2\2\2\u064d")
        buf.write("\u0650\3\2\2\2\u064e\u0650\7(\2\2\u064f\u0644\3\2\2\2")
        buf.write("\u064f\u0648\3\2\2\2\u064f\u0649\3\2\2\2\u064f\u064a\3")
        buf.write("\2\2\2\u064f\u064e\3\2\2\2\u0650\u0651\3\2\2\2\u0651\u0652")
        buf.write("\5F$\2\u0652\u0657\3\2\2\2\u0653\u0657\7\t\2\2\u0654\u0657")
        buf.write("\7\20\2\2\u0655\u0657\7\u0082\2\2\u0656\u0643\3\2\2\2")
        buf.write("\u0656\u0653\3\2\2\2\u0656\u0654\3\2\2\2\u0656\u0655\3")
        buf.write("\2\2\2\u0657A\3\2\2\2\u0658\u065a\7w\2\2\u0659\u0658\3")
        buf.write("\2\2\2\u065a\u065b\3\2\2\2\u065b\u0659\3\2\2\2\u065b\u065c")
        buf.write("\3\2\2\2\u065cC\3\2\2\2\u065d\u065f\7x\2\2\u065e\u065d")
        buf.write("\3\2\2\2\u065f\u0660\3\2\2\2\u0660\u065e\3\2\2\2\u0660")
        buf.write("\u0661\3\2\2\2\u0661E\3\2\2\2\u0662\u06e9\7\t\2\2\u0663")
        buf.write("\u06e9\7\20\2\2\u0664\u06e9\7x\2\2\u0665\u0667\7\25\2")
        buf.write("\2\u0666\u0665\3\2\2\2\u0667\u0668\3\2\2\2\u0668\u0666")
        buf.write("\3\2\2\2\u0668\u0669\3\2\2\2\u0669\u066d\3\2\2\2\u066a")
        buf.write("\u066d\7\u0082\2\2\u066b\u066d\5Z.\2\u066c\u0666\3\2\2")
        buf.write("\2\u066c\u066a\3\2\2\2\u066c\u066b\3\2\2\2\u066d\u067a")
        buf.write("\3\2\2\2\u066e\u0676\t\f\2\2\u066f\u0671\7\25\2\2\u0670")
        buf.write("\u066f\3\2\2\2\u0671\u0672\3\2\2\2\u0672\u0670\3\2\2\2")
        buf.write("\u0672\u0673\3\2\2\2\u0673\u0677\3\2\2\2\u0674\u0677\7")
        buf.write("\u0082\2\2\u0675\u0677\5Z.\2\u0676\u0670\3\2\2\2\u0676")
        buf.write("\u0674\3\2\2\2\u0676\u0675\3\2\2\2\u0677\u0679\3\2\2\2")
        buf.write("\u0678\u066e\3\2\2\2\u0679\u067c\3\2\2\2\u067a\u0678\3")
        buf.write("\2\2\2\u067a\u067b\3\2\2\2\u067b\u06e9\3\2\2\2\u067c\u067a")
        buf.write("\3\2\2\2\u067d\u067e\7\u0082\2\2\u067e\u0688\7s\2\2\u067f")
        buf.write("\u0689\7\u0082\2\2\u0680\u0682\7,\2\2\u0681\u0680\3\2")
        buf.write("\2\2\u0681\u0682\3\2\2\2\u0682\u0684\3\2\2\2\u0683\u0685")
        buf.write("\7\25\2\2\u0684\u0683\3\2\2\2\u0685\u0686\3\2\2\2\u0686")
        buf.write("\u0684\3\2\2\2\u0686\u0687\3\2\2\2\u0687\u0689\3\2\2\2")
        buf.write("\u0688\u067f\3\2\2\2\u0688\u0681\3\2\2\2\u0689\u069c\3")
        buf.write("\2\2\2\u068a\u0698\t\r\2\2\u068b\u068d\7,\2\2\u068c\u068b")
        buf.write("\3\2\2\2\u068c\u068d\3\2\2\2\u068d\u068e\3\2\2\2\u068e")
        buf.write("\u0699\5Z.\2\u068f\u0691\7,\2\2\u0690\u068f\3\2\2\2\u0690")
        buf.write("\u0691\3\2\2\2\u0691\u0693\3\2\2\2\u0692\u0694\7\25\2")
        buf.write("\2\u0693\u0692\3\2\2\2\u0694\u0695\3\2\2\2\u0695\u0693")
        buf.write("\3\2\2\2\u0695\u0696\3\2\2\2\u0696\u0699\3\2\2\2\u0697")
        buf.write("\u0699\7\u0082\2\2\u0698\u068c\3\2\2\2\u0698\u0690\3\2")
        buf.write("\2\2\u0698\u0697\3\2\2\2\u0699\u069b\3\2\2\2\u069a\u068a")
        buf.write("\3\2\2\2\u069b\u069e\3\2\2\2\u069c\u069a\3\2\2\2\u069c")
        buf.write("\u069d\3\2\2\2\u069d\u069f\3\2\2\2\u069e\u069c\3\2\2\2")
        buf.write("\u069f\u06e9\7t\2\2\u06a0\u06ad\5\64\33\2\u06a1\u06a9")
        buf.write("\t\16\2\2\u06a2\u06aa\5\64\33\2\u06a3\u06a5\7\25\2\2\u06a4")
        buf.write("\u06a3\3\2\2\2\u06a5\u06a6\3\2\2\2\u06a6\u06a4\3\2\2\2")
        buf.write("\u06a6\u06a7\3\2\2\2\u06a7\u06aa\3\2\2\2\u06a8\u06aa\5")
        buf.write("Z.\2\u06a9\u06a2\3\2\2\2\u06a9\u06a4\3\2\2\2\u06a9\u06a8")
        buf.write("\3\2\2\2\u06aa\u06ac\3\2\2\2\u06ab\u06a1\3\2\2\2\u06ac")
        buf.write("\u06af\3\2\2\2\u06ad\u06ab\3\2\2\2\u06ad\u06ae\3\2\2\2")
        buf.write("\u06ae\u06e9\3\2\2\2\u06af\u06ad\3\2\2\2\u06b0\u06e9\5")
        buf.write("Z.\2\u06b1\u06d0\7s\2\2\u06b2\u06b4\7,\2\2\u06b3\u06b2")
        buf.write("\3\2\2\2\u06b3\u06b4\3\2\2\2\u06b4\u06b5\3\2\2\2\u06b5")
        buf.write("\u06bc\5Z.\2\u06b6\u06b8\7\25\2\2\u06b7\u06b6\3\2\2\2")
        buf.write("\u06b8\u06b9\3\2\2\2\u06b9\u06b7\3\2\2\2\u06b9\u06ba\3")
        buf.write("\2\2\2\u06ba\u06bc\3\2\2\2\u06bb\u06b3\3\2\2\2\u06bb\u06b7")
        buf.write("\3\2\2\2\u06bc\u06cb\3\2\2\2\u06bd\u06c7\7\67\2\2\u06be")
        buf.write("\u06c0\7,\2\2\u06bf\u06be\3\2\2\2\u06bf\u06c0\3\2\2\2")
        buf.write("\u06c0\u06c1\3\2\2\2\u06c1\u06c8\5Z.\2\u06c2\u06c4\7\25")
        buf.write("\2\2\u06c3\u06c2\3\2\2\2\u06c4\u06c5\3\2\2\2\u06c5\u06c3")
        buf.write("\3\2\2\2\u06c5\u06c6\3\2\2\2\u06c6\u06c8\3\2\2\2\u06c7")
        buf.write("\u06bf\3\2\2\2\u06c7\u06c3\3\2\2\2\u06c8\u06ca\3\2\2\2")
        buf.write("\u06c9\u06bd\3\2\2\2\u06ca\u06cd\3\2\2\2\u06cb\u06c9\3")
        buf.write("\2\2\2\u06cb\u06cc\3\2\2\2\u06cc\u06cf\3\2\2\2\u06cd\u06cb")
        buf.write("\3\2\2\2\u06ce\u06bb\3\2\2\2\u06cf\u06d2\3\2\2\2\u06d0")
        buf.write("\u06ce\3\2\2\2\u06d0\u06d1\3\2\2\2\u06d1\u06d3\3\2\2\2")
        buf.write("\u06d2\u06d0\3\2\2\2\u06d3\u06e9\7t\2\2\u06d4\u06d5\7")
        buf.write("o\2\2\u06d5\u06dd\5F$\2\u06d6\u06d9\t\17\2\2\u06d7\u06da")
        buf.write("\5Z.\2\u06d8\u06da\7\u0082\2\2\u06d9\u06d7\3\2\2\2\u06d9")
        buf.write("\u06d8\3\2\2\2\u06da\u06dc\3\2\2\2\u06db\u06d6\3\2\2\2")
        buf.write("\u06dc\u06df\3\2\2\2\u06dd\u06db\3\2\2\2\u06dd\u06de\3")
        buf.write("\2\2\2\u06de\u06e0\3\2\2\2\u06df\u06dd\3\2\2\2\u06e0\u06e1")
        buf.write("\7p\2\2\u06e1\u06e9\3\2\2\2\u06e2\u06e3\7\u0082\2\2\u06e3")
        buf.write("\u06e4\7s\2\2\u06e4\u06e5\5F$\2\u06e5\u06e6\7t\2\2\u06e6")
        buf.write("\u06e9\3\2\2\2\u06e7\u06e9\7\u009c\2\2\u06e8\u0662\3\2")
        buf.write("\2\2\u06e8\u0663\3\2\2\2\u06e8\u0664\3\2\2\2\u06e8\u066c")
        buf.write("\3\2\2\2\u06e8\u067d\3\2\2\2\u06e8\u06a0\3\2\2\2\u06e8")
        buf.write("\u06b0\3\2\2\2\u06e8\u06b1\3\2\2\2\u06e8\u06d4\3\2\2\2")
        buf.write("\u06e8\u06e2\3\2\2\2\u06e8\u06e7\3\2\2\2\u06e9G\3\2\2")
        buf.write("\2\u06ea\u06eb\7\21\2\2\u06ebI\3\2\2\2\u06ec\u06ed\t\20")
        buf.write("\2\2\u06edK\3\2\2\2\u06ee\u06f2\5R*\2\u06ef\u06f1\5N(")
        buf.write("\2\u06f0\u06ef\3\2\2\2\u06f1\u06f4\3\2\2\2\u06f2\u06f0")
        buf.write("\3\2\2\2\u06f2\u06f3\3\2\2\2\u06f3\u06f8\3\2\2\2\u06f4")
        buf.write("\u06f2\3\2\2\2\u06f5\u06f7\5P)\2\u06f6\u06f5\3\2\2\2\u06f7")
        buf.write("\u06fa\3\2\2\2\u06f8\u06f6\3\2\2\2\u06f8\u06f9\3\2\2\2")
        buf.write("\u06f9\u06fb\3\2\2\2\u06fa\u06f8\3\2\2\2\u06fb\u06fc\5")
        buf.write(" \21\2\u06fcM\3\2\2\2\u06fd\u06ff\7\26\2\2\u06fe\u06fd")
        buf.write("\3\2\2\2\u06fe\u06ff\3\2\2\2\u06ff\u0700\3\2\2\2\u0700")
        buf.write("\u0704\7&\2\2\u0701\u0702\5F$\2\u0702\u0703\7\66\2\2\u0703")
        buf.write("\u0705\3\2\2\2\u0704\u0701\3\2\2\2\u0704\u0705\3\2\2\2")
        buf.write("\u0705\u0706\3\2\2\2\u0706\u070b\t\21\2\2\u0707\u0708")
        buf.write("\7\67\2\2\u0708\u070a\t\21\2\2\u0709\u0707\3\2\2\2\u070a")
        buf.write("\u070d\3\2\2\2\u070b\u0709\3\2\2\2\u070b\u070c\3\2\2\2")
        buf.write("\u070c\u070e\3\2\2\2\u070d\u070b\3\2\2\2\u070e\u071d\7")
        buf.write("\66\2\2\u070f\u0710\7\3\2\2\u0710\u0712\7\26\2\2\u0711")
        buf.write("\u070f\3\2\2\2\u0711\u0712\3\2\2\2\u0712\u0718\3\2\2\2")
        buf.write("\u0713\u0719\5\4\3\2\u0714\u0716\7e\2\2\u0715\u0714\3")
        buf.write("\2\2\2\u0715\u0716\3\2\2\2\u0716\u0717\3\2\2\2\u0717\u0719")
        buf.write("\5F$\2\u0718\u0713\3\2\2\2\u0718\u0715\3\2\2\2\u0719\u071b")
        buf.write("\3\2\2\2\u071a\u071c\7\3\2\2\u071b\u071a\3\2\2\2\u071b")
        buf.write("\u071c\3\2\2\2\u071c\u071e\3\2\2\2\u071d\u0711\3\2\2\2")
        buf.write("\u071e\u071f\3\2\2\2\u071f\u071d\3\2\2\2\u071f\u0720\3")
        buf.write("\2\2\2\u0720O\3\2\2\2\u0721\u0722\7I\2\2\u0722\u0723\5")
        buf.write("F$\2\u0723\u0725\7\66\2\2\u0724\u0726\7~\2\2\u0725\u0724")
        buf.write("\3\2\2\2\u0725\u0726\3\2\2\2\u0726\u072c\3\2\2\2\u0727")
        buf.write("\u0729\7\3\2\2\u0728\u072a\7\26\2\2\u0729\u0728\3\2\2")
        buf.write("\2\u0729\u072a\3\2\2\2\u072a\u072b\3\2\2\2\u072b\u072d")
        buf.write("\5\4\3\2\u072c\u0727\3\2\2\2\u072d\u072e\3\2\2\2\u072e")
        buf.write("\u072c\3\2\2\2\u072e\u072f\3\2\2\2\u072fQ\3\2\2\2\u0730")
        buf.write("\u073e\7?\2\2\u0731\u0733\7\u0082\2\2\u0732\u0734\7~\2")
        buf.write("\2\u0733\u0732\3\2\2\2\u0733\u0734\3\2\2\2\u0734\u0736")
        buf.write("\3\2\2\2\u0735\u0737\7\3\2\2\u0736\u0735\3\2\2\2\u0736")
        buf.write("\u0737\3\2\2\2\u0737\u073f\3\2\2\2\u0738\u0739\7\u0082")
        buf.write("\2\2\u0739\u073a\7\66\2\2\u073a\u073c\5J&\2\u073b\u073d")
        buf.write("\7\3\2\2\u073c\u073b\3\2\2\2\u073c\u073d\3\2\2\2\u073d")
        buf.write("\u073f\3\2\2\2\u073e\u0731\3\2\2\2\u073e\u0738\3\2\2\2")
        buf.write("\u073fS\3\2\2\2\u0740\u0741\7\3\2\2\u0741U\3\2\2\2\u0742")
        buf.write("\u0744\7\26\2\2\u0743\u0742\3\2\2\2\u0743\u0744\3\2\2")
        buf.write("\2\u0744\u0745\3\2\2\2\u0745\u0746\7~\2\2\u0746W\3\2\2")
        buf.write("\2\u0747\u0748\t\22\2\2\u0748Y\3\2\2\2\u0749\u074a\t\23")
        buf.write("\2\2\u074a[\3\2\2\2\u012a`e}\u0085\u008c\u0092\u0097\u009c")
        buf.write("\u00a2\u00a8\u00b3\u00b8\u00c2\u00c7\u00ca\u00ce\u00d3")
        buf.write("\u00d6\u00da\u00de\u00e0\u00e5\u00e9\u00ed\u00f1\u00f6")
        buf.write("\u00fa\u00fe\u0102\u0107\u010c\u010f\u0114\u0118\u011e")
        buf.write("\u0127\u012c\u0130\u0132\u013b\u0146\u014b\u0154\u0159")
        buf.write("\u015d\u0161\u0167\u016b\u016f\u0177\u017f\u0184\u018a")
        buf.write("\u0193\u01a1\u01a5\u01a9\u01b3\u01b5\u01ba\u01be\u01c2")
        buf.write("\u01ca\u01d2\u01dc\u01e4\u01ea\u01ec\u01f1\u01f5\u01f9")
        buf.write("\u0201\u020e\u0213\u0217\u0220\u0224\u022c\u023a\u023e")
        buf.write("\u0242\u024c\u024e\u0253\u0257\u025b\u0263\u0270\u0275")
        buf.write("\u0279\u0282\u0286\u028c\u0290\u0296\u0299\u029f\u02a2")
        buf.write("\u02aa\u02ae\u02b2\u02b4\u02b9\u02bd\u02c7\u02ce\u02d3")
        buf.write("\u02df\u02f8\u0308\u0310\u0314\u031b\u0320\u0329\u0330")
        buf.write("\u0337\u033c\u0345\u034f\u0351\u0358\u035a\u035e\u0363")
        buf.write("\u0369\u0370\u0375\u0381\u0388\u038d\u0399\u03a1\u03aa")
        buf.write("\u03b2\u03b5\u03b7\u03bc\u03c4\u03c6\u03ca\u03d0\u03da")
        buf.write("\u03de\u03e2\u0404\u040e\u0415\u0419\u041c\u0420\u0426")
        buf.write("\u0428\u0430\u0436\u043e\u0445\u044d\u0450\u0454\u0457")
        buf.write("\u0467\u046e\u0479\u0487\u048c\u0490\u0494\u049a\u04a2")
        buf.write("\u04a8\u04b0\u04b7\u04bf\u04c2\u04c6\u04c9\u04cb\u04d2")
        buf.write("\u04d9\u04dc\u04e0\u04e3\u04e7\u04ed\u04ef\u04f3\u04f7")
        buf.write("\u04fb\u04ff\u0502\u0507\u050d\u0511\u0514\u0519\u0520")
        buf.write("\u0528\u052b\u052f\u0532\u0539\u053e\u0543\u0550\u0557")
        buf.write("\u055b\u0568\u056a\u0573\u057c\u0580\u0587\u058c\u058f")
        buf.write("\u0594\u0598\u059f\u05a6\u05aa\u05b1\u05b5\u05b9\u05c0")
        buf.write("\u05c8\u05cb\u05d2\u05d5\u05d9\u05ea\u05ed\u05f4\u05f8")
        buf.write("\u05fb\u05ff\u0606\u060a\u060f\u0616\u061f\u0627\u062c")
        buf.write("\u0636\u0639\u0640\u0646\u064c\u064f\u0656\u065b\u0660")
        buf.write("\u0668\u066c\u0672\u0676\u067a\u0681\u0686\u0688\u068c")
        buf.write("\u0690\u0695\u0698\u069c\u06a6\u06a9\u06ad\u06b3\u06b9")
        buf.write("\u06bb\u06bf\u06c5\u06c7\u06cb\u06d0\u06d9\u06dd\u06e8")
        buf.write("\u06f2\u06f8\u06fe\u0704\u070b\u0711\u0715\u0718\u071b")
        buf.write("\u071f\u0725\u0729\u072e\u0733\u0736\u073c\u073e\u0743")
        return buf.getvalue()


class nimParser ( Parser ):

    grammarFileName = "nim.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'\n'", "'\r'", "'#'", "'assert'", "'inc'", 
                     "'dec'", "'true'", "'`$`'", "'forEach'", "'untyped'", 
                     "'array'", "'<='", "'>='", "'false'", "'L(L(N 1), N 2, L(L(N 3, N 4), N 5), L(L(L[int]())), L(L(L(N 6))), N 7, N 8, L[int]())'", 
                     "'string'", "'int'", "'bool'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "' '", "<INVALID>", "'and'", "'var'", 
                     "'or'", "'not'", "'div'", "'shl'", "'shr'", "'xor'", 
                     "'mod'", "'echo'", "'is'", "'isnot'", "'of'", "'..'", 
                     "'=='", "'='", "'+'", "'*'", "'-'", "'/'", "'~'", "'&'", 
                     "'|'", "'<'", "'>'", "'!'", "'^'", "'.'", "':'", "','", 
                     "';'", "'addr'", "'as'", "'asm'", "'bind'", "'block'", 
                     "'break'", "'case'", "'cast'", "'concept'", "'const'", 
                     "'continue'", "'converter'", "'defer'", "'discard'", 
                     "'distinct'", "'do'", "'elif'", "'else'", "'end'", 
                     "'enum'", "'except'", "'export'", "'finally'", "'for'", 
                     "'from'", "'func'", "'if'", "'import'", "'in'", "'include'", 
                     "'interface'", "'iterator'", "'let'", "'macro'", "'method'", 
                     "'mixin'", "'nil'", "'notin'", "'object'", "'out'", 
                     "'proc'", "'ptr'", "'raise'", "'ref'", "'return'", 
                     "'static'", "'template'", "'try'", "'tuple'", "'type'", 
                     "'using'", "'when'", "'while'", "'yield'", "'('", "')'", 
                     "'{'", "'}'", "'['", "']'", "'%'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "DIGIT", "INDENT", 
                      "NOT_INDENT", "SPACE", "NEWLINE", "AND", "VARIABLE", 
                      "OR", "NOT", "DIV", "SHL", "SHR", "XOR", "MOD", "ECHO", 
                      "IS", "ISNOT", "OF", "OP6", "EQUALS_EQUALS", "EQUALS_OPERATOR", 
                      "ADD_OPERATOR", "MUL_OPERATOR", "MINUS_OPERATOR", 
                      "DIV_OPERATOR", "BITWISE_NOT_OPERATOR", "AND_OPERATOR", 
                      "OR_OPERATOR", "LESS_THAN", "GREATER_THAN", "NOT_OPERATOR", 
                      "XOR_OPERATOR", "DOT", "COLON", "COMMA", "SEMI_COLON", 
                      "ADDR", "AS", "ASM", "BIND", "BLOCK", "BREAK", "CASE", 
                      "CAST", "CONCEPT", "CONST", "CONTINUE", "CONVERTER", 
                      "DEFER", "DISCARD", "DISTINCT", "DO", "ELIF", "ELSE", 
                      "END", "ENUM", "EXCEPT", "EXPORT", "FINALLY", "FOR", 
                      "FROM", "FUNC", "IF", "IMPORT", "IN", "INCLUDE", "INTERFACE", 
                      "ITERATOR", "LET", "MACRO", "METHOD", "MIXIN", "NIL", 
                      "NOTIN", "OBJECT", "OUT", "PROC", "PTR", "RAISE", 
                      "REF", "RETURN", "STATIC", "TEMPLATE", "TRY", "TUPLE", 
                      "TYPE", "USING", "WHEN", "WHILE", "YIELD", "OPEN_PAREN", 
                      "CLOSE_PAREN", "OPEN_BRACE", "CLOSE_BRACE", "OPEN_BRACK", 
                      "CLOSE_BRACK", "MODULUS", "TRIPLESTR_LIT", "CHAR_LIT", 
                      "STR_LIT", "RSTR_LIT", "GENERALIZED_STR_LIT", "GENERALIZED_TRIPLESTR_LIT", 
                      "WS", "AT", "COMMENT", "MULTI_LINE_COMMENT", "MULTI_LINE_COMMENT2", 
                      "SINGLE_MULTI_LINE_COMMENT", "IDENTIFIER", "H", "LETTER", 
                      "INT_LIT", "HEX_LIT", "DEC_LIT", "OCT_LIT", "BIN_LIT", 
                      "INT8_LIT", "INT16_LIT", "INT32_LIT", "INT64_LIT", 
                      "UINT_LIT", "UINT8_LIT", "UINT16_LIT", "UINT32_LIT", 
                      "UINT64_LIT", "FLOAT_LIT", "FLOAT32_LIT", "FLOAT32_SUFFIX", 
                      "FLOAT64_LIT", "FLOAT64_SUFFIX", "EXP", "HEXDIGIT", 
                      "OCTDIGIT", "BINDIGIT", "NEW_IDENTIFIER", "ARRAY_LEN", 
                      "FORLOOP_RANGE" ]

    RULE_start = 0
    RULE_stmt = 1
    RULE_varDec = 2
    RULE_constDec = 3
    RULE_letDec = 4
    RULE_assignStmt = 5
    RULE_printStmt = 6
    RULE_assertStmt = 7
    RULE_complexIfStmt = 8
    RULE_varComplexIfStmt = 9
    RULE_simpleIfStmt = 10
    RULE_simpleElifStmt = 11
    RULE_varSimpleIfStmt = 12
    RULE_varSimpleElifStmt = 13
    RULE_varSimpleElseStmt = 14
    RULE_simpleElseStmt = 15
    RULE_forLoop = 16
    RULE_whileLoop = 17
    RULE_whenStmt = 18
    RULE_simpleWhenStmt = 19
    RULE_procBlock = 20
    RULE_macroBlock = 21
    RULE_templateStmt = 22
    RULE_block = 23
    RULE_typeBlock = 24
    RULE_methodInvoke = 25
    RULE_instanceMethodInvoke = 26
    RULE_forEachStmt = 27
    RULE_nestedMethodInvoke = 28
    RULE_importStmt = 29
    RULE_condition = 30
    RULE_simpleCondition = 31
    RULE_character_literals = 32
    RULE_string_literals = 33
    RULE_rightHandSideStmt = 34
    RULE_complexRightHandSide = 35
    RULE_dataType = 36
    RULE_caseStmt = 37
    RULE_simpleOfStmt = 38
    RULE_simpleElifOfStmt = 39
    RULE_simpleCaseStmt = 40
    RULE_emptyStmt = 41
    RULE_commentStmt = 42
    RULE_operator = 43
    RULE_literal = 44

    ruleNames =  [ "start", "stmt", "varDec", "constDec", "letDec", "assignStmt", 
                   "printStmt", "assertStmt", "complexIfStmt", "varComplexIfStmt", 
                   "simpleIfStmt", "simpleElifStmt", "varSimpleIfStmt", 
                   "varSimpleElifStmt", "varSimpleElseStmt", "simpleElseStmt", 
                   "forLoop", "whileLoop", "whenStmt", "simpleWhenStmt", 
                   "procBlock", "macroBlock", "templateStmt", "block", "typeBlock", 
                   "methodInvoke", "instanceMethodInvoke", "forEachStmt", 
                   "nestedMethodInvoke", "importStmt", "condition", "simpleCondition", 
                   "character_literals", "string_literals", "rightHandSideStmt", 
                   "complexRightHandSide", "dataType", "caseStmt", "simpleOfStmt", 
                   "simpleElifOfStmt", "simpleCaseStmt", "emptyStmt", "commentStmt", 
                   "operator", "literal" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    DIGIT=19
    INDENT=20
    NOT_INDENT=21
    SPACE=22
    NEWLINE=23
    AND=24
    VARIABLE=25
    OR=26
    NOT=27
    DIV=28
    SHL=29
    SHR=30
    XOR=31
    MOD=32
    ECHO=33
    IS=34
    ISNOT=35
    OF=36
    OP6=37
    EQUALS_EQUALS=38
    EQUALS_OPERATOR=39
    ADD_OPERATOR=40
    MUL_OPERATOR=41
    MINUS_OPERATOR=42
    DIV_OPERATOR=43
    BITWISE_NOT_OPERATOR=44
    AND_OPERATOR=45
    OR_OPERATOR=46
    LESS_THAN=47
    GREATER_THAN=48
    NOT_OPERATOR=49
    XOR_OPERATOR=50
    DOT=51
    COLON=52
    COMMA=53
    SEMI_COLON=54
    ADDR=55
    AS=56
    ASM=57
    BIND=58
    BLOCK=59
    BREAK=60
    CASE=61
    CAST=62
    CONCEPT=63
    CONST=64
    CONTINUE=65
    CONVERTER=66
    DEFER=67
    DISCARD=68
    DISTINCT=69
    DO=70
    ELIF=71
    ELSE=72
    END=73
    ENUM=74
    EXCEPT=75
    EXPORT=76
    FINALLY=77
    FOR=78
    FROM=79
    FUNC=80
    IF=81
    IMPORT=82
    IN=83
    INCLUDE=84
    INTERFACE=85
    ITERATOR=86
    LET=87
    MACRO=88
    METHOD=89
    MIXIN=90
    NIL=91
    NOTIN=92
    OBJECT=93
    OUT=94
    PROC=95
    PTR=96
    RAISE=97
    REF=98
    RETURN=99
    STATIC=100
    TEMPLATE=101
    TRY=102
    TUPLE=103
    TYPE=104
    USING=105
    WHEN=106
    WHILE=107
    YIELD=108
    OPEN_PAREN=109
    CLOSE_PAREN=110
    OPEN_BRACE=111
    CLOSE_BRACE=112
    OPEN_BRACK=113
    CLOSE_BRACK=114
    MODULUS=115
    TRIPLESTR_LIT=116
    CHAR_LIT=117
    STR_LIT=118
    RSTR_LIT=119
    GENERALIZED_STR_LIT=120
    GENERALIZED_TRIPLESTR_LIT=121
    WS=122
    AT=123
    COMMENT=124
    MULTI_LINE_COMMENT=125
    MULTI_LINE_COMMENT2=126
    SINGLE_MULTI_LINE_COMMENT=127
    IDENTIFIER=128
    H=129
    LETTER=130
    INT_LIT=131
    HEX_LIT=132
    DEC_LIT=133
    OCT_LIT=134
    BIN_LIT=135
    INT8_LIT=136
    INT16_LIT=137
    INT32_LIT=138
    INT64_LIT=139
    UINT_LIT=140
    UINT8_LIT=141
    UINT16_LIT=142
    UINT32_LIT=143
    UINT64_LIT=144
    FLOAT_LIT=145
    FLOAT32_LIT=146
    FLOAT32_SUFFIX=147
    FLOAT64_LIT=148
    FLOAT64_SUFFIX=149
    EXP=150
    HEXDIGIT=151
    OCTDIGIT=152
    BINDIGIT=153
    NEW_IDENTIFIER=154
    ARRAY_LEN=155
    FORLOOP_RANGE=156

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class StartContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def getRuleIndex(self):
            return nimParser.RULE_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart" ):
                listener.enterStart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart" ):
                listener.exitStart(self)




    def start(self):

        localctx = nimParser.StartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_start)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 99
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.T__0) | (1 << nimParser.T__3) | (1 << nimParser.T__8) | (1 << nimParser.VARIABLE) | (1 << nimParser.ECHO) | (1 << nimParser.BLOCK) | (1 << nimParser.CASE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (nimParser.CONST - 64)) | (1 << (nimParser.FOR - 64)) | (1 << (nimParser.FROM - 64)) | (1 << (nimParser.IF - 64)) | (1 << (nimParser.IMPORT - 64)) | (1 << (nimParser.LET - 64)) | (1 << (nimParser.MACRO - 64)) | (1 << (nimParser.PROC - 64)) | (1 << (nimParser.TEMPLATE - 64)) | (1 << (nimParser.TYPE - 64)) | (1 << (nimParser.WHEN - 64)) | (1 << (nimParser.WHILE - 64)) | (1 << (nimParser.OPEN_PAREN - 64)))) != 0) or _la==nimParser.IDENTIFIER or _la==nimParser.NEW_IDENTIFIER:
                self.state = 90
                self.stmt()
                self.state = 94
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 91
                        _la = self._input.LA(1)
                        if not(_la==nimParser.T__0 or _la==nimParser.T__1):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 96
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

                self.state = 101
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varDec(self):
            return self.getTypedRuleContext(nimParser.VarDecContext,0)


        def assignStmt(self):
            return self.getTypedRuleContext(nimParser.AssignStmtContext,0)


        def printStmt(self):
            return self.getTypedRuleContext(nimParser.PrintStmtContext,0)


        def constDec(self):
            return self.getTypedRuleContext(nimParser.ConstDecContext,0)


        def letDec(self):
            return self.getTypedRuleContext(nimParser.LetDecContext,0)


        def complexIfStmt(self):
            return self.getTypedRuleContext(nimParser.ComplexIfStmtContext,0)


        def forLoop(self):
            return self.getTypedRuleContext(nimParser.ForLoopContext,0)


        def whileLoop(self):
            return self.getTypedRuleContext(nimParser.WhileLoopContext,0)


        def whenStmt(self):
            return self.getTypedRuleContext(nimParser.WhenStmtContext,0)


        def procBlock(self):
            return self.getTypedRuleContext(nimParser.ProcBlockContext,0)


        def block(self):
            return self.getTypedRuleContext(nimParser.BlockContext,0)


        def typeBlock(self):
            return self.getTypedRuleContext(nimParser.TypeBlockContext,0)


        def methodInvoke(self):
            return self.getTypedRuleContext(nimParser.MethodInvokeContext,0)


        def instanceMethodInvoke(self):
            return self.getTypedRuleContext(nimParser.InstanceMethodInvokeContext,0)


        def emptyStmt(self):
            return self.getTypedRuleContext(nimParser.EmptyStmtContext,0)


        def caseStmt(self):
            return self.getTypedRuleContext(nimParser.CaseStmtContext,0)


        def forEachStmt(self):
            return self.getTypedRuleContext(nimParser.ForEachStmtContext,0)


        def importStmt(self):
            return self.getTypedRuleContext(nimParser.ImportStmtContext,0)


        def assertStmt(self):
            return self.getTypedRuleContext(nimParser.AssertStmtContext,0)


        def macroBlock(self):
            return self.getTypedRuleContext(nimParser.MacroBlockContext,0)


        def templateStmt(self):
            return self.getTypedRuleContext(nimParser.TemplateStmtContext,0)


        def getRuleIndex(self):
            return nimParser.RULE_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt" ):
                listener.enterStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt" ):
                listener.exitStmt(self)




    def stmt(self):

        localctx = nimParser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_stmt)
        try:
            self.state = 123
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 102
                self.varDec()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 103
                self.assignStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 104
                self.printStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 105
                self.constDec()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 106
                self.letDec()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 107
                self.complexIfStmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 108
                self.forLoop()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 109
                self.whileLoop()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 110
                self.whenStmt()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 111
                self.procBlock()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 112
                self.block()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 113
                self.typeBlock()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 114
                self.methodInvoke()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 115
                self.instanceMethodInvoke()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 116
                self.emptyStmt()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 117
                self.caseStmt()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 118
                self.forEachStmt()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 119
                self.importStmt()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 120
                self.assertStmt()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 121
                self.macroBlock()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 122
                self.templateStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarDecContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARIABLE(self):
            return self.getToken(nimParser.VARIABLE, 0)

        def assignStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.AssignStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.AssignStmtContext,i)


        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.IDENTIFIER)
            else:
                return self.getToken(nimParser.IDENTIFIER, i)

        def EQUALS_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.EQUALS_OPERATOR)
            else:
                return self.getToken(nimParser.EQUALS_OPERATOR, i)

        def complexRightHandSide(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.ComplexRightHandSideContext)
            else:
                return self.getTypedRuleContext(nimParser.ComplexRightHandSideContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COLON)
            else:
                return self.getToken(nimParser.COLON, i)

        def rightHandSideStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.RightHandSideStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,i)


        def AT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.AT)
            else:
                return self.getToken(nimParser.AT, i)

        def OPEN_BRACK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.OPEN_BRACK)
            else:
                return self.getToken(nimParser.OPEN_BRACK, i)

        def CLOSE_BRACK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.CLOSE_BRACK)
            else:
                return self.getToken(nimParser.CLOSE_BRACK, i)

        def varComplexIfStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.VarComplexIfStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.VarComplexIfStmtContext,i)


        def dataType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.DataTypeContext)
            else:
                return self.getTypedRuleContext(nimParser.DataTypeContext,i)


        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMA)
            else:
                return self.getToken(nimParser.COMMA, i)

        def MINUS_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.MINUS_OPERATOR)
            else:
                return self.getToken(nimParser.MINUS_OPERATOR, i)

        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.DIGIT)
            else:
                return self.getToken(nimParser.DIGIT, i)

        def getRuleIndex(self):
            return nimParser.RULE_varDec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarDec" ):
                listener.enterVarDec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarDec" ):
                listener.exitVarDec(self)




    def varDec(self):

        localctx = nimParser.VarDecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_varDec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 125
            self.match(nimParser.VARIABLE)
            self.state = 220 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 220
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
                    if la_ == 1:
                        self.state = 126
                        self.match(nimParser.IDENTIFIER)
                        self.state = 127
                        self.match(nimParser.EQUALS_OPERATOR)
                        self.state = 128
                        self.complexRightHandSide()
                        pass

                    elif la_ == 2:
                        self.state = 131
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==nimParser.T__0:
                            self.state = 129
                            self.match(nimParser.T__0)
                            self.state = 130
                            self.match(nimParser.INDENT)


                        self.state = 133
                        self.match(nimParser.IDENTIFIER)
                        self.state = 138
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==nimParser.COMMA:
                            self.state = 134
                            self.match(nimParser.COMMA)
                            self.state = 135
                            self.match(nimParser.IDENTIFIER)
                            self.state = 140
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 141
                        self.match(nimParser.COLON)
                        self.state = 144
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [nimParser.T__15, nimParser.T__16, nimParser.T__17, nimParser.OBJECT]:
                            self.state = 142
                            self.dataType()
                            pass
                        elif token in [nimParser.IDENTIFIER]:
                            self.state = 143
                            self.match(nimParser.IDENTIFIER)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 149
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,6,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 146
                                self.match(nimParser.T__0) 
                            self.state = 151
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,6,self._ctx)

                        pass

                    elif la_ == 3:
                        self.state = 154
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==nimParser.T__0:
                            self.state = 152
                            self.match(nimParser.T__0)
                            self.state = 153
                            self.match(nimParser.INDENT)


                        self.state = 156
                        self.match(nimParser.T__2)
                        self.state = 160
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 157
                                _la = self._input.LA(1)
                                if _la <= 0 or (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.T__0) | (1 << nimParser.T__1) | (1 << nimParser.T__2))) != 0):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume() 
                            self.state = 162
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

                        self.state = 166
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 163
                                self.match(nimParser.T__0) 
                            self.state = 168
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

                        pass

                    elif la_ == 4:
                        self.state = 169
                        self.assignStmt()
                        pass

                    elif la_ == 5:
                        self.state = 170
                        self.match(nimParser.IDENTIFIER)
                        self.state = 171
                        self.match(nimParser.COLON)
                        self.state = 172
                        self.rightHandSideStmt()
                        self.state = 173
                        self.match(nimParser.EQUALS_OPERATOR)
                        self.state = 174
                        self.match(nimParser.AT)
                        self.state = 175
                        self.match(nimParser.OPEN_BRACK)
                        self.state = 177
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.T__6) | (1 << nimParser.T__13) | (1 << nimParser.DIGIT))) != 0) or ((((_la - 91)) & ~0x3f) == 0 and ((1 << (_la - 91)) & ((1 << (nimParser.NIL - 91)) | (1 << (nimParser.OPEN_PAREN - 91)) | (1 << (nimParser.OPEN_BRACK - 91)) | (1 << (nimParser.TRIPLESTR_LIT - 91)) | (1 << (nimParser.CHAR_LIT - 91)) | (1 << (nimParser.STR_LIT - 91)) | (1 << (nimParser.RSTR_LIT - 91)) | (1 << (nimParser.IDENTIFIER - 91)) | (1 << (nimParser.INT_LIT - 91)) | (1 << (nimParser.INT8_LIT - 91)) | (1 << (nimParser.INT16_LIT - 91)) | (1 << (nimParser.INT32_LIT - 91)) | (1 << (nimParser.INT64_LIT - 91)) | (1 << (nimParser.UINT_LIT - 91)) | (1 << (nimParser.UINT8_LIT - 91)) | (1 << (nimParser.UINT16_LIT - 91)) | (1 << (nimParser.UINT32_LIT - 91)) | (1 << (nimParser.UINT64_LIT - 91)) | (1 << (nimParser.FLOAT_LIT - 91)) | (1 << (nimParser.FLOAT32_LIT - 91)) | (1 << (nimParser.FLOAT64_LIT - 91)) | (1 << (nimParser.NEW_IDENTIFIER - 91)))) != 0):
                            self.state = 176
                            self.rightHandSideStmt()


                        self.state = 179
                        self.match(nimParser.CLOSE_BRACK)
                        self.state = 182
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
                        if la_ == 1:
                            self.state = 180
                            self.match(nimParser.T__0)
                            self.state = 181
                            self.match(nimParser.INDENT)


                        pass

                    elif la_ == 6:
                        self.state = 184
                        self.match(nimParser.IDENTIFIER)
                        self.state = 185
                        self.match(nimParser.EQUALS_OPERATOR)
                        self.state = 186
                        self.varComplexIfStmt()
                        pass

                    elif la_ == 7:
                        self.state = 187
                        self.match(nimParser.IDENTIFIER)
                        self.state = 188
                        self.match(nimParser.EQUALS_OPERATOR)
                        self.state = 189
                        self.match(nimParser.AT)
                        self.state = 190
                        self.match(nimParser.OPEN_BRACK)
                        self.state = 200
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [nimParser.DIGIT, nimParser.MINUS_OPERATOR]:
                            self.state = 192
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==nimParser.MINUS_OPERATOR:
                                self.state = 191
                                self.match(nimParser.MINUS_OPERATOR)


                            self.state = 195 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 194
                                self.match(nimParser.DIGIT)
                                self.state = 197 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==nimParser.DIGIT):
                                    break

                            pass
                        elif token in [nimParser.IDENTIFIER]:
                            self.state = 199
                            self.match(nimParser.IDENTIFIER)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 216
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==nimParser.COMMA:
                            self.state = 202
                            self.match(nimParser.COMMA)
                            self.state = 212
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [nimParser.DIGIT, nimParser.MINUS_OPERATOR]:
                                self.state = 204
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==nimParser.MINUS_OPERATOR:
                                    self.state = 203
                                    self.match(nimParser.MINUS_OPERATOR)


                                self.state = 207 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 206
                                    self.match(nimParser.DIGIT)
                                    self.state = 209 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==nimParser.DIGIT):
                                        break

                                pass
                            elif token in [nimParser.IDENTIFIER]:
                                self.state = 211
                                self.match(nimParser.IDENTIFIER)
                                pass
                            else:
                                raise NoViableAltException(self)

                            self.state = 218
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 219
                        self.match(nimParser.CLOSE_BRACK)
                        pass



                else:
                    raise NoViableAltException(self)
                self.state = 222 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,20,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstDecContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(nimParser.CONST, 0)

        def assignStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.AssignStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.AssignStmtContext,i)


        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def COMMENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMENT)
            else:
                return self.getToken(nimParser.COMMENT, i)

        def getRuleIndex(self):
            return nimParser.RULE_constDec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstDec" ):
                listener.enterConstDec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstDec" ):
                listener.exitConstDec(self)




    def constDec(self):

        localctx = nimParser.ConstDecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_constDec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 224
            self.match(nimParser.CONST)
            self.state = 237 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 227
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==nimParser.T__0:
                        self.state = 225
                        self.match(nimParser.T__0)
                        self.state = 226
                        self.match(nimParser.INDENT)


                    self.state = 229
                    self.assignStmt()
                    self.state = 231
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
                    if la_ == 1:
                        self.state = 230
                        self.match(nimParser.T__0)


                    self.state = 235
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
                    if la_ == 1:
                        self.state = 233
                        self.match(nimParser.INDENT)
                        self.state = 234
                        self.match(nimParser.COMMENT)



                else:
                    raise NoViableAltException(self)
                self.state = 239 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,24,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetDecContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LET(self):
            return self.getToken(nimParser.LET, 0)

        def assignStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.AssignStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.AssignStmtContext,i)


        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def COMMENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMENT)
            else:
                return self.getToken(nimParser.COMMENT, i)

        def getRuleIndex(self):
            return nimParser.RULE_letDec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetDec" ):
                listener.enterLetDec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetDec" ):
                listener.exitLetDec(self)




    def letDec(self):

        localctx = nimParser.LetDecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_letDec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 241
            self.match(nimParser.LET)
            self.state = 254 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 244
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==nimParser.T__0:
                        self.state = 242
                        self.match(nimParser.T__0)
                        self.state = 243
                        self.match(nimParser.INDENT)


                    self.state = 246
                    self.assignStmt()
                    self.state = 248
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
                    if la_ == 1:
                        self.state = 247
                        self.match(nimParser.T__0)


                    self.state = 252
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
                    if la_ == 1:
                        self.state = 250
                        self.match(nimParser.INDENT)
                        self.state = 251
                        self.match(nimParser.COMMENT)



                else:
                    raise NoViableAltException(self)
                self.state = 256 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,28,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(nimParser.IDENTIFIER, 0)

        def EQUALS_OPERATOR(self):
            return self.getToken(nimParser.EQUALS_OPERATOR, 0)

        def instanceMethodInvoke(self):
            return self.getTypedRuleContext(nimParser.InstanceMethodInvokeContext,0)


        def rightHandSideStmt(self):
            return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,0)


        def nestedMethodInvoke(self):
            return self.getTypedRuleContext(nimParser.NestedMethodInvokeContext,0)


        def AT(self):
            return self.getToken(nimParser.AT, 0)

        def SEMI_COLON(self):
            return self.getToken(nimParser.SEMI_COLON, 0)

        def INDENT(self):
            return self.getToken(nimParser.INDENT, 0)

        def ADD_OPERATOR(self):
            return self.getToken(nimParser.ADD_OPERATOR, 0)

        def literal(self):
            return self.getTypedRuleContext(nimParser.LiteralContext,0)


        def methodInvoke(self):
            return self.getTypedRuleContext(nimParser.MethodInvokeContext,0)


        def complexRightHandSide(self):
            return self.getTypedRuleContext(nimParser.ComplexRightHandSideContext,0)


        def getRuleIndex(self):
            return nimParser.RULE_assignStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignStmt" ):
                listener.enterAssignStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignStmt" ):
                listener.exitAssignStmt(self)




    def assignStmt(self):

        localctx = nimParser.AssignStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_assignStmt)
        self._la = 0 # Token type
        try:
            self.state = 304
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 258
                self.match(nimParser.IDENTIFIER)
                self.state = 259
                self.match(nimParser.EQUALS_OPERATOR)
                self.state = 261
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.AT:
                    self.state = 260
                    self.match(nimParser.AT)


                self.state = 266
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
                if la_ == 1:
                    self.state = 263
                    self.instanceMethodInvoke()
                    pass

                elif la_ == 2:
                    self.state = 264
                    self.rightHandSideStmt()
                    pass

                elif la_ == 3:
                    self.state = 265
                    self.nestedMethodInvoke()
                    pass


                self.state = 269
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.SEMI_COLON:
                    self.state = 268
                    self.match(nimParser.SEMI_COLON)


                self.state = 274
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,32,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 271
                        self.match(nimParser.T__0) 
                    self.state = 276
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,32,self._ctx)

                self.state = 278
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
                if la_ == 1:
                    self.state = 277
                    self.match(nimParser.INDENT)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 280
                self.match(nimParser.IDENTIFIER)
                self.state = 281
                self.match(nimParser.EQUALS_OPERATOR)
                self.state = 284
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
                if la_ == 1:
                    self.state = 282
                    self.nestedMethodInvoke()
                    pass

                elif la_ == 2:
                    self.state = 283
                    self.methodInvoke()
                    pass


                self.state = 286
                self.match(nimParser.ADD_OPERATOR)
                self.state = 287
                self.literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 289
                self.match(nimParser.IDENTIFIER)
                self.state = 290
                self.match(nimParser.EQUALS_OPERATOR)
                self.state = 291
                self.complexRightHandSide()
                self.state = 293
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.SEMI_COLON:
                    self.state = 292
                    self.match(nimParser.SEMI_COLON)


                self.state = 298
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 295
                        self.match(nimParser.T__0) 
                    self.state = 300
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

                self.state = 302
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
                if la_ == 1:
                    self.state = 301
                    self.match(nimParser.INDENT)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrintStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ECHO(self):
            return self.getToken(nimParser.ECHO, 0)

        def OPEN_PAREN(self):
            return self.getToken(nimParser.OPEN_PAREN, 0)

        def rightHandSideStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.RightHandSideStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,i)


        def CLOSE_PAREN(self):
            return self.getToken(nimParser.CLOSE_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMA)
            else:
                return self.getToken(nimParser.COMMA, i)

        def methodInvoke(self):
            return self.getTypedRuleContext(nimParser.MethodInvokeContext,0)


        def getRuleIndex(self):
            return nimParser.RULE_printStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrintStmt" ):
                listener.enterPrintStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrintStmt" ):
                listener.exitPrintStmt(self)




    def printStmt(self):

        localctx = nimParser.PrintStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_printStmt)
        self._la = 0 # Token type
        try:
            self.state = 329
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 306
                self.match(nimParser.ECHO)
                self.state = 307
                self.match(nimParser.OPEN_PAREN)
                self.state = 308
                self.rightHandSideStmt()
                self.state = 313
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nimParser.COMMA:
                    self.state = 309
                    self.match(nimParser.COMMA)
                    self.state = 310
                    self.rightHandSideStmt()
                    self.state = 315
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 316
                self.match(nimParser.CLOSE_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 318
                self.match(nimParser.ECHO)
                self.state = 319
                self.rightHandSideStmt()
                self.state = 324
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nimParser.COMMA:
                    self.state = 320
                    self.match(nimParser.COMMA)
                    self.state = 321
                    self.rightHandSideStmt()
                    self.state = 326
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 327
                self.match(nimParser.ECHO)
                self.state = 328
                self.methodInvoke()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssertStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.LiteralContext)
            else:
                return self.getTypedRuleContext(nimParser.LiteralContext,i)


        def EQUALS_EQUALS(self):
            return self.getToken(nimParser.EQUALS_EQUALS, 0)

        def getRuleIndex(self):
            return nimParser.RULE_assertStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssertStmt" ):
                listener.enterAssertStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssertStmt" ):
                listener.exitAssertStmt(self)




    def assertStmt(self):

        localctx = nimParser.AssertStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_assertStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 331
            self.match(nimParser.T__3)
            self.state = 332
            self.literal()
            self.state = 333
            self.match(nimParser.EQUALS_EQUALS)
            self.state = 334
            self.literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexIfStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIfStmt(self):
            return self.getTypedRuleContext(nimParser.SimpleIfStmtContext,0)


        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def simpleElifStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.SimpleElifStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.SimpleElifStmtContext,i)


        def simpleElseStmt(self):
            return self.getTypedRuleContext(nimParser.SimpleElseStmtContext,0)


        def getRuleIndex(self):
            return nimParser.RULE_complexIfStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplexIfStmt" ):
                listener.enterComplexIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplexIfStmt" ):
                listener.exitComplexIfStmt(self)




    def complexIfStmt(self):

        localctx = nimParser.ComplexIfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_complexIfStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 336
            self.simpleIfStmt()
            self.state = 338
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.state = 337
                self.match(nimParser.INDENT)


            self.state = 343
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,43,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 340
                    self.simpleElifStmt() 
                self.state = 345
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,43,self._ctx)

            self.state = 347
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.state = 346
                self.simpleElseStmt()


            self.state = 351
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.state = 349
                self.match(nimParser.T__0)
                self.state = 350
                self.match(nimParser.INDENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarComplexIfStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varSimpleIfStmt(self):
            return self.getTypedRuleContext(nimParser.VarSimpleIfStmtContext,0)


        def varSimpleElifStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.VarSimpleElifStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.VarSimpleElifStmtContext,i)


        def varSimpleElseStmt(self):
            return self.getTypedRuleContext(nimParser.VarSimpleElseStmtContext,0)


        def getRuleIndex(self):
            return nimParser.RULE_varComplexIfStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarComplexIfStmt" ):
                listener.enterVarComplexIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarComplexIfStmt" ):
                listener.exitVarComplexIfStmt(self)




    def varComplexIfStmt(self):

        localctx = nimParser.VarComplexIfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_varComplexIfStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 353
            self.varSimpleIfStmt()
            self.state = 357
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,46,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 354
                    self.varSimpleElifStmt() 
                self.state = 359
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,46,self._ctx)

            self.state = 361
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 360
                self.varSimpleElseStmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleIfStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(nimParser.IF, 0)

        def condition(self):
            return self.getTypedRuleContext(nimParser.ConditionContext,0)


        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def assignStmt(self):
            return self.getTypedRuleContext(nimParser.AssignStmtContext,0)


        def NOT(self):
            return self.getToken(nimParser.NOT, 0)

        def NEW_IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.NEW_IDENTIFIER)
            else:
                return self.getToken(nimParser.NEW_IDENTIFIER, i)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.IDENTIFIER)
            else:
                return self.getToken(nimParser.IDENTIFIER, i)

        def EQUALS_OPERATOR(self):
            return self.getToken(nimParser.EQUALS_OPERATOR, 0)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def OPEN_BRACK(self):
            return self.getToken(nimParser.OPEN_BRACK, 0)

        def CLOSE_BRACK(self):
            return self.getToken(nimParser.CLOSE_BRACK, 0)

        def AT(self):
            return self.getToken(nimParser.AT, 0)

        def literal(self):
            return self.getTypedRuleContext(nimParser.LiteralContext,0)


        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def BREAK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.BREAK)
            else:
                return self.getToken(nimParser.BREAK, i)

        def CONTINUE(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.CONTINUE)
            else:
                return self.getToken(nimParser.CONTINUE, i)

        def OPEN_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.OPEN_PAREN)
            else:
                return self.getToken(nimParser.OPEN_PAREN, i)

        def CLOSE_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.CLOSE_PAREN)
            else:
                return self.getToken(nimParser.CLOSE_PAREN, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMA)
            else:
                return self.getToken(nimParser.COMMA, i)

        def RETURN(self):
            return self.getToken(nimParser.RETURN, 0)

        def rightHandSideStmt(self):
            return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,0)


        def getRuleIndex(self):
            return nimParser.RULE_simpleIfStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleIfStmt" ):
                listener.enterSimpleIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleIfStmt" ):
                listener.exitSimpleIfStmt(self)




    def simpleIfStmt(self):

        localctx = nimParser.SimpleIfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_simpleIfStmt)
        self._la = 0 # Token type
        try:
            self.state = 542
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 363
                self.match(nimParser.IF)
                self.state = 365
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.NOT:
                    self.state = 364
                    self.match(nimParser.NOT)


                self.state = 367
                self.condition()
                self.state = 368
                self.match(nimParser.COLON)
                self.state = 369
                self.assignStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 371
                self.match(nimParser.IF)
                self.state = 373
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.NOT:
                    self.state = 372
                    self.match(nimParser.NOT)


                self.state = 375
                self.match(nimParser.NEW_IDENTIFIER)
                self.state = 376
                self.match(nimParser.COLON)
                self.state = 377
                self.match(nimParser.IDENTIFIER)
                self.state = 378
                self.match(nimParser.EQUALS_OPERATOR)
                self.state = 386
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.NEW_IDENTIFIER]:
                    self.state = 379
                    self.match(nimParser.NEW_IDENTIFIER)
                    pass
                elif token in [nimParser.OPEN_BRACK, nimParser.AT]:
                    self.state = 381
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==nimParser.AT:
                        self.state = 380
                        self.match(nimParser.AT)


                    self.state = 383
                    self.match(nimParser.OPEN_BRACK)
                    self.state = 384
                    self.match(nimParser.NEW_IDENTIFIER)
                    self.state = 385
                    self.match(nimParser.CLOSE_BRACK)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 388
                self.match(nimParser.T__0)
                self.state = 389
                self.match(nimParser.INDENT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 390
                self.match(nimParser.IF)
                self.state = 392
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.NOT:
                    self.state = 391
                    self.match(nimParser.NOT)


                self.state = 394
                self.condition()
                self.state = 395
                self.match(nimParser.COLON)
                self.state = 396
                self.match(nimParser.NEW_IDENTIFIER)
                self.state = 397
                self.literal()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 399
                self.match(nimParser.IF)
                self.state = 401
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.NOT:
                    self.state = 400
                    self.match(nimParser.NOT)


                self.state = 403
                self.condition()
                self.state = 404
                self.match(nimParser.COLON)
                self.state = 417 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 405
                        self.match(nimParser.T__0)
                        self.state = 406
                        self.match(nimParser.INDENT)
                        self.state = 415
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [nimParser.T__0, nimParser.T__3, nimParser.T__8, nimParser.VARIABLE, nimParser.ECHO, nimParser.BLOCK, nimParser.CASE, nimParser.CONST, nimParser.FOR, nimParser.FROM, nimParser.IF, nimParser.IMPORT, nimParser.LET, nimParser.MACRO, nimParser.PROC, nimParser.TEMPLATE, nimParser.TYPE, nimParser.WHEN, nimParser.WHILE, nimParser.OPEN_PAREN, nimParser.IDENTIFIER, nimParser.NEW_IDENTIFIER]:
                            self.state = 407
                            self.stmt()
                            pass
                        elif token in [nimParser.BREAK]:
                            self.state = 408
                            self.match(nimParser.BREAK)
                            self.state = 409
                            self.match(nimParser.IDENTIFIER)
                            pass
                        elif token in [nimParser.CONTINUE]:
                            self.state = 410
                            self.match(nimParser.CONTINUE)
                            pass
                        elif token in [nimParser.T__4]:
                            self.state = 411
                            self.match(nimParser.T__4)
                            self.state = 412
                            self.match(nimParser.IDENTIFIER)
                            pass
                        elif token in [nimParser.T__5]:
                            self.state = 413
                            self.match(nimParser.T__5)
                            self.state = 414
                            self.match(nimParser.IDENTIFIER)
                            pass
                        else:
                            raise NoViableAltException(self)


                    else:
                        raise NoViableAltException(self)
                    self.state = 419 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,55,self._ctx)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 421
                self.match(nimParser.IF)
                self.state = 423
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.NOT:
                    self.state = 422
                    self.match(nimParser.NOT)


                self.state = 425
                self.condition()
                self.state = 426
                self.match(nimParser.COLON)
                self.state = 442 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 427
                        self.match(nimParser.T__0)
                        self.state = 428
                        self.match(nimParser.INDENT)
                        self.state = 433 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 433
                                self._errHandler.sync(self)
                                token = self._input.LA(1)
                                if token in [nimParser.T__0, nimParser.T__3, nimParser.T__8, nimParser.VARIABLE, nimParser.ECHO, nimParser.BLOCK, nimParser.CASE, nimParser.CONST, nimParser.FOR, nimParser.FROM, nimParser.IF, nimParser.IMPORT, nimParser.LET, nimParser.MACRO, nimParser.PROC, nimParser.TEMPLATE, nimParser.TYPE, nimParser.WHEN, nimParser.WHILE, nimParser.OPEN_PAREN, nimParser.IDENTIFIER, nimParser.NEW_IDENTIFIER]:
                                    self.state = 429
                                    self.stmt()
                                    pass
                                elif token in [nimParser.BREAK]:
                                    self.state = 430
                                    self.match(nimParser.BREAK)
                                    self.state = 431
                                    self.match(nimParser.IDENTIFIER)
                                    pass
                                elif token in [nimParser.CONTINUE]:
                                    self.state = 432
                                    self.match(nimParser.CONTINUE)
                                    pass
                                else:
                                    raise NoViableAltException(self)


                            else:
                                raise NoViableAltException(self)
                            self.state = 435 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,58,self._ctx)

                        self.state = 438 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 437
                                self.match(nimParser.T__0)

                            else:
                                raise NoViableAltException(self)
                            self.state = 440 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,59,self._ctx)


                    else:
                        raise NoViableAltException(self)
                    self.state = 444 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,60,self._ctx)

                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 446
                self.match(nimParser.IF)
                self.state = 448
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.NOT:
                    self.state = 447
                    self.match(nimParser.NOT)


                self.state = 450
                self.condition()
                self.state = 451
                self.match(nimParser.COLON)
                self.state = 497 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 452
                        self.match(nimParser.T__0)
                        self.state = 456
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==nimParser.INDENT:
                            self.state = 453
                            self.match(nimParser.INDENT)
                            self.state = 458
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 488 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 488
                                self._errHandler.sync(self)
                                la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
                                if la_ == 1:
                                    self.state = 459
                                    self.match(nimParser.IDENTIFIER)
                                    self.state = 460
                                    self.match(nimParser.T__0)
                                    self.state = 464
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    while _la==nimParser.INDENT:
                                        self.state = 461
                                        self.match(nimParser.INDENT)
                                        self.state = 466
                                        self._errHandler.sync(self)
                                        _la = self._input.LA(1)

                                    self.state = 467
                                    self.match(nimParser.T__4)
                                    self.state = 468
                                    self.match(nimParser.OPEN_PAREN)
                                    self.state = 469
                                    self.match(nimParser.IDENTIFIER)
                                    self.state = 474
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    while _la==nimParser.COMMA:
                                        self.state = 470
                                        self.match(nimParser.COMMA)
                                        self.state = 471
                                        self.match(nimParser.IDENTIFIER)
                                        self.state = 476
                                        self._errHandler.sync(self)
                                        _la = self._input.LA(1)

                                    self.state = 477
                                    self.match(nimParser.CLOSE_PAREN)
                                    self.state = 478
                                    self.match(nimParser.T__0)
                                    self.state = 482
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    while _la==nimParser.INDENT:
                                        self.state = 479
                                        self.match(nimParser.INDENT)
                                        self.state = 484
                                        self._errHandler.sync(self)
                                        _la = self._input.LA(1)

                                    self.state = 485
                                    self.match(nimParser.BREAK)
                                    self.state = 486
                                    self.match(nimParser.IDENTIFIER)
                                    pass

                                elif la_ == 2:
                                    self.state = 487
                                    self.stmt()
                                    pass



                            else:
                                raise NoViableAltException(self)
                            self.state = 490 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,67,self._ctx)

                        self.state = 493 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 492
                                self.match(nimParser.T__0)

                            else:
                                raise NoViableAltException(self)
                            self.state = 495 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,68,self._ctx)


                    else:
                        raise NoViableAltException(self)
                    self.state = 499 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,69,self._ctx)

                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 501
                self.match(nimParser.IF)
                self.state = 503
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.NOT:
                    self.state = 502
                    self.match(nimParser.NOT)


                self.state = 505
                self.condition()
                self.state = 506
                self.match(nimParser.COLON)
                self.state = 507
                self.match(nimParser.RETURN)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 509
                self.match(nimParser.IF)
                self.state = 511
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.NOT:
                    self.state = 510
                    self.match(nimParser.NOT)


                self.state = 513
                self.match(nimParser.IDENTIFIER)
                self.state = 514
                self.match(nimParser.OPEN_PAREN)
                self.state = 515
                self.rightHandSideStmt()
                self.state = 516
                self.match(nimParser.CLOSE_PAREN)
                self.state = 517
                self.match(nimParser.COLON)
                self.state = 527 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 518
                        self.match(nimParser.T__0)
                        self.state = 519
                        self.match(nimParser.INDENT)
                        self.state = 520
                        self.stmt()
                        self.state = 524
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,72,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 521
                                self.match(nimParser.T__0) 
                            self.state = 526
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,72,self._ctx)


                    else:
                        raise NoViableAltException(self)
                    self.state = 529 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,73,self._ctx)

                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 531
                self.match(nimParser.IF)
                self.state = 533
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.NOT:
                    self.state = 532
                    self.match(nimParser.NOT)


                self.state = 535
                self.match(nimParser.IDENTIFIER)
                self.state = 536
                self.match(nimParser.OPEN_PAREN)
                self.state = 537
                self.rightHandSideStmt()
                self.state = 538
                self.match(nimParser.CLOSE_PAREN)
                self.state = 539
                self.match(nimParser.COLON)
                self.state = 540
                self.assignStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleElifStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELIF(self):
            return self.getToken(nimParser.ELIF, 0)

        def condition(self):
            return self.getTypedRuleContext(nimParser.ConditionContext,0)


        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def assignStmt(self):
            return self.getTypedRuleContext(nimParser.AssignStmtContext,0)


        def NOT(self):
            return self.getToken(nimParser.NOT, 0)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def BREAK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.BREAK)
            else:
                return self.getToken(nimParser.BREAK, i)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.IDENTIFIER)
            else:
                return self.getToken(nimParser.IDENTIFIER, i)

        def CONTINUE(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.CONTINUE)
            else:
                return self.getToken(nimParser.CONTINUE, i)

        def RETURN(self):
            return self.getToken(nimParser.RETURN, 0)

        def OPEN_PAREN(self):
            return self.getToken(nimParser.OPEN_PAREN, 0)

        def rightHandSideStmt(self):
            return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(nimParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return nimParser.RULE_simpleElifStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleElifStmt" ):
                listener.enterSimpleElifStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleElifStmt" ):
                listener.exitSimpleElifStmt(self)




    def simpleElifStmt(self):

        localctx = nimParser.SimpleElifStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_simpleElifStmt)
        self._la = 0 # Token type
        try:
            self.state = 640
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 544
                self.match(nimParser.ELIF)
                self.state = 546
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.NOT:
                    self.state = 545
                    self.match(nimParser.NOT)


                self.state = 548
                self.condition()
                self.state = 549
                self.match(nimParser.COLON)
                self.state = 550
                self.assignStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 552
                self.match(nimParser.ELIF)
                self.state = 554
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.NOT:
                    self.state = 553
                    self.match(nimParser.NOT)


                self.state = 556
                self.condition()
                self.state = 557
                self.match(nimParser.COLON)
                self.state = 570 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 558
                        self.match(nimParser.T__0)
                        self.state = 559
                        self.match(nimParser.INDENT)
                        self.state = 568
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [nimParser.T__0, nimParser.T__3, nimParser.T__8, nimParser.VARIABLE, nimParser.ECHO, nimParser.BLOCK, nimParser.CASE, nimParser.CONST, nimParser.FOR, nimParser.FROM, nimParser.IF, nimParser.IMPORT, nimParser.LET, nimParser.MACRO, nimParser.PROC, nimParser.TEMPLATE, nimParser.TYPE, nimParser.WHEN, nimParser.WHILE, nimParser.OPEN_PAREN, nimParser.IDENTIFIER, nimParser.NEW_IDENTIFIER]:
                            self.state = 560
                            self.stmt()
                            pass
                        elif token in [nimParser.BREAK]:
                            self.state = 561
                            self.match(nimParser.BREAK)
                            self.state = 562
                            self.match(nimParser.IDENTIFIER)
                            pass
                        elif token in [nimParser.CONTINUE]:
                            self.state = 563
                            self.match(nimParser.CONTINUE)
                            pass
                        elif token in [nimParser.T__4]:
                            self.state = 564
                            self.match(nimParser.T__4)
                            self.state = 565
                            self.match(nimParser.IDENTIFIER)
                            pass
                        elif token in [nimParser.T__5]:
                            self.state = 566
                            self.match(nimParser.T__5)
                            self.state = 567
                            self.match(nimParser.IDENTIFIER)
                            pass
                        else:
                            raise NoViableAltException(self)


                    else:
                        raise NoViableAltException(self)
                    self.state = 572 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,79,self._ctx)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 574
                self.match(nimParser.ELIF)
                self.state = 576
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.NOT:
                    self.state = 575
                    self.match(nimParser.NOT)


                self.state = 578
                self.condition()
                self.state = 579
                self.match(nimParser.COLON)
                self.state = 595 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 580
                        self.match(nimParser.T__0)
                        self.state = 581
                        self.match(nimParser.INDENT)
                        self.state = 586 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 586
                                self._errHandler.sync(self)
                                token = self._input.LA(1)
                                if token in [nimParser.T__0, nimParser.T__3, nimParser.T__8, nimParser.VARIABLE, nimParser.ECHO, nimParser.BLOCK, nimParser.CASE, nimParser.CONST, nimParser.FOR, nimParser.FROM, nimParser.IF, nimParser.IMPORT, nimParser.LET, nimParser.MACRO, nimParser.PROC, nimParser.TEMPLATE, nimParser.TYPE, nimParser.WHEN, nimParser.WHILE, nimParser.OPEN_PAREN, nimParser.IDENTIFIER, nimParser.NEW_IDENTIFIER]:
                                    self.state = 582
                                    self.stmt()
                                    pass
                                elif token in [nimParser.BREAK]:
                                    self.state = 583
                                    self.match(nimParser.BREAK)
                                    self.state = 584
                                    self.match(nimParser.IDENTIFIER)
                                    pass
                                elif token in [nimParser.CONTINUE]:
                                    self.state = 585
                                    self.match(nimParser.CONTINUE)
                                    pass
                                else:
                                    raise NoViableAltException(self)


                            else:
                                raise NoViableAltException(self)
                            self.state = 588 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,82,self._ctx)

                        self.state = 591 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 590
                                self.match(nimParser.T__0)

                            else:
                                raise NoViableAltException(self)
                            self.state = 593 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,83,self._ctx)


                    else:
                        raise NoViableAltException(self)
                    self.state = 597 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,84,self._ctx)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 599
                self.match(nimParser.ELIF)
                self.state = 601
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.NOT:
                    self.state = 600
                    self.match(nimParser.NOT)


                self.state = 603
                self.condition()
                self.state = 604
                self.match(nimParser.COLON)
                self.state = 605
                self.match(nimParser.RETURN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 607
                self.match(nimParser.ELIF)
                self.state = 609
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.NOT:
                    self.state = 608
                    self.match(nimParser.NOT)


                self.state = 611
                self.match(nimParser.IDENTIFIER)
                self.state = 612
                self.match(nimParser.OPEN_PAREN)
                self.state = 613
                self.rightHandSideStmt()
                self.state = 614
                self.match(nimParser.CLOSE_PAREN)
                self.state = 615
                self.match(nimParser.COLON)
                self.state = 625 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 616
                        self.match(nimParser.T__0)
                        self.state = 617
                        self.match(nimParser.INDENT)
                        self.state = 618
                        self.stmt()
                        self.state = 622
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,87,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 619
                                self.match(nimParser.T__0) 
                            self.state = 624
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,87,self._ctx)


                    else:
                        raise NoViableAltException(self)
                    self.state = 627 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,88,self._ctx)

                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 629
                self.match(nimParser.ELIF)
                self.state = 631
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.NOT:
                    self.state = 630
                    self.match(nimParser.NOT)


                self.state = 633
                self.match(nimParser.IDENTIFIER)
                self.state = 634
                self.match(nimParser.OPEN_PAREN)
                self.state = 635
                self.rightHandSideStmt()
                self.state = 636
                self.match(nimParser.CLOSE_PAREN)
                self.state = 637
                self.match(nimParser.COLON)
                self.state = 638
                self.assignStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarSimpleIfStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(nimParser.IF, 0)

        def condition(self):
            return self.getTypedRuleContext(nimParser.ConditionContext,0)


        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def rightHandSideStmt(self):
            return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,0)


        def NEW_IDENTIFIER(self):
            return self.getToken(nimParser.NEW_IDENTIFIER, 0)

        def NOT(self):
            return self.getToken(nimParser.NOT, 0)

        def getRuleIndex(self):
            return nimParser.RULE_varSimpleIfStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarSimpleIfStmt" ):
                listener.enterVarSimpleIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarSimpleIfStmt" ):
                listener.exitVarSimpleIfStmt(self)




    def varSimpleIfStmt(self):

        localctx = nimParser.VarSimpleIfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_varSimpleIfStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 642
            self.match(nimParser.IF)
            self.state = 644
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.NOT:
                self.state = 643
                self.match(nimParser.NOT)


            self.state = 646
            self.condition()
            self.state = 647
            self.match(nimParser.COLON)
            self.state = 650
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.state = 648
                self.rightHandSideStmt()
                pass

            elif la_ == 2:
                self.state = 649
                self.match(nimParser.NEW_IDENTIFIER)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarSimpleElifStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELIF(self):
            return self.getToken(nimParser.ELIF, 0)

        def condition(self):
            return self.getTypedRuleContext(nimParser.ConditionContext,0)


        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def rightHandSideStmt(self):
            return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,0)


        def NEW_IDENTIFIER(self):
            return self.getToken(nimParser.NEW_IDENTIFIER, 0)

        def NOT(self):
            return self.getToken(nimParser.NOT, 0)

        def getRuleIndex(self):
            return nimParser.RULE_varSimpleElifStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarSimpleElifStmt" ):
                listener.enterVarSimpleElifStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarSimpleElifStmt" ):
                listener.exitVarSimpleElifStmt(self)




    def varSimpleElifStmt(self):

        localctx = nimParser.VarSimpleElifStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_varSimpleElifStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 652
            self.match(nimParser.ELIF)
            self.state = 654
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.NOT:
                self.state = 653
                self.match(nimParser.NOT)


            self.state = 656
            self.condition()
            self.state = 657
            self.match(nimParser.COLON)
            self.state = 660
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.state = 658
                self.rightHandSideStmt()
                pass

            elif la_ == 2:
                self.state = 659
                self.match(nimParser.NEW_IDENTIFIER)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarSimpleElseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(nimParser.ELSE, 0)

        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def rightHandSideStmt(self):
            return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,0)


        def NEW_IDENTIFIER(self):
            return self.getToken(nimParser.NEW_IDENTIFIER, 0)

        def INDENT(self):
            return self.getToken(nimParser.INDENT, 0)

        def getRuleIndex(self):
            return nimParser.RULE_varSimpleElseStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarSimpleElseStmt" ):
                listener.enterVarSimpleElseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarSimpleElseStmt" ):
                listener.exitVarSimpleElseStmt(self)




    def varSimpleElseStmt(self):

        localctx = nimParser.VarSimpleElseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_varSimpleElseStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 663
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.INDENT:
                self.state = 662
                self.match(nimParser.INDENT)


            self.state = 665
            self.match(nimParser.ELSE)
            self.state = 666
            self.match(nimParser.COLON)
            self.state = 669
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.state = 667
                self.rightHandSideStmt()
                pass

            elif la_ == 2:
                self.state = 668
                self.match(nimParser.NEW_IDENTIFIER)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleElseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(nimParser.ELSE, 0)

        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def printStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.PrintStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.PrintStmtContext,i)


        def assignStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.AssignStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.AssignStmtContext,i)


        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def BREAK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.BREAK)
            else:
                return self.getToken(nimParser.BREAK, i)

        def getRuleIndex(self):
            return nimParser.RULE_simpleElseStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleElseStmt" ):
                listener.enterSimpleElseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleElseStmt" ):
                listener.exitSimpleElseStmt(self)




    def simpleElseStmt(self):

        localctx = nimParser.SimpleElseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_simpleElseStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 672
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.INDENT:
                self.state = 671
                self.match(nimParser.INDENT)


            self.state = 674
            self.match(nimParser.ELSE)
            self.state = 675
            self.match(nimParser.COLON)
            self.state = 688 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 688
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [nimParser.T__0]:
                        self.state = 682 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 676
                                self.match(nimParser.T__0)
                                self.state = 677
                                self.match(nimParser.INDENT)
                                self.state = 680
                                self._errHandler.sync(self)
                                token = self._input.LA(1)
                                if token in [nimParser.T__0, nimParser.T__3, nimParser.T__8, nimParser.VARIABLE, nimParser.ECHO, nimParser.BLOCK, nimParser.CASE, nimParser.CONST, nimParser.FOR, nimParser.FROM, nimParser.IF, nimParser.IMPORT, nimParser.LET, nimParser.MACRO, nimParser.PROC, nimParser.TEMPLATE, nimParser.TYPE, nimParser.WHEN, nimParser.WHILE, nimParser.OPEN_PAREN, nimParser.IDENTIFIER, nimParser.NEW_IDENTIFIER]:
                                    self.state = 678
                                    self.stmt()
                                    pass
                                elif token in [nimParser.BREAK]:
                                    self.state = 679
                                    self.match(nimParser.BREAK)
                                    pass
                                else:
                                    raise NoViableAltException(self)


                            else:
                                raise NoViableAltException(self)
                            self.state = 684 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,99,self._ctx)

                        pass
                    elif token in [nimParser.ECHO]:
                        self.state = 686
                        self.printStmt()
                        pass
                    elif token in [nimParser.IDENTIFIER]:
                        self.state = 687
                        self.assignStmt()
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 690 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,101,self._ctx)

            self.state = 695
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,102,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 692
                    self.match(nimParser.T__0) 
                self.state = 697
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,102,self._ctx)

            self.state = 699
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.state = 698
                self.match(nimParser.INDENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForLoopContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(nimParser.FOR, 0)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.IDENTIFIER)
            else:
                return self.getToken(nimParser.IDENTIFIER, i)

        def IN(self):
            return self.getToken(nimParser.IN, 0)

        def CHAR_LIT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.CHAR_LIT)
            else:
                return self.getToken(nimParser.CHAR_LIT, i)

        def OP6(self):
            return self.getToken(nimParser.OP6, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COLON)
            else:
                return self.getToken(nimParser.COLON, i)

        def COMMENT(self):
            return self.getToken(nimParser.COMMENT, 0)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def caseStmt(self):
            return self.getTypedRuleContext(nimParser.CaseStmtContext,0)


        def NEW_IDENTIFIER(self):
            return self.getToken(nimParser.NEW_IDENTIFIER, 0)

        def OPEN_BRACK(self):
            return self.getToken(nimParser.OPEN_BRACK, 0)

        def CLOSE_BRACK(self):
            return self.getToken(nimParser.CLOSE_BRACK, 0)

        def OPEN_PAREN(self):
            return self.getToken(nimParser.OPEN_PAREN, 0)

        def rightHandSideStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.RightHandSideStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,i)


        def CLOSE_PAREN(self):
            return self.getToken(nimParser.CLOSE_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMA)
            else:
                return self.getToken(nimParser.COMMA, i)

        def methodInvoke(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.MethodInvokeContext)
            else:
                return self.getTypedRuleContext(nimParser.MethodInvokeContext,i)


        def FORLOOP_RANGE(self):
            return self.getToken(nimParser.FORLOOP_RANGE, 0)

        def LESS_THAN(self):
            return self.getToken(nimParser.LESS_THAN, 0)

        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.DIGIT)
            else:
                return self.getToken(nimParser.DIGIT, i)

        def AT(self):
            return self.getToken(nimParser.AT, 0)

        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.LiteralContext)
            else:
                return self.getTypedRuleContext(nimParser.LiteralContext,i)


        def getRuleIndex(self):
            return nimParser.RULE_forLoop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForLoop" ):
                listener.enterForLoop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForLoop" ):
                listener.exitForLoop(self)




    def forLoop(self):

        localctx = nimParser.ForLoopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_forLoop)
        self._la = 0 # Token type
        try:
            self.state = 949
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 701
                self.match(nimParser.FOR)
                self.state = 702
                self.match(nimParser.IDENTIFIER)
                self.state = 703
                self.match(nimParser.IN)
                self.state = 704
                self.match(nimParser.CHAR_LIT)
                self.state = 705
                self.match(nimParser.OP6)
                self.state = 706
                self.match(nimParser.CHAR_LIT)
                self.state = 707
                self.match(nimParser.COLON)
                self.state = 709
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.COMMENT:
                    self.state = 708
                    self.match(nimParser.COMMENT)


                self.state = 714 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 711
                        self.match(nimParser.T__0)
                        self.state = 712
                        self.match(nimParser.INDENT)
                        self.state = 713
                        self.stmt()

                    else:
                        raise NoViableAltException(self)
                    self.state = 716 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,105,self._ctx)

                self.state = 721
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,106,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 718
                        self.match(nimParser.INDENT) 
                    self.state = 723
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,106,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 724
                self.match(nimParser.FOR)
                self.state = 725
                self.match(nimParser.IDENTIFIER)
                self.state = 726
                self.match(nimParser.IN)
                self.state = 727
                self.match(nimParser.IDENTIFIER)
                self.state = 728
                self.match(nimParser.COLON)
                self.state = 729
                self.match(nimParser.T__0)
                self.state = 730
                self.match(nimParser.INDENT)
                self.state = 731
                self.caseStmt()
                self.state = 733
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
                if la_ == 1:
                    self.state = 732
                    self.match(nimParser.T__0)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 735
                self.match(nimParser.FOR)
                self.state = 736
                self.match(nimParser.IDENTIFIER)
                self.state = 737
                self.match(nimParser.IN)
                self.state = 738
                self.match(nimParser.IDENTIFIER)
                self.state = 739
                self.match(nimParser.COLON)
                self.state = 740
                self.match(nimParser.NEW_IDENTIFIER)
                self.state = 741
                self.match(nimParser.IDENTIFIER)
                self.state = 742
                self.match(nimParser.T__0)
                self.state = 743
                self.match(nimParser.INDENT)
                self.state = 744
                self.match(nimParser.IDENTIFIER)
                self.state = 745
                self.match(nimParser.OPEN_BRACK)
                self.state = 746
                self.match(nimParser.IDENTIFIER)
                self.state = 747
                self.match(nimParser.CLOSE_BRACK)
                self.state = 748
                self.match(nimParser.OPEN_PAREN)
                self.state = 749
                self.match(nimParser.IDENTIFIER)
                self.state = 750
                self.match(nimParser.COLON)
                self.state = 751
                self.rightHandSideStmt()
                self.state = 758
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nimParser.COMMA:
                    self.state = 752
                    self.match(nimParser.COMMA)
                    self.state = 753
                    self.match(nimParser.IDENTIFIER)
                    self.state = 754
                    self.match(nimParser.COLON)
                    self.state = 755
                    self.rightHandSideStmt()
                    self.state = 760
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 761
                self.match(nimParser.CLOSE_PAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 763
                self.match(nimParser.FOR)
                self.state = 764
                self.match(nimParser.IDENTIFIER)
                self.state = 765
                self.match(nimParser.IN)
                self.state = 766
                self.methodInvoke()
                self.state = 767
                self.match(nimParser.COLON)
                self.state = 768
                self.match(nimParser.T__0)
                self.state = 769
                self.match(nimParser.INDENT)
                self.state = 770
                self.methodInvoke()
                self.state = 774
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,109,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 771
                        self.match(nimParser.T__0) 
                    self.state = 776
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,109,self._ctx)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 777
                self.match(nimParser.FOR)
                self.state = 778
                self.match(nimParser.IDENTIFIER)
                self.state = 779
                self.match(nimParser.IN)
                self.state = 782
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.FORLOOP_RANGE]:
                    self.state = 780
                    self.match(nimParser.FORLOOP_RANGE)
                    pass
                elif token in [nimParser.OPEN_PAREN, nimParser.IDENTIFIER]:
                    self.state = 781
                    self.methodInvoke()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 784
                self.match(nimParser.COLON)
                self.state = 786
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.COMMENT:
                    self.state = 785
                    self.match(nimParser.COMMENT)


                self.state = 791 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 788
                        self.match(nimParser.T__0)
                        self.state = 789
                        self.match(nimParser.INDENT)
                        self.state = 790
                        self.stmt()

                    else:
                        raise NoViableAltException(self)
                    self.state = 793 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,112,self._ctx)

                self.state = 798
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,113,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 795
                        self.match(nimParser.INDENT) 
                    self.state = 800
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,113,self._ctx)

                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 801
                self.match(nimParser.FOR)
                self.state = 802
                self.match(nimParser.IDENTIFIER)
                self.state = 803
                self.match(nimParser.IN)
                self.state = 805 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 804
                    self.match(nimParser.DIGIT)
                    self.state = 807 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==nimParser.DIGIT):
                        break

                self.state = 809
                self.match(nimParser.OP6)
                self.state = 810
                self.match(nimParser.LESS_THAN)
                self.state = 811
                self.match(nimParser.NEW_IDENTIFIER)
                self.state = 812
                self.match(nimParser.COLON)
                self.state = 814
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.COMMENT:
                    self.state = 813
                    self.match(nimParser.COMMENT)


                self.state = 819 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 816
                        self.match(nimParser.T__0)
                        self.state = 817
                        self.match(nimParser.INDENT)
                        self.state = 818
                        self.stmt()

                    else:
                        raise NoViableAltException(self)
                    self.state = 821 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,116,self._ctx)

                self.state = 826
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,117,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 823
                        self.match(nimParser.INDENT) 
                    self.state = 828
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,117,self._ctx)

                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 829
                self.match(nimParser.FOR)
                self.state = 830
                self.match(nimParser.IDENTIFIER)
                self.state = 835
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nimParser.COMMA:
                    self.state = 831
                    self.match(nimParser.COMMA)
                    self.state = 832
                    self.match(nimParser.IDENTIFIER)
                    self.state = 837
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 838
                self.match(nimParser.IN)
                self.state = 839
                self.match(nimParser.AT)
                self.state = 840
                self.match(nimParser.OPEN_BRACK)
                self.state = 865
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nimParser.DIGIT or ((((_la - 91)) & ~0x3f) == 0 and ((1 << (_la - 91)) & ((1 << (nimParser.NIL - 91)) | (1 << (nimParser.TRIPLESTR_LIT - 91)) | (1 << (nimParser.CHAR_LIT - 91)) | (1 << (nimParser.STR_LIT - 91)) | (1 << (nimParser.RSTR_LIT - 91)) | (1 << (nimParser.INT_LIT - 91)) | (1 << (nimParser.INT8_LIT - 91)) | (1 << (nimParser.INT16_LIT - 91)) | (1 << (nimParser.INT32_LIT - 91)) | (1 << (nimParser.INT64_LIT - 91)) | (1 << (nimParser.UINT_LIT - 91)) | (1 << (nimParser.UINT8_LIT - 91)) | (1 << (nimParser.UINT16_LIT - 91)) | (1 << (nimParser.UINT32_LIT - 91)) | (1 << (nimParser.UINT64_LIT - 91)) | (1 << (nimParser.FLOAT_LIT - 91)) | (1 << (nimParser.FLOAT32_LIT - 91)) | (1 << (nimParser.FLOAT64_LIT - 91)))) != 0):
                    self.state = 847
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                        self.state = 841
                        self.literal()
                        pass
                    elif token in [nimParser.DIGIT]:
                        self.state = 843 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 842
                                self.match(nimParser.DIGIT)

                            else:
                                raise NoViableAltException(self)
                            self.state = 845 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,119,self._ctx)

                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 860
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==nimParser.COMMA:
                        self.state = 849
                        self.match(nimParser.COMMA)
                        self.state = 856
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                            self.state = 850
                            self.literal()
                            pass
                        elif token in [nimParser.DIGIT]:
                            self.state = 852 
                            self._errHandler.sync(self)
                            _alt = 1
                            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                if _alt == 1:
                                    self.state = 851
                                    self.match(nimParser.DIGIT)

                                else:
                                    raise NoViableAltException(self)
                                self.state = 854 
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,121,self._ctx)

                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 862
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 867
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 868
                self.match(nimParser.CLOSE_BRACK)
                self.state = 869
                self.match(nimParser.COLON)
                self.state = 871
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.COMMENT:
                    self.state = 870
                    self.match(nimParser.COMMENT)


                self.state = 876 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 873
                        self.match(nimParser.T__0)
                        self.state = 874
                        self.match(nimParser.INDENT)
                        self.state = 875
                        self.stmt()

                    else:
                        raise NoViableAltException(self)
                    self.state = 878 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,126,self._ctx)

                self.state = 883
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,127,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 880
                        self.match(nimParser.INDENT) 
                    self.state = 885
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,127,self._ctx)

                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 886
                self.match(nimParser.FOR)
                self.state = 887
                self.match(nimParser.IDENTIFIER)
                self.state = 888
                self.match(nimParser.IN)
                self.state = 889
                self.match(nimParser.IDENTIFIER)
                self.state = 890
                self.match(nimParser.OPEN_PAREN)
                self.state = 891
                self.match(nimParser.IDENTIFIER)
                self.state = 892
                self.match(nimParser.CLOSE_PAREN)
                self.state = 893
                self.match(nimParser.COLON)
                self.state = 895
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.COMMENT:
                    self.state = 894
                    self.match(nimParser.COMMENT)


                self.state = 900 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 897
                        self.match(nimParser.T__0)
                        self.state = 898
                        self.match(nimParser.INDENT)
                        self.state = 899
                        self.stmt()

                    else:
                        raise NoViableAltException(self)
                    self.state = 902 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,129,self._ctx)

                self.state = 907
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,130,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 904
                        self.match(nimParser.INDENT) 
                    self.state = 909
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,130,self._ctx)

                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 910
                self.match(nimParser.FOR)
                self.state = 911
                self.match(nimParser.IDENTIFIER)
                self.state = 912
                self.match(nimParser.IN)
                self.state = 913
                self.match(nimParser.IDENTIFIER)
                self.state = 914
                self.match(nimParser.COLON)
                self.state = 915
                self.match(nimParser.T__0)
                self.state = 916
                self.match(nimParser.INDENT)
                self.state = 917
                self.methodInvoke()
                self.state = 919
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
                if la_ == 1:
                    self.state = 918
                    self.match(nimParser.T__0)


                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 921
                self.match(nimParser.FOR)
                self.state = 922
                self.match(nimParser.IDENTIFIER)
                self.state = 927
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nimParser.COMMA:
                    self.state = 923
                    self.match(nimParser.COMMA)
                    self.state = 924
                    self.match(nimParser.IDENTIFIER)
                    self.state = 929
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 930
                self.match(nimParser.IN)
                self.state = 931
                self.match(nimParser.NEW_IDENTIFIER)
                self.state = 936
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.OPEN_PAREN:
                    self.state = 932
                    self.match(nimParser.OPEN_PAREN)
                    self.state = 933
                    self.literal()
                    self.state = 934
                    self.match(nimParser.CLOSE_PAREN)


                self.state = 938
                self.match(nimParser.COLON)
                self.state = 942 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 939
                        self.match(nimParser.T__0)
                        self.state = 940
                        self.match(nimParser.INDENT)
                        self.state = 941
                        self.stmt()

                    else:
                        raise NoViableAltException(self)
                    self.state = 944 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,134,self._ctx)

                self.state = 947
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
                if la_ == 1:
                    self.state = 946
                    self.match(nimParser.T__0)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileLoopContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(nimParser.WHILE, 0)

        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def condition(self):
            return self.getTypedRuleContext(nimParser.ConditionContext,0)


        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def BREAK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.BREAK)
            else:
                return self.getToken(nimParser.BREAK, i)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.IDENTIFIER)
            else:
                return self.getToken(nimParser.IDENTIFIER, i)

        def getRuleIndex(self):
            return nimParser.RULE_whileLoop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileLoop" ):
                listener.enterWhileLoop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileLoop" ):
                listener.exitWhileLoop(self)




    def whileLoop(self):

        localctx = nimParser.WhileLoopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_whileLoop)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 951
            self.match(nimParser.WHILE)
            self.state = 954
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
            if la_ == 1:
                self.state = 952
                self.condition()
                pass

            elif la_ == 2:
                self.state = 953
                self.match(nimParser.T__6)
                pass


            self.state = 956
            self.match(nimParser.COLON)
            self.state = 966 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 957
                    self.match(nimParser.T__0)
                    self.state = 958
                    self.match(nimParser.INDENT)
                    self.state = 964
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [nimParser.T__0, nimParser.T__3, nimParser.T__8, nimParser.VARIABLE, nimParser.ECHO, nimParser.BLOCK, nimParser.CASE, nimParser.CONST, nimParser.FOR, nimParser.FROM, nimParser.IF, nimParser.IMPORT, nimParser.LET, nimParser.MACRO, nimParser.PROC, nimParser.TEMPLATE, nimParser.TYPE, nimParser.WHEN, nimParser.WHILE, nimParser.OPEN_PAREN, nimParser.IDENTIFIER, nimParser.NEW_IDENTIFIER]:
                        self.state = 959
                        self.stmt()
                        pass
                    elif token in [nimParser.BREAK]:
                        self.state = 960
                        self.match(nimParser.BREAK)
                        self.state = 962
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
                        if la_ == 1:
                            self.state = 961
                            self.match(nimParser.IDENTIFIER)


                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 968 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,140,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleWhenStmt(self):
            return self.getTypedRuleContext(nimParser.SimpleWhenStmtContext,0)


        def simpleElseStmt(self):
            return self.getTypedRuleContext(nimParser.SimpleElseStmtContext,0)


        def simpleElifStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.SimpleElifStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.SimpleElifStmtContext,i)


        def getRuleIndex(self):
            return nimParser.RULE_whenStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenStmt" ):
                listener.enterWhenStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenStmt" ):
                listener.exitWhenStmt(self)




    def whenStmt(self):

        localctx = nimParser.WhenStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_whenStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 970
            self.simpleWhenStmt()
            self.state = 974
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==nimParser.ELIF:
                self.state = 971
                self.simpleElifStmt()
                self.state = 976
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 977
            self.simpleElseStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleWhenStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(nimParser.WHEN, 0)

        def condition(self):
            return self.getTypedRuleContext(nimParser.ConditionContext,0)


        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def BREAK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.BREAK)
            else:
                return self.getToken(nimParser.BREAK, i)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def getRuleIndex(self):
            return nimParser.RULE_simpleWhenStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleWhenStmt" ):
                listener.enterSimpleWhenStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleWhenStmt" ):
                listener.exitSimpleWhenStmt(self)




    def simpleWhenStmt(self):

        localctx = nimParser.SimpleWhenStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_simpleWhenStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 979
            self.match(nimParser.WHEN)
            self.state = 980
            self.condition()
            self.state = 981
            self.match(nimParser.COLON)
            self.state = 990 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 984
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
                if la_ == 1:
                    self.state = 982
                    self.match(nimParser.T__0)
                    self.state = 983
                    self.match(nimParser.INDENT)


                self.state = 988
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.T__0, nimParser.T__3, nimParser.T__8, nimParser.VARIABLE, nimParser.ECHO, nimParser.BLOCK, nimParser.CASE, nimParser.CONST, nimParser.FOR, nimParser.FROM, nimParser.IF, nimParser.IMPORT, nimParser.LET, nimParser.MACRO, nimParser.PROC, nimParser.TEMPLATE, nimParser.TYPE, nimParser.WHEN, nimParser.WHILE, nimParser.OPEN_PAREN, nimParser.IDENTIFIER, nimParser.NEW_IDENTIFIER]:
                    self.state = 986
                    self.stmt()
                    pass
                elif token in [nimParser.BREAK]:
                    self.state = 987
                    self.match(nimParser.BREAK)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 992 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.T__0) | (1 << nimParser.T__3) | (1 << nimParser.T__8) | (1 << nimParser.VARIABLE) | (1 << nimParser.ECHO) | (1 << nimParser.BLOCK) | (1 << nimParser.BREAK) | (1 << nimParser.CASE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (nimParser.CONST - 64)) | (1 << (nimParser.FOR - 64)) | (1 << (nimParser.FROM - 64)) | (1 << (nimParser.IF - 64)) | (1 << (nimParser.IMPORT - 64)) | (1 << (nimParser.LET - 64)) | (1 << (nimParser.MACRO - 64)) | (1 << (nimParser.PROC - 64)) | (1 << (nimParser.TEMPLATE - 64)) | (1 << (nimParser.TYPE - 64)) | (1 << (nimParser.WHEN - 64)) | (1 << (nimParser.WHILE - 64)) | (1 << (nimParser.OPEN_PAREN - 64)))) != 0) or _la==nimParser.IDENTIFIER or _la==nimParser.NEW_IDENTIFIER):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROC(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.PROC)
            else:
                return self.getToken(nimParser.PROC, i)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.IDENTIFIER)
            else:
                return self.getToken(nimParser.IDENTIFIER, i)

        def OPEN_BRACK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.OPEN_BRACK)
            else:
                return self.getToken(nimParser.OPEN_BRACK, i)

        def CLOSE_BRACK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.CLOSE_BRACK)
            else:
                return self.getToken(nimParser.CLOSE_BRACK, i)

        def OPEN_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.OPEN_PAREN)
            else:
                return self.getToken(nimParser.OPEN_PAREN, i)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COLON)
            else:
                return self.getToken(nimParser.COLON, i)

        def CLOSE_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.CLOSE_PAREN)
            else:
                return self.getToken(nimParser.CLOSE_PAREN, i)

        def EQUALS_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.EQUALS_OPERATOR)
            else:
                return self.getToken(nimParser.EQUALS_OPERATOR, i)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def rightHandSideStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.RightHandSideStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMA)
            else:
                return self.getToken(nimParser.COMMA, i)

        def RETURN(self):
            return self.getToken(nimParser.RETURN, 0)

        def assignStmt(self):
            return self.getTypedRuleContext(nimParser.AssignStmtContext,0)


        def printStmt(self):
            return self.getTypedRuleContext(nimParser.PrintStmtContext,0)


        def dataType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.DataTypeContext)
            else:
                return self.getTypedRuleContext(nimParser.DataTypeContext,i)


        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def constDec(self):
            return self.getTypedRuleContext(nimParser.ConstDecContext,0)


        def forLoop(self):
            return self.getTypedRuleContext(nimParser.ForLoopContext,0)


        def VARIABLE(self):
            return self.getToken(nimParser.VARIABLE, 0)

        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.LiteralContext)
            else:
                return self.getTypedRuleContext(nimParser.LiteralContext,i)


        def MINUS_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.MINUS_OPERATOR)
            else:
                return self.getToken(nimParser.MINUS_OPERATOR, i)

        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.DIGIT)
            else:
                return self.getToken(nimParser.DIGIT, i)

        def getRuleIndex(self):
            return nimParser.RULE_procBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcBlock" ):
                listener.enterProcBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcBlock" ):
                listener.exitProcBlock(self)




    def procBlock(self):

        localctx = nimParser.ProcBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_procBlock)
        self._la = 0 # Token type
        try:
            self.state = 1225
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 994
                self.match(nimParser.PROC)
                self.state = 995
                self.match(nimParser.IDENTIFIER)
                self.state = 996
                self.match(nimParser.OPEN_BRACK)
                self.state = 997
                self.match(nimParser.IDENTIFIER)
                self.state = 998
                self.match(nimParser.CLOSE_BRACK)
                self.state = 999
                self.match(nimParser.OPEN_PAREN)
                self.state = 1000
                self.match(nimParser.IDENTIFIER)
                self.state = 1001
                self.match(nimParser.COLON)
                self.state = 1002
                self.match(nimParser.IDENTIFIER)
                self.state = 1003
                self.match(nimParser.CLOSE_PAREN)
                self.state = 1004
                self.match(nimParser.COLON)
                self.state = 1005
                self.match(nimParser.IDENTIFIER)
                self.state = 1006
                self.match(nimParser.OPEN_BRACK)
                self.state = 1007
                self.match(nimParser.IDENTIFIER)
                self.state = 1008
                self.match(nimParser.CLOSE_BRACK)
                self.state = 1009
                self.match(nimParser.EQUALS_OPERATOR)
                self.state = 1010
                self.match(nimParser.T__0)
                self.state = 1011
                self.match(nimParser.INDENT)
                self.state = 1012
                self.match(nimParser.IDENTIFIER)
                self.state = 1013
                self.match(nimParser.OPEN_BRACK)
                self.state = 1014
                self.match(nimParser.IDENTIFIER)
                self.state = 1015
                self.match(nimParser.CLOSE_BRACK)
                self.state = 1016
                self.match(nimParser.OPEN_PAREN)
                self.state = 1017
                self.match(nimParser.IDENTIFIER)
                self.state = 1018
                self.match(nimParser.COLON)
                self.state = 1019
                self.rightHandSideStmt()
                self.state = 1026
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nimParser.COMMA:
                    self.state = 1020
                    self.match(nimParser.COMMA)
                    self.state = 1021
                    self.match(nimParser.IDENTIFIER)
                    self.state = 1022
                    self.match(nimParser.COLON)
                    self.state = 1023
                    self.rightHandSideStmt()
                    self.state = 1028
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1029
                self.match(nimParser.CLOSE_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1031
                self.match(nimParser.PROC)
                self.state = 1032
                _la = self._input.LA(1)
                if not(_la==nimParser.T__7 or _la==nimParser.IDENTIFIER):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1036
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.OPEN_BRACK:
                    self.state = 1033
                    self.match(nimParser.OPEN_BRACK)
                    self.state = 1034
                    self.match(nimParser.IDENTIFIER)
                    self.state = 1035
                    self.match(nimParser.CLOSE_BRACK)


                self.state = 1038
                self.match(nimParser.OPEN_PAREN)
                self.state = 1052 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1039
                    self.match(nimParser.IDENTIFIER)
                    self.state = 1047
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [nimParser.COLON]:
                        self.state = 1040
                        self.match(nimParser.COLON)
                        self.state = 1043
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [nimParser.T__15, nimParser.T__16, nimParser.T__17, nimParser.OBJECT]:
                            self.state = 1041
                            self.dataType()
                            pass
                        elif token in [nimParser.T__6, nimParser.T__13, nimParser.DIGIT, nimParser.NIL, nimParser.OPEN_PAREN, nimParser.OPEN_BRACK, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.IDENTIFIER, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT, nimParser.NEW_IDENTIFIER]:
                            self.state = 1042
                            self.rightHandSideStmt()
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass
                    elif token in [nimParser.EQUALS_OPERATOR]:
                        self.state = 1045
                        self.match(nimParser.EQUALS_OPERATOR)
                        self.state = 1046
                        self.rightHandSideStmt()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1050
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==nimParser.COMMA:
                        self.state = 1049
                        self.match(nimParser.COMMA)


                    self.state = 1054 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==nimParser.IDENTIFIER):
                        break

                self.state = 1056
                self.match(nimParser.CLOSE_PAREN)
                self.state = 1062
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.COLON:
                    self.state = 1057
                    self.match(nimParser.COLON)
                    self.state = 1060
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [nimParser.T__15, nimParser.T__16, nimParser.T__17, nimParser.OBJECT]:
                        self.state = 1058
                        self.dataType()
                        pass
                    elif token in [nimParser.T__6, nimParser.T__13, nimParser.DIGIT, nimParser.NIL, nimParser.OPEN_PAREN, nimParser.OPEN_BRACK, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.IDENTIFIER, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT, nimParser.NEW_IDENTIFIER]:
                        self.state = 1059
                        self.rightHandSideStmt()
                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 1064
                self.match(nimParser.EQUALS_OPERATOR)
                self.state = 1102
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.T__0]:
                    self.state = 1068 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 1065
                            self.match(nimParser.T__0)
                            self.state = 1066
                            self.match(nimParser.INDENT)
                            self.state = 1067
                            self.stmt()

                        else:
                            raise NoViableAltException(self)
                        self.state = 1070 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,153,self._ctx)

                    pass
                elif token in [nimParser.IDENTIFIER]:
                    self.state = 1072
                    self.assignStmt()
                    self.state = 1076
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,154,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1073
                            self.match(nimParser.T__0) 
                        self.state = 1078
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,154,self._ctx)

                    self.state = 1084
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,155,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1079
                            self.match(nimParser.T__0)
                            self.state = 1080
                            self.match(nimParser.INDENT)
                            self.state = 1081
                            self.stmt() 
                        self.state = 1086
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,155,self._ctx)

                    pass
                elif token in [nimParser.ECHO]:
                    self.state = 1087
                    self.printStmt()
                    self.state = 1091
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,156,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1088
                            self.match(nimParser.T__0) 
                        self.state = 1093
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,156,self._ctx)

                    self.state = 1099
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,157,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1094
                            self.match(nimParser.T__0)
                            self.state = 1095
                            self.match(nimParser.INDENT)
                            self.state = 1096
                            self.stmt() 
                        self.state = 1101
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,157,self._ctx)

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1106
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
                if la_ == 1:
                    self.state = 1104
                    self.match(nimParser.RETURN)
                    self.state = 1105
                    self.rightHandSideStmt()


                self.state = 1109
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
                if la_ == 1:
                    self.state = 1108
                    self.match(nimParser.T__0)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1111
                self.match(nimParser.PROC)
                self.state = 1112
                self.match(nimParser.T__8)
                self.state = 1113
                self.match(nimParser.OPEN_PAREN)
                self.state = 1114
                self.match(nimParser.IDENTIFIER)
                self.state = 1115
                self.match(nimParser.COLON)
                self.state = 1116
                self.match(nimParser.PROC)
                self.state = 1117
                self.match(nimParser.OPEN_PAREN)
                self.state = 1118
                self.match(nimParser.IDENTIFIER)
                self.state = 1119
                self.match(nimParser.COLON)
                self.state = 1120
                self.dataType()
                self.state = 1121
                self.match(nimParser.CLOSE_PAREN)
                self.state = 1122
                self.match(nimParser.CLOSE_PAREN)
                self.state = 1125
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.COLON:
                    self.state = 1123
                    self.match(nimParser.COLON)
                    self.state = 1124
                    self.dataType()


                self.state = 1127
                self.match(nimParser.EQUALS_OPERATOR)
                self.state = 1128
                self.match(nimParser.T__0)
                self.state = 1132
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nimParser.INDENT:
                    self.state = 1129
                    self.match(nimParser.INDENT)
                    self.state = 1134
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1135
                self.constDec()
                self.state = 1136
                self.forLoop()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1138
                self.match(nimParser.PROC)
                self.state = 1139
                self.match(nimParser.IDENTIFIER)
                self.state = 1143
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.OPEN_BRACK:
                    self.state = 1140
                    self.match(nimParser.OPEN_BRACK)
                    self.state = 1141
                    self.match(nimParser.IDENTIFIER)
                    self.state = 1142
                    self.match(nimParser.CLOSE_BRACK)


                self.state = 1145
                self.match(nimParser.OPEN_PAREN)
                self.state = 1146
                self.match(nimParser.IDENTIFIER)
                self.state = 1147
                self.match(nimParser.COLON)
                self.state = 1148
                self.match(nimParser.VARIABLE)
                self.state = 1149
                self.match(nimParser.IDENTIFIER)
                self.state = 1150
                self.match(nimParser.OPEN_BRACK)
                self.state = 1151
                self.match(nimParser.IDENTIFIER)
                self.state = 1152
                self.match(nimParser.CLOSE_BRACK)
                self.state = 1170
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nimParser.COMMA:
                    self.state = 1153
                    self.match(nimParser.COMMA)
                    self.state = 1154
                    self.match(nimParser.IDENTIFIER)
                    self.state = 1155
                    self.match(nimParser.EQUALS_OPERATOR)
                    self.state = 1166
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [nimParser.DIGIT, nimParser.MINUS_OPERATOR]:
                        self.state = 1157
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==nimParser.MINUS_OPERATOR:
                            self.state = 1156
                            self.match(nimParser.MINUS_OPERATOR)


                        self.state = 1160 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 1159
                            self.match(nimParser.DIGIT)
                            self.state = 1162 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==nimParser.DIGIT):
                                break

                        pass
                    elif token in [nimParser.IDENTIFIER]:
                        self.state = 1164
                        self.match(nimParser.IDENTIFIER)
                        pass
                    elif token in [nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                        self.state = 1165
                        self.literal()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1172
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1173
                self.match(nimParser.CLOSE_PAREN)
                self.state = 1176
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.COLON:
                    self.state = 1174
                    self.match(nimParser.COLON)
                    self.state = 1175
                    self.dataType()


                self.state = 1178
                self.match(nimParser.EQUALS_OPERATOR)
                self.state = 1216
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.T__0]:
                    self.state = 1182 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 1179
                            self.match(nimParser.T__0)
                            self.state = 1180
                            self.match(nimParser.INDENT)
                            self.state = 1181
                            self.stmt()

                        else:
                            raise NoViableAltException(self)
                        self.state = 1184 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,169,self._ctx)

                    pass
                elif token in [nimParser.IDENTIFIER]:
                    self.state = 1186
                    self.assignStmt()
                    self.state = 1190
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,170,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1187
                            self.match(nimParser.T__0) 
                        self.state = 1192
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,170,self._ctx)

                    self.state = 1198
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,171,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1193
                            self.match(nimParser.T__0)
                            self.state = 1194
                            self.match(nimParser.INDENT)
                            self.state = 1195
                            self.stmt() 
                        self.state = 1200
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,171,self._ctx)

                    pass
                elif token in [nimParser.ECHO]:
                    self.state = 1201
                    self.printStmt()
                    self.state = 1205
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,172,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1202
                            self.match(nimParser.T__0) 
                        self.state = 1207
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,172,self._ctx)

                    self.state = 1213
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,173,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1208
                            self.match(nimParser.T__0)
                            self.state = 1209
                            self.match(nimParser.INDENT)
                            self.state = 1210
                            self.stmt() 
                        self.state = 1215
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,173,self._ctx)

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1220
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
                if la_ == 1:
                    self.state = 1218
                    self.match(nimParser.RETURN)
                    self.state = 1219
                    self.rightHandSideStmt()


                self.state = 1223
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
                if la_ == 1:
                    self.state = 1222
                    self.match(nimParser.T__0)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MACRO(self):
            return self.getToken(nimParser.MACRO, 0)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.IDENTIFIER)
            else:
                return self.getToken(nimParser.IDENTIFIER, i)

        def OPEN_PAREN(self):
            return self.getToken(nimParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(nimParser.CLOSE_PAREN, 0)

        def EQUALS_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.EQUALS_OPERATOR)
            else:
                return self.getToken(nimParser.EQUALS_OPERATOR, i)

        def OPEN_BRACK(self):
            return self.getToken(nimParser.OPEN_BRACK, 0)

        def CLOSE_BRACK(self):
            return self.getToken(nimParser.CLOSE_BRACK, 0)

        def RETURN(self):
            return self.getToken(nimParser.RETURN, 0)

        def rightHandSideStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.RightHandSideStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COLON)
            else:
                return self.getToken(nimParser.COLON, i)

        def SEMI_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.SEMI_COLON)
            else:
                return self.getToken(nimParser.SEMI_COLON, i)

        def assignStmt(self):
            return self.getTypedRuleContext(nimParser.AssignStmtContext,0)


        def printStmt(self):
            return self.getTypedRuleContext(nimParser.PrintStmtContext,0)


        def dataType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.DataTypeContext)
            else:
                return self.getTypedRuleContext(nimParser.DataTypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMA)
            else:
                return self.getToken(nimParser.COMMA, i)

        def COMMENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMENT)
            else:
                return self.getToken(nimParser.COMMENT, i)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def getRuleIndex(self):
            return nimParser.RULE_macroBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroBlock" ):
                listener.enterMacroBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroBlock" ):
                listener.exitMacroBlock(self)




    def macroBlock(self):

        localctx = nimParser.MacroBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_macroBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1227
            self.match(nimParser.MACRO)
            self.state = 1228
            self.match(nimParser.IDENTIFIER)
            self.state = 1232
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.OPEN_BRACK:
                self.state = 1229
                self.match(nimParser.OPEN_BRACK)
                self.state = 1230
                self.match(nimParser.IDENTIFIER)
                self.state = 1231
                self.match(nimParser.CLOSE_BRACK)


            self.state = 1234
            self.match(nimParser.OPEN_PAREN)
            self.state = 1251 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1235
                self.match(nimParser.IDENTIFIER)
                self.state = 1246
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.COLON, nimParser.SEMI_COLON]:
                    self.state = 1236
                    _la = self._input.LA(1)
                    if not(_la==nimParser.COLON or _la==nimParser.SEMI_COLON):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1239
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [nimParser.T__15, nimParser.T__16, nimParser.T__17, nimParser.OBJECT]:
                        self.state = 1237
                        self.dataType()
                        pass
                    elif token in [nimParser.T__9]:
                        self.state = 1238
                        self.match(nimParser.T__9)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1242
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==nimParser.SEMI_COLON:
                        self.state = 1241
                        self.match(nimParser.SEMI_COLON)


                    pass
                elif token in [nimParser.EQUALS_OPERATOR]:
                    self.state = 1244
                    self.match(nimParser.EQUALS_OPERATOR)
                    self.state = 1245
                    self.rightHandSideStmt()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1249
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.COMMA:
                    self.state = 1248
                    self.match(nimParser.COMMA)


                self.state = 1253 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==nimParser.IDENTIFIER):
                    break

            self.state = 1255
            self.match(nimParser.CLOSE_PAREN)
            self.state = 1261
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.COLON or _la==nimParser.SEMI_COLON:
                self.state = 1256
                _la = self._input.LA(1)
                if not(_la==nimParser.COLON or _la==nimParser.SEMI_COLON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1259
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.T__15, nimParser.T__16, nimParser.T__17, nimParser.OBJECT]:
                    self.state = 1257
                    self.dataType()
                    pass
                elif token in [nimParser.T__9]:
                    self.state = 1258
                    self.match(nimParser.T__9)
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 1263
            self.match(nimParser.EQUALS_OPERATOR)
            self.state = 1273
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,188,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1265
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==nimParser.COMMENT:
                        self.state = 1264
                        self.match(nimParser.COMMENT)


                    self.state = 1267
                    self.match(nimParser.T__0)
                    self.state = 1269
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,187,self._ctx)
                    if la_ == 1:
                        self.state = 1268
                        self.match(nimParser.INDENT)

             
                self.state = 1275
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,188,self._ctx)

            self.state = 1321
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,198,self._ctx)
            if la_ == 1:
                self.state = 1283 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1277
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,189,self._ctx)
                        if la_ == 1:
                            self.state = 1276
                            self.match(nimParser.T__0)


                        self.state = 1280
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==nimParser.INDENT:
                            self.state = 1279
                            self.match(nimParser.INDENT)


                        self.state = 1282
                        self.stmt()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1285 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,191,self._ctx)

                pass

            elif la_ == 2:
                self.state = 1287
                self.assignStmt()
                self.state = 1291
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,192,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1288
                        self.match(nimParser.T__0) 
                    self.state = 1293
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,192,self._ctx)

                self.state = 1303
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,195,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1295
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
                        if la_ == 1:
                            self.state = 1294
                            self.match(nimParser.T__0)


                        self.state = 1298
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==nimParser.INDENT:
                            self.state = 1297
                            self.match(nimParser.INDENT)


                        self.state = 1300
                        self.stmt() 
                    self.state = 1305
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,195,self._ctx)

                pass

            elif la_ == 3:
                self.state = 1306
                self.printStmt()
                self.state = 1310
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,196,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1307
                        self.match(nimParser.T__0) 
                    self.state = 1312
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,196,self._ctx)

                self.state = 1318
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,197,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1313
                        self.match(nimParser.T__0)
                        self.state = 1314
                        self.match(nimParser.INDENT)
                        self.state = 1315
                        self.stmt() 
                    self.state = 1320
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,197,self._ctx)

                pass


            self.state = 1325
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,199,self._ctx)
            if la_ == 1:
                self.state = 1323
                self.match(nimParser.RETURN)
                self.state = 1324
                self.rightHandSideStmt()


            self.state = 1328
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
            if la_ == 1:
                self.state = 1327
                self.match(nimParser.T__0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplateStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TEMPLATE(self):
            return self.getToken(nimParser.TEMPLATE, 0)

        def methodInvoke(self):
            return self.getTypedRuleContext(nimParser.MethodInvokeContext,0)


        def EQUALS_OPERATOR(self):
            return self.getToken(nimParser.EQUALS_OPERATOR, 0)

        def OPEN_BRACE(self):
            return self.getToken(nimParser.OPEN_BRACE, 0)

        def NEW_IDENTIFIER(self):
            return self.getToken(nimParser.NEW_IDENTIFIER, 0)

        def CLOSE_BRACE(self):
            return self.getToken(nimParser.CLOSE_BRACE, 0)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def getRuleIndex(self):
            return nimParser.RULE_templateStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateStmt" ):
                listener.enterTemplateStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateStmt" ):
                listener.exitTemplateStmt(self)




    def templateStmt(self):

        localctx = nimParser.TemplateStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_templateStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1330
            self.match(nimParser.TEMPLATE)
            self.state = 1331
            self.methodInvoke()
            self.state = 1335
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.OPEN_BRACE:
                self.state = 1332
                self.match(nimParser.OPEN_BRACE)
                self.state = 1333
                self.match(nimParser.NEW_IDENTIFIER)
                self.state = 1334
                self.match(nimParser.CLOSE_BRACE)


            self.state = 1337
            self.match(nimParser.EQUALS_OPERATOR)
            self.state = 1343 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1338
                    self.match(nimParser.T__0)
                    self.state = 1340
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==nimParser.INDENT:
                        self.state = 1339
                        self.match(nimParser.INDENT)


                    self.state = 1342
                    self.stmt()

                else:
                    raise NoViableAltException(self)
                self.state = 1345 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,203,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BLOCK(self):
            return self.getToken(nimParser.BLOCK, 0)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.IDENTIFIER)
            else:
                return self.getToken(nimParser.IDENTIFIER, i)

        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def OPEN_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.OPEN_PAREN)
            else:
                return self.getToken(nimParser.OPEN_PAREN, i)

        def CLOSE_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.CLOSE_PAREN)
            else:
                return self.getToken(nimParser.CLOSE_PAREN, i)

        def getRuleIndex(self):
            return nimParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = nimParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1347
            self.match(nimParser.BLOCK)
            self.state = 1348
            self.match(nimParser.IDENTIFIER)
            self.state = 1349
            self.match(nimParser.COLON)
            self.state = 1367 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1350
                    self.match(nimParser.T__0)
                    self.state = 1351
                    self.match(nimParser.INDENT)
                    self.state = 1365
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,205,self._ctx)
                    if la_ == 1:
                        self.state = 1352
                        self.stmt()
                        pass

                    elif la_ == 2:
                        self.state = 1353
                        self.match(nimParser.IDENTIFIER)
                        self.state = 1354
                        self.match(nimParser.T__0)
                        self.state = 1358
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==nimParser.INDENT:
                            self.state = 1355
                            self.match(nimParser.INDENT)
                            self.state = 1360
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1361
                        self.match(nimParser.T__4)
                        self.state = 1362
                        self.match(nimParser.OPEN_PAREN)
                        self.state = 1363
                        self.match(nimParser.IDENTIFIER)
                        self.state = 1364
                        self.match(nimParser.CLOSE_PAREN)
                        pass



                else:
                    raise NoViableAltException(self)
                self.state = 1369 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,206,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(nimParser.TYPE, 0)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.IDENTIFIER)
            else:
                return self.getToken(nimParser.IDENTIFIER, i)

        def EQUALS_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.EQUALS_OPERATOR)
            else:
                return self.getToken(nimParser.EQUALS_OPERATOR, i)

        def OPEN_BRACK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.OPEN_BRACK)
            else:
                return self.getToken(nimParser.OPEN_BRACK, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMA)
            else:
                return self.getToken(nimParser.COMMA, i)

        def dataType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.DataTypeContext)
            else:
                return self.getTypedRuleContext(nimParser.DataTypeContext,i)


        def CLOSE_BRACK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.CLOSE_BRACK)
            else:
                return self.getToken(nimParser.CLOSE_BRACK, i)

        def FORLOOP_RANGE(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.FORLOOP_RANGE)
            else:
                return self.getToken(nimParser.FORLOOP_RANGE, i)

        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.DIGIT)
            else:
                return self.getToken(nimParser.DIGIT, i)

        def caseStmt(self):
            return self.getTypedRuleContext(nimParser.CaseStmtContext,0)


        def REF(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.REF)
            else:
                return self.getToken(nimParser.REF, i)

        def getRuleIndex(self):
            return nimParser.RULE_typeBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeBlock" ):
                listener.enterTypeBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeBlock" ):
                listener.exitTypeBlock(self)




    def typeBlock(self):

        localctx = nimParser.TypeBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_typeBlock)
        self._la = 0 # Token type
        try:
            self.state = 1430
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,216,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1371
                self.match(nimParser.TYPE)
                self.state = 1372
                self.match(nimParser.T__0)
                self.state = 1391 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1373
                        self.match(nimParser.INDENT)
                        self.state = 1374
                        self.match(nimParser.IDENTIFIER)
                        self.state = 1375
                        self.match(nimParser.EQUALS_OPERATOR)
                        self.state = 1376
                        self.match(nimParser.T__10)
                        self.state = 1377
                        self.match(nimParser.OPEN_BRACK)
                        self.state = 1384
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [nimParser.FORLOOP_RANGE]:
                            self.state = 1378
                            self.match(nimParser.FORLOOP_RANGE)
                            pass
                        elif token in [nimParser.DIGIT]:
                            self.state = 1380 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 1379
                                self.match(nimParser.DIGIT)
                                self.state = 1382 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==nimParser.DIGIT):
                                    break

                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 1386
                        self.match(nimParser.COMMA)
                        self.state = 1387
                        self.dataType()
                        self.state = 1388
                        self.match(nimParser.CLOSE_BRACK)
                        self.state = 1389
                        self.match(nimParser.T__0)

                    else:
                        raise NoViableAltException(self)
                    self.state = 1393 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,209,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1395
                self.match(nimParser.TYPE)
                self.state = 1396
                self.match(nimParser.T__0)
                self.state = 1416 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1397
                        self.match(nimParser.INDENT)
                        self.state = 1398
                        self.match(nimParser.IDENTIFIER)
                        self.state = 1402
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==nimParser.OPEN_BRACK:
                            self.state = 1399
                            self.match(nimParser.OPEN_BRACK)
                            self.state = 1400
                            self.match(nimParser.IDENTIFIER)
                            self.state = 1401
                            self.match(nimParser.CLOSE_BRACK)


                        self.state = 1404
                        self.match(nimParser.EQUALS_OPERATOR)
                        self.state = 1406
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==nimParser.REF:
                            self.state = 1405
                            self.match(nimParser.REF)


                        self.state = 1413
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [nimParser.IDENTIFIER]:
                            self.state = 1408
                            self.match(nimParser.IDENTIFIER)
                            self.state = 1409
                            self.match(nimParser.OPEN_BRACK)
                            self.state = 1410
                            self.match(nimParser.IDENTIFIER)
                            self.state = 1411
                            self.match(nimParser.CLOSE_BRACK)
                            pass
                        elif token in [nimParser.T__15, nimParser.T__16, nimParser.T__17, nimParser.OBJECT]:
                            self.state = 1412
                            self.dataType()
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 1415
                        self.match(nimParser.T__0)

                    else:
                        raise NoViableAltException(self)
                    self.state = 1418 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,213,self._ctx)

                self.state = 1421
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.T__0:
                    self.state = 1420
                    self.match(nimParser.T__0)


                self.state = 1426
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nimParser.INDENT:
                    self.state = 1423
                    self.match(nimParser.INDENT)
                    self.state = 1428
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1429
                self.caseStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodInvokeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.IDENTIFIER)
            else:
                return self.getToken(nimParser.IDENTIFIER, i)

        def OPEN_PAREN(self):
            return self.getToken(nimParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(nimParser.CLOSE_PAREN, 0)

        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.LiteralContext)
            else:
                return self.getTypedRuleContext(nimParser.LiteralContext,i)


        def rightHandSideStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.RightHandSideStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,i)


        def OPEN_BRACK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.OPEN_BRACK)
            else:
                return self.getToken(nimParser.OPEN_BRACK, i)

        def dataType(self):
            return self.getTypedRuleContext(nimParser.DataTypeContext,0)


        def CLOSE_BRACK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.CLOSE_BRACK)
            else:
                return self.getToken(nimParser.CLOSE_BRACK, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMA)
            else:
                return self.getToken(nimParser.COMMA, i)

        def EQUALS_OPERATOR(self):
            return self.getToken(nimParser.EQUALS_OPERATOR, 0)

        def ADD_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.ADD_OPERATOR)
            else:
                return self.getToken(nimParser.ADD_OPERATOR, i)

        def MINUS_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.MINUS_OPERATOR)
            else:
                return self.getToken(nimParser.MINUS_OPERATOR, i)

        def MOD(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.MOD)
            else:
                return self.getToken(nimParser.MOD, i)

        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.DIGIT)
            else:
                return self.getToken(nimParser.DIGIT, i)

        def NEW_IDENTIFIER(self):
            return self.getToken(nimParser.NEW_IDENTIFIER, 0)

        def getRuleIndex(self):
            return nimParser.RULE_methodInvoke

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodInvoke" ):
                listener.enterMethodInvoke(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodInvoke" ):
                listener.exitMethodInvoke(self)




    def methodInvoke(self):

        localctx = nimParser.MethodInvokeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_methodInvoke)
        self._la = 0 # Token type
        try:
            self.state = 1529
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,233,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1432
                self.match(nimParser.IDENTIFIER)
                self.state = 1437
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.OPEN_BRACK:
                    self.state = 1433
                    self.match(nimParser.OPEN_BRACK)
                    self.state = 1434
                    self.dataType()
                    self.state = 1435
                    self.match(nimParser.CLOSE_BRACK)


                self.state = 1439
                self.match(nimParser.OPEN_PAREN)
                self.state = 1448
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,219,self._ctx)
                if la_ == 1:
                    self.state = 1440
                    self.match(nimParser.IDENTIFIER)
                    pass

                elif la_ == 2:
                    self.state = 1442 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 1441
                        self.match(nimParser.DIGIT)
                        self.state = 1444 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==nimParser.DIGIT):
                            break

                    pass

                elif la_ == 3:
                    self.state = 1446
                    self.literal()
                    pass

                elif la_ == 4:
                    self.state = 1447
                    self.rightHandSideStmt()
                    pass


                self.state = 1463
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,222,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1450
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.MOD) | (1 << nimParser.ADD_OPERATOR) | (1 << nimParser.MINUS_OPERATOR) | (1 << nimParser.COMMA))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1459
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,221,self._ctx)
                        if la_ == 1:
                            self.state = 1451
                            self.match(nimParser.IDENTIFIER)
                            pass

                        elif la_ == 2:
                            self.state = 1453 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 1452
                                self.match(nimParser.DIGIT)
                                self.state = 1455 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==nimParser.DIGIT):
                                    break

                            pass

                        elif la_ == 3:
                            self.state = 1457
                            self.literal()
                            pass

                        elif la_ == 4:
                            self.state = 1458
                            self.rightHandSideStmt()
                            pass

                 
                    self.state = 1465
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,222,self._ctx)

                self.state = 1470
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.COMMA:
                    self.state = 1466
                    self.match(nimParser.COMMA)
                    self.state = 1467
                    self.match(nimParser.IDENTIFIER)
                    self.state = 1468
                    self.match(nimParser.EQUALS_OPERATOR)
                    self.state = 1469
                    self.match(nimParser.T__6)


                self.state = 1472
                self.match(nimParser.CLOSE_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1473
                self.match(nimParser.OPEN_PAREN)
                self.state = 1481
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.IDENTIFIER]:
                    self.state = 1474
                    self.match(nimParser.IDENTIFIER)
                    pass
                elif token in [nimParser.DIGIT]:
                    self.state = 1476 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 1475
                        self.match(nimParser.DIGIT)
                        self.state = 1478 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==nimParser.DIGIT):
                            break

                    pass
                elif token in [nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                    self.state = 1480
                    self.literal()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1495
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.ADD_OPERATOR) | (1 << nimParser.MINUS_OPERATOR) | (1 << nimParser.COMMA))) != 0):
                    self.state = 1483
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.ADD_OPERATOR) | (1 << nimParser.MINUS_OPERATOR) | (1 << nimParser.COMMA))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1491
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [nimParser.IDENTIFIER]:
                        self.state = 1484
                        self.match(nimParser.IDENTIFIER)
                        pass
                    elif token in [nimParser.DIGIT]:
                        self.state = 1486 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 1485
                            self.match(nimParser.DIGIT)
                            self.state = 1488 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==nimParser.DIGIT):
                                break

                        pass
                    elif token in [nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                        self.state = 1490
                        self.literal()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1497
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1498
                self.match(nimParser.CLOSE_PAREN)
                self.state = 1499
                self.match(nimParser.NEW_IDENTIFIER)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1500
                self.match(nimParser.IDENTIFIER)
                self.state = 1501
                self.match(nimParser.IDENTIFIER)
                self.state = 1515
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,230,self._ctx)
                if la_ == 1:
                    self.state = 1502
                    self.match(nimParser.OPEN_BRACK)
                    self.state = 1503
                    self.match(nimParser.IDENTIFIER)
                    self.state = 1504
                    self.match(nimParser.CLOSE_BRACK)
                    self.state = 1512
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,229,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1505
                            self.match(nimParser.COMMA)
                            self.state = 1506
                            self.match(nimParser.IDENTIFIER)
                            self.state = 1507
                            self.match(nimParser.OPEN_BRACK)
                            self.state = 1508
                            self.match(nimParser.IDENTIFIER)
                            self.state = 1509
                            self.match(nimParser.CLOSE_BRACK) 
                        self.state = 1514
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,229,self._ctx)



                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1517
                self.match(nimParser.IDENTIFIER)
                self.state = 1522
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.OPEN_BRACK:
                    self.state = 1518
                    self.match(nimParser.OPEN_BRACK)
                    self.state = 1519
                    self.dataType()
                    self.state = 1520
                    self.match(nimParser.CLOSE_BRACK)


                self.state = 1524
                self.match(nimParser.OPEN_PAREN)
                self.state = 1526
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.NEW_IDENTIFIER:
                    self.state = 1525
                    self.match(nimParser.NEW_IDENTIFIER)


                self.state = 1528
                self.match(nimParser.CLOSE_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstanceMethodInvokeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW_IDENTIFIER(self):
            return self.getToken(nimParser.NEW_IDENTIFIER, 0)

        def rightHandSideStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.RightHandSideStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,i)


        def OPEN_PAREN(self):
            return self.getToken(nimParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(nimParser.CLOSE_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMA)
            else:
                return self.getToken(nimParser.COMMA, i)

        def MOD(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.MOD)
            else:
                return self.getToken(nimParser.MOD, i)

        def ADD_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.ADD_OPERATOR)
            else:
                return self.getToken(nimParser.ADD_OPERATOR, i)

        def getRuleIndex(self):
            return nimParser.RULE_instanceMethodInvoke

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstanceMethodInvoke" ):
                listener.enterInstanceMethodInvoke(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstanceMethodInvoke" ):
                listener.exitInstanceMethodInvoke(self)




    def instanceMethodInvoke(self):

        localctx = nimParser.InstanceMethodInvokeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_instanceMethodInvoke)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1531
            self.match(nimParser.NEW_IDENTIFIER)
            self.state = 1533
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,234,self._ctx)
            if la_ == 1:
                self.state = 1532
                self.match(nimParser.OPEN_PAREN)


            self.state = 1535
            self.rightHandSideStmt()
            self.state = 1540
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.MOD) | (1 << nimParser.ADD_OPERATOR) | (1 << nimParser.COMMA))) != 0):
                self.state = 1536
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.MOD) | (1 << nimParser.ADD_OPERATOR) | (1 << nimParser.COMMA))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1537
                self.rightHandSideStmt()
                self.state = 1542
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1544
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.CLOSE_PAREN:
                self.state = 1543
                self.match(nimParser.CLOSE_PAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForEachStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(nimParser.IDENTIFIER, 0)

        def CLOSE_PAREN(self):
            return self.getToken(nimParser.CLOSE_PAREN, 0)

        def OPEN_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.OPEN_PAREN)
            else:
                return self.getToken(nimParser.OPEN_PAREN, i)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def getRuleIndex(self):
            return nimParser.RULE_forEachStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForEachStmt" ):
                listener.enterForEachStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForEachStmt" ):
                listener.exitForEachStmt(self)




    def forEachStmt(self):

        localctx = nimParser.ForEachStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_forEachStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1547 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1546
                _la = self._input.LA(1)
                if not(_la==nimParser.T__8 or _la==nimParser.OPEN_PAREN):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1549 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==nimParser.T__8 or _la==nimParser.OPEN_PAREN):
                    break

            self.state = 1551
            self.match(nimParser.IDENTIFIER)
            self.state = 1552
            self.match(nimParser.CLOSE_PAREN)
            self.state = 1556
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,238,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1553
                    _la = self._input.LA(1)
                    if not(_la==nimParser.T__0 or _la==nimParser.INDENT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume() 
                self.state = 1558
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,238,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestedMethodInvokeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def methodInvoke(self):
            return self.getTypedRuleContext(nimParser.MethodInvokeContext,0)


        def IDENTIFIER(self):
            return self.getToken(nimParser.IDENTIFIER, 0)

        def OPEN_PAREN(self):
            return self.getToken(nimParser.OPEN_PAREN, 0)

        def nestedMethodInvoke(self):
            return self.getTypedRuleContext(nimParser.NestedMethodInvokeContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(nimParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return nimParser.RULE_nestedMethodInvoke

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedMethodInvoke" ):
                listener.enterNestedMethodInvoke(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedMethodInvoke" ):
                listener.exitNestedMethodInvoke(self)




    def nestedMethodInvoke(self):

        localctx = nimParser.NestedMethodInvokeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_nestedMethodInvoke)
        try:
            self.state = 1565
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,239,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1559
                self.methodInvoke()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1560
                self.match(nimParser.IDENTIFIER)
                self.state = 1561
                self.match(nimParser.OPEN_PAREN)
                self.state = 1562
                self.nestedMethodInvoke()
                self.state = 1563
                self.match(nimParser.CLOSE_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(nimParser.IMPORT, 0)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.IDENTIFIER)
            else:
                return self.getToken(nimParser.IDENTIFIER, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMA)
            else:
                return self.getToken(nimParser.COMMA, i)

        def FROM(self):
            return self.getToken(nimParser.FROM, 0)

        def getRuleIndex(self):
            return nimParser.RULE_importStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportStmt" ):
                listener.enterImportStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportStmt" ):
                listener.exitImportStmt(self)




    def importStmt(self):

        localctx = nimParser.ImportStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_importStmt)
        self._la = 0 # Token type
        try:
            self.state = 1591
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nimParser.IMPORT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1567
                self.match(nimParser.IMPORT)
                self.state = 1568
                self.match(nimParser.IDENTIFIER)
                self.state = 1573
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nimParser.COMMA:
                    self.state = 1569
                    self.match(nimParser.COMMA)
                    self.state = 1570
                    self.match(nimParser.IDENTIFIER)
                    self.state = 1575
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1578
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,241,self._ctx)
                if la_ == 1:
                    self.state = 1576
                    self.match(nimParser.FROM)
                    self.state = 1577
                    self.match(nimParser.IDENTIFIER)


                pass
            elif token in [nimParser.FROM]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1580
                self.match(nimParser.FROM)
                self.state = 1581
                self.match(nimParser.IDENTIFIER)
                self.state = 1582
                self.match(nimParser.IMPORT)
                self.state = 1583
                self.match(nimParser.IDENTIFIER)
                self.state = 1588
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nimParser.COMMA:
                    self.state = 1584
                    self.match(nimParser.COMMA)
                    self.state = 1585
                    self.match(nimParser.IDENTIFIER)
                    self.state = 1590
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleCondition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.SimpleConditionContext)
            else:
                return self.getTypedRuleContext(nimParser.SimpleConditionContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.AND)
            else:
                return self.getToken(nimParser.AND, i)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.OR)
            else:
                return self.getToken(nimParser.OR, i)

        def AND_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.AND_OPERATOR)
            else:
                return self.getToken(nimParser.AND_OPERATOR, i)

        def OR_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.OR_OPERATOR)
            else:
                return self.getToken(nimParser.OR_OPERATOR, i)

        def getRuleIndex(self):
            return nimParser.RULE_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition" ):
                listener.enterCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition" ):
                listener.exitCondition(self)




    def condition(self):

        localctx = nimParser.ConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_condition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1593
            self.simpleCondition()
            self.state = 1598
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.AND) | (1 << nimParser.OR) | (1 << nimParser.AND_OPERATOR) | (1 << nimParser.OR_OPERATOR))) != 0):
                self.state = 1594
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.AND) | (1 << nimParser.OR) | (1 << nimParser.AND_OPERATOR) | (1 << nimParser.OR_OPERATOR))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1595
                self.simpleCondition()
                self.state = 1600
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleConditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rightHandSideStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.RightHandSideStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,i)


        def LESS_THAN(self):
            return self.getToken(nimParser.LESS_THAN, 0)

        def GREATER_THAN(self):
            return self.getToken(nimParser.GREATER_THAN, 0)

        def EQUALS_EQUALS(self):
            return self.getToken(nimParser.EQUALS_EQUALS, 0)

        def EQUALS_OPERATOR(self):
            return self.getToken(nimParser.EQUALS_OPERATOR, 0)

        def IDENTIFIER(self):
            return self.getToken(nimParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return nimParser.RULE_simpleCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleCondition" ):
                listener.enterSimpleCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleCondition" ):
                listener.exitSimpleCondition(self)




    def simpleCondition(self):

        localctx = nimParser.SimpleConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_simpleCondition)
        self._la = 0 # Token type
        try:
            self.state = 1620
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,248,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1601
                self.rightHandSideStmt()
                self.state = 1613
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.LESS_THAN]:
                    self.state = 1602
                    self.match(nimParser.LESS_THAN)
                    self.state = 1604
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==nimParser.EQUALS_OPERATOR:
                        self.state = 1603
                        self.match(nimParser.EQUALS_OPERATOR)


                    pass
                elif token in [nimParser.T__11]:
                    self.state = 1606
                    self.match(nimParser.T__11)
                    pass
                elif token in [nimParser.T__12]:
                    self.state = 1607
                    self.match(nimParser.T__12)
                    pass
                elif token in [nimParser.GREATER_THAN]:
                    self.state = 1608
                    self.match(nimParser.GREATER_THAN)
                    self.state = 1610
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==nimParser.EQUALS_OPERATOR:
                        self.state = 1609
                        self.match(nimParser.EQUALS_OPERATOR)


                    pass
                elif token in [nimParser.EQUALS_EQUALS]:
                    self.state = 1612
                    self.match(nimParser.EQUALS_EQUALS)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1615
                self.rightHandSideStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1617
                self.match(nimParser.T__6)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1618
                self.match(nimParser.T__13)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1619
                self.match(nimParser.IDENTIFIER)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Character_literalsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_LIT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.CHAR_LIT)
            else:
                return self.getToken(nimParser.CHAR_LIT, i)

        def getRuleIndex(self):
            return nimParser.RULE_character_literals

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharacter_literals" ):
                listener.enterCharacter_literals(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharacter_literals" ):
                listener.exitCharacter_literals(self)




    def character_literals(self):

        localctx = nimParser.Character_literalsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_character_literals)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1623 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1622
                self.match(nimParser.CHAR_LIT)
                self.state = 1625 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==nimParser.CHAR_LIT):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class String_literalsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STR_LIT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.STR_LIT)
            else:
                return self.getToken(nimParser.STR_LIT, i)

        def getRuleIndex(self):
            return nimParser.RULE_string_literals

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_literals" ):
                listener.enterString_literals(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_literals" ):
                listener.exitString_literals(self)




    def string_literals(self):

        localctx = nimParser.String_literalsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_string_literals)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1628 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1627
                self.match(nimParser.STR_LIT)
                self.state = 1630 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==nimParser.STR_LIT):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RightHandSideStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STR_LIT(self):
            return self.getToken(nimParser.STR_LIT, 0)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.IDENTIFIER)
            else:
                return self.getToken(nimParser.IDENTIFIER, i)

        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.LiteralContext)
            else:
                return self.getTypedRuleContext(nimParser.LiteralContext,i)


        def ADD_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.ADD_OPERATOR)
            else:
                return self.getToken(nimParser.ADD_OPERATOR, i)

        def AND_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.AND_OPERATOR)
            else:
                return self.getToken(nimParser.AND_OPERATOR, i)

        def MINUS_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.MINUS_OPERATOR)
            else:
                return self.getToken(nimParser.MINUS_OPERATOR, i)

        def MOD(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.MOD)
            else:
                return self.getToken(nimParser.MOD, i)

        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.DIGIT)
            else:
                return self.getToken(nimParser.DIGIT, i)

        def OPEN_BRACK(self):
            return self.getToken(nimParser.OPEN_BRACK, 0)

        def CLOSE_BRACK(self):
            return self.getToken(nimParser.CLOSE_BRACK, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMA)
            else:
                return self.getToken(nimParser.COMMA, i)

        def MUL_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.MUL_OPERATOR)
            else:
                return self.getToken(nimParser.MUL_OPERATOR, i)

        def DIV(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.DIV)
            else:
                return self.getToken(nimParser.DIV, i)

        def methodInvoke(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.MethodInvokeContext)
            else:
                return self.getTypedRuleContext(nimParser.MethodInvokeContext,i)


        def OPEN_PAREN(self):
            return self.getToken(nimParser.OPEN_PAREN, 0)

        def rightHandSideStmt(self):
            return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(nimParser.CLOSE_PAREN, 0)

        def NEW_IDENTIFIER(self):
            return self.getToken(nimParser.NEW_IDENTIFIER, 0)

        def getRuleIndex(self):
            return nimParser.RULE_rightHandSideStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRightHandSideStmt" ):
                listener.enterRightHandSideStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRightHandSideStmt" ):
                listener.exitRightHandSideStmt(self)




    def rightHandSideStmt(self):

        localctx = nimParser.RightHandSideStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_rightHandSideStmt)
        self._la = 0 # Token type
        try:
            self.state = 1766
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,277,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1632
                self.match(nimParser.T__6)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1633
                self.match(nimParser.T__13)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1634
                self.match(nimParser.STR_LIT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1642
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.DIGIT]:
                    self.state = 1636 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 1635
                            self.match(nimParser.DIGIT)

                        else:
                            raise NoViableAltException(self)
                        self.state = 1638 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,251,self._ctx)

                    pass
                elif token in [nimParser.IDENTIFIER]:
                    self.state = 1640
                    self.match(nimParser.IDENTIFIER)
                    pass
                elif token in [nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                    self.state = 1641
                    self.literal()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1656
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,255,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1644
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.MOD) | (1 << nimParser.ADD_OPERATOR) | (1 << nimParser.MINUS_OPERATOR) | (1 << nimParser.AND_OPERATOR))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1652
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [nimParser.DIGIT]:
                            self.state = 1646 
                            self._errHandler.sync(self)
                            _alt = 1
                            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                if _alt == 1:
                                    self.state = 1645
                                    self.match(nimParser.DIGIT)

                                else:
                                    raise NoViableAltException(self)
                                self.state = 1648 
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,253,self._ctx)

                            pass
                        elif token in [nimParser.IDENTIFIER]:
                            self.state = 1650
                            self.match(nimParser.IDENTIFIER)
                            pass
                        elif token in [nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                            self.state = 1651
                            self.literal()
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 1658
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,255,self._ctx)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1659
                self.match(nimParser.IDENTIFIER)
                self.state = 1660
                self.match(nimParser.OPEN_BRACK)
                self.state = 1670
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.IDENTIFIER]:
                    self.state = 1661
                    self.match(nimParser.IDENTIFIER)
                    pass
                elif token in [nimParser.DIGIT, nimParser.MINUS_OPERATOR]:
                    self.state = 1663
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==nimParser.MINUS_OPERATOR:
                        self.state = 1662
                        self.match(nimParser.MINUS_OPERATOR)


                    self.state = 1666 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 1665
                        self.match(nimParser.DIGIT)
                        self.state = 1668 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==nimParser.DIGIT):
                            break

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1690
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.DIV) | (1 << nimParser.ADD_OPERATOR) | (1 << nimParser.MUL_OPERATOR) | (1 << nimParser.MINUS_OPERATOR) | (1 << nimParser.COMMA))) != 0):
                    self.state = 1672
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.DIV) | (1 << nimParser.ADD_OPERATOR) | (1 << nimParser.MUL_OPERATOR) | (1 << nimParser.MINUS_OPERATOR) | (1 << nimParser.COMMA))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1686
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,262,self._ctx)
                    if la_ == 1:
                        self.state = 1674
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==nimParser.MINUS_OPERATOR:
                            self.state = 1673
                            self.match(nimParser.MINUS_OPERATOR)


                        self.state = 1676
                        self.literal()
                        pass

                    elif la_ == 2:
                        self.state = 1678
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==nimParser.MINUS_OPERATOR:
                            self.state = 1677
                            self.match(nimParser.MINUS_OPERATOR)


                        self.state = 1681 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 1680
                            self.match(nimParser.DIGIT)
                            self.state = 1683 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==nimParser.DIGIT):
                                break

                        pass

                    elif la_ == 3:
                        self.state = 1685
                        self.match(nimParser.IDENTIFIER)
                        pass


                    self.state = 1692
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1693
                self.match(nimParser.CLOSE_BRACK)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1694
                self.methodInvoke()
                self.state = 1707
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,266,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1695
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.ADD_OPERATOR) | (1 << nimParser.MUL_OPERATOR) | (1 << nimParser.MINUS_OPERATOR))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1703
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [nimParser.OPEN_PAREN, nimParser.IDENTIFIER]:
                            self.state = 1696
                            self.methodInvoke()
                            pass
                        elif token in [nimParser.DIGIT]:
                            self.state = 1698 
                            self._errHandler.sync(self)
                            _alt = 1
                            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                if _alt == 1:
                                    self.state = 1697
                                    self.match(nimParser.DIGIT)

                                else:
                                    raise NoViableAltException(self)
                                self.state = 1700 
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,264,self._ctx)

                            pass
                        elif token in [nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                            self.state = 1702
                            self.literal()
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 1709
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,266,self._ctx)

                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1710
                self.literal()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1711
                self.match(nimParser.OPEN_BRACK)
                self.state = 1742
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nimParser.DIGIT or _la==nimParser.MINUS_OPERATOR or ((((_la - 91)) & ~0x3f) == 0 and ((1 << (_la - 91)) & ((1 << (nimParser.NIL - 91)) | (1 << (nimParser.TRIPLESTR_LIT - 91)) | (1 << (nimParser.CHAR_LIT - 91)) | (1 << (nimParser.STR_LIT - 91)) | (1 << (nimParser.RSTR_LIT - 91)) | (1 << (nimParser.INT_LIT - 91)) | (1 << (nimParser.INT8_LIT - 91)) | (1 << (nimParser.INT16_LIT - 91)) | (1 << (nimParser.INT32_LIT - 91)) | (1 << (nimParser.INT64_LIT - 91)) | (1 << (nimParser.UINT_LIT - 91)) | (1 << (nimParser.UINT8_LIT - 91)) | (1 << (nimParser.UINT16_LIT - 91)) | (1 << (nimParser.UINT32_LIT - 91)) | (1 << (nimParser.UINT64_LIT - 91)) | (1 << (nimParser.FLOAT_LIT - 91)) | (1 << (nimParser.FLOAT32_LIT - 91)) | (1 << (nimParser.FLOAT64_LIT - 91)))) != 0):
                    self.state = 1721
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [nimParser.MINUS_OPERATOR, nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                        self.state = 1713
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==nimParser.MINUS_OPERATOR:
                            self.state = 1712
                            self.match(nimParser.MINUS_OPERATOR)


                        self.state = 1715
                        self.literal()
                        pass
                    elif token in [nimParser.DIGIT]:
                        self.state = 1717 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 1716
                                self.match(nimParser.DIGIT)

                            else:
                                raise NoViableAltException(self)
                            self.state = 1719 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,268,self._ctx)

                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1737
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==nimParser.COMMA:
                        self.state = 1723
                        self.match(nimParser.COMMA)
                        self.state = 1733
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [nimParser.MINUS_OPERATOR, nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                            self.state = 1725
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==nimParser.MINUS_OPERATOR:
                                self.state = 1724
                                self.match(nimParser.MINUS_OPERATOR)


                            self.state = 1727
                            self.literal()
                            pass
                        elif token in [nimParser.DIGIT]:
                            self.state = 1729 
                            self._errHandler.sync(self)
                            _alt = 1
                            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                if _alt == 1:
                                    self.state = 1728
                                    self.match(nimParser.DIGIT)

                                else:
                                    raise NoViableAltException(self)
                                self.state = 1731 
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,271,self._ctx)

                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 1739
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1744
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1745
                self.match(nimParser.CLOSE_BRACK)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1746
                self.match(nimParser.OPEN_PAREN)
                self.state = 1747
                self.rightHandSideStmt()
                self.state = 1755
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nimParser.ADD_OPERATOR or _la==nimParser.MINUS_OPERATOR:
                    self.state = 1748
                    _la = self._input.LA(1)
                    if not(_la==nimParser.ADD_OPERATOR or _la==nimParser.MINUS_OPERATOR):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1751
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                        self.state = 1749
                        self.literal()
                        pass
                    elif token in [nimParser.IDENTIFIER]:
                        self.state = 1750
                        self.match(nimParser.IDENTIFIER)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1757
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1758
                self.match(nimParser.CLOSE_PAREN)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1760
                self.match(nimParser.IDENTIFIER)
                self.state = 1761
                self.match(nimParser.OPEN_BRACK)
                self.state = 1762
                self.rightHandSideStmt()
                self.state = 1763
                self.match(nimParser.CLOSE_BRACK)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1765
                self.match(nimParser.NEW_IDENTIFIER)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexRightHandSideContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return nimParser.RULE_complexRightHandSide

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplexRightHandSide" ):
                listener.enterComplexRightHandSide(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplexRightHandSide" ):
                listener.exitComplexRightHandSide(self)




    def complexRightHandSide(self):

        localctx = nimParser.ComplexRightHandSideContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_complexRightHandSide)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1768
            self.match(nimParser.T__14)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT(self):
            return self.getToken(nimParser.OBJECT, 0)

        def getRuleIndex(self):
            return nimParser.RULE_dataType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataType" ):
                listener.enterDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataType" ):
                listener.exitDataType(self)




    def dataType(self):

        localctx = nimParser.DataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_dataType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1770
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.T__15) | (1 << nimParser.T__16) | (1 << nimParser.T__17))) != 0) or _la==nimParser.OBJECT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleCaseStmt(self):
            return self.getTypedRuleContext(nimParser.SimpleCaseStmtContext,0)


        def simpleElseStmt(self):
            return self.getTypedRuleContext(nimParser.SimpleElseStmtContext,0)


        def simpleOfStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.SimpleOfStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.SimpleOfStmtContext,i)


        def simpleElifOfStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.SimpleElifOfStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.SimpleElifOfStmtContext,i)


        def getRuleIndex(self):
            return nimParser.RULE_caseStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseStmt" ):
                listener.enterCaseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseStmt" ):
                listener.exitCaseStmt(self)




    def caseStmt(self):

        localctx = nimParser.CaseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_caseStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1772
            self.simpleCaseStmt()
            self.state = 1776
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,278,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1773
                    self.simpleOfStmt() 
                self.state = 1778
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,278,self._ctx)

            self.state = 1782
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==nimParser.ELIF:
                self.state = 1779
                self.simpleElifOfStmt()
                self.state = 1784
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1785
            self.simpleElseStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleOfStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OF(self):
            return self.getToken(nimParser.OF, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COLON)
            else:
                return self.getToken(nimParser.COLON, i)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.IDENTIFIER)
            else:
                return self.getToken(nimParser.IDENTIFIER, i)

        def STR_LIT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.STR_LIT)
            else:
                return self.getToken(nimParser.STR_LIT, i)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def rightHandSideStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.RightHandSideStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMA)
            else:
                return self.getToken(nimParser.COMMA, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def RETURN(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.RETURN)
            else:
                return self.getToken(nimParser.RETURN, i)

        def getRuleIndex(self):
            return nimParser.RULE_simpleOfStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleOfStmt" ):
                listener.enterSimpleOfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleOfStmt" ):
                listener.exitSimpleOfStmt(self)




    def simpleOfStmt(self):

        localctx = nimParser.SimpleOfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_simpleOfStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1788
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.INDENT:
                self.state = 1787
                self.match(nimParser.INDENT)


            self.state = 1790
            self.match(nimParser.OF)
            self.state = 1794
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,281,self._ctx)
            if la_ == 1:
                self.state = 1791
                self.rightHandSideStmt()
                self.state = 1792
                self.match(nimParser.COLON)


            self.state = 1796
            _la = self._input.LA(1)
            if not(_la==nimParser.STR_LIT or _la==nimParser.IDENTIFIER):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1801
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==nimParser.COMMA:
                self.state = 1797
                self.match(nimParser.COMMA)
                self.state = 1798
                _la = self._input.LA(1)
                if not(_la==nimParser.STR_LIT or _la==nimParser.IDENTIFIER):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1803
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1804
            self.match(nimParser.COLON)
            self.state = 1819 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1807
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,283,self._ctx)
                if la_ == 1:
                    self.state = 1805
                    self.match(nimParser.T__0)
                    self.state = 1806
                    self.match(nimParser.INDENT)


                self.state = 1814
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,285,self._ctx)
                if la_ == 1:
                    self.state = 1809
                    self.stmt()
                    pass

                elif la_ == 2:
                    self.state = 1811
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==nimParser.RETURN:
                        self.state = 1810
                        self.match(nimParser.RETURN)


                    self.state = 1813
                    self.rightHandSideStmt()
                    pass


                self.state = 1817
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,286,self._ctx)
                if la_ == 1:
                    self.state = 1816
                    self.match(nimParser.T__0)


                self.state = 1821 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.T__0) | (1 << nimParser.T__3) | (1 << nimParser.T__6) | (1 << nimParser.T__8) | (1 << nimParser.T__13) | (1 << nimParser.DIGIT) | (1 << nimParser.VARIABLE) | (1 << nimParser.ECHO) | (1 << nimParser.BLOCK) | (1 << nimParser.CASE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (nimParser.CONST - 64)) | (1 << (nimParser.FOR - 64)) | (1 << (nimParser.FROM - 64)) | (1 << (nimParser.IF - 64)) | (1 << (nimParser.IMPORT - 64)) | (1 << (nimParser.LET - 64)) | (1 << (nimParser.MACRO - 64)) | (1 << (nimParser.NIL - 64)) | (1 << (nimParser.PROC - 64)) | (1 << (nimParser.RETURN - 64)) | (1 << (nimParser.TEMPLATE - 64)) | (1 << (nimParser.TYPE - 64)) | (1 << (nimParser.WHEN - 64)) | (1 << (nimParser.WHILE - 64)) | (1 << (nimParser.OPEN_PAREN - 64)) | (1 << (nimParser.OPEN_BRACK - 64)) | (1 << (nimParser.TRIPLESTR_LIT - 64)) | (1 << (nimParser.CHAR_LIT - 64)) | (1 << (nimParser.STR_LIT - 64)) | (1 << (nimParser.RSTR_LIT - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (nimParser.IDENTIFIER - 128)) | (1 << (nimParser.INT_LIT - 128)) | (1 << (nimParser.INT8_LIT - 128)) | (1 << (nimParser.INT16_LIT - 128)) | (1 << (nimParser.INT32_LIT - 128)) | (1 << (nimParser.INT64_LIT - 128)) | (1 << (nimParser.UINT_LIT - 128)) | (1 << (nimParser.UINT8_LIT - 128)) | (1 << (nimParser.UINT16_LIT - 128)) | (1 << (nimParser.UINT32_LIT - 128)) | (1 << (nimParser.UINT64_LIT - 128)) | (1 << (nimParser.FLOAT_LIT - 128)) | (1 << (nimParser.FLOAT32_LIT - 128)) | (1 << (nimParser.FLOAT64_LIT - 128)) | (1 << (nimParser.NEW_IDENTIFIER - 128)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleElifOfStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELIF(self):
            return self.getToken(nimParser.ELIF, 0)

        def rightHandSideStmt(self):
            return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,0)


        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def COMMENT(self):
            return self.getToken(nimParser.COMMENT, 0)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def getRuleIndex(self):
            return nimParser.RULE_simpleElifOfStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleElifOfStmt" ):
                listener.enterSimpleElifOfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleElifOfStmt" ):
                listener.exitSimpleElifOfStmt(self)




    def simpleElifOfStmt(self):

        localctx = nimParser.SimpleElifOfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_simpleElifOfStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1823
            self.match(nimParser.ELIF)
            self.state = 1824
            self.rightHandSideStmt()
            self.state = 1825
            self.match(nimParser.COLON)
            self.state = 1827
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.COMMENT:
                self.state = 1826
                self.match(nimParser.COMMENT)


            self.state = 1834 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1829
                self.match(nimParser.T__0)
                self.state = 1831
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.INDENT:
                    self.state = 1830
                    self.match(nimParser.INDENT)


                self.state = 1833
                self.stmt()
                self.state = 1836 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==nimParser.T__0):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleCaseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(nimParser.CASE, 0)

        def IDENTIFIER(self):
            return self.getToken(nimParser.IDENTIFIER, 0)

        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def dataType(self):
            return self.getTypedRuleContext(nimParser.DataTypeContext,0)


        def COMMENT(self):
            return self.getToken(nimParser.COMMENT, 0)

        def getRuleIndex(self):
            return nimParser.RULE_simpleCaseStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleCaseStmt" ):
                listener.enterSimpleCaseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleCaseStmt" ):
                listener.exitSimpleCaseStmt(self)




    def simpleCaseStmt(self):

        localctx = nimParser.SimpleCaseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_simpleCaseStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1838
            self.match(nimParser.CASE)
            self.state = 1852
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,294,self._ctx)
            if la_ == 1:
                self.state = 1839
                self.match(nimParser.IDENTIFIER)
                self.state = 1841
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.COMMENT:
                    self.state = 1840
                    self.match(nimParser.COMMENT)


                self.state = 1844
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.T__0:
                    self.state = 1843
                    self.match(nimParser.T__0)


                pass

            elif la_ == 2:
                self.state = 1846
                self.match(nimParser.IDENTIFIER)
                self.state = 1847
                self.match(nimParser.COLON)
                self.state = 1848
                self.dataType()
                self.state = 1850
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.T__0:
                    self.state = 1849
                    self.match(nimParser.T__0)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmptyStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return nimParser.RULE_emptyStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptyStmt" ):
                listener.enterEmptyStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptyStmt" ):
                listener.exitEmptyStmt(self)




    def emptyStmt(self):

        localctx = nimParser.EmptyStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_emptyStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1854
            self.match(nimParser.T__0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommentStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(nimParser.COMMENT, 0)

        def INDENT(self):
            return self.getToken(nimParser.INDENT, 0)

        def getRuleIndex(self):
            return nimParser.RULE_commentStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommentStmt" ):
                listener.enterCommentStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommentStmt" ):
                listener.exitCommentStmt(self)




    def commentStmt(self):

        localctx = nimParser.CommentStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_commentStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1857
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.INDENT:
                self.state = 1856
                self.match(nimParser.INDENT)


            self.state = 1859
            self.match(nimParser.COMMENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUALS_OPERATOR(self):
            return self.getToken(nimParser.EQUALS_OPERATOR, 0)

        def ADD_OPERATOR(self):
            return self.getToken(nimParser.ADD_OPERATOR, 0)

        def MUL_OPERATOR(self):
            return self.getToken(nimParser.MUL_OPERATOR, 0)

        def MINUS_OPERATOR(self):
            return self.getToken(nimParser.MINUS_OPERATOR, 0)

        def DIV_OPERATOR(self):
            return self.getToken(nimParser.DIV_OPERATOR, 0)

        def BITWISE_NOT_OPERATOR(self):
            return self.getToken(nimParser.BITWISE_NOT_OPERATOR, 0)

        def AND_OPERATOR(self):
            return self.getToken(nimParser.AND_OPERATOR, 0)

        def OR_OPERATOR(self):
            return self.getToken(nimParser.OR_OPERATOR, 0)

        def LESS_THAN(self):
            return self.getToken(nimParser.LESS_THAN, 0)

        def GREATER_THAN(self):
            return self.getToken(nimParser.GREATER_THAN, 0)

        def NOT_OPERATOR(self):
            return self.getToken(nimParser.NOT_OPERATOR, 0)

        def XOR_OPERATOR(self):
            return self.getToken(nimParser.XOR_OPERATOR, 0)

        def getRuleIndex(self):
            return nimParser.RULE_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator" ):
                listener.enterOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator" ):
                listener.exitOperator(self)




    def operator(self):

        localctx = nimParser.OperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1861
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.EQUALS_OPERATOR) | (1 << nimParser.ADD_OPERATOR) | (1 << nimParser.MUL_OPERATOR) | (1 << nimParser.MINUS_OPERATOR) | (1 << nimParser.DIV_OPERATOR) | (1 << nimParser.BITWISE_NOT_OPERATOR) | (1 << nimParser.AND_OPERATOR) | (1 << nimParser.OR_OPERATOR) | (1 << nimParser.LESS_THAN) | (1 << nimParser.GREATER_THAN) | (1 << nimParser.NOT_OPERATOR) | (1 << nimParser.XOR_OPERATOR))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_LIT(self):
            return self.getToken(nimParser.INT_LIT, 0)

        def INT8_LIT(self):
            return self.getToken(nimParser.INT8_LIT, 0)

        def INT16_LIT(self):
            return self.getToken(nimParser.INT16_LIT, 0)

        def INT32_LIT(self):
            return self.getToken(nimParser.INT32_LIT, 0)

        def INT64_LIT(self):
            return self.getToken(nimParser.INT64_LIT, 0)

        def UINT_LIT(self):
            return self.getToken(nimParser.UINT_LIT, 0)

        def UINT8_LIT(self):
            return self.getToken(nimParser.UINT8_LIT, 0)

        def UINT16_LIT(self):
            return self.getToken(nimParser.UINT16_LIT, 0)

        def UINT32_LIT(self):
            return self.getToken(nimParser.UINT32_LIT, 0)

        def UINT64_LIT(self):
            return self.getToken(nimParser.UINT64_LIT, 0)

        def FLOAT_LIT(self):
            return self.getToken(nimParser.FLOAT_LIT, 0)

        def FLOAT32_LIT(self):
            return self.getToken(nimParser.FLOAT32_LIT, 0)

        def FLOAT64_LIT(self):
            return self.getToken(nimParser.FLOAT64_LIT, 0)

        def STR_LIT(self):
            return self.getToken(nimParser.STR_LIT, 0)

        def RSTR_LIT(self):
            return self.getToken(nimParser.RSTR_LIT, 0)

        def TRIPLESTR_LIT(self):
            return self.getToken(nimParser.TRIPLESTR_LIT, 0)

        def CHAR_LIT(self):
            return self.getToken(nimParser.CHAR_LIT, 0)

        def NIL(self):
            return self.getToken(nimParser.NIL, 0)

        def getRuleIndex(self):
            return nimParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = nimParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1863
            _la = self._input.LA(1)
            if not(((((_la - 91)) & ~0x3f) == 0 and ((1 << (_la - 91)) & ((1 << (nimParser.NIL - 91)) | (1 << (nimParser.TRIPLESTR_LIT - 91)) | (1 << (nimParser.CHAR_LIT - 91)) | (1 << (nimParser.STR_LIT - 91)) | (1 << (nimParser.RSTR_LIT - 91)) | (1 << (nimParser.INT_LIT - 91)) | (1 << (nimParser.INT8_LIT - 91)) | (1 << (nimParser.INT16_LIT - 91)) | (1 << (nimParser.INT32_LIT - 91)) | (1 << (nimParser.INT64_LIT - 91)) | (1 << (nimParser.UINT_LIT - 91)) | (1 << (nimParser.UINT8_LIT - 91)) | (1 << (nimParser.UINT16_LIT - 91)) | (1 << (nimParser.UINT32_LIT - 91)) | (1 << (nimParser.UINT64_LIT - 91)) | (1 << (nimParser.FLOAT_LIT - 91)) | (1 << (nimParser.FLOAT32_LIT - 91)) | (1 << (nimParser.FLOAT64_LIT - 91)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx






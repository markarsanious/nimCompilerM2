# Generated from nim.g4 by ANTLR 4.7.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u009c")
        buf.write("\u0692\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\3\2\3\2\7\2[\n")
        buf.write("\2\f\2\16\2^\13\2\7\2`\n\2\f\2\16\2c\13\2\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\5\3z\n\3\3\4\3\4\3\4\5\4\177\n\4\3")
        buf.write("\4\3\4\3\4\7\4\u0084\n\4\f\4\16\4\u0087\13\4\3\4\3\4\3")
        buf.write("\4\5\4\u008c\n\4\3\4\7\4\u008f\n\4\f\4\16\4\u0092\13\4")
        buf.write("\3\4\3\4\5\4\u0096\n\4\3\4\3\4\7\4\u009a\n\4\f\4\16\4")
        buf.write("\u009d\13\4\3\4\7\4\u00a0\n\4\f\4\16\4\u00a3\13\4\3\4")
        buf.write("\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\5\4\u00ae\n\4\3\4\6\4")
        buf.write("\u00b1\n\4\r\4\16\4\u00b2\3\4\5\4\u00b6\n\4\3\4\3\4\5")
        buf.write("\4\u00ba\n\4\3\4\6\4\u00bd\n\4\r\4\16\4\u00be\3\4\5\4")
        buf.write("\u00c2\n\4\7\4\u00c4\n\4\f\4\16\4\u00c7\13\4\3\4\6\4\u00ca")
        buf.write("\n\4\r\4\16\4\u00cb\3\5\3\5\3\5\5\5\u00d1\n\5\3\5\3\5")
        buf.write("\5\5\u00d5\n\5\3\5\3\5\5\5\u00d9\n\5\6\5\u00db\n\5\r\5")
        buf.write("\16\5\u00dc\3\6\3\6\3\6\5\6\u00e2\n\6\3\6\3\6\5\6\u00e6")
        buf.write("\n\6\3\6\3\6\5\6\u00ea\n\6\6\6\u00ec\n\6\r\6\16\6\u00ed")
        buf.write("\3\7\3\7\3\7\5\7\u00f3\n\7\3\7\3\7\5\7\u00f7\n\7\3\7\5")
        buf.write("\7\u00fa\n\7\3\7\7\7\u00fd\n\7\f\7\16\7\u0100\13\7\3\7")
        buf.write("\5\7\u0103\n\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u010b\n\7\3")
        buf.write("\b\3\b\3\b\3\b\3\b\7\b\u0112\n\b\f\b\16\b\u0115\13\b\3")
        buf.write("\b\3\b\3\b\3\b\3\b\3\b\7\b\u011d\n\b\f\b\16\b\u0120\13")
        buf.write("\b\3\b\3\b\5\b\u0124\n\b\3\t\3\t\3\t\3\t\3\t\3\n\3\n\5")
        buf.write("\n\u012d\n\n\3\n\7\n\u0130\n\n\f\n\16\n\u0133\13\n\3\n")
        buf.write("\5\n\u0136\n\n\3\n\3\n\5\n\u013a\n\n\3\13\3\13\7\13\u013e")
        buf.write("\n\13\f\13\16\13\u0141\13\13\3\13\5\13\u0144\n\13\3\f")
        buf.write("\3\f\5\f\u0148\n\f\3\f\3\f\3\f\3\f\3\f\3\f\5\f\u0150\n")
        buf.write("\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\5\f")
        buf.write("\u015e\n\f\6\f\u0160\n\f\r\f\16\f\u0161\3\f\3\f\5\f\u0166")
        buf.write("\n\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\6\f\u0170\n\f\r\f")
        buf.write("\16\f\u0171\3\f\6\f\u0175\n\f\r\f\16\f\u0176\6\f\u0179")
        buf.write("\n\f\r\f\16\f\u017a\3\f\3\f\5\f\u017f\n\f\3\f\3\f\3\f")
        buf.write("\3\f\7\f\u0185\n\f\f\f\16\f\u0188\13\f\3\f\3\f\3\f\7\f")
        buf.write("\u018d\n\f\f\f\16\f\u0190\13\f\3\f\3\f\3\f\3\f\3\f\7\f")
        buf.write("\u0197\n\f\f\f\16\f\u019a\13\f\3\f\3\f\3\f\7\f\u019f\n")
        buf.write("\f\f\f\16\f\u01a2\13\f\3\f\3\f\3\f\6\f\u01a7\n\f\r\f\16")
        buf.write("\f\u01a8\3\f\6\f\u01ac\n\f\r\f\16\f\u01ad\6\f\u01b0\n")
        buf.write("\f\r\f\16\f\u01b1\3\f\3\f\5\f\u01b6\n\f\3\f\3\f\3\f\3")
        buf.write("\f\3\f\3\f\5\f\u01be\n\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3")
        buf.write("\f\3\f\7\f\u01c9\n\f\f\f\16\f\u01cc\13\f\6\f\u01ce\n\f")
        buf.write("\r\f\16\f\u01cf\3\f\3\f\5\f\u01d4\n\f\3\f\3\f\3\f\3\f")
        buf.write("\3\f\3\f\3\f\5\f\u01dd\n\f\3\r\3\r\5\r\u01e1\n\r\3\r\3")
        buf.write("\r\3\r\3\r\3\r\3\r\5\r\u01e9\n\r\3\r\3\r\3\r\3\r\3\r\3")
        buf.write("\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u01f7\n\r\6\r\u01f9\n\r")
        buf.write("\r\r\16\r\u01fa\3\r\3\r\5\r\u01ff\n\r\3\r\3\r\3\r\3\r")
        buf.write("\3\r\3\r\3\r\3\r\6\r\u0209\n\r\r\r\16\r\u020a\3\r\6\r")
        buf.write("\u020e\n\r\r\r\16\r\u020f\6\r\u0212\n\r\r\r\16\r\u0213")
        buf.write("\3\r\3\r\5\r\u0218\n\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u0220")
        buf.write("\n\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\7\r\u022b\n\r")
        buf.write("\f\r\16\r\u022e\13\r\6\r\u0230\n\r\r\r\16\r\u0231\3\r")
        buf.write("\3\r\5\r\u0236\n\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u023f")
        buf.write("\n\r\3\16\3\16\5\16\u0243\n\16\3\16\3\16\3\16\3\16\5\16")
        buf.write("\u0249\n\16\3\17\3\17\5\17\u024d\n\17\3\17\3\17\3\17\3")
        buf.write("\17\5\17\u0253\n\17\3\20\5\20\u0256\n\20\3\20\3\20\3\20")
        buf.write("\3\20\5\20\u025c\n\20\3\21\5\21\u025f\n\21\3\21\3\21\3")
        buf.write("\21\3\21\3\21\3\21\5\21\u0267\n\21\6\21\u0269\n\21\r\21")
        buf.write("\16\21\u026a\3\21\3\21\6\21\u026f\n\21\r\21\16\21\u0270")
        buf.write("\3\21\7\21\u0274\n\21\f\21\16\21\u0277\13\21\3\21\5\21")
        buf.write("\u027a\n\21\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\5")
        buf.write("\22\u0284\n\22\3\22\3\22\3\22\6\22\u0289\n\22\r\22\16")
        buf.write("\22\u028a\3\22\7\22\u028e\n\22\f\22\16\22\u0291\13\22")
        buf.write("\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\5\22\u029c")
        buf.write("\n\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\7\22")
        buf.write("\u02a7\n\22\f\22\16\22\u02aa\13\22\3\22\3\22\3\22\3\22")
        buf.write("\3\22\5\22\u02b1\n\22\3\22\3\22\5\22\u02b5\n\22\3\22\3")
        buf.write("\22\3\22\6\22\u02ba\n\22\r\22\16\22\u02bb\3\22\7\22\u02bf")
        buf.write("\n\22\f\22\16\22\u02c2\13\22\3\22\3\22\3\22\3\22\6\22")
        buf.write("\u02c8\n\22\r\22\16\22\u02c9\3\22\3\22\3\22\3\22\3\22")
        buf.write("\5\22\u02d1\n\22\3\22\3\22\3\22\6\22\u02d6\n\22\r\22\16")
        buf.write("\22\u02d7\3\22\7\22\u02db\n\22\f\22\16\22\u02de\13\22")
        buf.write("\3\22\3\22\3\22\3\22\7\22\u02e4\n\22\f\22\16\22\u02e7")
        buf.write("\13\22\3\22\3\22\3\22\3\22\3\22\6\22\u02ee\n\22\r\22\16")
        buf.write("\22\u02ef\5\22\u02f2\n\22\3\22\3\22\3\22\6\22\u02f7\n")
        buf.write("\22\r\22\16\22\u02f8\5\22\u02fb\n\22\7\22\u02fd\n\22\f")
        buf.write("\22\16\22\u0300\13\22\7\22\u0302\n\22\f\22\16\22\u0305")
        buf.write("\13\22\3\22\3\22\3\22\5\22\u030a\n\22\3\22\3\22\3\22\6")
        buf.write("\22\u030f\n\22\r\22\16\22\u0310\3\22\7\22\u0314\n\22\f")
        buf.write("\22\16\22\u0317\13\22\3\22\3\22\3\22\3\22\3\22\3\22\3")
        buf.write("\22\3\22\3\22\5\22\u0322\n\22\3\22\3\22\3\22\6\22\u0327")
        buf.write("\n\22\r\22\16\22\u0328\3\22\7\22\u032c\n\22\f\22\16\22")
        buf.write("\u032f\13\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3")
        buf.write("\22\5\22\u033a\n\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22")
        buf.write("\3\22\5\22\u0344\n\22\3\22\3\22\3\22\3\22\6\22\u034a\n")
        buf.write("\22\r\22\16\22\u034b\3\22\5\22\u034f\n\22\5\22\u0351\n")
        buf.write("\22\3\23\3\23\3\23\5\23\u0356\n\23\3\23\3\23\3\23\3\23")
        buf.write("\3\23\3\23\5\23\u035e\n\23\5\23\u0360\n\23\6\23\u0362")
        buf.write("\n\23\r\23\16\23\u0363\3\24\3\24\7\24\u0368\n\24\f\24")
        buf.write("\16\24\u036b\13\24\3\24\3\24\3\25\3\25\3\25\3\25\3\25")
        buf.write("\5\25\u0374\n\25\3\25\3\25\5\25\u0378\n\25\6\25\u037a")
        buf.write("\n\25\r\25\16\25\u037b\3\26\3\26\3\26\3\26\3\26\5\26\u0383")
        buf.write("\n\26\3\26\3\26\3\26\3\26\3\26\3\26\5\26\u038b\n\26\3")
        buf.write("\26\5\26\u038e\n\26\6\26\u0390\n\26\r\26\16\26\u0391\3")
        buf.write("\26\3\26\3\26\5\26\u0397\n\26\3\26\3\26\3\26\3\26\6\26")
        buf.write("\u039d\n\26\r\26\16\26\u039e\3\26\3\26\7\26\u03a3\n\26")
        buf.write("\f\26\16\26\u03a6\13\26\3\26\3\26\3\26\7\26\u03ab\n\26")
        buf.write("\f\26\16\26\u03ae\13\26\3\26\3\26\7\26\u03b2\n\26\f\26")
        buf.write("\16\26\u03b5\13\26\3\26\3\26\3\26\7\26\u03ba\n\26\f\26")
        buf.write("\16\26\u03bd\13\26\5\26\u03bf\n\26\3\26\3\26\5\26\u03c3")
        buf.write("\n\26\3\26\5\26\u03c6\n\26\3\26\3\26\3\26\3\26\3\26\3")
        buf.write("\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\5\26\u03d6")
        buf.write("\n\26\3\26\3\26\3\26\3\26\6\26\u03dc\n\26\r\26\16\26\u03dd")
        buf.write("\3\26\3\26\7\26\u03e2\n\26\f\26\16\26\u03e5\13\26\3\26")
        buf.write("\3\26\3\26\7\26\u03ea\n\26\f\26\16\26\u03ed\13\26\3\26")
        buf.write("\3\26\7\26\u03f1\n\26\f\26\16\26\u03f4\13\26\3\26\3\26")
        buf.write("\3\26\7\26\u03f9\n\26\f\26\16\26\u03fc\13\26\5\26\u03fe")
        buf.write("\n\26\3\26\3\26\3\26\3\26\5\26\u0404\n\26\3\26\3\26\3")
        buf.write("\26\3\26\3\26\5\26\u040b\n\26\3\26\3\26\3\26\3\26\3\26")
        buf.write("\3\26\3\26\3\26\3\26\3\26\3\26\3\26\5\26\u0419\n\26\3")
        buf.write("\26\6\26\u041c\n\26\r\26\16\26\u041d\3\26\3\26\5\26\u0422")
        buf.write("\n\26\7\26\u0424\n\26\f\26\16\26\u0427\13\26\3\26\3\26")
        buf.write("\3\26\5\26\u042c\n\26\3\26\3\26\3\26\3\26\6\26\u0432\n")
        buf.write("\26\r\26\16\26\u0433\3\26\3\26\7\26\u0438\n\26\f\26\16")
        buf.write("\26\u043b\13\26\3\26\3\26\3\26\7\26\u0440\n\26\f\26\16")
        buf.write("\26\u0443\13\26\3\26\3\26\7\26\u0447\n\26\f\26\16\26\u044a")
        buf.write("\13\26\3\26\3\26\3\26\7\26\u044f\n\26\f\26\16\26\u0452")
        buf.write("\13\26\5\26\u0454\n\26\3\26\3\26\5\26\u0458\n\26\3\26")
        buf.write("\5\26\u045b\n\26\5\26\u045d\n\26\3\27\3\27\3\27\3\27\3")
        buf.write("\27\5\27\u0464\n\27\3\27\3\27\3\27\3\27\3\27\5\27\u046b")
        buf.write("\n\27\3\27\5\27\u046e\n\27\3\27\3\27\5\27\u0472\n\27\3")
        buf.write("\27\5\27\u0475\n\27\6\27\u0477\n\27\r\27\16\27\u0478\3")
        buf.write("\27\3\27\3\27\3\27\5\27\u047f\n\27\5\27\u0481\n\27\3\27")
        buf.write("\3\27\5\27\u0485\n\27\3\27\3\27\5\27\u0489\n\27\7\27\u048b")
        buf.write("\n\27\f\27\16\27\u048e\13\27\3\27\5\27\u0491\n\27\3\27")
        buf.write("\5\27\u0494\n\27\3\27\6\27\u0497\n\27\r\27\16\27\u0498")
        buf.write("\3\27\3\27\7\27\u049d\n\27\f\27\16\27\u04a0\13\27\3\27")
        buf.write("\5\27\u04a3\n\27\3\27\5\27\u04a6\n\27\3\27\7\27\u04a9")
        buf.write("\n\27\f\27\16\27\u04ac\13\27\3\27\3\27\7\27\u04b0\n\27")
        buf.write("\f\27\16\27\u04b3\13\27\3\27\3\27\3\27\7\27\u04b8\n\27")
        buf.write("\f\27\16\27\u04bb\13\27\5\27\u04bd\n\27\3\27\3\27\5\27")
        buf.write("\u04c1\n\27\3\27\5\27\u04c4\n\27\3\30\3\30\3\30\3\30\3")
        buf.write("\30\5\30\u04cb\n\30\3\30\3\30\3\30\5\30\u04d0\n\30\3\30")
        buf.write("\6\30\u04d3\n\30\r\30\16\30\u04d4\3\31\3\31\3\31\3\31")
        buf.write("\3\31\3\31\3\31\3\31\3\31\7\31\u04e0\n\31\f\31\16\31\u04e3")
        buf.write("\13\31\3\31\3\31\3\31\3\31\5\31\u04e9\n\31\6\31\u04eb")
        buf.write("\n\31\r\31\16\31\u04ec\3\32\3\32\3\32\3\32\3\32\3\32\3")
        buf.write("\32\3\32\3\32\6\32\u04f8\n\32\r\32\16\32\u04f9\5\32\u04fc")
        buf.write("\n\32\3\32\3\32\3\32\3\32\3\32\6\32\u0503\n\32\r\32\16")
        buf.write("\32\u0504\3\33\3\33\3\33\3\33\3\33\5\33\u050c\n\33\3\33")
        buf.write("\3\33\3\33\6\33\u0511\n\33\r\33\16\33\u0512\3\33\3\33")
        buf.write("\5\33\u0517\n\33\3\33\3\33\3\33\6\33\u051c\n\33\r\33\16")
        buf.write("\33\u051d\3\33\3\33\5\33\u0522\n\33\7\33\u0524\n\33\f")
        buf.write("\33\16\33\u0527\13\33\3\33\3\33\3\33\3\33\5\33\u052d\n")
        buf.write("\33\3\33\3\33\3\33\3\33\6\33\u0533\n\33\r\33\16\33\u0534")
        buf.write("\3\33\5\33\u0538\n\33\3\33\3\33\3\33\6\33\u053d\n\33\r")
        buf.write("\33\16\33\u053e\3\33\5\33\u0542\n\33\7\33\u0544\n\33\f")
        buf.write("\33\16\33\u0547\13\33\3\33\3\33\3\33\3\33\3\33\3\33\3")
        buf.write("\33\3\33\3\33\3\33\3\33\3\33\7\33\u0555\n\33\f\33\16\33")
        buf.write("\u0558\13\33\5\33\u055a\n\33\3\33\3\33\3\33\3\33\3\33")
        buf.write("\5\33\u0561\n\33\3\33\3\33\5\33\u0565\n\33\3\33\5\33\u0568")
        buf.write("\n\33\3\34\3\34\3\34\3\34\3\34\7\34\u056f\n\34\f\34\16")
        buf.write("\34\u0572\13\34\3\34\3\34\3\35\6\35\u0577\n\35\r\35\16")
        buf.write("\35\u0578\3\35\3\35\3\35\3\36\3\36\3\36\3\36\7\36\u0582")
        buf.write("\n\36\f\36\16\36\u0585\13\36\3\36\3\36\5\36\u0589\n\36")
        buf.write("\3\36\3\36\3\36\3\36\3\36\3\36\7\36\u0591\n\36\f\36\16")
        buf.write("\36\u0594\13\36\5\36\u0596\n\36\3\37\3\37\3\37\7\37\u059b")
        buf.write("\n\37\f\37\16\37\u059e\13\37\3 \3 \3 \5 \u05a3\n \3 \3")
        buf.write(" \3 \3 \5 \u05a9\n \3 \5 \u05ac\n \3 \3 \3 \3 \3 \5 \u05b3")
        buf.write("\n \3!\6!\u05b6\n!\r!\16!\u05b7\3\"\6\"\u05bb\n\"\r\"")
        buf.write("\16\"\u05bc\3#\3#\3#\3#\6#\u05c3\n#\r#\16#\u05c4\3#\3")
        buf.write("#\5#\u05c9\n#\3#\3#\6#\u05cd\n#\r#\16#\u05ce\3#\3#\5#")
        buf.write("\u05d3\n#\7#\u05d5\n#\f#\16#\u05d8\13#\3#\3#\3#\3#\5#")
        buf.write("\u05de\n#\3#\6#\u05e1\n#\r#\16#\u05e2\5#\u05e5\n#\3#\3")
        buf.write("#\5#\u05e9\n#\3#\3#\5#\u05ed\n#\3#\6#\u05f0\n#\r#\16#")
        buf.write("\u05f1\3#\5#\u05f5\n#\7#\u05f7\n#\f#\16#\u05fa\13#\3#")
        buf.write("\3#\3#\3#\3#\6#\u0601\n#\r#\16#\u0602\3#\5#\u0606\n#\7")
        buf.write("#\u0608\n#\f#\16#\u060b\13#\3#\3#\3#\5#\u0610\n#\3#\3")
        buf.write("#\6#\u0614\n#\r#\16#\u0615\5#\u0618\n#\3#\3#\5#\u061c")
        buf.write("\n#\3#\3#\6#\u0620\n#\r#\16#\u0621\5#\u0624\n#\7#\u0626")
        buf.write("\n#\f#\16#\u0629\13#\7#\u062b\n#\f#\16#\u062e\13#\3#\3")
        buf.write("#\3#\3#\3#\3#\5#\u0636\n#\7#\u0638\n#\f#\16#\u063b\13")
        buf.write("#\3#\3#\3#\5#\u0640\n#\3$\3$\3%\3%\7%\u0646\n%\f%\16%")
        buf.write("\u0649\13%\3%\7%\u064c\n%\f%\16%\u064f\13%\3%\3%\3&\5")
        buf.write("&\u0654\n&\3&\3&\3&\3&\7&\u065a\n&\f&\16&\u065d\13&\3")
        buf.write("&\3&\3&\5&\u0662\n&\3&\3&\3&\5&\u0667\n&\3&\5&\u066a\n")
        buf.write("&\6&\u066c\n&\r&\16&\u066d\3\'\3\'\3\'\3\'\5\'\u0674\n")
        buf.write("\'\3\'\3\'\5\'\u0678\n\'\3\'\6\'\u067b\n\'\r\'\16\'\u067c")
        buf.write("\3(\3(\3(\5(\u0682\n(\3(\5(\u0685\n(\3)\3)\3*\5*\u068a")
        buf.write("\n*\3*\3*\3+\3+\3,\3,\3,\2\2-\2\4\6\b\n\f\16\20\22\24")
        buf.write("\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTV\2")
        buf.write("\22\3\2\3\4\3\2\3\5\4\2\64\64\66\66\6\2  ((**\65\65\5")
        buf.write("\2((**\65\65\5\2  ((\65\65\4\2\n\nmm\5\2\30\30\32\32-")
        buf.write(".\6\2  ((**--\5\2\34\34(*\65\65\3\2(*\4\2((**\3\2\20\22")
        buf.write("\4\2vv\u0080\u0080\3\2\'\62\7\2[[tw\u0083\u0083\u0088")
        buf.write("\u0092\u0094\u0094\2\u07c5\2a\3\2\2\2\4y\3\2\2\2\6{\3")
        buf.write("\2\2\2\b\u00cd\3\2\2\2\n\u00de\3\2\2\2\f\u010a\3\2\2\2")
        buf.write("\16\u0123\3\2\2\2\20\u0125\3\2\2\2\22\u012a\3\2\2\2\24")
        buf.write("\u013b\3\2\2\2\26\u01dc\3\2\2\2\30\u023e\3\2\2\2\32\u0240")
        buf.write("\3\2\2\2\34\u024a\3\2\2\2\36\u0255\3\2\2\2 \u025e\3\2")
        buf.write("\2\2\"\u0350\3\2\2\2$\u0352\3\2\2\2&\u0365\3\2\2\2(\u036e")
        buf.write("\3\2\2\2*\u045c\3\2\2\2,\u045e\3\2\2\2.\u04c5\3\2\2\2")
        buf.write("\60\u04d6\3\2\2\2\62\u04ee\3\2\2\2\64\u0567\3\2\2\2\66")
        buf.write("\u0569\3\2\2\28\u0576\3\2\2\2:\u0595\3\2\2\2<\u0597\3")
        buf.write("\2\2\2>\u05b2\3\2\2\2@\u05b5\3\2\2\2B\u05ba\3\2\2\2D\u063f")
        buf.write("\3\2\2\2F\u0641\3\2\2\2H\u0643\3\2\2\2J\u0653\3\2\2\2")
        buf.write("L\u066f\3\2\2\2N\u067e\3\2\2\2P\u0686\3\2\2\2R\u0689\3")
        buf.write("\2\2\2T\u068d\3\2\2\2V\u068f\3\2\2\2X\\\5\4\3\2Y[\t\2")
        buf.write("\2\2ZY\3\2\2\2[^\3\2\2\2\\Z\3\2\2\2\\]\3\2\2\2]`\3\2\2")
        buf.write("\2^\\\3\2\2\2_X\3\2\2\2`c\3\2\2\2a_\3\2\2\2ab\3\2\2\2")
        buf.write("b\3\3\2\2\2ca\3\2\2\2dz\5\6\4\2ez\5\f\7\2fz\5\16\b\2g")
        buf.write("z\5\b\5\2hz\5\n\6\2iz\5\22\n\2jz\5\"\22\2kz\5$\23\2lz")
        buf.write("\5&\24\2mz\5*\26\2nz\5\60\31\2oz\5\62\32\2pz\5\64\33\2")
        buf.write("qz\5\66\34\2rz\5P)\2sz\5H%\2tz\58\35\2uz\5:\36\2vz\5\20")
        buf.write("\t\2wz\5,\27\2xz\5.\30\2yd\3\2\2\2ye\3\2\2\2yf\3\2\2\2")
        buf.write("yg\3\2\2\2yh\3\2\2\2yi\3\2\2\2yj\3\2\2\2yk\3\2\2\2yl\3")
        buf.write("\2\2\2ym\3\2\2\2yn\3\2\2\2yo\3\2\2\2yp\3\2\2\2yq\3\2\2")
        buf.write("\2yr\3\2\2\2ys\3\2\2\2yt\3\2\2\2yu\3\2\2\2yv\3\2\2\2y")
        buf.write("w\3\2\2\2yx\3\2\2\2z\5\3\2\2\2{\u00c9\7\31\2\2|}\7\3\2")
        buf.write("\2}\177\7\24\2\2~|\3\2\2\2~\177\3\2\2\2\177\u0080\3\2")
        buf.write("\2\2\u0080\u0085\7\u0080\2\2\u0081\u0082\7\65\2\2\u0082")
        buf.write("\u0084\7\u0080\2\2\u0083\u0081\3\2\2\2\u0084\u0087\3\2")
        buf.write("\2\2\u0085\u0083\3\2\2\2\u0085\u0086\3\2\2\2\u0086\u0088")
        buf.write("\3\2\2\2\u0087\u0085\3\2\2\2\u0088\u008b\7\64\2\2\u0089")
        buf.write("\u008c\5F$\2\u008a\u008c\7\u0080\2\2\u008b\u0089\3\2\2")
        buf.write("\2\u008b\u008a\3\2\2\2\u008c\u0090\3\2\2\2\u008d\u008f")
        buf.write("\7\3\2\2\u008e\u008d\3\2\2\2\u008f\u0092\3\2\2\2\u0090")
        buf.write("\u008e\3\2\2\2\u0090\u0091\3\2\2\2\u0091\u00ca\3\2\2\2")
        buf.write("\u0092\u0090\3\2\2\2\u0093\u0094\7\3\2\2\u0094\u0096\7")
        buf.write("\24\2\2\u0095\u0093\3\2\2\2\u0095\u0096\3\2\2\2\u0096")
        buf.write("\u0097\3\2\2\2\u0097\u009b\7\5\2\2\u0098\u009a\n\3\2\2")
        buf.write("\u0099\u0098\3\2\2\2\u009a\u009d\3\2\2\2\u009b\u0099\3")
        buf.write("\2\2\2\u009b\u009c\3\2\2\2\u009c\u00a1\3\2\2\2\u009d\u009b")
        buf.write("\3\2\2\2\u009e\u00a0\7\3\2\2\u009f\u009e\3\2\2\2\u00a0")
        buf.write("\u00a3\3\2\2\2\u00a1\u009f\3\2\2\2\u00a1\u00a2\3\2\2\2")
        buf.write("\u00a2\u00ca\3\2\2\2\u00a3\u00a1\3\2\2\2\u00a4\u00ca\5")
        buf.write("\f\7\2\u00a5\u00a6\7\u0080\2\2\u00a6\u00a7\7\'\2\2\u00a7")
        buf.write("\u00ca\5\24\13\2\u00a8\u00a9\7\u0080\2\2\u00a9\u00aa\7")
        buf.write("\'\2\2\u00aa\u00ab\7{\2\2\u00ab\u00b5\7q\2\2\u00ac\u00ae")
        buf.write("\7*\2\2\u00ad\u00ac\3\2\2\2\u00ad\u00ae\3\2\2\2\u00ae")
        buf.write("\u00b0\3\2\2\2\u00af\u00b1\7\23\2\2\u00b0\u00af\3\2\2")
        buf.write("\2\u00b1\u00b2\3\2\2\2\u00b2\u00b0\3\2\2\2\u00b2\u00b3")
        buf.write("\3\2\2\2\u00b3\u00b6\3\2\2\2\u00b4\u00b6\7\u0080\2\2\u00b5")
        buf.write("\u00ad\3\2\2\2\u00b5\u00b4\3\2\2\2\u00b6\u00c5\3\2\2\2")
        buf.write("\u00b7\u00c1\7\65\2\2\u00b8\u00ba\7*\2\2\u00b9\u00b8\3")
        buf.write("\2\2\2\u00b9\u00ba\3\2\2\2\u00ba\u00bc\3\2\2\2\u00bb\u00bd")
        buf.write("\7\23\2\2\u00bc\u00bb\3\2\2\2\u00bd\u00be\3\2\2\2\u00be")
        buf.write("\u00bc\3\2\2\2\u00be\u00bf\3\2\2\2\u00bf\u00c2\3\2\2\2")
        buf.write("\u00c0\u00c2\7\u0080\2\2\u00c1\u00b9\3\2\2\2\u00c1\u00c0")
        buf.write("\3\2\2\2\u00c2\u00c4\3\2\2\2\u00c3\u00b7\3\2\2\2\u00c4")
        buf.write("\u00c7\3\2\2\2\u00c5\u00c3\3\2\2\2\u00c5\u00c6\3\2\2\2")
        buf.write("\u00c6\u00c8\3\2\2\2\u00c7\u00c5\3\2\2\2\u00c8\u00ca\7")
        buf.write("r\2\2\u00c9~\3\2\2\2\u00c9\u0095\3\2\2\2\u00c9\u00a4\3")
        buf.write("\2\2\2\u00c9\u00a5\3\2\2\2\u00c9\u00a8\3\2\2\2\u00ca\u00cb")
        buf.write("\3\2\2\2\u00cb\u00c9\3\2\2\2\u00cb\u00cc\3\2\2\2\u00cc")
        buf.write("\7\3\2\2\2\u00cd\u00da\7@\2\2\u00ce\u00cf\7\3\2\2\u00cf")
        buf.write("\u00d1\7\24\2\2\u00d0\u00ce\3\2\2\2\u00d0\u00d1\3\2\2")
        buf.write("\2\u00d1\u00d2\3\2\2\2\u00d2\u00d4\5\f\7\2\u00d3\u00d5")
        buf.write("\7\3\2\2\u00d4\u00d3\3\2\2\2\u00d4\u00d5\3\2\2\2\u00d5")
        buf.write("\u00d8\3\2\2\2\u00d6\u00d7\7\24\2\2\u00d7\u00d9\7|\2\2")
        buf.write("\u00d8\u00d6\3\2\2\2\u00d8\u00d9\3\2\2\2\u00d9\u00db\3")
        buf.write("\2\2\2\u00da\u00d0\3\2\2\2\u00db\u00dc\3\2\2\2\u00dc\u00da")
        buf.write("\3\2\2\2\u00dc\u00dd\3\2\2\2\u00dd\t\3\2\2\2\u00de\u00eb")
        buf.write("\7W\2\2\u00df\u00e0\7\3\2\2\u00e0\u00e2\7\24\2\2\u00e1")
        buf.write("\u00df\3\2\2\2\u00e1\u00e2\3\2\2\2\u00e2\u00e3\3\2\2\2")
        buf.write("\u00e3\u00e5\5\f\7\2\u00e4\u00e6\7\3\2\2\u00e5\u00e4\3")
        buf.write("\2\2\2\u00e5\u00e6\3\2\2\2\u00e6\u00e9\3\2\2\2\u00e7\u00e8")
        buf.write("\7\24\2\2\u00e8\u00ea\7|\2\2\u00e9\u00e7\3\2\2\2\u00e9")
        buf.write("\u00ea\3\2\2\2\u00ea\u00ec\3\2\2\2\u00eb\u00e1\3\2\2\2")
        buf.write("\u00ec\u00ed\3\2\2\2\u00ed\u00eb\3\2\2\2\u00ed\u00ee\3")
        buf.write("\2\2\2\u00ee\13\3\2\2\2\u00ef\u00f0\7\u0080\2\2\u00f0")
        buf.write("\u00f2\7\'\2\2\u00f1\u00f3\7{\2\2\u00f2\u00f1\3\2\2\2")
        buf.write("\u00f2\u00f3\3\2\2\2\u00f3\u00f6\3\2\2\2\u00f4\u00f7\5")
        buf.write("\66\34\2\u00f5\u00f7\5D#\2\u00f6\u00f4\3\2\2\2\u00f6\u00f5")
        buf.write("\3\2\2\2\u00f7\u00f9\3\2\2\2\u00f8\u00fa\7\66\2\2\u00f9")
        buf.write("\u00f8\3\2\2\2\u00f9\u00fa\3\2\2\2\u00fa\u00fe\3\2\2\2")
        buf.write("\u00fb\u00fd\7\3\2\2\u00fc\u00fb\3\2\2\2\u00fd\u0100\3")
        buf.write("\2\2\2\u00fe\u00fc\3\2\2\2\u00fe\u00ff\3\2\2\2\u00ff\u0102")
        buf.write("\3\2\2\2\u0100\u00fe\3\2\2\2\u0101\u0103\7\24\2\2\u0102")
        buf.write("\u0101\3\2\2\2\u0102\u0103\3\2\2\2\u0103\u010b\3\2\2\2")
        buf.write("\u0104\u0105\7\u0080\2\2\u0105\u0106\7\'\2\2\u0106\u0107")
        buf.write("\5\64\33\2\u0107\u0108\7(\2\2\u0108\u0109\5V,\2\u0109")
        buf.write("\u010b\3\2\2\2\u010a\u00ef\3\2\2\2\u010a\u0104\3\2\2\2")
        buf.write("\u010b\r\3\2\2\2\u010c\u010d\7!\2\2\u010d\u010e\7m\2\2")
        buf.write("\u010e\u0113\5D#\2\u010f\u0110\7\65\2\2\u0110\u0112\5")
        buf.write("D#\2\u0111\u010f\3\2\2\2\u0112\u0115\3\2\2\2\u0113\u0111")
        buf.write("\3\2\2\2\u0113\u0114\3\2\2\2\u0114\u0116\3\2\2\2\u0115")
        buf.write("\u0113\3\2\2\2\u0116\u0117\7n\2\2\u0117\u0124\3\2\2\2")
        buf.write("\u0118\u0119\7!\2\2\u0119\u011e\5D#\2\u011a\u011b\7\65")
        buf.write("\2\2\u011b\u011d\5D#\2\u011c\u011a\3\2\2\2\u011d\u0120")
        buf.write("\3\2\2\2\u011e\u011c\3\2\2\2\u011e\u011f\3\2\2\2\u011f")
        buf.write("\u0124\3\2\2\2\u0120\u011e\3\2\2\2\u0121\u0122\7!\2\2")
        buf.write("\u0122\u0124\5\64\33\2\u0123\u010c\3\2\2\2\u0123\u0118")
        buf.write("\3\2\2\2\u0123\u0121\3\2\2\2\u0124\17\3\2\2\2\u0125\u0126")
        buf.write("\7\6\2\2\u0126\u0127\5V,\2\u0127\u0128\7&\2\2\u0128\u0129")
        buf.write("\5V,\2\u0129\21\3\2\2\2\u012a\u012c\5\26\f\2\u012b\u012d")
        buf.write("\7\24\2\2\u012c\u012b\3\2\2\2\u012c\u012d\3\2\2\2\u012d")
        buf.write("\u0131\3\2\2\2\u012e\u0130\5\30\r\2\u012f\u012e\3\2\2")
        buf.write("\2\u0130\u0133\3\2\2\2\u0131\u012f\3\2\2\2\u0131\u0132")
        buf.write("\3\2\2\2\u0132\u0135\3\2\2\2\u0133\u0131\3\2\2\2\u0134")
        buf.write("\u0136\5 \21\2\u0135\u0134\3\2\2\2\u0135\u0136\3\2\2\2")
        buf.write("\u0136\u0139\3\2\2\2\u0137\u0138\7\3\2\2\u0138\u013a\7")
        buf.write("\24\2\2\u0139\u0137\3\2\2\2\u0139\u013a\3\2\2\2\u013a")
        buf.write("\23\3\2\2\2\u013b\u013f\5\32\16\2\u013c\u013e\5\34\17")
        buf.write("\2\u013d\u013c\3\2\2\2\u013e\u0141\3\2\2\2\u013f\u013d")
        buf.write("\3\2\2\2\u013f\u0140\3\2\2\2\u0140\u0143\3\2\2\2\u0141")
        buf.write("\u013f\3\2\2\2\u0142\u0144\5\36\20\2\u0143\u0142\3\2\2")
        buf.write("\2\u0143\u0144\3\2\2\2\u0144\25\3\2\2\2\u0145\u0147\7")
        buf.write("Q\2\2\u0146\u0148\7\33\2\2\u0147\u0146\3\2\2\2\u0147\u0148")
        buf.write("\3\2\2\2\u0148\u0149\3\2\2\2\u0149\u014a\5<\37\2\u014a")
        buf.write("\u014b\7\64\2\2\u014b\u014c\5\f\7\2\u014c\u01dd\3\2\2")
        buf.write("\2\u014d\u014f\7Q\2\2\u014e\u0150\7\33\2\2\u014f\u014e")
        buf.write("\3\2\2\2\u014f\u0150\3\2\2\2\u0150\u0151\3\2\2\2\u0151")
        buf.write("\u0152\5<\37\2\u0152\u015f\7\64\2\2\u0153\u0154\7\3\2")
        buf.write("\2\u0154\u015d\7\24\2\2\u0155\u015e\5\4\3\2\u0156\u0157")
        buf.write("\7<\2\2\u0157\u015e\7\u0080\2\2\u0158\u015e\7A\2\2\u0159")
        buf.write("\u015a\7\7\2\2\u015a\u015e\7\u0080\2\2\u015b\u015c\7\b")
        buf.write("\2\2\u015c\u015e\7\u0080\2\2\u015d\u0155\3\2\2\2\u015d")
        buf.write("\u0156\3\2\2\2\u015d\u0158\3\2\2\2\u015d\u0159\3\2\2\2")
        buf.write("\u015d\u015b\3\2\2\2\u015e\u0160\3\2\2\2\u015f\u0153\3")
        buf.write("\2\2\2\u0160\u0161\3\2\2\2\u0161\u015f\3\2\2\2\u0161\u0162")
        buf.write("\3\2\2\2\u0162\u01dd\3\2\2\2\u0163\u0165\7Q\2\2\u0164")
        buf.write("\u0166\7\33\2\2\u0165\u0164\3\2\2\2\u0165\u0166\3\2\2")
        buf.write("\2\u0166\u0167\3\2\2\2\u0167\u0168\5<\37\2\u0168\u0178")
        buf.write("\7\64\2\2\u0169\u016a\7\3\2\2\u016a\u016f\7\24\2\2\u016b")
        buf.write("\u0170\5\4\3\2\u016c\u016d\7<\2\2\u016d\u0170\7\u0080")
        buf.write("\2\2\u016e\u0170\7A\2\2\u016f\u016b\3\2\2\2\u016f\u016c")
        buf.write("\3\2\2\2\u016f\u016e\3\2\2\2\u0170\u0171\3\2\2\2\u0171")
        buf.write("\u016f\3\2\2\2\u0171\u0172\3\2\2\2\u0172\u0174\3\2\2\2")
        buf.write("\u0173\u0175\7\3\2\2\u0174\u0173\3\2\2\2\u0175\u0176\3")
        buf.write("\2\2\2\u0176\u0174\3\2\2\2\u0176\u0177\3\2\2\2\u0177\u0179")
        buf.write("\3\2\2\2\u0178\u0169\3\2\2\2\u0179\u017a\3\2\2\2\u017a")
        buf.write("\u0178\3\2\2\2\u017a\u017b\3\2\2\2\u017b\u01dd\3\2\2\2")
        buf.write("\u017c\u017e\7Q\2\2\u017d\u017f\7\33\2\2\u017e\u017d\3")
        buf.write("\2\2\2\u017e\u017f\3\2\2\2\u017f\u0180\3\2\2\2\u0180\u0181")
        buf.write("\5<\37\2\u0181\u01af\7\64\2\2\u0182\u0186\7\3\2\2\u0183")
        buf.write("\u0185\7\24\2\2\u0184\u0183\3\2\2\2\u0185\u0188\3\2\2")
        buf.write("\2\u0186\u0184\3\2\2\2\u0186\u0187\3\2\2\2\u0187\u01a6")
        buf.write("\3\2\2\2\u0188\u0186\3\2\2\2\u0189\u018a\7\u0080\2\2\u018a")
        buf.write("\u018e\7\3\2\2\u018b\u018d\7\24\2\2\u018c\u018b\3\2\2")
        buf.write("\2\u018d\u0190\3\2\2\2\u018e\u018c\3\2\2\2\u018e\u018f")
        buf.write("\3\2\2\2\u018f\u0191\3\2\2\2\u0190\u018e\3\2\2\2\u0191")
        buf.write("\u0192\7\7\2\2\u0192\u0193\7m\2\2\u0193\u0198\7\u0080")
        buf.write("\2\2\u0194\u0195\7\65\2\2\u0195\u0197\7\u0080\2\2\u0196")
        buf.write("\u0194\3\2\2\2\u0197\u019a\3\2\2\2\u0198\u0196\3\2\2\2")
        buf.write("\u0198\u0199\3\2\2\2\u0199\u019b\3\2\2\2\u019a\u0198\3")
        buf.write("\2\2\2\u019b\u019c\7n\2\2\u019c\u01a0\7\3\2\2\u019d\u019f")
        buf.write("\7\24\2\2\u019e\u019d\3\2\2\2\u019f\u01a2\3\2\2\2\u01a0")
        buf.write("\u019e\3\2\2\2\u01a0\u01a1\3\2\2\2\u01a1\u01a3\3\2\2\2")
        buf.write("\u01a2\u01a0\3\2\2\2\u01a3\u01a4\7<\2\2\u01a4\u01a7\7")
        buf.write("\u0080\2\2\u01a5\u01a7\5\4\3\2\u01a6\u0189\3\2\2\2\u01a6")
        buf.write("\u01a5\3\2\2\2\u01a7\u01a8\3\2\2\2\u01a8\u01a6\3\2\2\2")
        buf.write("\u01a8\u01a9\3\2\2\2\u01a9\u01ab\3\2\2\2\u01aa\u01ac\7")
        buf.write("\3\2\2\u01ab\u01aa\3\2\2\2\u01ac\u01ad\3\2\2\2\u01ad\u01ab")
        buf.write("\3\2\2\2\u01ad\u01ae\3\2\2\2\u01ae\u01b0\3\2\2\2\u01af")
        buf.write("\u0182\3\2\2\2\u01b0\u01b1\3\2\2\2\u01b1\u01af\3\2\2\2")
        buf.write("\u01b1\u01b2\3\2\2\2\u01b2\u01dd\3\2\2\2\u01b3\u01b5\7")
        buf.write("Q\2\2\u01b4\u01b6\7\33\2\2\u01b5\u01b4\3\2\2\2\u01b5\u01b6")
        buf.write("\3\2\2\2\u01b6\u01b7\3\2\2\2\u01b7\u01b8\5<\37\2\u01b8")
        buf.write("\u01b9\7\64\2\2\u01b9\u01ba\7c\2\2\u01ba\u01dd\3\2\2\2")
        buf.write("\u01bb\u01bd\7Q\2\2\u01bc\u01be\7\33\2\2\u01bd\u01bc\3")
        buf.write("\2\2\2\u01bd\u01be\3\2\2\2\u01be\u01bf\3\2\2\2\u01bf\u01c0")
        buf.write("\7\u0080\2\2\u01c0\u01c1\7m\2\2\u01c1\u01c2\5D#\2\u01c2")
        buf.write("\u01c3\7n\2\2\u01c3\u01cd\7\64\2\2\u01c4\u01c5\7\3\2\2")
        buf.write("\u01c5\u01c6\7\24\2\2\u01c6\u01ca\5\4\3\2\u01c7\u01c9")
        buf.write("\7\3\2\2\u01c8\u01c7\3\2\2\2\u01c9\u01cc\3\2\2\2\u01ca")
        buf.write("\u01c8\3\2\2\2\u01ca\u01cb\3\2\2\2\u01cb\u01ce\3\2\2\2")
        buf.write("\u01cc\u01ca\3\2\2\2\u01cd\u01c4\3\2\2\2\u01ce\u01cf\3")
        buf.write("\2\2\2\u01cf\u01cd\3\2\2\2\u01cf\u01d0\3\2\2\2\u01d0\u01dd")
        buf.write("\3\2\2\2\u01d1\u01d3\7Q\2\2\u01d2\u01d4\7\33\2\2\u01d3")
        buf.write("\u01d2\3\2\2\2\u01d3\u01d4\3\2\2\2\u01d4\u01d5\3\2\2\2")
        buf.write("\u01d5\u01d6\7\u0080\2\2\u01d6\u01d7\7m\2\2\u01d7\u01d8")
        buf.write("\5D#\2\u01d8\u01d9\7n\2\2\u01d9\u01da\7\64\2\2\u01da\u01db")
        buf.write("\5\f\7\2\u01db\u01dd\3\2\2\2\u01dc\u0145\3\2\2\2\u01dc")
        buf.write("\u014d\3\2\2\2\u01dc\u0163\3\2\2\2\u01dc\u017c\3\2\2\2")
        buf.write("\u01dc\u01b3\3\2\2\2\u01dc\u01bb\3\2\2\2\u01dc\u01d1\3")
        buf.write("\2\2\2\u01dd\27\3\2\2\2\u01de\u01e0\7G\2\2\u01df\u01e1")
        buf.write("\7\33\2\2\u01e0\u01df\3\2\2\2\u01e0\u01e1\3\2\2\2\u01e1")
        buf.write("\u01e2\3\2\2\2\u01e2\u01e3\5<\37\2\u01e3\u01e4\7\64\2")
        buf.write("\2\u01e4\u01e5\5\f\7\2\u01e5\u023f\3\2\2\2\u01e6\u01e8")
        buf.write("\7G\2\2\u01e7\u01e9\7\33\2\2\u01e8\u01e7\3\2\2\2\u01e8")
        buf.write("\u01e9\3\2\2\2\u01e9\u01ea\3\2\2\2\u01ea\u01eb\5<\37\2")
        buf.write("\u01eb\u01f8\7\64\2\2\u01ec\u01ed\7\3\2\2\u01ed\u01f6")
        buf.write("\7\24\2\2\u01ee\u01f7\5\4\3\2\u01ef\u01f0\7<\2\2\u01f0")
        buf.write("\u01f7\7\u0080\2\2\u01f1\u01f7\7A\2\2\u01f2\u01f3\7\7")
        buf.write("\2\2\u01f3\u01f7\7\u0080\2\2\u01f4\u01f5\7\b\2\2\u01f5")
        buf.write("\u01f7\7\u0080\2\2\u01f6\u01ee\3\2\2\2\u01f6\u01ef\3\2")
        buf.write("\2\2\u01f6\u01f1\3\2\2\2\u01f6\u01f2\3\2\2\2\u01f6\u01f4")
        buf.write("\3\2\2\2\u01f7\u01f9\3\2\2\2\u01f8\u01ec\3\2\2\2\u01f9")
        buf.write("\u01fa\3\2\2\2\u01fa\u01f8\3\2\2\2\u01fa\u01fb\3\2\2\2")
        buf.write("\u01fb\u023f\3\2\2\2\u01fc\u01fe\7G\2\2\u01fd\u01ff\7")
        buf.write("\33\2\2\u01fe\u01fd\3\2\2\2\u01fe\u01ff\3\2\2\2\u01ff")
        buf.write("\u0200\3\2\2\2\u0200\u0201\5<\37\2\u0201\u0211\7\64\2")
        buf.write("\2\u0202\u0203\7\3\2\2\u0203\u0208\7\24\2\2\u0204\u0209")
        buf.write("\5\4\3\2\u0205\u0206\7<\2\2\u0206\u0209\7\u0080\2\2\u0207")
        buf.write("\u0209\7A\2\2\u0208\u0204\3\2\2\2\u0208\u0205\3\2\2\2")
        buf.write("\u0208\u0207\3\2\2\2\u0209\u020a\3\2\2\2\u020a\u0208\3")
        buf.write("\2\2\2\u020a\u020b\3\2\2\2\u020b\u020d\3\2\2\2\u020c\u020e")
        buf.write("\7\3\2\2\u020d\u020c\3\2\2\2\u020e\u020f\3\2\2\2\u020f")
        buf.write("\u020d\3\2\2\2\u020f\u0210\3\2\2\2\u0210\u0212\3\2\2\2")
        buf.write("\u0211\u0202\3\2\2\2\u0212\u0213\3\2\2\2\u0213\u0211\3")
        buf.write("\2\2\2\u0213\u0214\3\2\2\2\u0214\u023f\3\2\2\2\u0215\u0217")
        buf.write("\7G\2\2\u0216\u0218\7\33\2\2\u0217\u0216\3\2\2\2\u0217")
        buf.write("\u0218\3\2\2\2\u0218\u0219\3\2\2\2\u0219\u021a\5<\37\2")
        buf.write("\u021a\u021b\7\64\2\2\u021b\u021c\7c\2\2\u021c\u023f\3")
        buf.write("\2\2\2\u021d\u021f\7G\2\2\u021e\u0220\7\33\2\2\u021f\u021e")
        buf.write("\3\2\2\2\u021f\u0220\3\2\2\2\u0220\u0221\3\2\2\2\u0221")
        buf.write("\u0222\7\u0080\2\2\u0222\u0223\7m\2\2\u0223\u0224\5D#")
        buf.write("\2\u0224\u0225\7n\2\2\u0225\u022f\7\64\2\2\u0226\u0227")
        buf.write("\7\3\2\2\u0227\u0228\7\24\2\2\u0228\u022c\5\4\3\2\u0229")
        buf.write("\u022b\7\3\2\2\u022a\u0229\3\2\2\2\u022b\u022e\3\2\2\2")
        buf.write("\u022c\u022a\3\2\2\2\u022c\u022d\3\2\2\2\u022d\u0230\3")
        buf.write("\2\2\2\u022e\u022c\3\2\2\2\u022f\u0226\3\2\2\2\u0230\u0231")
        buf.write("\3\2\2\2\u0231\u022f\3\2\2\2\u0231\u0232\3\2\2\2\u0232")
        buf.write("\u023f\3\2\2\2\u0233\u0235\7G\2\2\u0234\u0236\7\33\2\2")
        buf.write("\u0235\u0234\3\2\2\2\u0235\u0236\3\2\2\2\u0236\u0237\3")
        buf.write("\2\2\2\u0237\u0238\7\u0080\2\2\u0238\u0239\7m\2\2\u0239")
        buf.write("\u023a\5D#\2\u023a\u023b\7n\2\2\u023b\u023c\7\64\2\2\u023c")
        buf.write("\u023d\5\f\7\2\u023d\u023f\3\2\2\2\u023e\u01de\3\2\2\2")
        buf.write("\u023e\u01e6\3\2\2\2\u023e\u01fc\3\2\2\2\u023e\u0215\3")
        buf.write("\2\2\2\u023e\u021d\3\2\2\2\u023e\u0233\3\2\2\2\u023f\31")
        buf.write("\3\2\2\2\u0240\u0242\7Q\2\2\u0241\u0243\7\33\2\2\u0242")
        buf.write("\u0241\3\2\2\2\u0242\u0243\3\2\2\2\u0243\u0244\3\2\2\2")
        buf.write("\u0244\u0245\5<\37\2\u0245\u0248\7\64\2\2\u0246\u0249")
        buf.write("\5D#\2\u0247\u0249\7\u009a\2\2\u0248\u0246\3\2\2\2\u0248")
        buf.write("\u0247\3\2\2\2\u0249\33\3\2\2\2\u024a\u024c\7G\2\2\u024b")
        buf.write("\u024d\7\33\2\2\u024c\u024b\3\2\2\2\u024c\u024d\3\2\2")
        buf.write("\2\u024d\u024e\3\2\2\2\u024e\u024f\5<\37\2\u024f\u0252")
        buf.write("\7\64\2\2\u0250\u0253\5D#\2\u0251\u0253\7\u009a\2\2\u0252")
        buf.write("\u0250\3\2\2\2\u0252\u0251\3\2\2\2\u0253\35\3\2\2\2\u0254")
        buf.write("\u0256\7\24\2\2\u0255\u0254\3\2\2\2\u0255\u0256\3\2\2")
        buf.write("\2\u0256\u0257\3\2\2\2\u0257\u0258\7H\2\2\u0258\u025b")
        buf.write("\7\64\2\2\u0259\u025c\5D#\2\u025a\u025c\7\u009a\2\2\u025b")
        buf.write("\u0259\3\2\2\2\u025b\u025a\3\2\2\2\u025c\37\3\2\2\2\u025d")
        buf.write("\u025f\7\24\2\2\u025e\u025d\3\2\2\2\u025e\u025f\3\2\2")
        buf.write("\2\u025f\u0260\3\2\2\2\u0260\u0261\7H\2\2\u0261\u026e")
        buf.write("\7\64\2\2\u0262\u0263\7\3\2\2\u0263\u0266\7\24\2\2\u0264")
        buf.write("\u0267\5\4\3\2\u0265\u0267\7<\2\2\u0266\u0264\3\2\2\2")
        buf.write("\u0266\u0265\3\2\2\2\u0267\u0269\3\2\2\2\u0268\u0262\3")
        buf.write("\2\2\2\u0269\u026a\3\2\2\2\u026a\u0268\3\2\2\2\u026a\u026b")
        buf.write("\3\2\2\2\u026b\u026f\3\2\2\2\u026c\u026f\5\16\b\2\u026d")
        buf.write("\u026f\5\f\7\2\u026e\u0268\3\2\2\2\u026e\u026c\3\2\2\2")
        buf.write("\u026e\u026d\3\2\2\2\u026f\u0270\3\2\2\2\u0270\u026e\3")
        buf.write("\2\2\2\u0270\u0271\3\2\2\2\u0271\u0275\3\2\2\2\u0272\u0274")
        buf.write("\7\3\2\2\u0273\u0272\3\2\2\2\u0274\u0277\3\2\2\2\u0275")
        buf.write("\u0273\3\2\2\2\u0275\u0276\3\2\2\2\u0276\u0279\3\2\2\2")
        buf.write("\u0277\u0275\3\2\2\2\u0278\u027a\7\24\2\2\u0279\u0278")
        buf.write("\3\2\2\2\u0279\u027a\3\2\2\2\u027a!\3\2\2\2\u027b\u027c")
        buf.write("\7N\2\2\u027c\u027d\7\u0080\2\2\u027d\u027e\7S\2\2\u027e")
        buf.write("\u027f\7u\2\2\u027f\u0280\7%\2\2\u0280\u0281\7u\2\2\u0281")
        buf.write("\u0283\7\64\2\2\u0282\u0284\7|\2\2\u0283\u0282\3\2\2\2")
        buf.write("\u0283\u0284\3\2\2\2\u0284\u0288\3\2\2\2\u0285\u0286\7")
        buf.write("\3\2\2\u0286\u0287\7\24\2\2\u0287\u0289\5\4\3\2\u0288")
        buf.write("\u0285\3\2\2\2\u0289\u028a\3\2\2\2\u028a\u0288\3\2\2\2")
        buf.write("\u028a\u028b\3\2\2\2\u028b\u028f\3\2\2\2\u028c\u028e\7")
        buf.write("\24\2\2\u028d\u028c\3\2\2\2\u028e\u0291\3\2\2\2\u028f")
        buf.write("\u028d\3\2\2\2\u028f\u0290\3\2\2\2\u0290\u0351\3\2\2\2")
        buf.write("\u0291\u028f\3\2\2\2\u0292\u0293\7N\2\2\u0293\u0294\7")
        buf.write("\u0080\2\2\u0294\u0295\7S\2\2\u0295\u0296\7\u0080\2\2")
        buf.write("\u0296\u0297\7\64\2\2\u0297\u0298\7\3\2\2\u0298\u0299")
        buf.write("\7\24\2\2\u0299\u029b\5H%\2\u029a\u029c\7\3\2\2\u029b")
        buf.write("\u029a\3\2\2\2\u029b\u029c\3\2\2\2\u029c\u0351\3\2\2\2")
        buf.write("\u029d\u029e\7N\2\2\u029e\u029f\7\u0080\2\2\u029f\u02a0")
        buf.write("\7S\2\2\u02a0\u02a1\5\64\33\2\u02a1\u02a2\7\64\2\2\u02a2")
        buf.write("\u02a3\7\3\2\2\u02a3\u02a4\7\24\2\2\u02a4\u02a8\5\64\33")
        buf.write("\2\u02a5\u02a7\7\3\2\2\u02a6\u02a5\3\2\2\2\u02a7\u02aa")
        buf.write("\3\2\2\2\u02a8\u02a6\3\2\2\2\u02a8\u02a9\3\2\2\2\u02a9")
        buf.write("\u0351\3\2\2\2\u02aa\u02a8\3\2\2\2\u02ab\u02ac\7N\2\2")
        buf.write("\u02ac\u02ad\7\u0080\2\2\u02ad\u02b0\7S\2\2\u02ae\u02b1")
        buf.write("\7\u009c\2\2\u02af\u02b1\5\64\33\2\u02b0\u02ae\3\2\2\2")
        buf.write("\u02b0\u02af\3\2\2\2\u02b1\u02b2\3\2\2\2\u02b2\u02b4\7")
        buf.write("\64\2\2\u02b3\u02b5\7|\2\2\u02b4\u02b3\3\2\2\2\u02b4\u02b5")
        buf.write("\3\2\2\2\u02b5\u02b9\3\2\2\2\u02b6\u02b7\7\3\2\2\u02b7")
        buf.write("\u02b8\7\24\2\2\u02b8\u02ba\5\4\3\2\u02b9\u02b6\3\2\2")
        buf.write("\2\u02ba\u02bb\3\2\2\2\u02bb\u02b9\3\2\2\2\u02bb\u02bc")
        buf.write("\3\2\2\2\u02bc\u02c0\3\2\2\2\u02bd\u02bf\7\24\2\2\u02be")
        buf.write("\u02bd\3\2\2\2\u02bf\u02c2\3\2\2\2\u02c0\u02be\3\2\2\2")
        buf.write("\u02c0\u02c1\3\2\2\2\u02c1\u0351\3\2\2\2\u02c2\u02c0\3")
        buf.write("\2\2\2\u02c3\u02c4\7N\2\2\u02c4\u02c5\7\u0080\2\2\u02c5")
        buf.write("\u02c7\7S\2\2\u02c6\u02c8\7\23\2\2\u02c7\u02c6\3\2\2\2")
        buf.write("\u02c8\u02c9\3\2\2\2\u02c9\u02c7\3\2\2\2\u02c9\u02ca\3")
        buf.write("\2\2\2\u02ca\u02cb\3\2\2\2\u02cb\u02cc\7%\2\2\u02cc\u02cd")
        buf.write("\7/\2\2\u02cd\u02ce\7\u009a\2\2\u02ce\u02d0\7\64\2\2\u02cf")
        buf.write("\u02d1\7|\2\2\u02d0\u02cf\3\2\2\2\u02d0\u02d1\3\2\2\2")
        buf.write("\u02d1\u02d5\3\2\2\2\u02d2\u02d3\7\3\2\2\u02d3\u02d4\7")
        buf.write("\24\2\2\u02d4\u02d6\5\4\3\2\u02d5\u02d2\3\2\2\2\u02d6")
        buf.write("\u02d7\3\2\2\2\u02d7\u02d5\3\2\2\2\u02d7\u02d8\3\2\2\2")
        buf.write("\u02d8\u02dc\3\2\2\2\u02d9\u02db\7\24\2\2\u02da\u02d9")
        buf.write("\3\2\2\2\u02db\u02de\3\2\2\2\u02dc\u02da\3\2\2\2\u02dc")
        buf.write("\u02dd\3\2\2\2\u02dd\u0351\3\2\2\2\u02de\u02dc\3\2\2\2")
        buf.write("\u02df\u02e0\7N\2\2\u02e0\u02e5\7\u0080\2\2\u02e1\u02e2")
        buf.write("\7\65\2\2\u02e2\u02e4\7\u0080\2\2\u02e3\u02e1\3\2\2\2")
        buf.write("\u02e4\u02e7\3\2\2\2\u02e5\u02e3\3\2\2\2\u02e5\u02e6\3")
        buf.write("\2\2\2\u02e6\u02e8\3\2\2\2\u02e7\u02e5\3\2\2\2\u02e8\u02e9")
        buf.write("\7S\2\2\u02e9\u02ea\7{\2\2\u02ea\u0303\7q\2\2\u02eb\u02f2")
        buf.write("\5V,\2\u02ec\u02ee\7\23\2\2\u02ed\u02ec\3\2\2\2\u02ee")
        buf.write("\u02ef\3\2\2\2\u02ef\u02ed\3\2\2\2\u02ef\u02f0\3\2\2\2")
        buf.write("\u02f0\u02f2\3\2\2\2\u02f1\u02eb\3\2\2\2\u02f1\u02ed\3")
        buf.write("\2\2\2\u02f2\u02fe\3\2\2\2\u02f3\u02fa\7\65\2\2\u02f4")
        buf.write("\u02fb\5V,\2\u02f5\u02f7\7\23\2\2\u02f6\u02f5\3\2\2\2")
        buf.write("\u02f7\u02f8\3\2\2\2\u02f8\u02f6\3\2\2\2\u02f8\u02f9\3")
        buf.write("\2\2\2\u02f9\u02fb\3\2\2\2\u02fa\u02f4\3\2\2\2\u02fa\u02f6")
        buf.write("\3\2\2\2\u02fb\u02fd\3\2\2\2\u02fc\u02f3\3\2\2\2\u02fd")
        buf.write("\u0300\3\2\2\2\u02fe\u02fc\3\2\2\2\u02fe\u02ff\3\2\2\2")
        buf.write("\u02ff\u0302\3\2\2\2\u0300\u02fe\3\2\2\2\u0301\u02f1\3")
        buf.write("\2\2\2\u0302\u0305\3\2\2\2\u0303\u0301\3\2\2\2\u0303\u0304")
        buf.write("\3\2\2\2\u0304\u0306\3\2\2\2\u0305\u0303\3\2\2\2\u0306")
        buf.write("\u0307\7r\2\2\u0307\u0309\7\64\2\2\u0308\u030a\7|\2\2")
        buf.write("\u0309\u0308\3\2\2\2\u0309\u030a\3\2\2\2\u030a\u030e\3")
        buf.write("\2\2\2\u030b\u030c\7\3\2\2\u030c\u030d\7\24\2\2\u030d")
        buf.write("\u030f\5\4\3\2\u030e\u030b\3\2\2\2\u030f\u0310\3\2\2\2")
        buf.write("\u0310\u030e\3\2\2\2\u0310\u0311\3\2\2\2\u0311\u0315\3")
        buf.write("\2\2\2\u0312\u0314\7\24\2\2\u0313\u0312\3\2\2\2\u0314")
        buf.write("\u0317\3\2\2\2\u0315\u0313\3\2\2\2\u0315\u0316\3\2\2\2")
        buf.write("\u0316\u0351\3\2\2\2\u0317\u0315\3\2\2\2\u0318\u0319\7")
        buf.write("N\2\2\u0319\u031a\7\u0080\2\2\u031a\u031b\7S\2\2\u031b")
        buf.write("\u031c\7\u0080\2\2\u031c\u031d\7m\2\2\u031d\u031e\7\u0080")
        buf.write("\2\2\u031e\u031f\7n\2\2\u031f\u0321\7\64\2\2\u0320\u0322")
        buf.write("\7|\2\2\u0321\u0320\3\2\2\2\u0321\u0322\3\2\2\2\u0322")
        buf.write("\u0326\3\2\2\2\u0323\u0324\7\3\2\2\u0324\u0325\7\24\2")
        buf.write("\2\u0325\u0327\5\4\3\2\u0326\u0323\3\2\2\2\u0327\u0328")
        buf.write("\3\2\2\2\u0328\u0326\3\2\2\2\u0328\u0329\3\2\2\2\u0329")
        buf.write("\u032d\3\2\2\2\u032a\u032c\7\24\2\2\u032b\u032a\3\2\2")
        buf.write("\2\u032c\u032f\3\2\2\2\u032d\u032b\3\2\2\2\u032d\u032e")
        buf.write("\3\2\2\2\u032e\u0351\3\2\2\2\u032f\u032d\3\2\2\2\u0330")
        buf.write("\u0331\7N\2\2\u0331\u0332\7\u0080\2\2\u0332\u0333\7S\2")
        buf.write("\2\u0333\u0334\7\u0080\2\2\u0334\u0335\7\64\2\2\u0335")
        buf.write("\u0336\7\3\2\2\u0336\u0337\7\24\2\2\u0337\u0339\5\64\33")
        buf.write("\2\u0338\u033a\7\3\2\2\u0339\u0338\3\2\2\2\u0339\u033a")
        buf.write("\3\2\2\2\u033a\u0351\3\2\2\2\u033b\u033c\7N\2\2\u033c")
        buf.write("\u033d\7\u0080\2\2\u033d\u033e\7S\2\2\u033e\u0343\7\u009a")
        buf.write("\2\2\u033f\u0340\7m\2\2\u0340\u0341\5V,\2\u0341\u0342")
        buf.write("\7n\2\2\u0342\u0344\3\2\2\2\u0343\u033f\3\2\2\2\u0343")
        buf.write("\u0344\3\2\2\2\u0344\u0345\3\2\2\2\u0345\u0349\7\64\2")
        buf.write("\2\u0346\u0347\7\3\2\2\u0347\u0348\7\24\2\2\u0348\u034a")
        buf.write("\5\4\3\2\u0349\u0346\3\2\2\2\u034a\u034b\3\2\2\2\u034b")
        buf.write("\u0349\3\2\2\2\u034b\u034c\3\2\2\2\u034c\u034e\3\2\2\2")
        buf.write("\u034d\u034f\7\3\2\2\u034e\u034d\3\2\2\2\u034e\u034f\3")
        buf.write("\2\2\2\u034f\u0351\3\2\2\2\u0350\u027b\3\2\2\2\u0350\u0292")
        buf.write("\3\2\2\2\u0350\u029d\3\2\2\2\u0350\u02ab\3\2\2\2\u0350")
        buf.write("\u02c3\3\2\2\2\u0350\u02df\3\2\2\2\u0350\u0318\3\2\2\2")
        buf.write("\u0350\u0330\3\2\2\2\u0350\u033b\3\2\2\2\u0351#\3\2\2")
        buf.write("\2\u0352\u0355\7k\2\2\u0353\u0356\5<\37\2\u0354\u0356")
        buf.write("\7\t\2\2\u0355\u0353\3\2\2\2\u0355\u0354\3\2\2\2\u0356")
        buf.write("\u0357\3\2\2\2\u0357\u0361\7\64\2\2\u0358\u0359\7\3\2")
        buf.write("\2\u0359\u035f\7\24\2\2\u035a\u0360\5\4\3\2\u035b\u035d")
        buf.write("\7<\2\2\u035c\u035e\7\u0080\2\2\u035d\u035c\3\2\2\2\u035d")
        buf.write("\u035e\3\2\2\2\u035e\u0360\3\2\2\2\u035f\u035a\3\2\2\2")
        buf.write("\u035f\u035b\3\2\2\2\u0360\u0362\3\2\2\2\u0361\u0358\3")
        buf.write("\2\2\2\u0362\u0363\3\2\2\2\u0363\u0361\3\2\2\2\u0363\u0364")
        buf.write("\3\2\2\2\u0364%\3\2\2\2\u0365\u0369\5(\25\2\u0366\u0368")
        buf.write("\5\30\r\2\u0367\u0366\3\2\2\2\u0368\u036b\3\2\2\2\u0369")
        buf.write("\u0367\3\2\2\2\u0369\u036a\3\2\2\2\u036a\u036c\3\2\2\2")
        buf.write("\u036b\u0369\3\2\2\2\u036c\u036d\5 \21\2\u036d\'\3\2\2")
        buf.write("\2\u036e\u036f\7j\2\2\u036f\u0370\5<\37\2\u0370\u0379")
        buf.write("\7\64\2\2\u0371\u0372\7\3\2\2\u0372\u0374\7\24\2\2\u0373")
        buf.write("\u0371\3\2\2\2\u0373\u0374\3\2\2\2\u0374\u0377\3\2\2\2")
        buf.write("\u0375\u0378\5\4\3\2\u0376\u0378\7<\2\2\u0377\u0375\3")
        buf.write("\2\2\2\u0377\u0376\3\2\2\2\u0378\u037a\3\2\2\2\u0379\u0373")
        buf.write("\3\2\2\2\u037a\u037b\3\2\2\2\u037b\u0379\3\2\2\2\u037b")
        buf.write("\u037c\3\2\2\2\u037c)\3\2\2\2\u037d\u037e\7_\2\2\u037e")
        buf.write("\u0382\7\u0080\2\2\u037f\u0380\7q\2\2\u0380\u0381\7\u0080")
        buf.write("\2\2\u0381\u0383\7r\2\2\u0382\u037f\3\2\2\2\u0382\u0383")
        buf.write("\3\2\2\2\u0383\u0384\3\2\2\2\u0384\u038f\7m\2\2\u0385")
        buf.write("\u038a\7\u0080\2\2\u0386\u0387\7\64\2\2\u0387\u038b\5")
        buf.write("F$\2\u0388\u0389\7\'\2\2\u0389\u038b\5D#\2\u038a\u0386")
        buf.write("\3\2\2\2\u038a\u0388\3\2\2\2\u038b\u038d\3\2\2\2\u038c")
        buf.write("\u038e\7\65\2\2\u038d\u038c\3\2\2\2\u038d\u038e\3\2\2")
        buf.write("\2\u038e\u0390\3\2\2\2\u038f\u0385\3\2\2\2\u0390\u0391")
        buf.write("\3\2\2\2\u0391\u038f\3\2\2\2\u0391\u0392\3\2\2\2\u0392")
        buf.write("\u0393\3\2\2\2\u0393\u0396\7n\2\2\u0394\u0395\7\64\2\2")
        buf.write("\u0395\u0397\5F$\2\u0396\u0394\3\2\2\2\u0396\u0397\3\2")
        buf.write("\2\2\u0397\u0398\3\2\2\2\u0398\u03be\7\'\2\2\u0399\u039a")
        buf.write("\7\3\2\2\u039a\u039b\7\24\2\2\u039b\u039d\5\4\3\2\u039c")
        buf.write("\u0399\3\2\2\2\u039d\u039e\3\2\2\2\u039e\u039c\3\2\2\2")
        buf.write("\u039e\u039f\3\2\2\2\u039f\u03bf\3\2\2\2\u03a0\u03a4\5")
        buf.write("\f\7\2\u03a1\u03a3\7\3\2\2\u03a2\u03a1\3\2\2\2\u03a3\u03a6")
        buf.write("\3\2\2\2\u03a4\u03a2\3\2\2\2\u03a4\u03a5\3\2\2\2\u03a5")
        buf.write("\u03ac\3\2\2\2\u03a6\u03a4\3\2\2\2\u03a7\u03a8\7\3\2\2")
        buf.write("\u03a8\u03a9\7\24\2\2\u03a9\u03ab\5\4\3\2\u03aa\u03a7")
        buf.write("\3\2\2\2\u03ab\u03ae\3\2\2\2\u03ac\u03aa\3\2\2\2\u03ac")
        buf.write("\u03ad\3\2\2\2\u03ad\u03bf\3\2\2\2\u03ae\u03ac\3\2\2\2")
        buf.write("\u03af\u03b3\5\16\b\2\u03b0\u03b2\7\3\2\2\u03b1\u03b0")
        buf.write("\3\2\2\2\u03b2\u03b5\3\2\2\2\u03b3\u03b1\3\2\2\2\u03b3")
        buf.write("\u03b4\3\2\2\2\u03b4\u03bb\3\2\2\2\u03b5\u03b3\3\2\2\2")
        buf.write("\u03b6\u03b7\7\3\2\2\u03b7\u03b8\7\24\2\2\u03b8\u03ba")
        buf.write("\5\4\3\2\u03b9\u03b6\3\2\2\2\u03ba\u03bd\3\2\2\2\u03bb")
        buf.write("\u03b9\3\2\2\2\u03bb\u03bc\3\2\2\2\u03bc\u03bf\3\2\2\2")
        buf.write("\u03bd\u03bb\3\2\2\2\u03be\u039c\3\2\2\2\u03be\u03a0\3")
        buf.write("\2\2\2\u03be\u03af\3\2\2\2\u03bf\u03c2\3\2\2\2\u03c0\u03c1")
        buf.write("\7c\2\2\u03c1\u03c3\5D#\2\u03c2\u03c0\3\2\2\2\u03c2\u03c3")
        buf.write("\3\2\2\2\u03c3\u03c5\3\2\2\2\u03c4\u03c6\7\3\2\2\u03c5")
        buf.write("\u03c4\3\2\2\2\u03c5\u03c6\3\2\2\2\u03c6\u045d\3\2\2\2")
        buf.write("\u03c7\u03c8\7_\2\2\u03c8\u03c9\7\n\2\2\u03c9\u03ca\7")
        buf.write("m\2\2\u03ca\u03cb\7\u0080\2\2\u03cb\u03cc\7\64\2\2\u03cc")
        buf.write("\u03cd\7_\2\2\u03cd\u03ce\7m\2\2\u03ce\u03cf\7\u0080\2")
        buf.write("\2\u03cf\u03d0\7\64\2\2\u03d0\u03d1\5F$\2\u03d1\u03d2")
        buf.write("\7n\2\2\u03d2\u03d5\7n\2\2\u03d3\u03d4\7\64\2\2\u03d4")
        buf.write("\u03d6\5F$\2\u03d5\u03d3\3\2\2\2\u03d5\u03d6\3\2\2\2\u03d6")
        buf.write("\u03d7\3\2\2\2\u03d7\u03fd\7\'\2\2\u03d8\u03d9\7\3\2\2")
        buf.write("\u03d9\u03da\7\24\2\2\u03da\u03dc\5\4\3\2\u03db\u03d8")
        buf.write("\3\2\2\2\u03dc\u03dd\3\2\2\2\u03dd\u03db\3\2\2\2\u03dd")
        buf.write("\u03de\3\2\2\2\u03de\u03fe\3\2\2\2\u03df\u03e3\5\f\7\2")
        buf.write("\u03e0\u03e2\7\3\2\2\u03e1\u03e0\3\2\2\2\u03e2\u03e5\3")
        buf.write("\2\2\2\u03e3\u03e1\3\2\2\2\u03e3\u03e4\3\2\2\2\u03e4\u03eb")
        buf.write("\3\2\2\2\u03e5\u03e3\3\2\2\2\u03e6\u03e7\7\3\2\2\u03e7")
        buf.write("\u03e8\7\24\2\2\u03e8\u03ea\5\4\3\2\u03e9\u03e6\3\2\2")
        buf.write("\2\u03ea\u03ed\3\2\2\2\u03eb\u03e9\3\2\2\2\u03eb\u03ec")
        buf.write("\3\2\2\2\u03ec\u03fe\3\2\2\2\u03ed\u03eb\3\2\2\2\u03ee")
        buf.write("\u03f2\5\16\b\2\u03ef\u03f1\7\3\2\2\u03f0\u03ef\3\2\2")
        buf.write("\2\u03f1\u03f4\3\2\2\2\u03f2\u03f0\3\2\2\2\u03f2\u03f3")
        buf.write("\3\2\2\2\u03f3\u03fa\3\2\2\2\u03f4\u03f2\3\2\2\2\u03f5")
        buf.write("\u03f6\7\3\2\2\u03f6\u03f7\7\24\2\2\u03f7\u03f9\5\4\3")
        buf.write("\2\u03f8\u03f5\3\2\2\2\u03f9\u03fc\3\2\2\2\u03fa\u03f8")
        buf.write("\3\2\2\2\u03fa\u03fb\3\2\2\2\u03fb\u03fe\3\2\2\2\u03fc")
        buf.write("\u03fa\3\2\2\2\u03fd\u03db\3\2\2\2\u03fd\u03df\3\2\2\2")
        buf.write("\u03fd\u03ee\3\2\2\2\u03fe\u03ff\3\2\2\2\u03ff\u0400\7")
        buf.write("c\2\2\u0400\u0401\5D#\2\u0401\u0403\3\2\2\2\u0402\u0404")
        buf.write("\7\3\2\2\u0403\u0402\3\2\2\2\u0403\u0404\3\2\2\2\u0404")
        buf.write("\u045d\3\2\2\2\u0405\u0406\7_\2\2\u0406\u040a\7\u0080")
        buf.write("\2\2\u0407\u0408\7q\2\2\u0408\u0409\7\u0080\2\2\u0409")
        buf.write("\u040b\7r\2\2\u040a\u0407\3\2\2\2\u040a\u040b\3\2\2\2")
        buf.write("\u040b\u040c\3\2\2\2\u040c\u040d\7m\2\2\u040d\u040e\7")
        buf.write("\u0080\2\2\u040e\u040f\7\64\2\2\u040f\u0410\7\31\2\2\u0410")
        buf.write("\u0411\7\u0080\2\2\u0411\u0412\7q\2\2\u0412\u0413\7\u0080")
        buf.write("\2\2\u0413\u0425\7r\2\2\u0414\u0415\7\65\2\2\u0415\u0416")
        buf.write("\7\u0080\2\2\u0416\u0421\7\'\2\2\u0417\u0419\7*\2\2\u0418")
        buf.write("\u0417\3\2\2\2\u0418\u0419\3\2\2\2\u0419\u041b\3\2\2\2")
        buf.write("\u041a\u041c\7\23\2\2\u041b\u041a\3\2\2\2\u041c\u041d")
        buf.write("\3\2\2\2\u041d\u041b\3\2\2\2\u041d\u041e\3\2\2\2\u041e")
        buf.write("\u0422\3\2\2\2\u041f\u0422\7\u0080\2\2\u0420\u0422\5V")
        buf.write(",\2\u0421\u0418\3\2\2\2\u0421\u041f\3\2\2\2\u0421\u0420")
        buf.write("\3\2\2\2\u0422\u0424\3\2\2\2\u0423\u0414\3\2\2\2\u0424")
        buf.write("\u0427\3\2\2\2\u0425\u0423\3\2\2\2\u0425\u0426\3\2\2\2")
        buf.write("\u0426\u0428\3\2\2\2\u0427\u0425\3\2\2\2\u0428\u042b\7")
        buf.write("n\2\2\u0429\u042a\7\64\2\2\u042a\u042c\5F$\2\u042b\u0429")
        buf.write("\3\2\2\2\u042b\u042c\3\2\2\2\u042c\u042d\3\2\2\2\u042d")
        buf.write("\u0453\7\'\2\2\u042e\u042f\7\3\2\2\u042f\u0430\7\24\2")
        buf.write("\2\u0430\u0432\5\4\3\2\u0431\u042e\3\2\2\2\u0432\u0433")
        buf.write("\3\2\2\2\u0433\u0431\3\2\2\2\u0433\u0434\3\2\2\2\u0434")
        buf.write("\u0454\3\2\2\2\u0435\u0439\5\f\7\2\u0436\u0438\7\3\2\2")
        buf.write("\u0437\u0436\3\2\2\2\u0438\u043b\3\2\2\2\u0439\u0437\3")
        buf.write("\2\2\2\u0439\u043a\3\2\2\2\u043a\u0441\3\2\2\2\u043b\u0439")
        buf.write("\3\2\2\2\u043c\u043d\7\3\2\2\u043d\u043e\7\24\2\2\u043e")
        buf.write("\u0440\5\4\3\2\u043f\u043c\3\2\2\2\u0440\u0443\3\2\2\2")
        buf.write("\u0441\u043f\3\2\2\2\u0441\u0442\3\2\2\2\u0442\u0454\3")
        buf.write("\2\2\2\u0443\u0441\3\2\2\2\u0444\u0448\5\16\b\2\u0445")
        buf.write("\u0447\7\3\2\2\u0446\u0445\3\2\2\2\u0447\u044a\3\2\2\2")
        buf.write("\u0448\u0446\3\2\2\2\u0448\u0449\3\2\2\2\u0449\u0450\3")
        buf.write("\2\2\2\u044a\u0448\3\2\2\2\u044b\u044c\7\3\2\2\u044c\u044d")
        buf.write("\7\24\2\2\u044d\u044f\5\4\3\2\u044e\u044b\3\2\2\2\u044f")
        buf.write("\u0452\3\2\2\2\u0450\u044e\3\2\2\2\u0450\u0451\3\2\2\2")
        buf.write("\u0451\u0454\3\2\2\2\u0452\u0450\3\2\2\2\u0453\u0431\3")
        buf.write("\2\2\2\u0453\u0435\3\2\2\2\u0453\u0444\3\2\2\2\u0454\u0457")
        buf.write("\3\2\2\2\u0455\u0456\7c\2\2\u0456\u0458\5D#\2\u0457\u0455")
        buf.write("\3\2\2\2\u0457\u0458\3\2\2\2\u0458\u045a\3\2\2\2\u0459")
        buf.write("\u045b\7\3\2\2\u045a\u0459\3\2\2\2\u045a\u045b\3\2\2\2")
        buf.write("\u045b\u045d\3\2\2\2\u045c\u037d\3\2\2\2\u045c\u03c7\3")
        buf.write("\2\2\2\u045c\u0405\3\2\2\2\u045d+\3\2\2\2\u045e\u045f")
        buf.write("\7X\2\2\u045f\u0463\7\u0080\2\2\u0460\u0461\7q\2\2\u0461")
        buf.write("\u0462\7\u0080\2\2\u0462\u0464\7r\2\2\u0463\u0460\3\2")
        buf.write("\2\2\u0463\u0464\3\2\2\2\u0464\u0465\3\2\2\2\u0465\u0476")
        buf.write("\7m\2\2\u0466\u0471\7\u0080\2\2\u0467\u046a\t\4\2\2\u0468")
        buf.write("\u046b\5F$\2\u0469\u046b\7\13\2\2\u046a\u0468\3\2\2\2")
        buf.write("\u046a\u0469\3\2\2\2\u046b\u046d\3\2\2\2\u046c\u046e\7")
        buf.write("\66\2\2\u046d\u046c\3\2\2\2\u046d\u046e\3\2\2\2\u046e")
        buf.write("\u0472\3\2\2\2\u046f\u0470\7\'\2\2\u0470\u0472\5D#\2\u0471")
        buf.write("\u0467\3\2\2\2\u0471\u046f\3\2\2\2\u0472\u0474\3\2\2\2")
        buf.write("\u0473\u0475\7\65\2\2\u0474\u0473\3\2\2\2\u0474\u0475")
        buf.write("\3\2\2\2\u0475\u0477\3\2\2\2\u0476\u0466\3\2\2\2\u0477")
        buf.write("\u0478\3\2\2\2\u0478\u0476\3\2\2\2\u0478\u0479\3\2\2\2")
        buf.write("\u0479\u047a\3\2\2\2\u047a\u0480\7n\2\2\u047b\u047e\t")
        buf.write("\4\2\2\u047c\u047f\5F$\2\u047d\u047f\7\13\2\2\u047e\u047c")
        buf.write("\3\2\2\2\u047e\u047d\3\2\2\2\u047f\u0481\3\2\2\2\u0480")
        buf.write("\u047b\3\2\2\2\u0480\u0481\3\2\2\2\u0481\u0482\3\2\2\2")
        buf.write("\u0482\u048c\7\'\2\2\u0483\u0485\7|\2\2\u0484\u0483\3")
        buf.write("\2\2\2\u0484\u0485\3\2\2\2\u0485\u0486\3\2\2\2\u0486\u0488")
        buf.write("\7\3\2\2\u0487\u0489\7\24\2\2\u0488\u0487\3\2\2\2\u0488")
        buf.write("\u0489\3\2\2\2\u0489\u048b\3\2\2\2\u048a\u0484\3\2\2\2")
        buf.write("\u048b\u048e\3\2\2\2\u048c\u048a\3\2\2\2\u048c\u048d\3")
        buf.write("\2\2\2\u048d\u04bc\3\2\2\2\u048e\u048c\3\2\2\2\u048f\u0491")
        buf.write("\7\3\2\2\u0490\u048f\3\2\2\2\u0490\u0491\3\2\2\2\u0491")
        buf.write("\u0493\3\2\2\2\u0492\u0494\7\24\2\2\u0493\u0492\3\2\2")
        buf.write("\2\u0493\u0494\3\2\2\2\u0494\u0495\3\2\2\2\u0495\u0497")
        buf.write("\5\4\3\2\u0496\u0490\3\2\2\2\u0497\u0498\3\2\2\2\u0498")
        buf.write("\u0496\3\2\2\2\u0498\u0499\3\2\2\2\u0499\u04bd\3\2\2\2")
        buf.write("\u049a\u049e\5\f\7\2\u049b\u049d\7\3\2\2\u049c\u049b\3")
        buf.write("\2\2\2\u049d\u04a0\3\2\2\2\u049e\u049c\3\2\2\2\u049e\u049f")
        buf.write("\3\2\2\2\u049f\u04aa\3\2\2\2\u04a0\u049e\3\2\2\2\u04a1")
        buf.write("\u04a3\7\3\2\2\u04a2\u04a1\3\2\2\2\u04a2\u04a3\3\2\2\2")
        buf.write("\u04a3\u04a5\3\2\2\2\u04a4\u04a6\7\24\2\2\u04a5\u04a4")
        buf.write("\3\2\2\2\u04a5\u04a6\3\2\2\2\u04a6\u04a7\3\2\2\2\u04a7")
        buf.write("\u04a9\5\4\3\2\u04a8\u04a2\3\2\2\2\u04a9\u04ac\3\2\2\2")
        buf.write("\u04aa\u04a8\3\2\2\2\u04aa\u04ab\3\2\2\2\u04ab\u04bd\3")
        buf.write("\2\2\2\u04ac\u04aa\3\2\2\2\u04ad\u04b1\5\16\b\2\u04ae")
        buf.write("\u04b0\7\3\2\2\u04af\u04ae\3\2\2\2\u04b0\u04b3\3\2\2\2")
        buf.write("\u04b1\u04af\3\2\2\2\u04b1\u04b2\3\2\2\2\u04b2\u04b9\3")
        buf.write("\2\2\2\u04b3\u04b1\3\2\2\2\u04b4\u04b5\7\3\2\2\u04b5\u04b6")
        buf.write("\7\24\2\2\u04b6\u04b8\5\4\3\2\u04b7\u04b4\3\2\2\2\u04b8")
        buf.write("\u04bb\3\2\2\2\u04b9\u04b7\3\2\2\2\u04b9\u04ba\3\2\2\2")
        buf.write("\u04ba\u04bd\3\2\2\2\u04bb\u04b9\3\2\2\2\u04bc\u0496\3")
        buf.write("\2\2\2\u04bc\u049a\3\2\2\2\u04bc\u04ad\3\2\2\2\u04bd\u04c0")
        buf.write("\3\2\2\2\u04be\u04bf\7c\2\2\u04bf\u04c1\5D#\2\u04c0\u04be")
        buf.write("\3\2\2\2\u04c0\u04c1\3\2\2\2\u04c1\u04c3\3\2\2\2\u04c2")
        buf.write("\u04c4\7\3\2\2\u04c3\u04c2\3\2\2\2\u04c3\u04c4\3\2\2\2")
        buf.write("\u04c4-\3\2\2\2\u04c5\u04c6\7e\2\2\u04c6\u04ca\5\64\33")
        buf.write("\2\u04c7\u04c8\7o\2\2\u04c8\u04c9\7\u009a\2\2\u04c9\u04cb")
        buf.write("\7p\2\2\u04ca\u04c7\3\2\2\2\u04ca\u04cb\3\2\2\2\u04cb")
        buf.write("\u04cc\3\2\2\2\u04cc\u04d2\7\'\2\2\u04cd\u04cf\7\3\2\2")
        buf.write("\u04ce\u04d0\7\24\2\2\u04cf\u04ce\3\2\2\2\u04cf\u04d0")
        buf.write("\3\2\2\2\u04d0\u04d1\3\2\2\2\u04d1\u04d3\5\4\3\2\u04d2")
        buf.write("\u04cd\3\2\2\2\u04d3\u04d4\3\2\2\2\u04d4\u04d2\3\2\2\2")
        buf.write("\u04d4\u04d5\3\2\2\2\u04d5/\3\2\2\2\u04d6\u04d7\7;\2\2")
        buf.write("\u04d7\u04d8\7\u0080\2\2\u04d8\u04ea\7\64\2\2\u04d9\u04da")
        buf.write("\7\3\2\2\u04da\u04e8\7\24\2\2\u04db\u04e9\5\4\3\2\u04dc")
        buf.write("\u04dd\7\u0080\2\2\u04dd\u04e1\7\3\2\2\u04de\u04e0\7\24")
        buf.write("\2\2\u04df\u04de\3\2\2\2\u04e0\u04e3\3\2\2\2\u04e1\u04df")
        buf.write("\3\2\2\2\u04e1\u04e2\3\2\2\2\u04e2\u04e4\3\2\2\2\u04e3")
        buf.write("\u04e1\3\2\2\2\u04e4\u04e5\7\7\2\2\u04e5\u04e6\7m\2\2")
        buf.write("\u04e6\u04e7\7\u0080\2\2\u04e7\u04e9\7n\2\2\u04e8\u04db")
        buf.write("\3\2\2\2\u04e8\u04dc\3\2\2\2\u04e9\u04eb\3\2\2\2\u04ea")
        buf.write("\u04d9\3\2\2\2\u04eb\u04ec\3\2\2\2\u04ec\u04ea\3\2\2\2")
        buf.write("\u04ec\u04ed\3\2\2\2\u04ed\61\3\2\2\2\u04ee\u04ef\7h\2")
        buf.write("\2\u04ef\u0502\7\3\2\2\u04f0\u04f1\7\24\2\2\u04f1\u04f2")
        buf.write("\7\u0080\2\2\u04f2\u04f3\7\'\2\2\u04f3\u04f4\7\f\2\2\u04f4")
        buf.write("\u04fb\7q\2\2\u04f5\u04fc\7\u009c\2\2\u04f6\u04f8\7\23")
        buf.write("\2\2\u04f7\u04f6\3\2\2\2\u04f8\u04f9\3\2\2\2\u04f9\u04f7")
        buf.write("\3\2\2\2\u04f9\u04fa\3\2\2\2\u04fa\u04fc\3\2\2\2\u04fb")
        buf.write("\u04f5\3\2\2\2\u04fb\u04f7\3\2\2\2\u04fc\u04fd\3\2\2\2")
        buf.write("\u04fd\u04fe\7\65\2\2\u04fe\u04ff\5F$\2\u04ff\u0500\7")
        buf.write("r\2\2\u0500\u0501\7\3\2\2\u0501\u0503\3\2\2\2\u0502\u04f0")
        buf.write("\3\2\2\2\u0503\u0504\3\2\2\2\u0504\u0502\3\2\2\2\u0504")
        buf.write("\u0505\3\2\2\2\u0505\63\3\2\2\2\u0506\u050b\7\u0080\2")
        buf.write("\2\u0507\u0508\7q\2\2\u0508\u0509\5F$\2\u0509\u050a\7")
        buf.write("r\2\2\u050a\u050c\3\2\2\2\u050b\u0507\3\2\2\2\u050b\u050c")
        buf.write("\3\2\2\2\u050c\u050d\3\2\2\2\u050d\u0516\7m\2\2\u050e")
        buf.write("\u0517\7\u0080\2\2\u050f\u0511\7\23\2\2\u0510\u050f\3")
        buf.write("\2\2\2\u0511\u0512\3\2\2\2\u0512\u0510\3\2\2\2\u0512\u0513")
        buf.write("\3\2\2\2\u0513\u0517\3\2\2\2\u0514\u0517\5V,\2\u0515\u0517")
        buf.write("\5D#\2\u0516\u050e\3\2\2\2\u0516\u0510\3\2\2\2\u0516\u0514")
        buf.write("\3\2\2\2\u0516\u0515\3\2\2\2\u0517\u0525\3\2\2\2\u0518")
        buf.write("\u0521\t\5\2\2\u0519\u0522\7\u0080\2\2\u051a\u051c\7\23")
        buf.write("\2\2\u051b\u051a\3\2\2\2\u051c\u051d\3\2\2\2\u051d\u051b")
        buf.write("\3\2\2\2\u051d\u051e\3\2\2\2\u051e\u0522\3\2\2\2\u051f")
        buf.write("\u0522\5V,\2\u0520\u0522\5D#\2\u0521\u0519\3\2\2\2\u0521")
        buf.write("\u051b\3\2\2\2\u0521\u051f\3\2\2\2\u0521\u0520\3\2\2\2")
        buf.write("\u0522\u0524\3\2\2\2\u0523\u0518\3\2\2\2\u0524\u0527\3")
        buf.write("\2\2\2\u0525\u0523\3\2\2\2\u0525\u0526\3\2\2\2\u0526\u052c")
        buf.write("\3\2\2\2\u0527\u0525\3\2\2\2\u0528\u0529\7\65\2\2\u0529")
        buf.write("\u052a\7\u0080\2\2\u052a\u052b\7\'\2\2\u052b\u052d\7\t")
        buf.write("\2\2\u052c\u0528\3\2\2\2\u052c\u052d\3\2\2\2\u052d\u052e")
        buf.write("\3\2\2\2\u052e\u0568\7n\2\2\u052f\u0537\7m\2\2\u0530\u0538")
        buf.write("\7\u0080\2\2\u0531\u0533\7\23\2\2\u0532\u0531\3\2\2\2")
        buf.write("\u0533\u0534\3\2\2\2\u0534\u0532\3\2\2\2\u0534\u0535\3")
        buf.write("\2\2\2\u0535\u0538\3\2\2\2\u0536\u0538\5V,\2\u0537\u0530")
        buf.write("\3\2\2\2\u0537\u0532\3\2\2\2\u0537\u0536\3\2\2\2\u0538")
        buf.write("\u0545\3\2\2\2\u0539\u0541\t\6\2\2\u053a\u0542\7\u0080")
        buf.write("\2\2\u053b\u053d\7\23\2\2\u053c\u053b\3\2\2\2\u053d\u053e")
        buf.write("\3\2\2\2\u053e\u053c\3\2\2\2\u053e\u053f\3\2\2\2\u053f")
        buf.write("\u0542\3\2\2\2\u0540\u0542\5V,\2\u0541\u053a\3\2\2\2\u0541")
        buf.write("\u053c\3\2\2\2\u0541\u0540\3\2\2\2\u0542\u0544\3\2\2\2")
        buf.write("\u0543\u0539\3\2\2\2\u0544\u0547\3\2\2\2\u0545\u0543\3")
        buf.write("\2\2\2\u0545\u0546\3\2\2\2\u0546\u0548\3\2\2\2\u0547\u0545")
        buf.write("\3\2\2\2\u0548\u0549\7n\2\2\u0549\u0568\7\u009a\2\2\u054a")
        buf.write("\u054b\7\u0080\2\2\u054b\u0559\7\u0080\2\2\u054c\u054d")
        buf.write("\7q\2\2\u054d\u054e\7\u0080\2\2\u054e\u0556\7r\2\2\u054f")
        buf.write("\u0550\7\65\2\2\u0550\u0551\7\u0080\2\2\u0551\u0552\7")
        buf.write("q\2\2\u0552\u0553\7\u0080\2\2\u0553\u0555\7r\2\2\u0554")
        buf.write("\u054f\3\2\2\2\u0555\u0558\3\2\2\2\u0556\u0554\3\2\2\2")
        buf.write("\u0556\u0557\3\2\2\2\u0557\u055a\3\2\2\2\u0558\u0556\3")
        buf.write("\2\2\2\u0559\u054c\3\2\2\2\u0559\u055a\3\2\2\2\u055a\u0568")
        buf.write("\3\2\2\2\u055b\u0560\7\u0080\2\2\u055c\u055d\7q\2\2\u055d")
        buf.write("\u055e\5F$\2\u055e\u055f\7r\2\2\u055f\u0561\3\2\2\2\u0560")
        buf.write("\u055c\3\2\2\2\u0560\u0561\3\2\2\2\u0561\u0562\3\2\2\2")
        buf.write("\u0562\u0564\7m\2\2\u0563\u0565\7\u009a\2\2\u0564\u0563")
        buf.write("\3\2\2\2\u0564\u0565\3\2\2\2\u0565\u0566\3\2\2\2\u0566")
        buf.write("\u0568\7n\2\2\u0567\u0506\3\2\2\2\u0567\u052f\3\2\2\2")
        buf.write("\u0567\u054a\3\2\2\2\u0567\u055b\3\2\2\2\u0568\65\3\2")
        buf.write("\2\2\u0569\u056a\7\u009a\2\2\u056a\u056b\7m\2\2\u056b")
        buf.write("\u0570\5D#\2\u056c\u056d\t\7\2\2\u056d\u056f\5D#\2\u056e")
        buf.write("\u056c\3\2\2\2\u056f\u0572\3\2\2\2\u0570\u056e\3\2\2\2")
        buf.write("\u0570\u0571\3\2\2\2\u0571\u0573\3\2\2\2\u0572\u0570\3")
        buf.write("\2\2\2\u0573\u0574\7n\2\2\u0574\67\3\2\2\2\u0575\u0577")
        buf.write("\t\b\2\2\u0576\u0575\3\2\2\2\u0577\u0578\3\2\2\2\u0578")
        buf.write("\u0576\3\2\2\2\u0578\u0579\3\2\2\2\u0579\u057a\3\2\2\2")
        buf.write("\u057a\u057b\7\u0080\2\2\u057b\u057c\7n\2\2\u057c9\3\2")
        buf.write("\2\2\u057d\u057e\7R\2\2\u057e\u0583\7\u0080\2\2\u057f")
        buf.write("\u0580\7\65\2\2\u0580\u0582\7\u0080\2\2\u0581\u057f\3")
        buf.write("\2\2\2\u0582\u0585\3\2\2\2\u0583\u0581\3\2\2\2\u0583\u0584")
        buf.write("\3\2\2\2\u0584\u0588\3\2\2\2\u0585\u0583\3\2\2\2\u0586")
        buf.write("\u0587\7O\2\2\u0587\u0589\7\u0080\2\2\u0588\u0586\3\2")
        buf.write("\2\2\u0588\u0589\3\2\2\2\u0589\u0596\3\2\2\2\u058a\u058b")
        buf.write("\7O\2\2\u058b\u058c\7\u0080\2\2\u058c\u058d\7R\2\2\u058d")
        buf.write("\u0592\7\u0080\2\2\u058e\u058f\7\65\2\2\u058f\u0591\7")
        buf.write("\u0080\2\2\u0590\u058e\3\2\2\2\u0591\u0594\3\2\2\2\u0592")
        buf.write("\u0590\3\2\2\2\u0592\u0593\3\2\2\2\u0593\u0596\3\2\2\2")
        buf.write("\u0594\u0592\3\2\2\2\u0595\u057d\3\2\2\2\u0595\u058a\3")
        buf.write("\2\2\2\u0596;\3\2\2\2\u0597\u059c\5> \2\u0598\u0599\t")
        buf.write("\t\2\2\u0599\u059b\5> \2\u059a\u0598\3\2\2\2\u059b\u059e")
        buf.write("\3\2\2\2\u059c\u059a\3\2\2\2\u059c\u059d\3\2\2\2\u059d")
        buf.write("=\3\2\2\2\u059e\u059c\3\2\2\2\u059f\u05ab\5D#\2\u05a0")
        buf.write("\u05a2\7/\2\2\u05a1\u05a3\7\'\2\2\u05a2\u05a1\3\2\2\2")
        buf.write("\u05a2\u05a3\3\2\2\2\u05a3\u05ac\3\2\2\2\u05a4\u05ac\7")
        buf.write("\r\2\2\u05a5\u05ac\7\16\2\2\u05a6\u05a8\7\60\2\2\u05a7")
        buf.write("\u05a9\7\'\2\2\u05a8\u05a7\3\2\2\2\u05a8\u05a9\3\2\2\2")
        buf.write("\u05a9\u05ac\3\2\2\2\u05aa\u05ac\7&\2\2\u05ab\u05a0\3")
        buf.write("\2\2\2\u05ab\u05a4\3\2\2\2\u05ab\u05a5\3\2\2\2\u05ab\u05a6")
        buf.write("\3\2\2\2\u05ab\u05aa\3\2\2\2\u05ac\u05ad\3\2\2\2\u05ad")
        buf.write("\u05ae\5D#\2\u05ae\u05b3\3\2\2\2\u05af\u05b3\7\t\2\2\u05b0")
        buf.write("\u05b3\7\17\2\2\u05b1\u05b3\7\u0080\2\2\u05b2\u059f\3")
        buf.write("\2\2\2\u05b2\u05af\3\2\2\2\u05b2\u05b0\3\2\2\2\u05b2\u05b1")
        buf.write("\3\2\2\2\u05b3?\3\2\2\2\u05b4\u05b6\7u\2\2\u05b5\u05b4")
        buf.write("\3\2\2\2\u05b6\u05b7\3\2\2\2\u05b7\u05b5\3\2\2\2\u05b7")
        buf.write("\u05b8\3\2\2\2\u05b8A\3\2\2\2\u05b9\u05bb\7v\2\2\u05ba")
        buf.write("\u05b9\3\2\2\2\u05bb\u05bc\3\2\2\2\u05bc\u05ba\3\2\2\2")
        buf.write("\u05bc\u05bd\3\2\2\2\u05bdC\3\2\2\2\u05be\u0640\7\t\2")
        buf.write("\2\u05bf\u0640\7\17\2\2\u05c0\u0640\7v\2\2\u05c1\u05c3")
        buf.write("\7\23\2\2\u05c2\u05c1\3\2\2\2\u05c3\u05c4\3\2\2\2\u05c4")
        buf.write("\u05c2\3\2\2\2\u05c4\u05c5\3\2\2\2\u05c5\u05c9\3\2\2\2")
        buf.write("\u05c6\u05c9\7\u0080\2\2\u05c7\u05c9\5V,\2\u05c8\u05c2")
        buf.write("\3\2\2\2\u05c8\u05c6\3\2\2\2\u05c8\u05c7\3\2\2\2\u05c9")
        buf.write("\u05d6\3\2\2\2\u05ca\u05d2\t\n\2\2\u05cb\u05cd\7\23\2")
        buf.write("\2\u05cc\u05cb\3\2\2\2\u05cd\u05ce\3\2\2\2\u05ce\u05cc")
        buf.write("\3\2\2\2\u05ce\u05cf\3\2\2\2\u05cf\u05d3\3\2\2\2\u05d0")
        buf.write("\u05d3\7\u0080\2\2\u05d1\u05d3\5V,\2\u05d2\u05cc\3\2\2")
        buf.write("\2\u05d2\u05d0\3\2\2\2\u05d2\u05d1\3\2\2\2\u05d3\u05d5")
        buf.write("\3\2\2\2\u05d4\u05ca\3\2\2\2\u05d5\u05d8\3\2\2\2\u05d6")
        buf.write("\u05d4\3\2\2\2\u05d6\u05d7\3\2\2\2\u05d7\u0640\3\2\2\2")
        buf.write("\u05d8\u05d6\3\2\2\2\u05d9\u05da\7\u0080\2\2\u05da\u05e4")
        buf.write("\7q\2\2\u05db\u05e5\7\u0080\2\2\u05dc\u05de\7*\2\2\u05dd")
        buf.write("\u05dc\3\2\2\2\u05dd\u05de\3\2\2\2\u05de\u05e0\3\2\2\2")
        buf.write("\u05df\u05e1\7\23\2\2\u05e0\u05df\3\2\2\2\u05e1\u05e2")
        buf.write("\3\2\2\2\u05e2\u05e0\3\2\2\2\u05e2\u05e3\3\2\2\2\u05e3")
        buf.write("\u05e5\3\2\2\2\u05e4\u05db\3\2\2\2\u05e4\u05dd\3\2\2\2")
        buf.write("\u05e5\u05f8\3\2\2\2\u05e6\u05f4\t\13\2\2\u05e7\u05e9")
        buf.write("\7*\2\2\u05e8\u05e7\3\2\2\2\u05e8\u05e9\3\2\2\2\u05e9")
        buf.write("\u05ea\3\2\2\2\u05ea\u05f5\5V,\2\u05eb\u05ed\7*\2\2\u05ec")
        buf.write("\u05eb\3\2\2\2\u05ec\u05ed\3\2\2\2\u05ed\u05ef\3\2\2\2")
        buf.write("\u05ee\u05f0\7\23\2\2\u05ef\u05ee\3\2\2\2\u05f0\u05f1")
        buf.write("\3\2\2\2\u05f1\u05ef\3\2\2\2\u05f1\u05f2\3\2\2\2\u05f2")
        buf.write("\u05f5\3\2\2\2\u05f3\u05f5\7\u0080\2\2\u05f4\u05e8\3\2")
        buf.write("\2\2\u05f4\u05ec\3\2\2\2\u05f4\u05f3\3\2\2\2\u05f5\u05f7")
        buf.write("\3\2\2\2\u05f6\u05e6\3\2\2\2\u05f7\u05fa\3\2\2\2\u05f8")
        buf.write("\u05f6\3\2\2\2\u05f8\u05f9\3\2\2\2\u05f9\u05fb\3\2\2\2")
        buf.write("\u05fa\u05f8\3\2\2\2\u05fb\u0640\7r\2\2\u05fc\u0609\5")
        buf.write("\64\33\2\u05fd\u0605\t\f\2\2\u05fe\u0606\5\64\33\2\u05ff")
        buf.write("\u0601\7\23\2\2\u0600\u05ff\3\2\2\2\u0601\u0602\3\2\2")
        buf.write("\2\u0602\u0600\3\2\2\2\u0602\u0603\3\2\2\2\u0603\u0606")
        buf.write("\3\2\2\2\u0604\u0606\5V,\2\u0605\u05fe\3\2\2\2\u0605\u0600")
        buf.write("\3\2\2\2\u0605\u0604\3\2\2\2\u0606\u0608\3\2\2\2\u0607")
        buf.write("\u05fd\3\2\2\2\u0608\u060b\3\2\2\2\u0609\u0607\3\2\2\2")
        buf.write("\u0609\u060a\3\2\2\2\u060a\u0640\3\2\2\2\u060b\u0609\3")
        buf.write("\2\2\2\u060c\u0640\5V,\2\u060d\u062c\7q\2\2\u060e\u0610")
        buf.write("\7*\2\2\u060f\u060e\3\2\2\2\u060f\u0610\3\2\2\2\u0610")
        buf.write("\u0611\3\2\2\2\u0611\u0618\5V,\2\u0612\u0614\7\23\2\2")
        buf.write("\u0613\u0612\3\2\2\2\u0614\u0615\3\2\2\2\u0615\u0613\3")
        buf.write("\2\2\2\u0615\u0616\3\2\2\2\u0616\u0618\3\2\2\2\u0617\u060f")
        buf.write("\3\2\2\2\u0617\u0613\3\2\2\2\u0618\u0627\3\2\2\2\u0619")
        buf.write("\u0623\7\65\2\2\u061a\u061c\7*\2\2\u061b\u061a\3\2\2\2")
        buf.write("\u061b\u061c\3\2\2\2\u061c\u061d\3\2\2\2\u061d\u0624\5")
        buf.write("V,\2\u061e\u0620\7\23\2\2\u061f\u061e\3\2\2\2\u0620\u0621")
        buf.write("\3\2\2\2\u0621\u061f\3\2\2\2\u0621\u0622\3\2\2\2\u0622")
        buf.write("\u0624\3\2\2\2\u0623\u061b\3\2\2\2\u0623\u061f\3\2\2\2")
        buf.write("\u0624\u0626\3\2\2\2\u0625\u0619\3\2\2\2\u0626\u0629\3")
        buf.write("\2\2\2\u0627\u0625\3\2\2\2\u0627\u0628\3\2\2\2\u0628\u062b")
        buf.write("\3\2\2\2\u0629\u0627\3\2\2\2\u062a\u0617\3\2\2\2\u062b")
        buf.write("\u062e\3\2\2\2\u062c\u062a\3\2\2\2\u062c\u062d\3\2\2\2")
        buf.write("\u062d\u062f\3\2\2\2\u062e\u062c\3\2\2\2\u062f\u0640\7")
        buf.write("r\2\2\u0630\u0631\7m\2\2\u0631\u0639\5D#\2\u0632\u0635")
        buf.write("\t\r\2\2\u0633\u0636\5V,\2\u0634\u0636\7\u0080\2\2\u0635")
        buf.write("\u0633\3\2\2\2\u0635\u0634\3\2\2\2\u0636\u0638\3\2\2\2")
        buf.write("\u0637\u0632\3\2\2\2\u0638\u063b\3\2\2\2\u0639\u0637\3")
        buf.write("\2\2\2\u0639\u063a\3\2\2\2\u063a\u063c\3\2\2\2\u063b\u0639")
        buf.write("\3\2\2\2\u063c\u063d\7n\2\2\u063d\u0640\3\2\2\2\u063e")
        buf.write("\u0640\7\u009a\2\2\u063f\u05be\3\2\2\2\u063f\u05bf\3\2")
        buf.write("\2\2\u063f\u05c0\3\2\2\2\u063f\u05c8\3\2\2\2\u063f\u05d9")
        buf.write("\3\2\2\2\u063f\u05fc\3\2\2\2\u063f\u060c\3\2\2\2\u063f")
        buf.write("\u060d\3\2\2\2\u063f\u0630\3\2\2\2\u063f\u063e\3\2\2\2")
        buf.write("\u0640E\3\2\2\2\u0641\u0642\t\16\2\2\u0642G\3\2\2\2\u0643")
        buf.write("\u0647\5N(\2\u0644\u0646\5J&\2\u0645\u0644\3\2\2\2\u0646")
        buf.write("\u0649\3\2\2\2\u0647\u0645\3\2\2\2\u0647\u0648\3\2\2\2")
        buf.write("\u0648\u064d\3\2\2\2\u0649\u0647\3\2\2\2\u064a\u064c\5")
        buf.write("L\'\2\u064b\u064a\3\2\2\2\u064c\u064f\3\2\2\2\u064d\u064b")
        buf.write("\3\2\2\2\u064d\u064e\3\2\2\2\u064e\u0650\3\2\2\2\u064f")
        buf.write("\u064d\3\2\2\2\u0650\u0651\5 \21\2\u0651I\3\2\2\2\u0652")
        buf.write("\u0654\7\24\2\2\u0653\u0652\3\2\2\2\u0653\u0654\3\2\2")
        buf.write("\2\u0654\u0655\3\2\2\2\u0655\u0656\7$\2\2\u0656\u065b")
        buf.write("\t\17\2\2\u0657\u0658\7\65\2\2\u0658\u065a\t\17\2\2\u0659")
        buf.write("\u0657\3\2\2\2\u065a\u065d\3\2\2\2\u065b\u0659\3\2\2\2")
        buf.write("\u065b\u065c\3\2\2\2\u065c\u065e\3\2\2\2\u065d\u065b\3")
        buf.write("\2\2\2\u065e\u066b\7\64\2\2\u065f\u0660\7\3\2\2\u0660")
        buf.write("\u0662\7\24\2\2\u0661\u065f\3\2\2\2\u0661\u0662\3\2\2")
        buf.write("\2\u0662\u0666\3\2\2\2\u0663\u0667\5\4\3\2\u0664\u0665")
        buf.write("\7c\2\2\u0665\u0667\5D#\2\u0666\u0663\3\2\2\2\u0666\u0664")
        buf.write("\3\2\2\2\u0667\u0669\3\2\2\2\u0668\u066a\7\3\2\2\u0669")
        buf.write("\u0668\3\2\2\2\u0669\u066a\3\2\2\2\u066a\u066c\3\2\2\2")
        buf.write("\u066b\u0661\3\2\2\2\u066c\u066d\3\2\2\2\u066d\u066b\3")
        buf.write("\2\2\2\u066d\u066e\3\2\2\2\u066eK\3\2\2\2\u066f\u0670")
        buf.write("\7G\2\2\u0670\u0671\5D#\2\u0671\u0673\7\64\2\2\u0672\u0674")
        buf.write("\7|\2\2\u0673\u0672\3\2\2\2\u0673\u0674\3\2\2\2\u0674")
        buf.write("\u067a\3\2\2\2\u0675\u0677\7\3\2\2\u0676\u0678\7\24\2")
        buf.write("\2\u0677\u0676\3\2\2\2\u0677\u0678\3\2\2\2\u0678\u0679")
        buf.write("\3\2\2\2\u0679\u067b\5\4\3\2\u067a\u0675\3\2\2\2\u067b")
        buf.write("\u067c\3\2\2\2\u067c\u067a\3\2\2\2\u067c\u067d\3\2\2\2")
        buf.write("\u067dM\3\2\2\2\u067e\u067f\7=\2\2\u067f\u0681\7\u0080")
        buf.write("\2\2\u0680\u0682\7|\2\2\u0681\u0680\3\2\2\2\u0681\u0682")
        buf.write("\3\2\2\2\u0682\u0684\3\2\2\2\u0683\u0685\7\3\2\2\u0684")
        buf.write("\u0683\3\2\2\2\u0684\u0685\3\2\2\2\u0685O\3\2\2\2\u0686")
        buf.write("\u0687\7\3\2\2\u0687Q\3\2\2\2\u0688\u068a\7\24\2\2\u0689")
        buf.write("\u0688\3\2\2\2\u0689\u068a\3\2\2\2\u068a\u068b\3\2\2\2")
        buf.write("\u068b\u068c\7|\2\2\u068cS\3\2\2\2\u068d\u068e\t\20\2")
        buf.write("\2\u068eU\3\2\2\2\u068f\u0690\t\21\2\2\u0690W\3\2\2\2")
        buf.write("\u0112\\ay~\u0085\u008b\u0090\u0095\u009b\u00a1\u00ad")
        buf.write("\u00b2\u00b5\u00b9\u00be\u00c1\u00c5\u00c9\u00cb\u00d0")
        buf.write("\u00d4\u00d8\u00dc\u00e1\u00e5\u00e9\u00ed\u00f2\u00f6")
        buf.write("\u00f9\u00fe\u0102\u010a\u0113\u011e\u0123\u012c\u0131")
        buf.write("\u0135\u0139\u013f\u0143\u0147\u014f\u015d\u0161\u0165")
        buf.write("\u016f\u0171\u0176\u017a\u017e\u0186\u018e\u0198\u01a0")
        buf.write("\u01a6\u01a8\u01ad\u01b1\u01b5\u01bd\u01ca\u01cf\u01d3")
        buf.write("\u01dc\u01e0\u01e8\u01f6\u01fa\u01fe\u0208\u020a\u020f")
        buf.write("\u0213\u0217\u021f\u022c\u0231\u0235\u023e\u0242\u0248")
        buf.write("\u024c\u0252\u0255\u025b\u025e\u0266\u026a\u026e\u0270")
        buf.write("\u0275\u0279\u0283\u028a\u028f\u029b\u02a8\u02b0\u02b4")
        buf.write("\u02bb\u02c0\u02c9\u02d0\u02d7\u02dc\u02e5\u02ef\u02f1")
        buf.write("\u02f8\u02fa\u02fe\u0303\u0309\u0310\u0315\u0321\u0328")
        buf.write("\u032d\u0339\u0343\u034b\u034e\u0350\u0355\u035d\u035f")
        buf.write("\u0363\u0369\u0373\u0377\u037b\u0382\u038a\u038d\u0391")
        buf.write("\u0396\u039e\u03a4\u03ac\u03b3\u03bb\u03be\u03c2\u03c5")
        buf.write("\u03d5\u03dd\u03e3\u03eb\u03f2\u03fa\u03fd\u0403\u040a")
        buf.write("\u0418\u041d\u0421\u0425\u042b\u0433\u0439\u0441\u0448")
        buf.write("\u0450\u0453\u0457\u045a\u045c\u0463\u046a\u046d\u0471")
        buf.write("\u0474\u0478\u047e\u0480\u0484\u0488\u048c\u0490\u0493")
        buf.write("\u0498\u049e\u04a2\u04a5\u04aa\u04b1\u04b9\u04bc\u04c0")
        buf.write("\u04c3\u04ca\u04cf\u04d4\u04e1\u04e8\u04ec\u04f9\u04fb")
        buf.write("\u0504\u050b\u0512\u0516\u051d\u0521\u0525\u052c\u0534")
        buf.write("\u0537\u053e\u0541\u0545\u0556\u0559\u0560\u0564\u0567")
        buf.write("\u0570\u0578\u0583\u0588\u0592\u0595\u059c\u05a2\u05a8")
        buf.write("\u05ab\u05b2\u05b7\u05bc\u05c4\u05c8\u05ce\u05d2\u05d6")
        buf.write("\u05dd\u05e2\u05e4\u05e8\u05ec\u05f1\u05f4\u05f8\u0602")
        buf.write("\u0605\u0609\u060f\u0615\u0617\u061b\u0621\u0623\u0627")
        buf.write("\u062c\u0635\u0639\u063f\u0647\u064d\u0653\u065b\u0661")
        buf.write("\u0666\u0669\u066d\u0673\u0677\u067c\u0681\u0684\u0689")
        return buf.getvalue()


class nimParser ( Parser ):

    grammarFileName = "nim.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'\n'", "'\r'", "'#'", "'assert'", "'inc'", 
                     "'dec'", "'true'", "'forEach'", "'untyped'", "'array'", 
                     "'<='", "'>='", "'false'", "'string'", "'int'", "'bool'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "' '", "<INVALID>", 
                     "'and'", "'var'", "'or'", "'not'", "'div'", "'shl'", 
                     "'shr'", "'xor'", "'mod'", "'echo'", "'is'", "'isnot'", 
                     "'of'", "'..'", "'=='", "'='", "'+'", "'*'", "'-'", 
                     "'/'", "'~'", "'&'", "'|'", "'<'", "'>'", "'!'", "'^'", 
                     "'.'", "':'", "','", "';'", "'addr'", "'as'", "'asm'", 
                     "'bind'", "'block'", "'break'", "'case'", "'cast'", 
                     "'concept'", "'const'", "'continue'", "'converter'", 
                     "'defer'", "'discard'", "'distinct'", "'do'", "'elif'", 
                     "'else'", "'end'", "'enum'", "'except'", "'export'", 
                     "'finally'", "'for'", "'from'", "'func'", "'if'", "'import'", 
                     "'in'", "'include'", "'interface'", "'iterator'", "'let'", 
                     "'macro'", "'method'", "'mixin'", "'nil'", "'notin'", 
                     "'object'", "'out'", "'proc'", "'ptr'", "'raise'", 
                     "'ref'", "'return'", "'static'", "'template'", "'try'", 
                     "'tuple'", "'type'", "'using'", "'when'", "'while'", 
                     "'yield'", "'('", "')'", "'{'", "'}'", "'['", "']'", 
                     "'%'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "DIGIT", "INDENT", "NOT_INDENT", "SPACE", 
                      "NEWLINE", "AND", "VARIABLE", "OR", "NOT", "DIV", 
                      "SHL", "SHR", "XOR", "MOD", "ECHO", "IS", "ISNOT", 
                      "OF", "OP6", "EQUALS_EQUALS", "EQUALS_OPERATOR", "ADD_OPERATOR", 
                      "MUL_OPERATOR", "MINUS_OPERATOR", "DIV_OPERATOR", 
                      "BITWISE_NOT_OPERATOR", "AND_OPERATOR", "OR_OPERATOR", 
                      "LESS_THAN", "GREATER_THAN", "NOT_OPERATOR", "XOR_OPERATOR", 
                      "DOT", "COLON", "COMMA", "SEMI_COLON", "ADDR", "AS", 
                      "ASM", "BIND", "BLOCK", "BREAK", "CASE", "CAST", "CONCEPT", 
                      "CONST", "CONTINUE", "CONVERTER", "DEFER", "DISCARD", 
                      "DISTINCT", "DO", "ELIF", "ELSE", "END", "ENUM", "EXCEPT", 
                      "EXPORT", "FINALLY", "FOR", "FROM", "FUNC", "IF", 
                      "IMPORT", "IN", "INCLUDE", "INTERFACE", "ITERATOR", 
                      "LET", "MACRO", "METHOD", "MIXIN", "NIL", "NOTIN", 
                      "OBJECT", "OUT", "PROC", "PTR", "RAISE", "REF", "RETURN", 
                      "STATIC", "TEMPLATE", "TRY", "TUPLE", "TYPE", "USING", 
                      "WHEN", "WHILE", "YIELD", "OPEN_PAREN", "CLOSE_PAREN", 
                      "OPEN_BRACE", "CLOSE_BRACE", "OPEN_BRACK", "CLOSE_BRACK", 
                      "MODULUS", "TRIPLESTR_LIT", "CHAR_LIT", "STR_LIT", 
                      "RSTR_LIT", "GENERALIZED_STR_LIT", "GENERALIZED_TRIPLESTR_LIT", 
                      "WS", "AT", "COMMENT", "MULTI_LINE_COMMENT", "MULTI_LINE_COMMENT2", 
                      "SINGLE_MULTI_LINE_COMMENT", "IDENTIFIER", "H", "LETTER", 
                      "INT_LIT", "HEX_LIT", "DEC_LIT", "OCT_LIT", "BIN_LIT", 
                      "INT8_LIT", "INT16_LIT", "INT32_LIT", "INT64_LIT", 
                      "UINT_LIT", "UINT8_LIT", "UINT16_LIT", "UINT32_LIT", 
                      "UINT64_LIT", "FLOAT_LIT", "FLOAT32_LIT", "FLOAT32_SUFFIX", 
                      "FLOAT64_LIT", "FLOAT64_SUFFIX", "EXP", "HEXDIGIT", 
                      "OCTDIGIT", "BINDIGIT", "NEW_IDENTIFIER", "ARRAY_LEN", 
                      "FORLOOP_RANGE" ]

    RULE_start = 0
    RULE_stmt = 1
    RULE_varDec = 2
    RULE_constDec = 3
    RULE_letDec = 4
    RULE_assignStmt = 5
    RULE_printStmt = 6
    RULE_assertStmt = 7
    RULE_complexIfStmt = 8
    RULE_varComplexIfStmt = 9
    RULE_simpleIfStmt = 10
    RULE_simpleElifStmt = 11
    RULE_varSimpleIfStmt = 12
    RULE_varSimpleElifStmt = 13
    RULE_varSimpleElseStmt = 14
    RULE_simpleElseStmt = 15
    RULE_forLoop = 16
    RULE_whileLoop = 17
    RULE_whenStmt = 18
    RULE_simpleWhenStmt = 19
    RULE_procBlock = 20
    RULE_macroBlock = 21
    RULE_templateStmt = 22
    RULE_block = 23
    RULE_typeBlock = 24
    RULE_methodInvoke = 25
    RULE_instanceMethodInvoke = 26
    RULE_forEachStmt = 27
    RULE_importStmt = 28
    RULE_condition = 29
    RULE_simpleCondition = 30
    RULE_character_literals = 31
    RULE_string_literals = 32
    RULE_rightHandSideStmt = 33
    RULE_dataType = 34
    RULE_caseStmt = 35
    RULE_simpleOfStmt = 36
    RULE_simpleElifOfStmt = 37
    RULE_simpleCaseStmt = 38
    RULE_emptyStmt = 39
    RULE_commentStmt = 40
    RULE_operator = 41
    RULE_literal = 42

    ruleNames =  [ "start", "stmt", "varDec", "constDec", "letDec", "assignStmt", 
                   "printStmt", "assertStmt", "complexIfStmt", "varComplexIfStmt", 
                   "simpleIfStmt", "simpleElifStmt", "varSimpleIfStmt", 
                   "varSimpleElifStmt", "varSimpleElseStmt", "simpleElseStmt", 
                   "forLoop", "whileLoop", "whenStmt", "simpleWhenStmt", 
                   "procBlock", "macroBlock", "templateStmt", "block", "typeBlock", 
                   "methodInvoke", "instanceMethodInvoke", "forEachStmt", 
                   "importStmt", "condition", "simpleCondition", "character_literals", 
                   "string_literals", "rightHandSideStmt", "dataType", "caseStmt", 
                   "simpleOfStmt", "simpleElifOfStmt", "simpleCaseStmt", 
                   "emptyStmt", "commentStmt", "operator", "literal" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    DIGIT=17
    INDENT=18
    NOT_INDENT=19
    SPACE=20
    NEWLINE=21
    AND=22
    VARIABLE=23
    OR=24
    NOT=25
    DIV=26
    SHL=27
    SHR=28
    XOR=29
    MOD=30
    ECHO=31
    IS=32
    ISNOT=33
    OF=34
    OP6=35
    EQUALS_EQUALS=36
    EQUALS_OPERATOR=37
    ADD_OPERATOR=38
    MUL_OPERATOR=39
    MINUS_OPERATOR=40
    DIV_OPERATOR=41
    BITWISE_NOT_OPERATOR=42
    AND_OPERATOR=43
    OR_OPERATOR=44
    LESS_THAN=45
    GREATER_THAN=46
    NOT_OPERATOR=47
    XOR_OPERATOR=48
    DOT=49
    COLON=50
    COMMA=51
    SEMI_COLON=52
    ADDR=53
    AS=54
    ASM=55
    BIND=56
    BLOCK=57
    BREAK=58
    CASE=59
    CAST=60
    CONCEPT=61
    CONST=62
    CONTINUE=63
    CONVERTER=64
    DEFER=65
    DISCARD=66
    DISTINCT=67
    DO=68
    ELIF=69
    ELSE=70
    END=71
    ENUM=72
    EXCEPT=73
    EXPORT=74
    FINALLY=75
    FOR=76
    FROM=77
    FUNC=78
    IF=79
    IMPORT=80
    IN=81
    INCLUDE=82
    INTERFACE=83
    ITERATOR=84
    LET=85
    MACRO=86
    METHOD=87
    MIXIN=88
    NIL=89
    NOTIN=90
    OBJECT=91
    OUT=92
    PROC=93
    PTR=94
    RAISE=95
    REF=96
    RETURN=97
    STATIC=98
    TEMPLATE=99
    TRY=100
    TUPLE=101
    TYPE=102
    USING=103
    WHEN=104
    WHILE=105
    YIELD=106
    OPEN_PAREN=107
    CLOSE_PAREN=108
    OPEN_BRACE=109
    CLOSE_BRACE=110
    OPEN_BRACK=111
    CLOSE_BRACK=112
    MODULUS=113
    TRIPLESTR_LIT=114
    CHAR_LIT=115
    STR_LIT=116
    RSTR_LIT=117
    GENERALIZED_STR_LIT=118
    GENERALIZED_TRIPLESTR_LIT=119
    WS=120
    AT=121
    COMMENT=122
    MULTI_LINE_COMMENT=123
    MULTI_LINE_COMMENT2=124
    SINGLE_MULTI_LINE_COMMENT=125
    IDENTIFIER=126
    H=127
    LETTER=128
    INT_LIT=129
    HEX_LIT=130
    DEC_LIT=131
    OCT_LIT=132
    BIN_LIT=133
    INT8_LIT=134
    INT16_LIT=135
    INT32_LIT=136
    INT64_LIT=137
    UINT_LIT=138
    UINT8_LIT=139
    UINT16_LIT=140
    UINT32_LIT=141
    UINT64_LIT=142
    FLOAT_LIT=143
    FLOAT32_LIT=144
    FLOAT32_SUFFIX=145
    FLOAT64_LIT=146
    FLOAT64_SUFFIX=147
    EXP=148
    HEXDIGIT=149
    OCTDIGIT=150
    BINDIGIT=151
    NEW_IDENTIFIER=152
    ARRAY_LEN=153
    FORLOOP_RANGE=154

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class StartContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def getRuleIndex(self):
            return nimParser.RULE_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart" ):
                listener.enterStart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart" ):
                listener.exitStart(self)




    def start(self):

        localctx = nimParser.StartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_start)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 95
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.T__0) | (1 << nimParser.T__3) | (1 << nimParser.T__7) | (1 << nimParser.VARIABLE) | (1 << nimParser.ECHO) | (1 << nimParser.BLOCK) | (1 << nimParser.CASE) | (1 << nimParser.CONST))) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & ((1 << (nimParser.FOR - 76)) | (1 << (nimParser.FROM - 76)) | (1 << (nimParser.IF - 76)) | (1 << (nimParser.IMPORT - 76)) | (1 << (nimParser.LET - 76)) | (1 << (nimParser.MACRO - 76)) | (1 << (nimParser.PROC - 76)) | (1 << (nimParser.TEMPLATE - 76)) | (1 << (nimParser.TYPE - 76)) | (1 << (nimParser.WHEN - 76)) | (1 << (nimParser.WHILE - 76)) | (1 << (nimParser.OPEN_PAREN - 76)) | (1 << (nimParser.IDENTIFIER - 76)))) != 0) or _la==nimParser.NEW_IDENTIFIER:
                self.state = 86
                self.stmt()
                self.state = 90
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 87
                        _la = self._input.LA(1)
                        if not(_la==nimParser.T__0 or _la==nimParser.T__1):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 92
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

                self.state = 97
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varDec(self):
            return self.getTypedRuleContext(nimParser.VarDecContext,0)


        def assignStmt(self):
            return self.getTypedRuleContext(nimParser.AssignStmtContext,0)


        def printStmt(self):
            return self.getTypedRuleContext(nimParser.PrintStmtContext,0)


        def constDec(self):
            return self.getTypedRuleContext(nimParser.ConstDecContext,0)


        def letDec(self):
            return self.getTypedRuleContext(nimParser.LetDecContext,0)


        def complexIfStmt(self):
            return self.getTypedRuleContext(nimParser.ComplexIfStmtContext,0)


        def forLoop(self):
            return self.getTypedRuleContext(nimParser.ForLoopContext,0)


        def whileLoop(self):
            return self.getTypedRuleContext(nimParser.WhileLoopContext,0)


        def whenStmt(self):
            return self.getTypedRuleContext(nimParser.WhenStmtContext,0)


        def procBlock(self):
            return self.getTypedRuleContext(nimParser.ProcBlockContext,0)


        def block(self):
            return self.getTypedRuleContext(nimParser.BlockContext,0)


        def typeBlock(self):
            return self.getTypedRuleContext(nimParser.TypeBlockContext,0)


        def methodInvoke(self):
            return self.getTypedRuleContext(nimParser.MethodInvokeContext,0)


        def instanceMethodInvoke(self):
            return self.getTypedRuleContext(nimParser.InstanceMethodInvokeContext,0)


        def emptyStmt(self):
            return self.getTypedRuleContext(nimParser.EmptyStmtContext,0)


        def caseStmt(self):
            return self.getTypedRuleContext(nimParser.CaseStmtContext,0)


        def forEachStmt(self):
            return self.getTypedRuleContext(nimParser.ForEachStmtContext,0)


        def importStmt(self):
            return self.getTypedRuleContext(nimParser.ImportStmtContext,0)


        def assertStmt(self):
            return self.getTypedRuleContext(nimParser.AssertStmtContext,0)


        def macroBlock(self):
            return self.getTypedRuleContext(nimParser.MacroBlockContext,0)


        def templateStmt(self):
            return self.getTypedRuleContext(nimParser.TemplateStmtContext,0)


        def getRuleIndex(self):
            return nimParser.RULE_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt" ):
                listener.enterStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt" ):
                listener.exitStmt(self)




    def stmt(self):

        localctx = nimParser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_stmt)
        try:
            self.state = 119
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 98
                self.varDec()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 99
                self.assignStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 100
                self.printStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 101
                self.constDec()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 102
                self.letDec()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 103
                self.complexIfStmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 104
                self.forLoop()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 105
                self.whileLoop()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 106
                self.whenStmt()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 107
                self.procBlock()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 108
                self.block()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 109
                self.typeBlock()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 110
                self.methodInvoke()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 111
                self.instanceMethodInvoke()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 112
                self.emptyStmt()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 113
                self.caseStmt()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 114
                self.forEachStmt()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 115
                self.importStmt()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 116
                self.assertStmt()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 117
                self.macroBlock()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 118
                self.templateStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarDecContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARIABLE(self):
            return self.getToken(nimParser.VARIABLE, 0)

        def assignStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.AssignStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.AssignStmtContext,i)


        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.IDENTIFIER)
            else:
                return self.getToken(nimParser.IDENTIFIER, i)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COLON)
            else:
                return self.getToken(nimParser.COLON, i)

        def EQUALS_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.EQUALS_OPERATOR)
            else:
                return self.getToken(nimParser.EQUALS_OPERATOR, i)

        def varComplexIfStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.VarComplexIfStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.VarComplexIfStmtContext,i)


        def AT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.AT)
            else:
                return self.getToken(nimParser.AT, i)

        def OPEN_BRACK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.OPEN_BRACK)
            else:
                return self.getToken(nimParser.OPEN_BRACK, i)

        def CLOSE_BRACK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.CLOSE_BRACK)
            else:
                return self.getToken(nimParser.CLOSE_BRACK, i)

        def dataType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.DataTypeContext)
            else:
                return self.getTypedRuleContext(nimParser.DataTypeContext,i)


        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMA)
            else:
                return self.getToken(nimParser.COMMA, i)

        def MINUS_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.MINUS_OPERATOR)
            else:
                return self.getToken(nimParser.MINUS_OPERATOR, i)

        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.DIGIT)
            else:
                return self.getToken(nimParser.DIGIT, i)

        def getRuleIndex(self):
            return nimParser.RULE_varDec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarDec" ):
                listener.enterVarDec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarDec" ):
                listener.exitVarDec(self)




    def varDec(self):

        localctx = nimParser.VarDecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_varDec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 121
            self.match(nimParser.VARIABLE)
            self.state = 199 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 199
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
                    if la_ == 1:
                        self.state = 124
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==nimParser.T__0:
                            self.state = 122
                            self.match(nimParser.T__0)
                            self.state = 123
                            self.match(nimParser.INDENT)


                        self.state = 126
                        self.match(nimParser.IDENTIFIER)
                        self.state = 131
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==nimParser.COMMA:
                            self.state = 127
                            self.match(nimParser.COMMA)
                            self.state = 128
                            self.match(nimParser.IDENTIFIER)
                            self.state = 133
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 134
                        self.match(nimParser.COLON)
                        self.state = 137
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [nimParser.T__13, nimParser.T__14, nimParser.T__15]:
                            self.state = 135
                            self.dataType()
                            pass
                        elif token in [nimParser.IDENTIFIER]:
                            self.state = 136
                            self.match(nimParser.IDENTIFIER)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 142
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,6,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 139
                                self.match(nimParser.T__0) 
                            self.state = 144
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,6,self._ctx)

                        pass

                    elif la_ == 2:
                        self.state = 147
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==nimParser.T__0:
                            self.state = 145
                            self.match(nimParser.T__0)
                            self.state = 146
                            self.match(nimParser.INDENT)


                        self.state = 149
                        self.match(nimParser.T__2)
                        self.state = 153
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 150
                                _la = self._input.LA(1)
                                if _la <= 0 or (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.T__0) | (1 << nimParser.T__1) | (1 << nimParser.T__2))) != 0):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume() 
                            self.state = 155
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

                        self.state = 159
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 156
                                self.match(nimParser.T__0) 
                            self.state = 161
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

                        pass

                    elif la_ == 3:
                        self.state = 162
                        self.assignStmt()
                        pass

                    elif la_ == 4:
                        self.state = 163
                        self.match(nimParser.IDENTIFIER)
                        self.state = 164
                        self.match(nimParser.EQUALS_OPERATOR)
                        self.state = 165
                        self.varComplexIfStmt()
                        pass

                    elif la_ == 5:
                        self.state = 166
                        self.match(nimParser.IDENTIFIER)
                        self.state = 167
                        self.match(nimParser.EQUALS_OPERATOR)
                        self.state = 168
                        self.match(nimParser.AT)
                        self.state = 169
                        self.match(nimParser.OPEN_BRACK)
                        self.state = 179
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [nimParser.DIGIT, nimParser.MINUS_OPERATOR]:
                            self.state = 171
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==nimParser.MINUS_OPERATOR:
                                self.state = 170
                                self.match(nimParser.MINUS_OPERATOR)


                            self.state = 174 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 173
                                self.match(nimParser.DIGIT)
                                self.state = 176 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==nimParser.DIGIT):
                                    break

                            pass
                        elif token in [nimParser.IDENTIFIER]:
                            self.state = 178
                            self.match(nimParser.IDENTIFIER)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 195
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==nimParser.COMMA:
                            self.state = 181
                            self.match(nimParser.COMMA)
                            self.state = 191
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [nimParser.DIGIT, nimParser.MINUS_OPERATOR]:
                                self.state = 183
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==nimParser.MINUS_OPERATOR:
                                    self.state = 182
                                    self.match(nimParser.MINUS_OPERATOR)


                                self.state = 186 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 185
                                    self.match(nimParser.DIGIT)
                                    self.state = 188 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==nimParser.DIGIT):
                                        break

                                pass
                            elif token in [nimParser.IDENTIFIER]:
                                self.state = 190
                                self.match(nimParser.IDENTIFIER)
                                pass
                            else:
                                raise NoViableAltException(self)

                            self.state = 197
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 198
                        self.match(nimParser.CLOSE_BRACK)
                        pass



                else:
                    raise NoViableAltException(self)
                self.state = 201 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,18,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstDecContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(nimParser.CONST, 0)

        def assignStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.AssignStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.AssignStmtContext,i)


        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def COMMENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMENT)
            else:
                return self.getToken(nimParser.COMMENT, i)

        def getRuleIndex(self):
            return nimParser.RULE_constDec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstDec" ):
                listener.enterConstDec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstDec" ):
                listener.exitConstDec(self)




    def constDec(self):

        localctx = nimParser.ConstDecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_constDec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 203
            self.match(nimParser.CONST)
            self.state = 216 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 206
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==nimParser.T__0:
                        self.state = 204
                        self.match(nimParser.T__0)
                        self.state = 205
                        self.match(nimParser.INDENT)


                    self.state = 208
                    self.assignStmt()
                    self.state = 210
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
                    if la_ == 1:
                        self.state = 209
                        self.match(nimParser.T__0)


                    self.state = 214
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
                    if la_ == 1:
                        self.state = 212
                        self.match(nimParser.INDENT)
                        self.state = 213
                        self.match(nimParser.COMMENT)



                else:
                    raise NoViableAltException(self)
                self.state = 218 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,22,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetDecContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LET(self):
            return self.getToken(nimParser.LET, 0)

        def assignStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.AssignStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.AssignStmtContext,i)


        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def COMMENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMENT)
            else:
                return self.getToken(nimParser.COMMENT, i)

        def getRuleIndex(self):
            return nimParser.RULE_letDec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetDec" ):
                listener.enterLetDec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetDec" ):
                listener.exitLetDec(self)




    def letDec(self):

        localctx = nimParser.LetDecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_letDec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 220
            self.match(nimParser.LET)
            self.state = 233 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 223
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==nimParser.T__0:
                        self.state = 221
                        self.match(nimParser.T__0)
                        self.state = 222
                        self.match(nimParser.INDENT)


                    self.state = 225
                    self.assignStmt()
                    self.state = 227
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
                    if la_ == 1:
                        self.state = 226
                        self.match(nimParser.T__0)


                    self.state = 231
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
                    if la_ == 1:
                        self.state = 229
                        self.match(nimParser.INDENT)
                        self.state = 230
                        self.match(nimParser.COMMENT)



                else:
                    raise NoViableAltException(self)
                self.state = 235 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(nimParser.IDENTIFIER, 0)

        def EQUALS_OPERATOR(self):
            return self.getToken(nimParser.EQUALS_OPERATOR, 0)

        def instanceMethodInvoke(self):
            return self.getTypedRuleContext(nimParser.InstanceMethodInvokeContext,0)


        def rightHandSideStmt(self):
            return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,0)


        def AT(self):
            return self.getToken(nimParser.AT, 0)

        def SEMI_COLON(self):
            return self.getToken(nimParser.SEMI_COLON, 0)

        def INDENT(self):
            return self.getToken(nimParser.INDENT, 0)

        def methodInvoke(self):
            return self.getTypedRuleContext(nimParser.MethodInvokeContext,0)


        def ADD_OPERATOR(self):
            return self.getToken(nimParser.ADD_OPERATOR, 0)

        def literal(self):
            return self.getTypedRuleContext(nimParser.LiteralContext,0)


        def getRuleIndex(self):
            return nimParser.RULE_assignStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignStmt" ):
                listener.enterAssignStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignStmt" ):
                listener.exitAssignStmt(self)




    def assignStmt(self):

        localctx = nimParser.AssignStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_assignStmt)
        self._la = 0 # Token type
        try:
            self.state = 264
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 237
                self.match(nimParser.IDENTIFIER)
                self.state = 238
                self.match(nimParser.EQUALS_OPERATOR)
                self.state = 240
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.AT:
                    self.state = 239
                    self.match(nimParser.AT)


                self.state = 244
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
                if la_ == 1:
                    self.state = 242
                    self.instanceMethodInvoke()
                    pass

                elif la_ == 2:
                    self.state = 243
                    self.rightHandSideStmt()
                    pass


                self.state = 247
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.SEMI_COLON:
                    self.state = 246
                    self.match(nimParser.SEMI_COLON)


                self.state = 252
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,30,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 249
                        self.match(nimParser.T__0) 
                    self.state = 254
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,30,self._ctx)

                self.state = 256
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
                if la_ == 1:
                    self.state = 255
                    self.match(nimParser.INDENT)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 258
                self.match(nimParser.IDENTIFIER)
                self.state = 259
                self.match(nimParser.EQUALS_OPERATOR)
                self.state = 260
                self.methodInvoke()
                self.state = 261
                self.match(nimParser.ADD_OPERATOR)
                self.state = 262
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrintStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ECHO(self):
            return self.getToken(nimParser.ECHO, 0)

        def OPEN_PAREN(self):
            return self.getToken(nimParser.OPEN_PAREN, 0)

        def rightHandSideStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.RightHandSideStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,i)


        def CLOSE_PAREN(self):
            return self.getToken(nimParser.CLOSE_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMA)
            else:
                return self.getToken(nimParser.COMMA, i)

        def methodInvoke(self):
            return self.getTypedRuleContext(nimParser.MethodInvokeContext,0)


        def getRuleIndex(self):
            return nimParser.RULE_printStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrintStmt" ):
                listener.enterPrintStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrintStmt" ):
                listener.exitPrintStmt(self)




    def printStmt(self):

        localctx = nimParser.PrintStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_printStmt)
        self._la = 0 # Token type
        try:
            self.state = 289
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 266
                self.match(nimParser.ECHO)
                self.state = 267
                self.match(nimParser.OPEN_PAREN)
                self.state = 268
                self.rightHandSideStmt()
                self.state = 273
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nimParser.COMMA:
                    self.state = 269
                    self.match(nimParser.COMMA)
                    self.state = 270
                    self.rightHandSideStmt()
                    self.state = 275
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 276
                self.match(nimParser.CLOSE_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 278
                self.match(nimParser.ECHO)
                self.state = 279
                self.rightHandSideStmt()
                self.state = 284
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nimParser.COMMA:
                    self.state = 280
                    self.match(nimParser.COMMA)
                    self.state = 281
                    self.rightHandSideStmt()
                    self.state = 286
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 287
                self.match(nimParser.ECHO)
                self.state = 288
                self.methodInvoke()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssertStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.LiteralContext)
            else:
                return self.getTypedRuleContext(nimParser.LiteralContext,i)


        def EQUALS_EQUALS(self):
            return self.getToken(nimParser.EQUALS_EQUALS, 0)

        def getRuleIndex(self):
            return nimParser.RULE_assertStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssertStmt" ):
                listener.enterAssertStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssertStmt" ):
                listener.exitAssertStmt(self)




    def assertStmt(self):

        localctx = nimParser.AssertStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_assertStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 291
            self.match(nimParser.T__3)
            self.state = 292
            self.literal()
            self.state = 293
            self.match(nimParser.EQUALS_EQUALS)
            self.state = 294
            self.literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexIfStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIfStmt(self):
            return self.getTypedRuleContext(nimParser.SimpleIfStmtContext,0)


        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def simpleElifStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.SimpleElifStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.SimpleElifStmtContext,i)


        def simpleElseStmt(self):
            return self.getTypedRuleContext(nimParser.SimpleElseStmtContext,0)


        def getRuleIndex(self):
            return nimParser.RULE_complexIfStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplexIfStmt" ):
                listener.enterComplexIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplexIfStmt" ):
                listener.exitComplexIfStmt(self)




    def complexIfStmt(self):

        localctx = nimParser.ComplexIfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_complexIfStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 296
            self.simpleIfStmt()
            self.state = 298
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.state = 297
                self.match(nimParser.INDENT)


            self.state = 303
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,37,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 300
                    self.simpleElifStmt() 
                self.state = 305
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,37,self._ctx)

            self.state = 307
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.state = 306
                self.simpleElseStmt()


            self.state = 311
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.state = 309
                self.match(nimParser.T__0)
                self.state = 310
                self.match(nimParser.INDENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarComplexIfStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varSimpleIfStmt(self):
            return self.getTypedRuleContext(nimParser.VarSimpleIfStmtContext,0)


        def varSimpleElifStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.VarSimpleElifStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.VarSimpleElifStmtContext,i)


        def varSimpleElseStmt(self):
            return self.getTypedRuleContext(nimParser.VarSimpleElseStmtContext,0)


        def getRuleIndex(self):
            return nimParser.RULE_varComplexIfStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarComplexIfStmt" ):
                listener.enterVarComplexIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarComplexIfStmt" ):
                listener.exitVarComplexIfStmt(self)




    def varComplexIfStmt(self):

        localctx = nimParser.VarComplexIfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_varComplexIfStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 313
            self.varSimpleIfStmt()
            self.state = 317
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,40,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 314
                    self.varSimpleElifStmt() 
                self.state = 319
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,40,self._ctx)

            self.state = 321
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.state = 320
                self.varSimpleElseStmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleIfStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(nimParser.IF, 0)

        def condition(self):
            return self.getTypedRuleContext(nimParser.ConditionContext,0)


        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def assignStmt(self):
            return self.getTypedRuleContext(nimParser.AssignStmtContext,0)


        def NOT(self):
            return self.getToken(nimParser.NOT, 0)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def BREAK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.BREAK)
            else:
                return self.getToken(nimParser.BREAK, i)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.IDENTIFIER)
            else:
                return self.getToken(nimParser.IDENTIFIER, i)

        def CONTINUE(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.CONTINUE)
            else:
                return self.getToken(nimParser.CONTINUE, i)

        def OPEN_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.OPEN_PAREN)
            else:
                return self.getToken(nimParser.OPEN_PAREN, i)

        def CLOSE_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.CLOSE_PAREN)
            else:
                return self.getToken(nimParser.CLOSE_PAREN, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMA)
            else:
                return self.getToken(nimParser.COMMA, i)

        def RETURN(self):
            return self.getToken(nimParser.RETURN, 0)

        def rightHandSideStmt(self):
            return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,0)


        def getRuleIndex(self):
            return nimParser.RULE_simpleIfStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleIfStmt" ):
                listener.enterSimpleIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleIfStmt" ):
                listener.exitSimpleIfStmt(self)




    def simpleIfStmt(self):

        localctx = nimParser.SimpleIfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_simpleIfStmt)
        self._la = 0 # Token type
        try:
            self.state = 474
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 323
                self.match(nimParser.IF)
                self.state = 325
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.NOT:
                    self.state = 324
                    self.match(nimParser.NOT)


                self.state = 327
                self.condition()
                self.state = 328
                self.match(nimParser.COLON)
                self.state = 329
                self.assignStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 331
                self.match(nimParser.IF)
                self.state = 333
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.NOT:
                    self.state = 332
                    self.match(nimParser.NOT)


                self.state = 335
                self.condition()
                self.state = 336
                self.match(nimParser.COLON)
                self.state = 349 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 337
                        self.match(nimParser.T__0)
                        self.state = 338
                        self.match(nimParser.INDENT)
                        self.state = 347
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [nimParser.T__0, nimParser.T__3, nimParser.T__7, nimParser.VARIABLE, nimParser.ECHO, nimParser.BLOCK, nimParser.CASE, nimParser.CONST, nimParser.FOR, nimParser.FROM, nimParser.IF, nimParser.IMPORT, nimParser.LET, nimParser.MACRO, nimParser.PROC, nimParser.TEMPLATE, nimParser.TYPE, nimParser.WHEN, nimParser.WHILE, nimParser.OPEN_PAREN, nimParser.IDENTIFIER, nimParser.NEW_IDENTIFIER]:
                            self.state = 339
                            self.stmt()
                            pass
                        elif token in [nimParser.BREAK]:
                            self.state = 340
                            self.match(nimParser.BREAK)
                            self.state = 341
                            self.match(nimParser.IDENTIFIER)
                            pass
                        elif token in [nimParser.CONTINUE]:
                            self.state = 342
                            self.match(nimParser.CONTINUE)
                            pass
                        elif token in [nimParser.T__4]:
                            self.state = 343
                            self.match(nimParser.T__4)
                            self.state = 344
                            self.match(nimParser.IDENTIFIER)
                            pass
                        elif token in [nimParser.T__5]:
                            self.state = 345
                            self.match(nimParser.T__5)
                            self.state = 346
                            self.match(nimParser.IDENTIFIER)
                            pass
                        else:
                            raise NoViableAltException(self)


                    else:
                        raise NoViableAltException(self)
                    self.state = 351 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,45,self._ctx)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 353
                self.match(nimParser.IF)
                self.state = 355
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.NOT:
                    self.state = 354
                    self.match(nimParser.NOT)


                self.state = 357
                self.condition()
                self.state = 358
                self.match(nimParser.COLON)
                self.state = 374 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 359
                        self.match(nimParser.T__0)
                        self.state = 360
                        self.match(nimParser.INDENT)
                        self.state = 365 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 365
                                self._errHandler.sync(self)
                                token = self._input.LA(1)
                                if token in [nimParser.T__0, nimParser.T__3, nimParser.T__7, nimParser.VARIABLE, nimParser.ECHO, nimParser.BLOCK, nimParser.CASE, nimParser.CONST, nimParser.FOR, nimParser.FROM, nimParser.IF, nimParser.IMPORT, nimParser.LET, nimParser.MACRO, nimParser.PROC, nimParser.TEMPLATE, nimParser.TYPE, nimParser.WHEN, nimParser.WHILE, nimParser.OPEN_PAREN, nimParser.IDENTIFIER, nimParser.NEW_IDENTIFIER]:
                                    self.state = 361
                                    self.stmt()
                                    pass
                                elif token in [nimParser.BREAK]:
                                    self.state = 362
                                    self.match(nimParser.BREAK)
                                    self.state = 363
                                    self.match(nimParser.IDENTIFIER)
                                    pass
                                elif token in [nimParser.CONTINUE]:
                                    self.state = 364
                                    self.match(nimParser.CONTINUE)
                                    pass
                                else:
                                    raise NoViableAltException(self)


                            else:
                                raise NoViableAltException(self)
                            self.state = 367 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,48,self._ctx)

                        self.state = 370 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 369
                                self.match(nimParser.T__0)

                            else:
                                raise NoViableAltException(self)
                            self.state = 372 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,49,self._ctx)


                    else:
                        raise NoViableAltException(self)
                    self.state = 376 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,50,self._ctx)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 378
                self.match(nimParser.IF)
                self.state = 380
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.NOT:
                    self.state = 379
                    self.match(nimParser.NOT)


                self.state = 382
                self.condition()
                self.state = 383
                self.match(nimParser.COLON)
                self.state = 429 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 384
                        self.match(nimParser.T__0)
                        self.state = 388
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==nimParser.INDENT:
                            self.state = 385
                            self.match(nimParser.INDENT)
                            self.state = 390
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 420 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 420
                                self._errHandler.sync(self)
                                la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
                                if la_ == 1:
                                    self.state = 391
                                    self.match(nimParser.IDENTIFIER)
                                    self.state = 392
                                    self.match(nimParser.T__0)
                                    self.state = 396
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    while _la==nimParser.INDENT:
                                        self.state = 393
                                        self.match(nimParser.INDENT)
                                        self.state = 398
                                        self._errHandler.sync(self)
                                        _la = self._input.LA(1)

                                    self.state = 399
                                    self.match(nimParser.T__4)
                                    self.state = 400
                                    self.match(nimParser.OPEN_PAREN)
                                    self.state = 401
                                    self.match(nimParser.IDENTIFIER)
                                    self.state = 406
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    while _la==nimParser.COMMA:
                                        self.state = 402
                                        self.match(nimParser.COMMA)
                                        self.state = 403
                                        self.match(nimParser.IDENTIFIER)
                                        self.state = 408
                                        self._errHandler.sync(self)
                                        _la = self._input.LA(1)

                                    self.state = 409
                                    self.match(nimParser.CLOSE_PAREN)
                                    self.state = 410
                                    self.match(nimParser.T__0)
                                    self.state = 414
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    while _la==nimParser.INDENT:
                                        self.state = 411
                                        self.match(nimParser.INDENT)
                                        self.state = 416
                                        self._errHandler.sync(self)
                                        _la = self._input.LA(1)

                                    self.state = 417
                                    self.match(nimParser.BREAK)
                                    self.state = 418
                                    self.match(nimParser.IDENTIFIER)
                                    pass

                                elif la_ == 2:
                                    self.state = 419
                                    self.stmt()
                                    pass



                            else:
                                raise NoViableAltException(self)
                            self.state = 422 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,57,self._ctx)

                        self.state = 425 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 424
                                self.match(nimParser.T__0)

                            else:
                                raise NoViableAltException(self)
                            self.state = 427 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,58,self._ctx)


                    else:
                        raise NoViableAltException(self)
                    self.state = 431 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,59,self._ctx)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 433
                self.match(nimParser.IF)
                self.state = 435
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.NOT:
                    self.state = 434
                    self.match(nimParser.NOT)


                self.state = 437
                self.condition()
                self.state = 438
                self.match(nimParser.COLON)
                self.state = 439
                self.match(nimParser.RETURN)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 441
                self.match(nimParser.IF)
                self.state = 443
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.NOT:
                    self.state = 442
                    self.match(nimParser.NOT)


                self.state = 445
                self.match(nimParser.IDENTIFIER)
                self.state = 446
                self.match(nimParser.OPEN_PAREN)
                self.state = 447
                self.rightHandSideStmt()
                self.state = 448
                self.match(nimParser.CLOSE_PAREN)
                self.state = 449
                self.match(nimParser.COLON)
                self.state = 459 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 450
                        self.match(nimParser.T__0)
                        self.state = 451
                        self.match(nimParser.INDENT)
                        self.state = 452
                        self.stmt()
                        self.state = 456
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,62,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 453
                                self.match(nimParser.T__0) 
                            self.state = 458
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,62,self._ctx)


                    else:
                        raise NoViableAltException(self)
                    self.state = 461 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,63,self._ctx)

                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 463
                self.match(nimParser.IF)
                self.state = 465
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.NOT:
                    self.state = 464
                    self.match(nimParser.NOT)


                self.state = 467
                self.match(nimParser.IDENTIFIER)
                self.state = 468
                self.match(nimParser.OPEN_PAREN)
                self.state = 469
                self.rightHandSideStmt()
                self.state = 470
                self.match(nimParser.CLOSE_PAREN)
                self.state = 471
                self.match(nimParser.COLON)
                self.state = 472
                self.assignStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleElifStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELIF(self):
            return self.getToken(nimParser.ELIF, 0)

        def condition(self):
            return self.getTypedRuleContext(nimParser.ConditionContext,0)


        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def assignStmt(self):
            return self.getTypedRuleContext(nimParser.AssignStmtContext,0)


        def NOT(self):
            return self.getToken(nimParser.NOT, 0)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def BREAK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.BREAK)
            else:
                return self.getToken(nimParser.BREAK, i)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.IDENTIFIER)
            else:
                return self.getToken(nimParser.IDENTIFIER, i)

        def CONTINUE(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.CONTINUE)
            else:
                return self.getToken(nimParser.CONTINUE, i)

        def RETURN(self):
            return self.getToken(nimParser.RETURN, 0)

        def OPEN_PAREN(self):
            return self.getToken(nimParser.OPEN_PAREN, 0)

        def rightHandSideStmt(self):
            return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(nimParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return nimParser.RULE_simpleElifStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleElifStmt" ):
                listener.enterSimpleElifStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleElifStmt" ):
                listener.exitSimpleElifStmt(self)




    def simpleElifStmt(self):

        localctx = nimParser.SimpleElifStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_simpleElifStmt)
        self._la = 0 # Token type
        try:
            self.state = 572
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 476
                self.match(nimParser.ELIF)
                self.state = 478
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.NOT:
                    self.state = 477
                    self.match(nimParser.NOT)


                self.state = 480
                self.condition()
                self.state = 481
                self.match(nimParser.COLON)
                self.state = 482
                self.assignStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 484
                self.match(nimParser.ELIF)
                self.state = 486
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.NOT:
                    self.state = 485
                    self.match(nimParser.NOT)


                self.state = 488
                self.condition()
                self.state = 489
                self.match(nimParser.COLON)
                self.state = 502 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 490
                        self.match(nimParser.T__0)
                        self.state = 491
                        self.match(nimParser.INDENT)
                        self.state = 500
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [nimParser.T__0, nimParser.T__3, nimParser.T__7, nimParser.VARIABLE, nimParser.ECHO, nimParser.BLOCK, nimParser.CASE, nimParser.CONST, nimParser.FOR, nimParser.FROM, nimParser.IF, nimParser.IMPORT, nimParser.LET, nimParser.MACRO, nimParser.PROC, nimParser.TEMPLATE, nimParser.TYPE, nimParser.WHEN, nimParser.WHILE, nimParser.OPEN_PAREN, nimParser.IDENTIFIER, nimParser.NEW_IDENTIFIER]:
                            self.state = 492
                            self.stmt()
                            pass
                        elif token in [nimParser.BREAK]:
                            self.state = 493
                            self.match(nimParser.BREAK)
                            self.state = 494
                            self.match(nimParser.IDENTIFIER)
                            pass
                        elif token in [nimParser.CONTINUE]:
                            self.state = 495
                            self.match(nimParser.CONTINUE)
                            pass
                        elif token in [nimParser.T__4]:
                            self.state = 496
                            self.match(nimParser.T__4)
                            self.state = 497
                            self.match(nimParser.IDENTIFIER)
                            pass
                        elif token in [nimParser.T__5]:
                            self.state = 498
                            self.match(nimParser.T__5)
                            self.state = 499
                            self.match(nimParser.IDENTIFIER)
                            pass
                        else:
                            raise NoViableAltException(self)


                    else:
                        raise NoViableAltException(self)
                    self.state = 504 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,69,self._ctx)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 506
                self.match(nimParser.ELIF)
                self.state = 508
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.NOT:
                    self.state = 507
                    self.match(nimParser.NOT)


                self.state = 510
                self.condition()
                self.state = 511
                self.match(nimParser.COLON)
                self.state = 527 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 512
                        self.match(nimParser.T__0)
                        self.state = 513
                        self.match(nimParser.INDENT)
                        self.state = 518 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 518
                                self._errHandler.sync(self)
                                token = self._input.LA(1)
                                if token in [nimParser.T__0, nimParser.T__3, nimParser.T__7, nimParser.VARIABLE, nimParser.ECHO, nimParser.BLOCK, nimParser.CASE, nimParser.CONST, nimParser.FOR, nimParser.FROM, nimParser.IF, nimParser.IMPORT, nimParser.LET, nimParser.MACRO, nimParser.PROC, nimParser.TEMPLATE, nimParser.TYPE, nimParser.WHEN, nimParser.WHILE, nimParser.OPEN_PAREN, nimParser.IDENTIFIER, nimParser.NEW_IDENTIFIER]:
                                    self.state = 514
                                    self.stmt()
                                    pass
                                elif token in [nimParser.BREAK]:
                                    self.state = 515
                                    self.match(nimParser.BREAK)
                                    self.state = 516
                                    self.match(nimParser.IDENTIFIER)
                                    pass
                                elif token in [nimParser.CONTINUE]:
                                    self.state = 517
                                    self.match(nimParser.CONTINUE)
                                    pass
                                else:
                                    raise NoViableAltException(self)


                            else:
                                raise NoViableAltException(self)
                            self.state = 520 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,72,self._ctx)

                        self.state = 523 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 522
                                self.match(nimParser.T__0)

                            else:
                                raise NoViableAltException(self)
                            self.state = 525 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,73,self._ctx)


                    else:
                        raise NoViableAltException(self)
                    self.state = 529 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,74,self._ctx)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 531
                self.match(nimParser.ELIF)
                self.state = 533
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.NOT:
                    self.state = 532
                    self.match(nimParser.NOT)


                self.state = 535
                self.condition()
                self.state = 536
                self.match(nimParser.COLON)
                self.state = 537
                self.match(nimParser.RETURN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 539
                self.match(nimParser.ELIF)
                self.state = 541
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.NOT:
                    self.state = 540
                    self.match(nimParser.NOT)


                self.state = 543
                self.match(nimParser.IDENTIFIER)
                self.state = 544
                self.match(nimParser.OPEN_PAREN)
                self.state = 545
                self.rightHandSideStmt()
                self.state = 546
                self.match(nimParser.CLOSE_PAREN)
                self.state = 547
                self.match(nimParser.COLON)
                self.state = 557 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 548
                        self.match(nimParser.T__0)
                        self.state = 549
                        self.match(nimParser.INDENT)
                        self.state = 550
                        self.stmt()
                        self.state = 554
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,77,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 551
                                self.match(nimParser.T__0) 
                            self.state = 556
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,77,self._ctx)


                    else:
                        raise NoViableAltException(self)
                    self.state = 559 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,78,self._ctx)

                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 561
                self.match(nimParser.ELIF)
                self.state = 563
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.NOT:
                    self.state = 562
                    self.match(nimParser.NOT)


                self.state = 565
                self.match(nimParser.IDENTIFIER)
                self.state = 566
                self.match(nimParser.OPEN_PAREN)
                self.state = 567
                self.rightHandSideStmt()
                self.state = 568
                self.match(nimParser.CLOSE_PAREN)
                self.state = 569
                self.match(nimParser.COLON)
                self.state = 570
                self.assignStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarSimpleIfStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(nimParser.IF, 0)

        def condition(self):
            return self.getTypedRuleContext(nimParser.ConditionContext,0)


        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def rightHandSideStmt(self):
            return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,0)


        def NEW_IDENTIFIER(self):
            return self.getToken(nimParser.NEW_IDENTIFIER, 0)

        def NOT(self):
            return self.getToken(nimParser.NOT, 0)

        def getRuleIndex(self):
            return nimParser.RULE_varSimpleIfStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarSimpleIfStmt" ):
                listener.enterVarSimpleIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarSimpleIfStmt" ):
                listener.exitVarSimpleIfStmt(self)




    def varSimpleIfStmt(self):

        localctx = nimParser.VarSimpleIfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_varSimpleIfStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 574
            self.match(nimParser.IF)
            self.state = 576
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.NOT:
                self.state = 575
                self.match(nimParser.NOT)


            self.state = 578
            self.condition()
            self.state = 579
            self.match(nimParser.COLON)
            self.state = 582
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.state = 580
                self.rightHandSideStmt()
                pass

            elif la_ == 2:
                self.state = 581
                self.match(nimParser.NEW_IDENTIFIER)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarSimpleElifStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELIF(self):
            return self.getToken(nimParser.ELIF, 0)

        def condition(self):
            return self.getTypedRuleContext(nimParser.ConditionContext,0)


        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def rightHandSideStmt(self):
            return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,0)


        def NEW_IDENTIFIER(self):
            return self.getToken(nimParser.NEW_IDENTIFIER, 0)

        def NOT(self):
            return self.getToken(nimParser.NOT, 0)

        def getRuleIndex(self):
            return nimParser.RULE_varSimpleElifStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarSimpleElifStmt" ):
                listener.enterVarSimpleElifStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarSimpleElifStmt" ):
                listener.exitVarSimpleElifStmt(self)




    def varSimpleElifStmt(self):

        localctx = nimParser.VarSimpleElifStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_varSimpleElifStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 584
            self.match(nimParser.ELIF)
            self.state = 586
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.NOT:
                self.state = 585
                self.match(nimParser.NOT)


            self.state = 588
            self.condition()
            self.state = 589
            self.match(nimParser.COLON)
            self.state = 592
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.state = 590
                self.rightHandSideStmt()
                pass

            elif la_ == 2:
                self.state = 591
                self.match(nimParser.NEW_IDENTIFIER)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarSimpleElseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(nimParser.ELSE, 0)

        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def rightHandSideStmt(self):
            return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,0)


        def NEW_IDENTIFIER(self):
            return self.getToken(nimParser.NEW_IDENTIFIER, 0)

        def INDENT(self):
            return self.getToken(nimParser.INDENT, 0)

        def getRuleIndex(self):
            return nimParser.RULE_varSimpleElseStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarSimpleElseStmt" ):
                listener.enterVarSimpleElseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarSimpleElseStmt" ):
                listener.exitVarSimpleElseStmt(self)




    def varSimpleElseStmt(self):

        localctx = nimParser.VarSimpleElseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_varSimpleElseStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 595
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.INDENT:
                self.state = 594
                self.match(nimParser.INDENT)


            self.state = 597
            self.match(nimParser.ELSE)
            self.state = 598
            self.match(nimParser.COLON)
            self.state = 601
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.state = 599
                self.rightHandSideStmt()
                pass

            elif la_ == 2:
                self.state = 600
                self.match(nimParser.NEW_IDENTIFIER)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleElseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(nimParser.ELSE, 0)

        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def printStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.PrintStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.PrintStmtContext,i)


        def assignStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.AssignStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.AssignStmtContext,i)


        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def BREAK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.BREAK)
            else:
                return self.getToken(nimParser.BREAK, i)

        def getRuleIndex(self):
            return nimParser.RULE_simpleElseStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleElseStmt" ):
                listener.enterSimpleElseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleElseStmt" ):
                listener.exitSimpleElseStmt(self)




    def simpleElseStmt(self):

        localctx = nimParser.SimpleElseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_simpleElseStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 604
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.INDENT:
                self.state = 603
                self.match(nimParser.INDENT)


            self.state = 606
            self.match(nimParser.ELSE)
            self.state = 607
            self.match(nimParser.COLON)
            self.state = 620 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 620
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [nimParser.T__0]:
                        self.state = 614 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 608
                                self.match(nimParser.T__0)
                                self.state = 609
                                self.match(nimParser.INDENT)
                                self.state = 612
                                self._errHandler.sync(self)
                                token = self._input.LA(1)
                                if token in [nimParser.T__0, nimParser.T__3, nimParser.T__7, nimParser.VARIABLE, nimParser.ECHO, nimParser.BLOCK, nimParser.CASE, nimParser.CONST, nimParser.FOR, nimParser.FROM, nimParser.IF, nimParser.IMPORT, nimParser.LET, nimParser.MACRO, nimParser.PROC, nimParser.TEMPLATE, nimParser.TYPE, nimParser.WHEN, nimParser.WHILE, nimParser.OPEN_PAREN, nimParser.IDENTIFIER, nimParser.NEW_IDENTIFIER]:
                                    self.state = 610
                                    self.stmt()
                                    pass
                                elif token in [nimParser.BREAK]:
                                    self.state = 611
                                    self.match(nimParser.BREAK)
                                    pass
                                else:
                                    raise NoViableAltException(self)


                            else:
                                raise NoViableAltException(self)
                            self.state = 616 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,89,self._ctx)

                        pass
                    elif token in [nimParser.ECHO]:
                        self.state = 618
                        self.printStmt()
                        pass
                    elif token in [nimParser.IDENTIFIER]:
                        self.state = 619
                        self.assignStmt()
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 622 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,91,self._ctx)

            self.state = 627
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,92,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 624
                    self.match(nimParser.T__0) 
                self.state = 629
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,92,self._ctx)

            self.state = 631
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.state = 630
                self.match(nimParser.INDENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForLoopContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(nimParser.FOR, 0)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.IDENTIFIER)
            else:
                return self.getToken(nimParser.IDENTIFIER, i)

        def IN(self):
            return self.getToken(nimParser.IN, 0)

        def CHAR_LIT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.CHAR_LIT)
            else:
                return self.getToken(nimParser.CHAR_LIT, i)

        def OP6(self):
            return self.getToken(nimParser.OP6, 0)

        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def COMMENT(self):
            return self.getToken(nimParser.COMMENT, 0)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def caseStmt(self):
            return self.getTypedRuleContext(nimParser.CaseStmtContext,0)


        def methodInvoke(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.MethodInvokeContext)
            else:
                return self.getTypedRuleContext(nimParser.MethodInvokeContext,i)


        def FORLOOP_RANGE(self):
            return self.getToken(nimParser.FORLOOP_RANGE, 0)

        def LESS_THAN(self):
            return self.getToken(nimParser.LESS_THAN, 0)

        def NEW_IDENTIFIER(self):
            return self.getToken(nimParser.NEW_IDENTIFIER, 0)

        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.DIGIT)
            else:
                return self.getToken(nimParser.DIGIT, i)

        def AT(self):
            return self.getToken(nimParser.AT, 0)

        def OPEN_BRACK(self):
            return self.getToken(nimParser.OPEN_BRACK, 0)

        def CLOSE_BRACK(self):
            return self.getToken(nimParser.CLOSE_BRACK, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMA)
            else:
                return self.getToken(nimParser.COMMA, i)

        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.LiteralContext)
            else:
                return self.getTypedRuleContext(nimParser.LiteralContext,i)


        def OPEN_PAREN(self):
            return self.getToken(nimParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(nimParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return nimParser.RULE_forLoop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForLoop" ):
                listener.enterForLoop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForLoop" ):
                listener.exitForLoop(self)




    def forLoop(self):

        localctx = nimParser.ForLoopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_forLoop)
        self._la = 0 # Token type
        try:
            self.state = 846
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 633
                self.match(nimParser.FOR)
                self.state = 634
                self.match(nimParser.IDENTIFIER)
                self.state = 635
                self.match(nimParser.IN)
                self.state = 636
                self.match(nimParser.CHAR_LIT)
                self.state = 637
                self.match(nimParser.OP6)
                self.state = 638
                self.match(nimParser.CHAR_LIT)
                self.state = 639
                self.match(nimParser.COLON)
                self.state = 641
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.COMMENT:
                    self.state = 640
                    self.match(nimParser.COMMENT)


                self.state = 646 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 643
                        self.match(nimParser.T__0)
                        self.state = 644
                        self.match(nimParser.INDENT)
                        self.state = 645
                        self.stmt()

                    else:
                        raise NoViableAltException(self)
                    self.state = 648 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,95,self._ctx)

                self.state = 653
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,96,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 650
                        self.match(nimParser.INDENT) 
                    self.state = 655
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,96,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 656
                self.match(nimParser.FOR)
                self.state = 657
                self.match(nimParser.IDENTIFIER)
                self.state = 658
                self.match(nimParser.IN)
                self.state = 659
                self.match(nimParser.IDENTIFIER)
                self.state = 660
                self.match(nimParser.COLON)
                self.state = 661
                self.match(nimParser.T__0)
                self.state = 662
                self.match(nimParser.INDENT)
                self.state = 663
                self.caseStmt()
                self.state = 665
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
                if la_ == 1:
                    self.state = 664
                    self.match(nimParser.T__0)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 667
                self.match(nimParser.FOR)
                self.state = 668
                self.match(nimParser.IDENTIFIER)
                self.state = 669
                self.match(nimParser.IN)
                self.state = 670
                self.methodInvoke()
                self.state = 671
                self.match(nimParser.COLON)
                self.state = 672
                self.match(nimParser.T__0)
                self.state = 673
                self.match(nimParser.INDENT)
                self.state = 674
                self.methodInvoke()
                self.state = 678
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,98,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 675
                        self.match(nimParser.T__0) 
                    self.state = 680
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,98,self._ctx)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 681
                self.match(nimParser.FOR)
                self.state = 682
                self.match(nimParser.IDENTIFIER)
                self.state = 683
                self.match(nimParser.IN)
                self.state = 686
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.FORLOOP_RANGE]:
                    self.state = 684
                    self.match(nimParser.FORLOOP_RANGE)
                    pass
                elif token in [nimParser.OPEN_PAREN, nimParser.IDENTIFIER]:
                    self.state = 685
                    self.methodInvoke()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 688
                self.match(nimParser.COLON)
                self.state = 690
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.COMMENT:
                    self.state = 689
                    self.match(nimParser.COMMENT)


                self.state = 695 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 692
                        self.match(nimParser.T__0)
                        self.state = 693
                        self.match(nimParser.INDENT)
                        self.state = 694
                        self.stmt()

                    else:
                        raise NoViableAltException(self)
                    self.state = 697 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,101,self._ctx)

                self.state = 702
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,102,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 699
                        self.match(nimParser.INDENT) 
                    self.state = 704
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,102,self._ctx)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 705
                self.match(nimParser.FOR)
                self.state = 706
                self.match(nimParser.IDENTIFIER)
                self.state = 707
                self.match(nimParser.IN)
                self.state = 709 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 708
                    self.match(nimParser.DIGIT)
                    self.state = 711 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==nimParser.DIGIT):
                        break

                self.state = 713
                self.match(nimParser.OP6)
                self.state = 714
                self.match(nimParser.LESS_THAN)
                self.state = 715
                self.match(nimParser.NEW_IDENTIFIER)
                self.state = 716
                self.match(nimParser.COLON)
                self.state = 718
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.COMMENT:
                    self.state = 717
                    self.match(nimParser.COMMENT)


                self.state = 723 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 720
                        self.match(nimParser.T__0)
                        self.state = 721
                        self.match(nimParser.INDENT)
                        self.state = 722
                        self.stmt()

                    else:
                        raise NoViableAltException(self)
                    self.state = 725 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,105,self._ctx)

                self.state = 730
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,106,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 727
                        self.match(nimParser.INDENT) 
                    self.state = 732
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,106,self._ctx)

                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 733
                self.match(nimParser.FOR)
                self.state = 734
                self.match(nimParser.IDENTIFIER)
                self.state = 739
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nimParser.COMMA:
                    self.state = 735
                    self.match(nimParser.COMMA)
                    self.state = 736
                    self.match(nimParser.IDENTIFIER)
                    self.state = 741
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 742
                self.match(nimParser.IN)
                self.state = 743
                self.match(nimParser.AT)
                self.state = 744
                self.match(nimParser.OPEN_BRACK)
                self.state = 769
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nimParser.DIGIT or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (nimParser.NIL - 89)) | (1 << (nimParser.TRIPLESTR_LIT - 89)) | (1 << (nimParser.CHAR_LIT - 89)) | (1 << (nimParser.STR_LIT - 89)) | (1 << (nimParser.RSTR_LIT - 89)) | (1 << (nimParser.INT_LIT - 89)) | (1 << (nimParser.INT8_LIT - 89)) | (1 << (nimParser.INT16_LIT - 89)) | (1 << (nimParser.INT32_LIT - 89)) | (1 << (nimParser.INT64_LIT - 89)) | (1 << (nimParser.UINT_LIT - 89)) | (1 << (nimParser.UINT8_LIT - 89)) | (1 << (nimParser.UINT16_LIT - 89)) | (1 << (nimParser.UINT32_LIT - 89)) | (1 << (nimParser.UINT64_LIT - 89)) | (1 << (nimParser.FLOAT_LIT - 89)) | (1 << (nimParser.FLOAT32_LIT - 89)) | (1 << (nimParser.FLOAT64_LIT - 89)))) != 0):
                    self.state = 751
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                        self.state = 745
                        self.literal()
                        pass
                    elif token in [nimParser.DIGIT]:
                        self.state = 747 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 746
                                self.match(nimParser.DIGIT)

                            else:
                                raise NoViableAltException(self)
                            self.state = 749 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,108,self._ctx)

                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 764
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==nimParser.COMMA:
                        self.state = 753
                        self.match(nimParser.COMMA)
                        self.state = 760
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                            self.state = 754
                            self.literal()
                            pass
                        elif token in [nimParser.DIGIT]:
                            self.state = 756 
                            self._errHandler.sync(self)
                            _alt = 1
                            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                if _alt == 1:
                                    self.state = 755
                                    self.match(nimParser.DIGIT)

                                else:
                                    raise NoViableAltException(self)
                                self.state = 758 
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,110,self._ctx)

                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 766
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 771
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 772
                self.match(nimParser.CLOSE_BRACK)
                self.state = 773
                self.match(nimParser.COLON)
                self.state = 775
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.COMMENT:
                    self.state = 774
                    self.match(nimParser.COMMENT)


                self.state = 780 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 777
                        self.match(nimParser.T__0)
                        self.state = 778
                        self.match(nimParser.INDENT)
                        self.state = 779
                        self.stmt()

                    else:
                        raise NoViableAltException(self)
                    self.state = 782 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,115,self._ctx)

                self.state = 787
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,116,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 784
                        self.match(nimParser.INDENT) 
                    self.state = 789
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,116,self._ctx)

                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 790
                self.match(nimParser.FOR)
                self.state = 791
                self.match(nimParser.IDENTIFIER)
                self.state = 792
                self.match(nimParser.IN)
                self.state = 793
                self.match(nimParser.IDENTIFIER)
                self.state = 794
                self.match(nimParser.OPEN_PAREN)
                self.state = 795
                self.match(nimParser.IDENTIFIER)
                self.state = 796
                self.match(nimParser.CLOSE_PAREN)
                self.state = 797
                self.match(nimParser.COLON)
                self.state = 799
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.COMMENT:
                    self.state = 798
                    self.match(nimParser.COMMENT)


                self.state = 804 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 801
                        self.match(nimParser.T__0)
                        self.state = 802
                        self.match(nimParser.INDENT)
                        self.state = 803
                        self.stmt()

                    else:
                        raise NoViableAltException(self)
                    self.state = 806 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,118,self._ctx)

                self.state = 811
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,119,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 808
                        self.match(nimParser.INDENT) 
                    self.state = 813
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,119,self._ctx)

                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 814
                self.match(nimParser.FOR)
                self.state = 815
                self.match(nimParser.IDENTIFIER)
                self.state = 816
                self.match(nimParser.IN)
                self.state = 817
                self.match(nimParser.IDENTIFIER)
                self.state = 818
                self.match(nimParser.COLON)
                self.state = 819
                self.match(nimParser.T__0)
                self.state = 820
                self.match(nimParser.INDENT)
                self.state = 821
                self.methodInvoke()
                self.state = 823
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
                if la_ == 1:
                    self.state = 822
                    self.match(nimParser.T__0)


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 825
                self.match(nimParser.FOR)
                self.state = 826
                self.match(nimParser.IDENTIFIER)
                self.state = 827
                self.match(nimParser.IN)
                self.state = 828
                self.match(nimParser.NEW_IDENTIFIER)
                self.state = 833
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.OPEN_PAREN:
                    self.state = 829
                    self.match(nimParser.OPEN_PAREN)
                    self.state = 830
                    self.literal()
                    self.state = 831
                    self.match(nimParser.CLOSE_PAREN)


                self.state = 835
                self.match(nimParser.COLON)
                self.state = 839 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 836
                        self.match(nimParser.T__0)
                        self.state = 837
                        self.match(nimParser.INDENT)
                        self.state = 838
                        self.stmt()

                    else:
                        raise NoViableAltException(self)
                    self.state = 841 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,122,self._ctx)

                self.state = 844
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
                if la_ == 1:
                    self.state = 843
                    self.match(nimParser.T__0)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileLoopContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(nimParser.WHILE, 0)

        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def condition(self):
            return self.getTypedRuleContext(nimParser.ConditionContext,0)


        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def BREAK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.BREAK)
            else:
                return self.getToken(nimParser.BREAK, i)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.IDENTIFIER)
            else:
                return self.getToken(nimParser.IDENTIFIER, i)

        def getRuleIndex(self):
            return nimParser.RULE_whileLoop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileLoop" ):
                listener.enterWhileLoop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileLoop" ):
                listener.exitWhileLoop(self)




    def whileLoop(self):

        localctx = nimParser.WhileLoopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_whileLoop)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 848
            self.match(nimParser.WHILE)
            self.state = 851
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.state = 849
                self.condition()
                pass

            elif la_ == 2:
                self.state = 850
                self.match(nimParser.T__6)
                pass


            self.state = 853
            self.match(nimParser.COLON)
            self.state = 863 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 854
                    self.match(nimParser.T__0)
                    self.state = 855
                    self.match(nimParser.INDENT)
                    self.state = 861
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [nimParser.T__0, nimParser.T__3, nimParser.T__7, nimParser.VARIABLE, nimParser.ECHO, nimParser.BLOCK, nimParser.CASE, nimParser.CONST, nimParser.FOR, nimParser.FROM, nimParser.IF, nimParser.IMPORT, nimParser.LET, nimParser.MACRO, nimParser.PROC, nimParser.TEMPLATE, nimParser.TYPE, nimParser.WHEN, nimParser.WHILE, nimParser.OPEN_PAREN, nimParser.IDENTIFIER, nimParser.NEW_IDENTIFIER]:
                        self.state = 856
                        self.stmt()
                        pass
                    elif token in [nimParser.BREAK]:
                        self.state = 857
                        self.match(nimParser.BREAK)
                        self.state = 859
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
                        if la_ == 1:
                            self.state = 858
                            self.match(nimParser.IDENTIFIER)


                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 865 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,128,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleWhenStmt(self):
            return self.getTypedRuleContext(nimParser.SimpleWhenStmtContext,0)


        def simpleElseStmt(self):
            return self.getTypedRuleContext(nimParser.SimpleElseStmtContext,0)


        def simpleElifStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.SimpleElifStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.SimpleElifStmtContext,i)


        def getRuleIndex(self):
            return nimParser.RULE_whenStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenStmt" ):
                listener.enterWhenStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenStmt" ):
                listener.exitWhenStmt(self)




    def whenStmt(self):

        localctx = nimParser.WhenStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_whenStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 867
            self.simpleWhenStmt()
            self.state = 871
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==nimParser.ELIF:
                self.state = 868
                self.simpleElifStmt()
                self.state = 873
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 874
            self.simpleElseStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleWhenStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(nimParser.WHEN, 0)

        def condition(self):
            return self.getTypedRuleContext(nimParser.ConditionContext,0)


        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def BREAK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.BREAK)
            else:
                return self.getToken(nimParser.BREAK, i)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def getRuleIndex(self):
            return nimParser.RULE_simpleWhenStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleWhenStmt" ):
                listener.enterSimpleWhenStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleWhenStmt" ):
                listener.exitSimpleWhenStmt(self)




    def simpleWhenStmt(self):

        localctx = nimParser.SimpleWhenStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_simpleWhenStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 876
            self.match(nimParser.WHEN)
            self.state = 877
            self.condition()
            self.state = 878
            self.match(nimParser.COLON)
            self.state = 887 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 881
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
                if la_ == 1:
                    self.state = 879
                    self.match(nimParser.T__0)
                    self.state = 880
                    self.match(nimParser.INDENT)


                self.state = 885
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.T__0, nimParser.T__3, nimParser.T__7, nimParser.VARIABLE, nimParser.ECHO, nimParser.BLOCK, nimParser.CASE, nimParser.CONST, nimParser.FOR, nimParser.FROM, nimParser.IF, nimParser.IMPORT, nimParser.LET, nimParser.MACRO, nimParser.PROC, nimParser.TEMPLATE, nimParser.TYPE, nimParser.WHEN, nimParser.WHILE, nimParser.OPEN_PAREN, nimParser.IDENTIFIER, nimParser.NEW_IDENTIFIER]:
                    self.state = 883
                    self.stmt()
                    pass
                elif token in [nimParser.BREAK]:
                    self.state = 884
                    self.match(nimParser.BREAK)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 889 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.T__0) | (1 << nimParser.T__3) | (1 << nimParser.T__7) | (1 << nimParser.VARIABLE) | (1 << nimParser.ECHO) | (1 << nimParser.BLOCK) | (1 << nimParser.BREAK) | (1 << nimParser.CASE) | (1 << nimParser.CONST))) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & ((1 << (nimParser.FOR - 76)) | (1 << (nimParser.FROM - 76)) | (1 << (nimParser.IF - 76)) | (1 << (nimParser.IMPORT - 76)) | (1 << (nimParser.LET - 76)) | (1 << (nimParser.MACRO - 76)) | (1 << (nimParser.PROC - 76)) | (1 << (nimParser.TEMPLATE - 76)) | (1 << (nimParser.TYPE - 76)) | (1 << (nimParser.WHEN - 76)) | (1 << (nimParser.WHILE - 76)) | (1 << (nimParser.OPEN_PAREN - 76)) | (1 << (nimParser.IDENTIFIER - 76)))) != 0) or _la==nimParser.NEW_IDENTIFIER):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROC(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.PROC)
            else:
                return self.getToken(nimParser.PROC, i)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.IDENTIFIER)
            else:
                return self.getToken(nimParser.IDENTIFIER, i)

        def OPEN_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.OPEN_PAREN)
            else:
                return self.getToken(nimParser.OPEN_PAREN, i)

        def CLOSE_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.CLOSE_PAREN)
            else:
                return self.getToken(nimParser.CLOSE_PAREN, i)

        def EQUALS_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.EQUALS_OPERATOR)
            else:
                return self.getToken(nimParser.EQUALS_OPERATOR, i)

        def OPEN_BRACK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.OPEN_BRACK)
            else:
                return self.getToken(nimParser.OPEN_BRACK, i)

        def CLOSE_BRACK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.CLOSE_BRACK)
            else:
                return self.getToken(nimParser.CLOSE_BRACK, i)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COLON)
            else:
                return self.getToken(nimParser.COLON, i)

        def dataType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.DataTypeContext)
            else:
                return self.getTypedRuleContext(nimParser.DataTypeContext,i)


        def RETURN(self):
            return self.getToken(nimParser.RETURN, 0)

        def rightHandSideStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.RightHandSideStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,i)


        def assignStmt(self):
            return self.getTypedRuleContext(nimParser.AssignStmtContext,0)


        def printStmt(self):
            return self.getTypedRuleContext(nimParser.PrintStmtContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMA)
            else:
                return self.getToken(nimParser.COMMA, i)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def VARIABLE(self):
            return self.getToken(nimParser.VARIABLE, 0)

        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.LiteralContext)
            else:
                return self.getTypedRuleContext(nimParser.LiteralContext,i)


        def MINUS_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.MINUS_OPERATOR)
            else:
                return self.getToken(nimParser.MINUS_OPERATOR, i)

        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.DIGIT)
            else:
                return self.getToken(nimParser.DIGIT, i)

        def getRuleIndex(self):
            return nimParser.RULE_procBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcBlock" ):
                listener.enterProcBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcBlock" ):
                listener.exitProcBlock(self)




    def procBlock(self):

        localctx = nimParser.ProcBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_procBlock)
        self._la = 0 # Token type
        try:
            self.state = 1114
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 891
                self.match(nimParser.PROC)
                self.state = 892
                self.match(nimParser.IDENTIFIER)
                self.state = 896
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.OPEN_BRACK:
                    self.state = 893
                    self.match(nimParser.OPEN_BRACK)
                    self.state = 894
                    self.match(nimParser.IDENTIFIER)
                    self.state = 895
                    self.match(nimParser.CLOSE_BRACK)


                self.state = 898
                self.match(nimParser.OPEN_PAREN)
                self.state = 909 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 899
                    self.match(nimParser.IDENTIFIER)
                    self.state = 904
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [nimParser.COLON]:
                        self.state = 900
                        self.match(nimParser.COLON)
                        self.state = 901
                        self.dataType()
                        pass
                    elif token in [nimParser.EQUALS_OPERATOR]:
                        self.state = 902
                        self.match(nimParser.EQUALS_OPERATOR)
                        self.state = 903
                        self.rightHandSideStmt()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 907
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==nimParser.COMMA:
                        self.state = 906
                        self.match(nimParser.COMMA)


                    self.state = 911 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==nimParser.IDENTIFIER):
                        break

                self.state = 913
                self.match(nimParser.CLOSE_PAREN)
                self.state = 916
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.COLON:
                    self.state = 914
                    self.match(nimParser.COLON)
                    self.state = 915
                    self.dataType()


                self.state = 918
                self.match(nimParser.EQUALS_OPERATOR)
                self.state = 956
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.T__0]:
                    self.state = 922 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 919
                            self.match(nimParser.T__0)
                            self.state = 920
                            self.match(nimParser.INDENT)
                            self.state = 921
                            self.stmt()

                        else:
                            raise NoViableAltException(self)
                        self.state = 924 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,138,self._ctx)

                    pass
                elif token in [nimParser.IDENTIFIER]:
                    self.state = 926
                    self.assignStmt()
                    self.state = 930
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,139,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 927
                            self.match(nimParser.T__0) 
                        self.state = 932
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,139,self._ctx)

                    self.state = 938
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,140,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 933
                            self.match(nimParser.T__0)
                            self.state = 934
                            self.match(nimParser.INDENT)
                            self.state = 935
                            self.stmt() 
                        self.state = 940
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,140,self._ctx)

                    pass
                elif token in [nimParser.ECHO]:
                    self.state = 941
                    self.printStmt()
                    self.state = 945
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,141,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 942
                            self.match(nimParser.T__0) 
                        self.state = 947
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,141,self._ctx)

                    self.state = 953
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,142,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 948
                            self.match(nimParser.T__0)
                            self.state = 949
                            self.match(nimParser.INDENT)
                            self.state = 950
                            self.stmt() 
                        self.state = 955
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,142,self._ctx)

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 960
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
                if la_ == 1:
                    self.state = 958
                    self.match(nimParser.RETURN)
                    self.state = 959
                    self.rightHandSideStmt()


                self.state = 963
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
                if la_ == 1:
                    self.state = 962
                    self.match(nimParser.T__0)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 965
                self.match(nimParser.PROC)
                self.state = 966
                self.match(nimParser.T__7)
                self.state = 967
                self.match(nimParser.OPEN_PAREN)
                self.state = 968
                self.match(nimParser.IDENTIFIER)
                self.state = 969
                self.match(nimParser.COLON)
                self.state = 970
                self.match(nimParser.PROC)
                self.state = 971
                self.match(nimParser.OPEN_PAREN)
                self.state = 972
                self.match(nimParser.IDENTIFIER)
                self.state = 973
                self.match(nimParser.COLON)
                self.state = 974
                self.dataType()
                self.state = 975
                self.match(nimParser.CLOSE_PAREN)
                self.state = 976
                self.match(nimParser.CLOSE_PAREN)
                self.state = 979
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.COLON:
                    self.state = 977
                    self.match(nimParser.COLON)
                    self.state = 978
                    self.dataType()


                self.state = 981
                self.match(nimParser.EQUALS_OPERATOR)
                self.state = 1019
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.T__0]:
                    self.state = 985 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 982
                        self.match(nimParser.T__0)
                        self.state = 983
                        self.match(nimParser.INDENT)
                        self.state = 984
                        self.stmt()
                        self.state = 987 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==nimParser.T__0):
                            break

                    pass
                elif token in [nimParser.IDENTIFIER]:
                    self.state = 989
                    self.assignStmt()
                    self.state = 993
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,148,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 990
                            self.match(nimParser.T__0) 
                        self.state = 995
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,148,self._ctx)

                    self.state = 1001
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==nimParser.T__0:
                        self.state = 996
                        self.match(nimParser.T__0)
                        self.state = 997
                        self.match(nimParser.INDENT)
                        self.state = 998
                        self.stmt()
                        self.state = 1003
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [nimParser.ECHO]:
                    self.state = 1004
                    self.printStmt()
                    self.state = 1008
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,150,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1005
                            self.match(nimParser.T__0) 
                        self.state = 1010
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,150,self._ctx)

                    self.state = 1016
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==nimParser.T__0:
                        self.state = 1011
                        self.match(nimParser.T__0)
                        self.state = 1012
                        self.match(nimParser.INDENT)
                        self.state = 1013
                        self.stmt()
                        self.state = 1018
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1021
                self.match(nimParser.RETURN)
                self.state = 1022
                self.rightHandSideStmt()
                self.state = 1025
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
                if la_ == 1:
                    self.state = 1024
                    self.match(nimParser.T__0)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1027
                self.match(nimParser.PROC)
                self.state = 1028
                self.match(nimParser.IDENTIFIER)
                self.state = 1032
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.OPEN_BRACK:
                    self.state = 1029
                    self.match(nimParser.OPEN_BRACK)
                    self.state = 1030
                    self.match(nimParser.IDENTIFIER)
                    self.state = 1031
                    self.match(nimParser.CLOSE_BRACK)


                self.state = 1034
                self.match(nimParser.OPEN_PAREN)
                self.state = 1035
                self.match(nimParser.IDENTIFIER)
                self.state = 1036
                self.match(nimParser.COLON)
                self.state = 1037
                self.match(nimParser.VARIABLE)
                self.state = 1038
                self.match(nimParser.IDENTIFIER)
                self.state = 1039
                self.match(nimParser.OPEN_BRACK)
                self.state = 1040
                self.match(nimParser.IDENTIFIER)
                self.state = 1041
                self.match(nimParser.CLOSE_BRACK)
                self.state = 1059
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nimParser.COMMA:
                    self.state = 1042
                    self.match(nimParser.COMMA)
                    self.state = 1043
                    self.match(nimParser.IDENTIFIER)
                    self.state = 1044
                    self.match(nimParser.EQUALS_OPERATOR)
                    self.state = 1055
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [nimParser.DIGIT, nimParser.MINUS_OPERATOR]:
                        self.state = 1046
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==nimParser.MINUS_OPERATOR:
                            self.state = 1045
                            self.match(nimParser.MINUS_OPERATOR)


                        self.state = 1049 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 1048
                            self.match(nimParser.DIGIT)
                            self.state = 1051 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==nimParser.DIGIT):
                                break

                        pass
                    elif token in [nimParser.IDENTIFIER]:
                        self.state = 1053
                        self.match(nimParser.IDENTIFIER)
                        pass
                    elif token in [nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                        self.state = 1054
                        self.literal()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1061
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1062
                self.match(nimParser.CLOSE_PAREN)
                self.state = 1065
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.COLON:
                    self.state = 1063
                    self.match(nimParser.COLON)
                    self.state = 1064
                    self.dataType()


                self.state = 1067
                self.match(nimParser.EQUALS_OPERATOR)
                self.state = 1105
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.T__0]:
                    self.state = 1071 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 1068
                            self.match(nimParser.T__0)
                            self.state = 1069
                            self.match(nimParser.INDENT)
                            self.state = 1070
                            self.stmt()

                        else:
                            raise NoViableAltException(self)
                        self.state = 1073 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,160,self._ctx)

                    pass
                elif token in [nimParser.IDENTIFIER]:
                    self.state = 1075
                    self.assignStmt()
                    self.state = 1079
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,161,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1076
                            self.match(nimParser.T__0) 
                        self.state = 1081
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,161,self._ctx)

                    self.state = 1087
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,162,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1082
                            self.match(nimParser.T__0)
                            self.state = 1083
                            self.match(nimParser.INDENT)
                            self.state = 1084
                            self.stmt() 
                        self.state = 1089
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,162,self._ctx)

                    pass
                elif token in [nimParser.ECHO]:
                    self.state = 1090
                    self.printStmt()
                    self.state = 1094
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,163,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1091
                            self.match(nimParser.T__0) 
                        self.state = 1096
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,163,self._ctx)

                    self.state = 1102
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,164,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1097
                            self.match(nimParser.T__0)
                            self.state = 1098
                            self.match(nimParser.INDENT)
                            self.state = 1099
                            self.stmt() 
                        self.state = 1104
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,164,self._ctx)

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1109
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
                if la_ == 1:
                    self.state = 1107
                    self.match(nimParser.RETURN)
                    self.state = 1108
                    self.rightHandSideStmt()


                self.state = 1112
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
                if la_ == 1:
                    self.state = 1111
                    self.match(nimParser.T__0)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MACRO(self):
            return self.getToken(nimParser.MACRO, 0)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.IDENTIFIER)
            else:
                return self.getToken(nimParser.IDENTIFIER, i)

        def OPEN_PAREN(self):
            return self.getToken(nimParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(nimParser.CLOSE_PAREN, 0)

        def EQUALS_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.EQUALS_OPERATOR)
            else:
                return self.getToken(nimParser.EQUALS_OPERATOR, i)

        def OPEN_BRACK(self):
            return self.getToken(nimParser.OPEN_BRACK, 0)

        def CLOSE_BRACK(self):
            return self.getToken(nimParser.CLOSE_BRACK, 0)

        def RETURN(self):
            return self.getToken(nimParser.RETURN, 0)

        def rightHandSideStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.RightHandSideStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COLON)
            else:
                return self.getToken(nimParser.COLON, i)

        def SEMI_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.SEMI_COLON)
            else:
                return self.getToken(nimParser.SEMI_COLON, i)

        def assignStmt(self):
            return self.getTypedRuleContext(nimParser.AssignStmtContext,0)


        def printStmt(self):
            return self.getTypedRuleContext(nimParser.PrintStmtContext,0)


        def dataType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.DataTypeContext)
            else:
                return self.getTypedRuleContext(nimParser.DataTypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMA)
            else:
                return self.getToken(nimParser.COMMA, i)

        def COMMENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMENT)
            else:
                return self.getToken(nimParser.COMMENT, i)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def getRuleIndex(self):
            return nimParser.RULE_macroBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroBlock" ):
                listener.enterMacroBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroBlock" ):
                listener.exitMacroBlock(self)




    def macroBlock(self):

        localctx = nimParser.MacroBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_macroBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1116
            self.match(nimParser.MACRO)
            self.state = 1117
            self.match(nimParser.IDENTIFIER)
            self.state = 1121
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.OPEN_BRACK:
                self.state = 1118
                self.match(nimParser.OPEN_BRACK)
                self.state = 1119
                self.match(nimParser.IDENTIFIER)
                self.state = 1120
                self.match(nimParser.CLOSE_BRACK)


            self.state = 1123
            self.match(nimParser.OPEN_PAREN)
            self.state = 1140 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1124
                self.match(nimParser.IDENTIFIER)
                self.state = 1135
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.COLON, nimParser.SEMI_COLON]:
                    self.state = 1125
                    _la = self._input.LA(1)
                    if not(_la==nimParser.COLON or _la==nimParser.SEMI_COLON):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1128
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [nimParser.T__13, nimParser.T__14, nimParser.T__15]:
                        self.state = 1126
                        self.dataType()
                        pass
                    elif token in [nimParser.T__8]:
                        self.state = 1127
                        self.match(nimParser.T__8)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1131
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==nimParser.SEMI_COLON:
                        self.state = 1130
                        self.match(nimParser.SEMI_COLON)


                    pass
                elif token in [nimParser.EQUALS_OPERATOR]:
                    self.state = 1133
                    self.match(nimParser.EQUALS_OPERATOR)
                    self.state = 1134
                    self.rightHandSideStmt()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1138
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.COMMA:
                    self.state = 1137
                    self.match(nimParser.COMMA)


                self.state = 1142 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==nimParser.IDENTIFIER):
                    break

            self.state = 1144
            self.match(nimParser.CLOSE_PAREN)
            self.state = 1150
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.COLON or _la==nimParser.SEMI_COLON:
                self.state = 1145
                _la = self._input.LA(1)
                if not(_la==nimParser.COLON or _la==nimParser.SEMI_COLON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1148
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.T__13, nimParser.T__14, nimParser.T__15]:
                    self.state = 1146
                    self.dataType()
                    pass
                elif token in [nimParser.T__8]:
                    self.state = 1147
                    self.match(nimParser.T__8)
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 1152
            self.match(nimParser.EQUALS_OPERATOR)
            self.state = 1162
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,179,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1154
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==nimParser.COMMENT:
                        self.state = 1153
                        self.match(nimParser.COMMENT)


                    self.state = 1156
                    self.match(nimParser.T__0)
                    self.state = 1158
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
                    if la_ == 1:
                        self.state = 1157
                        self.match(nimParser.INDENT)

             
                self.state = 1164
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,179,self._ctx)

            self.state = 1210
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,189,self._ctx)
            if la_ == 1:
                self.state = 1172 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1166
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
                        if la_ == 1:
                            self.state = 1165
                            self.match(nimParser.T__0)


                        self.state = 1169
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==nimParser.INDENT:
                            self.state = 1168
                            self.match(nimParser.INDENT)


                        self.state = 1171
                        self.stmt()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1174 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,182,self._ctx)

                pass

            elif la_ == 2:
                self.state = 1176
                self.assignStmt()
                self.state = 1180
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,183,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1177
                        self.match(nimParser.T__0) 
                    self.state = 1182
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,183,self._ctx)

                self.state = 1192
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,186,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1184
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,184,self._ctx)
                        if la_ == 1:
                            self.state = 1183
                            self.match(nimParser.T__0)


                        self.state = 1187
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==nimParser.INDENT:
                            self.state = 1186
                            self.match(nimParser.INDENT)


                        self.state = 1189
                        self.stmt() 
                    self.state = 1194
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,186,self._ctx)

                pass

            elif la_ == 3:
                self.state = 1195
                self.printStmt()
                self.state = 1199
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,187,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1196
                        self.match(nimParser.T__0) 
                    self.state = 1201
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,187,self._ctx)

                self.state = 1207
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,188,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1202
                        self.match(nimParser.T__0)
                        self.state = 1203
                        self.match(nimParser.INDENT)
                        self.state = 1204
                        self.stmt() 
                    self.state = 1209
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,188,self._ctx)

                pass


            self.state = 1214
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
            if la_ == 1:
                self.state = 1212
                self.match(nimParser.RETURN)
                self.state = 1213
                self.rightHandSideStmt()


            self.state = 1217
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
            if la_ == 1:
                self.state = 1216
                self.match(nimParser.T__0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplateStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TEMPLATE(self):
            return self.getToken(nimParser.TEMPLATE, 0)

        def methodInvoke(self):
            return self.getTypedRuleContext(nimParser.MethodInvokeContext,0)


        def EQUALS_OPERATOR(self):
            return self.getToken(nimParser.EQUALS_OPERATOR, 0)

        def OPEN_BRACE(self):
            return self.getToken(nimParser.OPEN_BRACE, 0)

        def NEW_IDENTIFIER(self):
            return self.getToken(nimParser.NEW_IDENTIFIER, 0)

        def CLOSE_BRACE(self):
            return self.getToken(nimParser.CLOSE_BRACE, 0)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def getRuleIndex(self):
            return nimParser.RULE_templateStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateStmt" ):
                listener.enterTemplateStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateStmt" ):
                listener.exitTemplateStmt(self)




    def templateStmt(self):

        localctx = nimParser.TemplateStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_templateStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1219
            self.match(nimParser.TEMPLATE)
            self.state = 1220
            self.methodInvoke()
            self.state = 1224
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.OPEN_BRACE:
                self.state = 1221
                self.match(nimParser.OPEN_BRACE)
                self.state = 1222
                self.match(nimParser.NEW_IDENTIFIER)
                self.state = 1223
                self.match(nimParser.CLOSE_BRACE)


            self.state = 1226
            self.match(nimParser.EQUALS_OPERATOR)
            self.state = 1232 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1227
                    self.match(nimParser.T__0)
                    self.state = 1229
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==nimParser.INDENT:
                        self.state = 1228
                        self.match(nimParser.INDENT)


                    self.state = 1231
                    self.stmt()

                else:
                    raise NoViableAltException(self)
                self.state = 1234 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,194,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BLOCK(self):
            return self.getToken(nimParser.BLOCK, 0)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.IDENTIFIER)
            else:
                return self.getToken(nimParser.IDENTIFIER, i)

        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def OPEN_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.OPEN_PAREN)
            else:
                return self.getToken(nimParser.OPEN_PAREN, i)

        def CLOSE_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.CLOSE_PAREN)
            else:
                return self.getToken(nimParser.CLOSE_PAREN, i)

        def getRuleIndex(self):
            return nimParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = nimParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1236
            self.match(nimParser.BLOCK)
            self.state = 1237
            self.match(nimParser.IDENTIFIER)
            self.state = 1238
            self.match(nimParser.COLON)
            self.state = 1256 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1239
                    self.match(nimParser.T__0)
                    self.state = 1240
                    self.match(nimParser.INDENT)
                    self.state = 1254
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,196,self._ctx)
                    if la_ == 1:
                        self.state = 1241
                        self.stmt()
                        pass

                    elif la_ == 2:
                        self.state = 1242
                        self.match(nimParser.IDENTIFIER)
                        self.state = 1243
                        self.match(nimParser.T__0)
                        self.state = 1247
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==nimParser.INDENT:
                            self.state = 1244
                            self.match(nimParser.INDENT)
                            self.state = 1249
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1250
                        self.match(nimParser.T__4)
                        self.state = 1251
                        self.match(nimParser.OPEN_PAREN)
                        self.state = 1252
                        self.match(nimParser.IDENTIFIER)
                        self.state = 1253
                        self.match(nimParser.CLOSE_PAREN)
                        pass



                else:
                    raise NoViableAltException(self)
                self.state = 1258 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,197,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(nimParser.TYPE, 0)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.IDENTIFIER)
            else:
                return self.getToken(nimParser.IDENTIFIER, i)

        def EQUALS_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.EQUALS_OPERATOR)
            else:
                return self.getToken(nimParser.EQUALS_OPERATOR, i)

        def OPEN_BRACK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.OPEN_BRACK)
            else:
                return self.getToken(nimParser.OPEN_BRACK, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMA)
            else:
                return self.getToken(nimParser.COMMA, i)

        def dataType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.DataTypeContext)
            else:
                return self.getTypedRuleContext(nimParser.DataTypeContext,i)


        def CLOSE_BRACK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.CLOSE_BRACK)
            else:
                return self.getToken(nimParser.CLOSE_BRACK, i)

        def FORLOOP_RANGE(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.FORLOOP_RANGE)
            else:
                return self.getToken(nimParser.FORLOOP_RANGE, i)

        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.DIGIT)
            else:
                return self.getToken(nimParser.DIGIT, i)

        def getRuleIndex(self):
            return nimParser.RULE_typeBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeBlock" ):
                listener.enterTypeBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeBlock" ):
                listener.exitTypeBlock(self)




    def typeBlock(self):

        localctx = nimParser.TypeBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_typeBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1260
            self.match(nimParser.TYPE)
            self.state = 1261
            self.match(nimParser.T__0)
            self.state = 1280 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1262
                    self.match(nimParser.INDENT)
                    self.state = 1263
                    self.match(nimParser.IDENTIFIER)
                    self.state = 1264
                    self.match(nimParser.EQUALS_OPERATOR)
                    self.state = 1265
                    self.match(nimParser.T__9)
                    self.state = 1266
                    self.match(nimParser.OPEN_BRACK)
                    self.state = 1273
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [nimParser.FORLOOP_RANGE]:
                        self.state = 1267
                        self.match(nimParser.FORLOOP_RANGE)
                        pass
                    elif token in [nimParser.DIGIT]:
                        self.state = 1269 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 1268
                            self.match(nimParser.DIGIT)
                            self.state = 1271 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==nimParser.DIGIT):
                                break

                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1275
                    self.match(nimParser.COMMA)
                    self.state = 1276
                    self.dataType()
                    self.state = 1277
                    self.match(nimParser.CLOSE_BRACK)
                    self.state = 1278
                    self.match(nimParser.T__0)

                else:
                    raise NoViableAltException(self)
                self.state = 1282 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,200,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodInvokeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.IDENTIFIER)
            else:
                return self.getToken(nimParser.IDENTIFIER, i)

        def OPEN_PAREN(self):
            return self.getToken(nimParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(nimParser.CLOSE_PAREN, 0)

        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.LiteralContext)
            else:
                return self.getTypedRuleContext(nimParser.LiteralContext,i)


        def rightHandSideStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.RightHandSideStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,i)


        def OPEN_BRACK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.OPEN_BRACK)
            else:
                return self.getToken(nimParser.OPEN_BRACK, i)

        def dataType(self):
            return self.getTypedRuleContext(nimParser.DataTypeContext,0)


        def CLOSE_BRACK(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.CLOSE_BRACK)
            else:
                return self.getToken(nimParser.CLOSE_BRACK, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMA)
            else:
                return self.getToken(nimParser.COMMA, i)

        def EQUALS_OPERATOR(self):
            return self.getToken(nimParser.EQUALS_OPERATOR, 0)

        def ADD_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.ADD_OPERATOR)
            else:
                return self.getToken(nimParser.ADD_OPERATOR, i)

        def MINUS_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.MINUS_OPERATOR)
            else:
                return self.getToken(nimParser.MINUS_OPERATOR, i)

        def MOD(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.MOD)
            else:
                return self.getToken(nimParser.MOD, i)

        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.DIGIT)
            else:
                return self.getToken(nimParser.DIGIT, i)

        def NEW_IDENTIFIER(self):
            return self.getToken(nimParser.NEW_IDENTIFIER, 0)

        def getRuleIndex(self):
            return nimParser.RULE_methodInvoke

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodInvoke" ):
                listener.enterMethodInvoke(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodInvoke" ):
                listener.exitMethodInvoke(self)




    def methodInvoke(self):

        localctx = nimParser.MethodInvokeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_methodInvoke)
        self._la = 0 # Token type
        try:
            self.state = 1381
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,217,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1284
                self.match(nimParser.IDENTIFIER)
                self.state = 1289
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.OPEN_BRACK:
                    self.state = 1285
                    self.match(nimParser.OPEN_BRACK)
                    self.state = 1286
                    self.dataType()
                    self.state = 1287
                    self.match(nimParser.CLOSE_BRACK)


                self.state = 1291
                self.match(nimParser.OPEN_PAREN)
                self.state = 1300
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
                if la_ == 1:
                    self.state = 1292
                    self.match(nimParser.IDENTIFIER)
                    pass

                elif la_ == 2:
                    self.state = 1294 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 1293
                        self.match(nimParser.DIGIT)
                        self.state = 1296 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==nimParser.DIGIT):
                            break

                    pass

                elif la_ == 3:
                    self.state = 1298
                    self.literal()
                    pass

                elif la_ == 4:
                    self.state = 1299
                    self.rightHandSideStmt()
                    pass


                self.state = 1315
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,206,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1302
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.MOD) | (1 << nimParser.ADD_OPERATOR) | (1 << nimParser.MINUS_OPERATOR) | (1 << nimParser.COMMA))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1311
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,205,self._ctx)
                        if la_ == 1:
                            self.state = 1303
                            self.match(nimParser.IDENTIFIER)
                            pass

                        elif la_ == 2:
                            self.state = 1305 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 1304
                                self.match(nimParser.DIGIT)
                                self.state = 1307 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==nimParser.DIGIT):
                                    break

                            pass

                        elif la_ == 3:
                            self.state = 1309
                            self.literal()
                            pass

                        elif la_ == 4:
                            self.state = 1310
                            self.rightHandSideStmt()
                            pass

                 
                    self.state = 1317
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,206,self._ctx)

                self.state = 1322
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.COMMA:
                    self.state = 1318
                    self.match(nimParser.COMMA)
                    self.state = 1319
                    self.match(nimParser.IDENTIFIER)
                    self.state = 1320
                    self.match(nimParser.EQUALS_OPERATOR)
                    self.state = 1321
                    self.match(nimParser.T__6)


                self.state = 1324
                self.match(nimParser.CLOSE_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1325
                self.match(nimParser.OPEN_PAREN)
                self.state = 1333
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.IDENTIFIER]:
                    self.state = 1326
                    self.match(nimParser.IDENTIFIER)
                    pass
                elif token in [nimParser.DIGIT]:
                    self.state = 1328 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 1327
                        self.match(nimParser.DIGIT)
                        self.state = 1330 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==nimParser.DIGIT):
                            break

                    pass
                elif token in [nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                    self.state = 1332
                    self.literal()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1347
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.ADD_OPERATOR) | (1 << nimParser.MINUS_OPERATOR) | (1 << nimParser.COMMA))) != 0):
                    self.state = 1335
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.ADD_OPERATOR) | (1 << nimParser.MINUS_OPERATOR) | (1 << nimParser.COMMA))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1343
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [nimParser.IDENTIFIER]:
                        self.state = 1336
                        self.match(nimParser.IDENTIFIER)
                        pass
                    elif token in [nimParser.DIGIT]:
                        self.state = 1338 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 1337
                            self.match(nimParser.DIGIT)
                            self.state = 1340 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==nimParser.DIGIT):
                                break

                        pass
                    elif token in [nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                        self.state = 1342
                        self.literal()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1349
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1350
                self.match(nimParser.CLOSE_PAREN)
                self.state = 1351
                self.match(nimParser.NEW_IDENTIFIER)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1352
                self.match(nimParser.IDENTIFIER)
                self.state = 1353
                self.match(nimParser.IDENTIFIER)
                self.state = 1367
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.OPEN_BRACK:
                    self.state = 1354
                    self.match(nimParser.OPEN_BRACK)
                    self.state = 1355
                    self.match(nimParser.IDENTIFIER)
                    self.state = 1356
                    self.match(nimParser.CLOSE_BRACK)
                    self.state = 1364
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,213,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1357
                            self.match(nimParser.COMMA)
                            self.state = 1358
                            self.match(nimParser.IDENTIFIER)
                            self.state = 1359
                            self.match(nimParser.OPEN_BRACK)
                            self.state = 1360
                            self.match(nimParser.IDENTIFIER)
                            self.state = 1361
                            self.match(nimParser.CLOSE_BRACK) 
                        self.state = 1366
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,213,self._ctx)



                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1369
                self.match(nimParser.IDENTIFIER)
                self.state = 1374
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.OPEN_BRACK:
                    self.state = 1370
                    self.match(nimParser.OPEN_BRACK)
                    self.state = 1371
                    self.dataType()
                    self.state = 1372
                    self.match(nimParser.CLOSE_BRACK)


                self.state = 1376
                self.match(nimParser.OPEN_PAREN)
                self.state = 1378
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.NEW_IDENTIFIER:
                    self.state = 1377
                    self.match(nimParser.NEW_IDENTIFIER)


                self.state = 1380
                self.match(nimParser.CLOSE_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstanceMethodInvokeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW_IDENTIFIER(self):
            return self.getToken(nimParser.NEW_IDENTIFIER, 0)

        def OPEN_PAREN(self):
            return self.getToken(nimParser.OPEN_PAREN, 0)

        def rightHandSideStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.RightHandSideStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,i)


        def CLOSE_PAREN(self):
            return self.getToken(nimParser.CLOSE_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMA)
            else:
                return self.getToken(nimParser.COMMA, i)

        def MOD(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.MOD)
            else:
                return self.getToken(nimParser.MOD, i)

        def ADD_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.ADD_OPERATOR)
            else:
                return self.getToken(nimParser.ADD_OPERATOR, i)

        def getRuleIndex(self):
            return nimParser.RULE_instanceMethodInvoke

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstanceMethodInvoke" ):
                listener.enterInstanceMethodInvoke(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstanceMethodInvoke" ):
                listener.exitInstanceMethodInvoke(self)




    def instanceMethodInvoke(self):

        localctx = nimParser.InstanceMethodInvokeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_instanceMethodInvoke)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1383
            self.match(nimParser.NEW_IDENTIFIER)
            self.state = 1384
            self.match(nimParser.OPEN_PAREN)
            self.state = 1385
            self.rightHandSideStmt()
            self.state = 1390
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.MOD) | (1 << nimParser.ADD_OPERATOR) | (1 << nimParser.COMMA))) != 0):
                self.state = 1386
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.MOD) | (1 << nimParser.ADD_OPERATOR) | (1 << nimParser.COMMA))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1387
                self.rightHandSideStmt()
                self.state = 1392
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1393
            self.match(nimParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForEachStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(nimParser.IDENTIFIER, 0)

        def CLOSE_PAREN(self):
            return self.getToken(nimParser.CLOSE_PAREN, 0)

        def OPEN_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.OPEN_PAREN)
            else:
                return self.getToken(nimParser.OPEN_PAREN, i)

        def getRuleIndex(self):
            return nimParser.RULE_forEachStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForEachStmt" ):
                listener.enterForEachStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForEachStmt" ):
                listener.exitForEachStmt(self)




    def forEachStmt(self):

        localctx = nimParser.ForEachStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_forEachStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1396 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1395
                _la = self._input.LA(1)
                if not(_la==nimParser.T__7 or _la==nimParser.OPEN_PAREN):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1398 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==nimParser.T__7 or _la==nimParser.OPEN_PAREN):
                    break

            self.state = 1400
            self.match(nimParser.IDENTIFIER)
            self.state = 1401
            self.match(nimParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(nimParser.IMPORT, 0)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.IDENTIFIER)
            else:
                return self.getToken(nimParser.IDENTIFIER, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMA)
            else:
                return self.getToken(nimParser.COMMA, i)

        def FROM(self):
            return self.getToken(nimParser.FROM, 0)

        def getRuleIndex(self):
            return nimParser.RULE_importStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportStmt" ):
                listener.enterImportStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportStmt" ):
                listener.exitImportStmt(self)




    def importStmt(self):

        localctx = nimParser.ImportStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_importStmt)
        self._la = 0 # Token type
        try:
            self.state = 1427
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [nimParser.IMPORT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1403
                self.match(nimParser.IMPORT)
                self.state = 1404
                self.match(nimParser.IDENTIFIER)
                self.state = 1409
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nimParser.COMMA:
                    self.state = 1405
                    self.match(nimParser.COMMA)
                    self.state = 1406
                    self.match(nimParser.IDENTIFIER)
                    self.state = 1411
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1414
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,221,self._ctx)
                if la_ == 1:
                    self.state = 1412
                    self.match(nimParser.FROM)
                    self.state = 1413
                    self.match(nimParser.IDENTIFIER)


                pass
            elif token in [nimParser.FROM]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1416
                self.match(nimParser.FROM)
                self.state = 1417
                self.match(nimParser.IDENTIFIER)
                self.state = 1418
                self.match(nimParser.IMPORT)
                self.state = 1419
                self.match(nimParser.IDENTIFIER)
                self.state = 1424
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nimParser.COMMA:
                    self.state = 1420
                    self.match(nimParser.COMMA)
                    self.state = 1421
                    self.match(nimParser.IDENTIFIER)
                    self.state = 1426
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleCondition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.SimpleConditionContext)
            else:
                return self.getTypedRuleContext(nimParser.SimpleConditionContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.AND)
            else:
                return self.getToken(nimParser.AND, i)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.OR)
            else:
                return self.getToken(nimParser.OR, i)

        def AND_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.AND_OPERATOR)
            else:
                return self.getToken(nimParser.AND_OPERATOR, i)

        def OR_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.OR_OPERATOR)
            else:
                return self.getToken(nimParser.OR_OPERATOR, i)

        def getRuleIndex(self):
            return nimParser.RULE_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition" ):
                listener.enterCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition" ):
                listener.exitCondition(self)




    def condition(self):

        localctx = nimParser.ConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_condition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1429
            self.simpleCondition()
            self.state = 1434
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.AND) | (1 << nimParser.OR) | (1 << nimParser.AND_OPERATOR) | (1 << nimParser.OR_OPERATOR))) != 0):
                self.state = 1430
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.AND) | (1 << nimParser.OR) | (1 << nimParser.AND_OPERATOR) | (1 << nimParser.OR_OPERATOR))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1431
                self.simpleCondition()
                self.state = 1436
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleConditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rightHandSideStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.RightHandSideStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,i)


        def LESS_THAN(self):
            return self.getToken(nimParser.LESS_THAN, 0)

        def GREATER_THAN(self):
            return self.getToken(nimParser.GREATER_THAN, 0)

        def EQUALS_EQUALS(self):
            return self.getToken(nimParser.EQUALS_EQUALS, 0)

        def EQUALS_OPERATOR(self):
            return self.getToken(nimParser.EQUALS_OPERATOR, 0)

        def IDENTIFIER(self):
            return self.getToken(nimParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return nimParser.RULE_simpleCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleCondition" ):
                listener.enterSimpleCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleCondition" ):
                listener.exitSimpleCondition(self)




    def simpleCondition(self):

        localctx = nimParser.SimpleConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_simpleCondition)
        self._la = 0 # Token type
        try:
            self.state = 1456
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,228,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1437
                self.rightHandSideStmt()
                self.state = 1449
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.LESS_THAN]:
                    self.state = 1438
                    self.match(nimParser.LESS_THAN)
                    self.state = 1440
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==nimParser.EQUALS_OPERATOR:
                        self.state = 1439
                        self.match(nimParser.EQUALS_OPERATOR)


                    pass
                elif token in [nimParser.T__10]:
                    self.state = 1442
                    self.match(nimParser.T__10)
                    pass
                elif token in [nimParser.T__11]:
                    self.state = 1443
                    self.match(nimParser.T__11)
                    pass
                elif token in [nimParser.GREATER_THAN]:
                    self.state = 1444
                    self.match(nimParser.GREATER_THAN)
                    self.state = 1446
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==nimParser.EQUALS_OPERATOR:
                        self.state = 1445
                        self.match(nimParser.EQUALS_OPERATOR)


                    pass
                elif token in [nimParser.EQUALS_EQUALS]:
                    self.state = 1448
                    self.match(nimParser.EQUALS_EQUALS)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1451
                self.rightHandSideStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1453
                self.match(nimParser.T__6)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1454
                self.match(nimParser.T__12)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1455
                self.match(nimParser.IDENTIFIER)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Character_literalsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_LIT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.CHAR_LIT)
            else:
                return self.getToken(nimParser.CHAR_LIT, i)

        def getRuleIndex(self):
            return nimParser.RULE_character_literals

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharacter_literals" ):
                listener.enterCharacter_literals(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharacter_literals" ):
                listener.exitCharacter_literals(self)




    def character_literals(self):

        localctx = nimParser.Character_literalsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_character_literals)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1459 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1458
                self.match(nimParser.CHAR_LIT)
                self.state = 1461 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==nimParser.CHAR_LIT):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class String_literalsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STR_LIT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.STR_LIT)
            else:
                return self.getToken(nimParser.STR_LIT, i)

        def getRuleIndex(self):
            return nimParser.RULE_string_literals

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_literals" ):
                listener.enterString_literals(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_literals" ):
                listener.exitString_literals(self)




    def string_literals(self):

        localctx = nimParser.String_literalsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_string_literals)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1464 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1463
                self.match(nimParser.STR_LIT)
                self.state = 1466 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==nimParser.STR_LIT):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RightHandSideStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STR_LIT(self):
            return self.getToken(nimParser.STR_LIT, 0)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.IDENTIFIER)
            else:
                return self.getToken(nimParser.IDENTIFIER, i)

        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.LiteralContext)
            else:
                return self.getTypedRuleContext(nimParser.LiteralContext,i)


        def ADD_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.ADD_OPERATOR)
            else:
                return self.getToken(nimParser.ADD_OPERATOR, i)

        def AND_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.AND_OPERATOR)
            else:
                return self.getToken(nimParser.AND_OPERATOR, i)

        def MINUS_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.MINUS_OPERATOR)
            else:
                return self.getToken(nimParser.MINUS_OPERATOR, i)

        def MOD(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.MOD)
            else:
                return self.getToken(nimParser.MOD, i)

        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.DIGIT)
            else:
                return self.getToken(nimParser.DIGIT, i)

        def OPEN_BRACK(self):
            return self.getToken(nimParser.OPEN_BRACK, 0)

        def CLOSE_BRACK(self):
            return self.getToken(nimParser.CLOSE_BRACK, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMA)
            else:
                return self.getToken(nimParser.COMMA, i)

        def MUL_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.MUL_OPERATOR)
            else:
                return self.getToken(nimParser.MUL_OPERATOR, i)

        def DIV(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.DIV)
            else:
                return self.getToken(nimParser.DIV, i)

        def methodInvoke(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.MethodInvokeContext)
            else:
                return self.getTypedRuleContext(nimParser.MethodInvokeContext,i)


        def OPEN_PAREN(self):
            return self.getToken(nimParser.OPEN_PAREN, 0)

        def rightHandSideStmt(self):
            return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(nimParser.CLOSE_PAREN, 0)

        def NEW_IDENTIFIER(self):
            return self.getToken(nimParser.NEW_IDENTIFIER, 0)

        def getRuleIndex(self):
            return nimParser.RULE_rightHandSideStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRightHandSideStmt" ):
                listener.enterRightHandSideStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRightHandSideStmt" ):
                listener.exitRightHandSideStmt(self)




    def rightHandSideStmt(self):

        localctx = nimParser.RightHandSideStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_rightHandSideStmt)
        self._la = 0 # Token type
        try:
            self.state = 1597
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,257,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1468
                self.match(nimParser.T__6)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1469
                self.match(nimParser.T__12)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1470
                self.match(nimParser.STR_LIT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1478
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.DIGIT]:
                    self.state = 1472 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 1471
                        self.match(nimParser.DIGIT)
                        self.state = 1474 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==nimParser.DIGIT):
                            break

                    pass
                elif token in [nimParser.IDENTIFIER]:
                    self.state = 1476
                    self.match(nimParser.IDENTIFIER)
                    pass
                elif token in [nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                    self.state = 1477
                    self.literal()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1492
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,235,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1480
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.MOD) | (1 << nimParser.ADD_OPERATOR) | (1 << nimParser.MINUS_OPERATOR) | (1 << nimParser.AND_OPERATOR))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1488
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [nimParser.DIGIT]:
                            self.state = 1482 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 1481
                                self.match(nimParser.DIGIT)
                                self.state = 1484 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==nimParser.DIGIT):
                                    break

                            pass
                        elif token in [nimParser.IDENTIFIER]:
                            self.state = 1486
                            self.match(nimParser.IDENTIFIER)
                            pass
                        elif token in [nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                            self.state = 1487
                            self.literal()
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 1494
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,235,self._ctx)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1495
                self.match(nimParser.IDENTIFIER)
                self.state = 1496
                self.match(nimParser.OPEN_BRACK)
                self.state = 1506
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.IDENTIFIER]:
                    self.state = 1497
                    self.match(nimParser.IDENTIFIER)
                    pass
                elif token in [nimParser.DIGIT, nimParser.MINUS_OPERATOR]:
                    self.state = 1499
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==nimParser.MINUS_OPERATOR:
                        self.state = 1498
                        self.match(nimParser.MINUS_OPERATOR)


                    self.state = 1502 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 1501
                        self.match(nimParser.DIGIT)
                        self.state = 1504 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==nimParser.DIGIT):
                            break

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1526
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.DIV) | (1 << nimParser.ADD_OPERATOR) | (1 << nimParser.MUL_OPERATOR) | (1 << nimParser.MINUS_OPERATOR) | (1 << nimParser.COMMA))) != 0):
                    self.state = 1508
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.DIV) | (1 << nimParser.ADD_OPERATOR) | (1 << nimParser.MUL_OPERATOR) | (1 << nimParser.MINUS_OPERATOR) | (1 << nimParser.COMMA))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1522
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,242,self._ctx)
                    if la_ == 1:
                        self.state = 1510
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==nimParser.MINUS_OPERATOR:
                            self.state = 1509
                            self.match(nimParser.MINUS_OPERATOR)


                        self.state = 1512
                        self.literal()
                        pass

                    elif la_ == 2:
                        self.state = 1514
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==nimParser.MINUS_OPERATOR:
                            self.state = 1513
                            self.match(nimParser.MINUS_OPERATOR)


                        self.state = 1517 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 1516
                            self.match(nimParser.DIGIT)
                            self.state = 1519 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==nimParser.DIGIT):
                                break

                        pass

                    elif la_ == 3:
                        self.state = 1521
                        self.match(nimParser.IDENTIFIER)
                        pass


                    self.state = 1528
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1529
                self.match(nimParser.CLOSE_BRACK)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1530
                self.methodInvoke()
                self.state = 1543
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,246,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1531
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.ADD_OPERATOR) | (1 << nimParser.MUL_OPERATOR) | (1 << nimParser.MINUS_OPERATOR))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1539
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [nimParser.OPEN_PAREN, nimParser.IDENTIFIER]:
                            self.state = 1532
                            self.methodInvoke()
                            pass
                        elif token in [nimParser.DIGIT]:
                            self.state = 1534 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 1533
                                self.match(nimParser.DIGIT)
                                self.state = 1536 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==nimParser.DIGIT):
                                    break

                            pass
                        elif token in [nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                            self.state = 1538
                            self.literal()
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 1545
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,246,self._ctx)

                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1546
                self.literal()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1547
                self.match(nimParser.OPEN_BRACK)
                self.state = 1578
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nimParser.DIGIT or _la==nimParser.MINUS_OPERATOR or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (nimParser.NIL - 89)) | (1 << (nimParser.TRIPLESTR_LIT - 89)) | (1 << (nimParser.CHAR_LIT - 89)) | (1 << (nimParser.STR_LIT - 89)) | (1 << (nimParser.RSTR_LIT - 89)) | (1 << (nimParser.INT_LIT - 89)) | (1 << (nimParser.INT8_LIT - 89)) | (1 << (nimParser.INT16_LIT - 89)) | (1 << (nimParser.INT32_LIT - 89)) | (1 << (nimParser.INT64_LIT - 89)) | (1 << (nimParser.UINT_LIT - 89)) | (1 << (nimParser.UINT8_LIT - 89)) | (1 << (nimParser.UINT16_LIT - 89)) | (1 << (nimParser.UINT32_LIT - 89)) | (1 << (nimParser.UINT64_LIT - 89)) | (1 << (nimParser.FLOAT_LIT - 89)) | (1 << (nimParser.FLOAT32_LIT - 89)) | (1 << (nimParser.FLOAT64_LIT - 89)))) != 0):
                    self.state = 1557
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [nimParser.MINUS_OPERATOR, nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                        self.state = 1549
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==nimParser.MINUS_OPERATOR:
                            self.state = 1548
                            self.match(nimParser.MINUS_OPERATOR)


                        self.state = 1551
                        self.literal()
                        pass
                    elif token in [nimParser.DIGIT]:
                        self.state = 1553 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 1552
                                self.match(nimParser.DIGIT)

                            else:
                                raise NoViableAltException(self)
                            self.state = 1555 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,248,self._ctx)

                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1573
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==nimParser.COMMA:
                        self.state = 1559
                        self.match(nimParser.COMMA)
                        self.state = 1569
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [nimParser.MINUS_OPERATOR, nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                            self.state = 1561
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==nimParser.MINUS_OPERATOR:
                                self.state = 1560
                                self.match(nimParser.MINUS_OPERATOR)


                            self.state = 1563
                            self.literal()
                            pass
                        elif token in [nimParser.DIGIT]:
                            self.state = 1565 
                            self._errHandler.sync(self)
                            _alt = 1
                            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                if _alt == 1:
                                    self.state = 1564
                                    self.match(nimParser.DIGIT)

                                else:
                                    raise NoViableAltException(self)
                                self.state = 1567 
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,251,self._ctx)

                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 1575
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1580
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1581
                self.match(nimParser.CLOSE_BRACK)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1582
                self.match(nimParser.OPEN_PAREN)
                self.state = 1583
                self.rightHandSideStmt()
                self.state = 1591
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==nimParser.ADD_OPERATOR or _la==nimParser.MINUS_OPERATOR:
                    self.state = 1584
                    _la = self._input.LA(1)
                    if not(_la==nimParser.ADD_OPERATOR or _la==nimParser.MINUS_OPERATOR):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1587
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [nimParser.NIL, nimParser.TRIPLESTR_LIT, nimParser.CHAR_LIT, nimParser.STR_LIT, nimParser.RSTR_LIT, nimParser.INT_LIT, nimParser.INT8_LIT, nimParser.INT16_LIT, nimParser.INT32_LIT, nimParser.INT64_LIT, nimParser.UINT_LIT, nimParser.UINT8_LIT, nimParser.UINT16_LIT, nimParser.UINT32_LIT, nimParser.UINT64_LIT, nimParser.FLOAT_LIT, nimParser.FLOAT32_LIT, nimParser.FLOAT64_LIT]:
                        self.state = 1585
                        self.literal()
                        pass
                    elif token in [nimParser.IDENTIFIER]:
                        self.state = 1586
                        self.match(nimParser.IDENTIFIER)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1593
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1594
                self.match(nimParser.CLOSE_PAREN)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1596
                self.match(nimParser.NEW_IDENTIFIER)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return nimParser.RULE_dataType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataType" ):
                listener.enterDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataType" ):
                listener.exitDataType(self)




    def dataType(self):

        localctx = nimParser.DataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_dataType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1599
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.T__13) | (1 << nimParser.T__14) | (1 << nimParser.T__15))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleCaseStmt(self):
            return self.getTypedRuleContext(nimParser.SimpleCaseStmtContext,0)


        def simpleElseStmt(self):
            return self.getTypedRuleContext(nimParser.SimpleElseStmtContext,0)


        def simpleOfStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.SimpleOfStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.SimpleOfStmtContext,i)


        def simpleElifOfStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.SimpleElifOfStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.SimpleElifOfStmtContext,i)


        def getRuleIndex(self):
            return nimParser.RULE_caseStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseStmt" ):
                listener.enterCaseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseStmt" ):
                listener.exitCaseStmt(self)




    def caseStmt(self):

        localctx = nimParser.CaseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_caseStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1601
            self.simpleCaseStmt()
            self.state = 1605
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,258,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1602
                    self.simpleOfStmt() 
                self.state = 1607
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,258,self._ctx)

            self.state = 1611
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==nimParser.ELIF:
                self.state = 1608
                self.simpleElifOfStmt()
                self.state = 1613
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1614
            self.simpleElseStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleOfStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OF(self):
            return self.getToken(nimParser.OF, 0)

        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.IDENTIFIER)
            else:
                return self.getToken(nimParser.IDENTIFIER, i)

        def STR_LIT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.STR_LIT)
            else:
                return self.getToken(nimParser.STR_LIT, i)

        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.COMMA)
            else:
                return self.getToken(nimParser.COMMA, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def RETURN(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.RETURN)
            else:
                return self.getToken(nimParser.RETURN, i)

        def rightHandSideStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.RightHandSideStmtContext)
            else:
                return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,i)


        def getRuleIndex(self):
            return nimParser.RULE_simpleOfStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleOfStmt" ):
                listener.enterSimpleOfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleOfStmt" ):
                listener.exitSimpleOfStmt(self)




    def simpleOfStmt(self):

        localctx = nimParser.SimpleOfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_simpleOfStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1617
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.INDENT:
                self.state = 1616
                self.match(nimParser.INDENT)


            self.state = 1619
            self.match(nimParser.OF)
            self.state = 1620
            _la = self._input.LA(1)
            if not(_la==nimParser.STR_LIT or _la==nimParser.IDENTIFIER):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1625
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==nimParser.COMMA:
                self.state = 1621
                self.match(nimParser.COMMA)
                self.state = 1622
                _la = self._input.LA(1)
                if not(_la==nimParser.STR_LIT or _la==nimParser.IDENTIFIER):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1627
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1628
            self.match(nimParser.COLON)
            self.state = 1641 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1631
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,262,self._ctx)
                if la_ == 1:
                    self.state = 1629
                    self.match(nimParser.T__0)
                    self.state = 1630
                    self.match(nimParser.INDENT)


                self.state = 1636
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [nimParser.T__0, nimParser.T__3, nimParser.T__7, nimParser.VARIABLE, nimParser.ECHO, nimParser.BLOCK, nimParser.CASE, nimParser.CONST, nimParser.FOR, nimParser.FROM, nimParser.IF, nimParser.IMPORT, nimParser.LET, nimParser.MACRO, nimParser.PROC, nimParser.TEMPLATE, nimParser.TYPE, nimParser.WHEN, nimParser.WHILE, nimParser.OPEN_PAREN, nimParser.IDENTIFIER, nimParser.NEW_IDENTIFIER]:
                    self.state = 1633
                    self.stmt()
                    pass
                elif token in [nimParser.RETURN]:
                    self.state = 1634
                    self.match(nimParser.RETURN)
                    self.state = 1635
                    self.rightHandSideStmt()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1639
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,264,self._ctx)
                if la_ == 1:
                    self.state = 1638
                    self.match(nimParser.T__0)


                self.state = 1643 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.T__0) | (1 << nimParser.T__3) | (1 << nimParser.T__7) | (1 << nimParser.VARIABLE) | (1 << nimParser.ECHO) | (1 << nimParser.BLOCK) | (1 << nimParser.CASE) | (1 << nimParser.CONST))) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & ((1 << (nimParser.FOR - 76)) | (1 << (nimParser.FROM - 76)) | (1 << (nimParser.IF - 76)) | (1 << (nimParser.IMPORT - 76)) | (1 << (nimParser.LET - 76)) | (1 << (nimParser.MACRO - 76)) | (1 << (nimParser.PROC - 76)) | (1 << (nimParser.RETURN - 76)) | (1 << (nimParser.TEMPLATE - 76)) | (1 << (nimParser.TYPE - 76)) | (1 << (nimParser.WHEN - 76)) | (1 << (nimParser.WHILE - 76)) | (1 << (nimParser.OPEN_PAREN - 76)) | (1 << (nimParser.IDENTIFIER - 76)))) != 0) or _la==nimParser.NEW_IDENTIFIER):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleElifOfStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELIF(self):
            return self.getToken(nimParser.ELIF, 0)

        def rightHandSideStmt(self):
            return self.getTypedRuleContext(nimParser.RightHandSideStmtContext,0)


        def COLON(self):
            return self.getToken(nimParser.COLON, 0)

        def COMMENT(self):
            return self.getToken(nimParser.COMMENT, 0)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(nimParser.StmtContext)
            else:
                return self.getTypedRuleContext(nimParser.StmtContext,i)


        def INDENT(self, i:int=None):
            if i is None:
                return self.getTokens(nimParser.INDENT)
            else:
                return self.getToken(nimParser.INDENT, i)

        def getRuleIndex(self):
            return nimParser.RULE_simpleElifOfStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleElifOfStmt" ):
                listener.enterSimpleElifOfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleElifOfStmt" ):
                listener.exitSimpleElifOfStmt(self)




    def simpleElifOfStmt(self):

        localctx = nimParser.SimpleElifOfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_simpleElifOfStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1645
            self.match(nimParser.ELIF)
            self.state = 1646
            self.rightHandSideStmt()
            self.state = 1647
            self.match(nimParser.COLON)
            self.state = 1649
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.COMMENT:
                self.state = 1648
                self.match(nimParser.COMMENT)


            self.state = 1656 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1651
                self.match(nimParser.T__0)
                self.state = 1653
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==nimParser.INDENT:
                    self.state = 1652
                    self.match(nimParser.INDENT)


                self.state = 1655
                self.stmt()
                self.state = 1658 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==nimParser.T__0):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleCaseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(nimParser.CASE, 0)

        def IDENTIFIER(self):
            return self.getToken(nimParser.IDENTIFIER, 0)

        def COMMENT(self):
            return self.getToken(nimParser.COMMENT, 0)

        def getRuleIndex(self):
            return nimParser.RULE_simpleCaseStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleCaseStmt" ):
                listener.enterSimpleCaseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleCaseStmt" ):
                listener.exitSimpleCaseStmt(self)




    def simpleCaseStmt(self):

        localctx = nimParser.SimpleCaseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_simpleCaseStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1660
            self.match(nimParser.CASE)
            self.state = 1661
            self.match(nimParser.IDENTIFIER)
            self.state = 1663
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.COMMENT:
                self.state = 1662
                self.match(nimParser.COMMENT)


            self.state = 1666
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.T__0:
                self.state = 1665
                self.match(nimParser.T__0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmptyStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return nimParser.RULE_emptyStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptyStmt" ):
                listener.enterEmptyStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptyStmt" ):
                listener.exitEmptyStmt(self)




    def emptyStmt(self):

        localctx = nimParser.EmptyStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_emptyStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1668
            self.match(nimParser.T__0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommentStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(nimParser.COMMENT, 0)

        def INDENT(self):
            return self.getToken(nimParser.INDENT, 0)

        def getRuleIndex(self):
            return nimParser.RULE_commentStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommentStmt" ):
                listener.enterCommentStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommentStmt" ):
                listener.exitCommentStmt(self)




    def commentStmt(self):

        localctx = nimParser.CommentStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_commentStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1671
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==nimParser.INDENT:
                self.state = 1670
                self.match(nimParser.INDENT)


            self.state = 1673
            self.match(nimParser.COMMENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUALS_OPERATOR(self):
            return self.getToken(nimParser.EQUALS_OPERATOR, 0)

        def ADD_OPERATOR(self):
            return self.getToken(nimParser.ADD_OPERATOR, 0)

        def MUL_OPERATOR(self):
            return self.getToken(nimParser.MUL_OPERATOR, 0)

        def MINUS_OPERATOR(self):
            return self.getToken(nimParser.MINUS_OPERATOR, 0)

        def DIV_OPERATOR(self):
            return self.getToken(nimParser.DIV_OPERATOR, 0)

        def BITWISE_NOT_OPERATOR(self):
            return self.getToken(nimParser.BITWISE_NOT_OPERATOR, 0)

        def AND_OPERATOR(self):
            return self.getToken(nimParser.AND_OPERATOR, 0)

        def OR_OPERATOR(self):
            return self.getToken(nimParser.OR_OPERATOR, 0)

        def LESS_THAN(self):
            return self.getToken(nimParser.LESS_THAN, 0)

        def GREATER_THAN(self):
            return self.getToken(nimParser.GREATER_THAN, 0)

        def NOT_OPERATOR(self):
            return self.getToken(nimParser.NOT_OPERATOR, 0)

        def XOR_OPERATOR(self):
            return self.getToken(nimParser.XOR_OPERATOR, 0)

        def getRuleIndex(self):
            return nimParser.RULE_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator" ):
                listener.enterOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator" ):
                listener.exitOperator(self)




    def operator(self):

        localctx = nimParser.OperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1675
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << nimParser.EQUALS_OPERATOR) | (1 << nimParser.ADD_OPERATOR) | (1 << nimParser.MUL_OPERATOR) | (1 << nimParser.MINUS_OPERATOR) | (1 << nimParser.DIV_OPERATOR) | (1 << nimParser.BITWISE_NOT_OPERATOR) | (1 << nimParser.AND_OPERATOR) | (1 << nimParser.OR_OPERATOR) | (1 << nimParser.LESS_THAN) | (1 << nimParser.GREATER_THAN) | (1 << nimParser.NOT_OPERATOR) | (1 << nimParser.XOR_OPERATOR))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_LIT(self):
            return self.getToken(nimParser.INT_LIT, 0)

        def INT8_LIT(self):
            return self.getToken(nimParser.INT8_LIT, 0)

        def INT16_LIT(self):
            return self.getToken(nimParser.INT16_LIT, 0)

        def INT32_LIT(self):
            return self.getToken(nimParser.INT32_LIT, 0)

        def INT64_LIT(self):
            return self.getToken(nimParser.INT64_LIT, 0)

        def UINT_LIT(self):
            return self.getToken(nimParser.UINT_LIT, 0)

        def UINT8_LIT(self):
            return self.getToken(nimParser.UINT8_LIT, 0)

        def UINT16_LIT(self):
            return self.getToken(nimParser.UINT16_LIT, 0)

        def UINT32_LIT(self):
            return self.getToken(nimParser.UINT32_LIT, 0)

        def UINT64_LIT(self):
            return self.getToken(nimParser.UINT64_LIT, 0)

        def FLOAT_LIT(self):
            return self.getToken(nimParser.FLOAT_LIT, 0)

        def FLOAT32_LIT(self):
            return self.getToken(nimParser.FLOAT32_LIT, 0)

        def FLOAT64_LIT(self):
            return self.getToken(nimParser.FLOAT64_LIT, 0)

        def STR_LIT(self):
            return self.getToken(nimParser.STR_LIT, 0)

        def RSTR_LIT(self):
            return self.getToken(nimParser.RSTR_LIT, 0)

        def TRIPLESTR_LIT(self):
            return self.getToken(nimParser.TRIPLESTR_LIT, 0)

        def CHAR_LIT(self):
            return self.getToken(nimParser.CHAR_LIT, 0)

        def NIL(self):
            return self.getToken(nimParser.NIL, 0)

        def getRuleIndex(self):
            return nimParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = nimParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1677
            _la = self._input.LA(1)
            if not(((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (nimParser.NIL - 89)) | (1 << (nimParser.TRIPLESTR_LIT - 89)) | (1 << (nimParser.CHAR_LIT - 89)) | (1 << (nimParser.STR_LIT - 89)) | (1 << (nimParser.RSTR_LIT - 89)) | (1 << (nimParser.INT_LIT - 89)) | (1 << (nimParser.INT8_LIT - 89)) | (1 << (nimParser.INT16_LIT - 89)) | (1 << (nimParser.INT32_LIT - 89)) | (1 << (nimParser.INT64_LIT - 89)) | (1 << (nimParser.UINT_LIT - 89)) | (1 << (nimParser.UINT8_LIT - 89)) | (1 << (nimParser.UINT16_LIT - 89)) | (1 << (nimParser.UINT32_LIT - 89)) | (1 << (nimParser.UINT64_LIT - 89)) | (1 << (nimParser.FLOAT_LIT - 89)) | (1 << (nimParser.FLOAT32_LIT - 89)) | (1 << (nimParser.FLOAT64_LIT - 89)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





